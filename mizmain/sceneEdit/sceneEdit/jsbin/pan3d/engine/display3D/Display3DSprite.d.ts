declare module Pan3d {
    class Display3DSprite extends Display3D implements IBind {
        isPerspective: boolean;
        name: string;
        id: number;
        objurl: string;
        picUrl: string;
        materialUrl: string;
        materialInfoArr: Array<any>;
        material: Material;
        materialParam: MaterialBaseParam;
        time: number;
        lightMapTextureRes: TextureRes;
        protected _rotationMatrix: Matrix3D;
        _rotationData: Float32Array;
        bindMatrix: Matrix3D;
        bindTarget: IBind;
        bindSocket: string;
        private _isInGroup;
        private _groupPos;
        private _groupRotation;
        private _groupScale;
        groupMatrix: Matrix3D;
        groupRotationMatrix: Matrix3D;
        private _lightProbe;
        protected resultSHVec: Array<Vector3D>;
        aabb: QuadTreeNode;
        dynamic: boolean;
        getSocket(socketName: string, resultMatrix: Matrix3D): void;
        constructor();
        private _aabbVect;
        readonly aabbVect: Array<Vector3D>;
        setObjUrl(value: string): void;
        baseTexture: TextureRes;
        setPicUrl($str: string): void;
        setLightMapUrl(value: string): void;
        readonly lightMapTexture: WebGLTexture;
        setMaterialUrl(value: string, $paramData?: Array<any>): void;
        lightProbe: boolean;
        update(): void;
        updateMaterial(): void;
        setMaterialVa(): void;
        setMaterialVaIndependent(): void;
        setMaterialVaCompress(): void;
        setDirectLight($material: Material): void;
        setCam(): void;
        setBind($bindTarget: IBind, $bindSocket: string): void;
        setGroup($pos: Vector3D, $rotaion: Vector3D, $scale: Vector3D): void;
        updateBind(): void;
        protected setBaseMaterialVc($material: Material): void;
        setCamPos($material: Material): void;
        setMaterialVc($material: Material, $mp?: MaterialBaseParam): void;
        setMaterialTexture($material: Material, $mp?: MaterialBaseParam): void;
        checkMaterialTexture($material: Material): boolean;
        updateRotationMatrix(): void;
        setPos($v3d: Vector3D): void;
        destory(): void;
    }
}
