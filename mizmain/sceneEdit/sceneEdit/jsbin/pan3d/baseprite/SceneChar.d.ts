declare module Pan3d {
    class SceneChar extends SceneBaseChar {
        _speedDirect: Vector3D;
        speedTX: number;
        life: number;
        protected _walkPath: Array<Vector3D>;
        private _astarDirect;
        private _astatTopos;
        skillitem: Array<Skill>;
        unit: Unit;
        mountChar: MountChar;
        isMount: boolean;
        static WEAPON_PART: string;
        static WEAPON_DEFAULT_SLOT: string;
        static MOUNT_SLOT: string;
        static WING_SLOT: string;
        static SEL_PART: string;
        static QUEST_ICON: string;
        static NONE_SLOT: string;
        protected _px: number;
        protected _py: number;
        protected _pz: number;
        private _pRotationY;
        private _isBoss;
        private _optimization;
        constructor();
        readonly isDeath: boolean;
        isBoss: boolean;
        px: number;
        py: number;
        pz: number;
        /**强制角度 */
        forceRotationY: number;
        pRotationY: number;
        play($action: string, $completeState?: number, needFollow?: boolean): boolean;
        getCurrentAction(): string;
        protected getSceneCharAvatarUrl(num: number): string;
        static Defaul_Man_Avatar: number;
        static Defaul_WoMan_Avater: number;
        setMount(): void;
        private _weaponNum;
        setWeapon(num: number): void;
        setWeaponByAvatar(avatar: number, $suffix?: string): void;
        private _wingID;
        protected _wingDisplay: SceneBaseChar;
        addTestWeapon(): void;
        private _charTitleVo;
        refreshTittle(): void;
        protected _charNameVo: CharNameMeshVo;
        showName($color?: string): void;
        protected _charBloodVo: BloodLineMeshVo;
        private lastBloodcolorType;
        showBlood($colorType?: number): void;
        tittleHeight: number;
        onMeshLoaded(): void;
        refreshPos(): void;
        walkPath: Array<Vector3D>;
        fixAstartData(pos: Vector2D): void;
        applyWalk($item: Array<Vector2D>): void;
        moveToPos2D: Vector2D;
        private stopToPos;
        private moveTile;
        updateFrame(t: number): void;
        refreshY(): void;
        refreshHP(): void;
        protected rotationToNew(value: number, num?: number): void;
        speedUseTime: number;
        refreshSpeed(): void;
        private lastPos;
        protected walkAstar(t: number): void;
        protected walkComplete(): void;
        walkCompleteBackFun: Function;
        protected setTarget(): void;
        setAstarNrmAndRotation(): void;
        toRotationY: number;
        protected mathAngle(x1: number, y1: number, x2: number, y2: number): number;
        setSpeedDirect(value: Vector3D): void;
        stopMove(): void;
        getEndWalkPathPos(): Vector3D;
        watch($obj: Display3D, $syn?: boolean): void;
        getCurrentPos(): Vector3D;
        getAstarPos(): Vector2D;
        protected changeAction($action: string): void;
        skillVo: Skill;
        playSkill($skill: Skill): void;
        msgSpellStop(): void;
        destory(): void;
        private destoryName;
        removeStage(): void;
        addStage(): void;
        math_distance($other: Display3dMovie): number;
        visible: boolean;
        optimization: boolean;
        private _resultVisible;
        readonly resultVisible: boolean;
        applyVisible(): void;
        private lineSprite;
        update(): void;
        private _showHitBox;
        private triIndex;
        private hitBox2DItem;
        mouseClik($lineA: Vector3D, $lineB: Vector3D): boolean;
    }
}
