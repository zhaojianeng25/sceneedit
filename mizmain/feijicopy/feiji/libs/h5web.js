var Pan3d;
(function (Pan3d) {
    var BaseEvent = /** @class */ (function () {
        function BaseEvent($type) {
            this.type = $type;
        }
        BaseEvent.COMPLETE = "complete";
        return BaseEvent;
    }());
    Pan3d.BaseEvent = BaseEvent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Event.js.map
var Pan3d;
(function (Pan3d) {
    var EventDispatcher = /** @class */ (function () {
        function EventDispatcher() {
            this._eventsMap = null;
        }
        EventDispatcher.prototype.addEventListener = function (types, listener, thisObject) {
            if (!this._eventsMap) {
                this._eventsMap = new Object;
            }
            var list = this._eventsMap[types];
            if (!list) {
                list = this._eventsMap[types] = [];
            }
            var eventBin = { listener: listener, thisObject: thisObject };
            for (var i = 0; i < list.length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject) {
                    return;
                }
            }
            list.push(eventBin);
        };
        EventDispatcher.prototype.removeEventListener = function (type, listener, thisObject) {
            if (this._eventsMap == null) {
                return;
            }
            var list = this._eventsMap[type];
            for (var i = 0; list && i < list.length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject) {
                    list.splice(i, 1);
                    return;
                }
            }
        };
        EventDispatcher.prototype.dispatchEvent = function (event) {
            var eventMap = this._eventsMap;
            if (!eventMap) {
                return true;
            }
            var list = eventMap[event.type];
            if (!list) {
                return true;
            }
            var length = list.length;
            if (length == 0) {
                return true;
            }
            event.target = this;
            for (var i = 0; i < length; i++) {
                var eventBin = list[i];
                eventBin.listener.call(eventBin.thisObject, event);
            }
        };
        return EventDispatcher;
    }());
    Pan3d.EventDispatcher = EventDispatcher;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=EventDispatcher.js.map
var Pan3d;
(function (Pan3d) {
    var GC = /** @class */ (function () {
        function GC() {
        }
        GC.prototype.destory = function () {
        };
        return GC;
    }());
    Pan3d.GC = GC;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GC.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ResCount = /** @class */ (function (_super) {
        __extends(ResCount, _super);
        function ResCount() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._useNum = 0;
            _this.idleTime = 0;
            return _this;
        }
        Object.defineProperty(ResCount.prototype, "useNum", {
            get: function () {
                return this._useNum;
            },
            set: function (n) {
                this._useNum = n;
                if (this._useNum == 0) {
                    this.idleTime = 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        ResCount.prototype.clearUseNum = function () {
            this._useNum--;
            if (this._useNum <= 0) {
                this.idleTime = ResCount.GCTime;
            }
        };
        ResCount.GCTime = 4;
        return ResCount;
    }(Pan3d.GC));
    Pan3d.ResCount = ResCount;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ResCount.js.map
var Pan3d;
(function (Pan3d) {
    var ResGC = /** @class */ (function () {
        function ResGC() {
            var _this = this;
            this._dic = new Object();
            Pan3d.TimeUtil.addTimeTick(60000, function () { _this.gc(); });
        }
        ResGC.prototype.gc = function () {
            //var a:number = 1;
            for (var key in this._dic) {
                var rc = this._dic[key];
                if (rc.useNum <= 0) {
                    rc.idleTime++;
                    if (rc.idleTime >= Pan3d.ResCount.GCTime) {
                        //console.log("清理 -" + key);
                        rc.destory();
                        delete this._dic[key];
                    }
                }
            }
        };
        return ResGC;
    }());
    Pan3d.ResGC = ResGC;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ResGC.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Object3D = /** @class */ (function (_super) {
        __extends(Object3D, _super);
        function Object3D($x, $y, $z) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($z === void 0) { $z = 0; }
            var _this = _super.call(this) || this;
            _this._x = $x;
            _this._y = $y;
            _this._z = $z;
            _this._scaleX = 1;
            _this._scaleY = 1;
            _this._scaleZ = 1;
            _this._rotationX = 0;
            _this._rotationY = 0;
            _this._rotationZ = 0;
            _this.posMatrix = new Pan3d.Matrix3D;
            return _this;
        }
        Object3D.prototype.toStringout = function () {
            return "Object3D(" + String(this._x) + "," + String(this._y) + "," + String(this._z) + ")";
        };
        Object.defineProperty(Object3D.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "z", {
            get: function () {
                return this._z;
            },
            set: function (value) {
                this._z = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "scale", {
            set: function (value) {
                this._scaleX = this._scaleY = this._scaleZ = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                this._scaleX = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                this._scaleY = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "scaleZ", {
            get: function () {
                return this._scaleZ;
            },
            set: function (value) {
                this._scaleZ = value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "rotationX", {
            get: function () {
                return this._rotationX;
            },
            set: function (value) {
                this._rotationX = value;
                this.updateMatrix();
                this.updateRotationMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "rotationY", {
            get: function () {
                return this._rotationY;
            },
            set: function (value) {
                if (isNaN(value)) {
                    console.log("有错");
                }
                this._rotationY = value;
                this.updateMatrix();
                this.updateRotationMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "rotationZ", {
            get: function () {
                return this._rotationZ;
            },
            set: function (value) {
                this._rotationZ = value;
                this.updateMatrix();
                this.updateRotationMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "px", {
            get: function () { return 0; },
            set: function (val) { },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "py", {
            get: function () { return 0; },
            set: function (val) { },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Object3D.prototype, "pz", {
            get: function () { return 0; },
            set: function (val) { },
            enumerable: true,
            configurable: true
        });
        Object3D.prototype.updateMatrix = function () {
            this.posMatrix.identity();
            this.posMatrix.appendScale(this._scaleX, this._scaleY, this._scaleZ);
            this.posMatrix.appendRotation(this._rotationX, Pan3d.Vector3D.X_AXIS);
            this.posMatrix.appendRotation(this._rotationY, Pan3d.Vector3D.Y_AXIS);
            this.posMatrix.appendRotation(this._rotationZ, Pan3d.Vector3D.Z_AXIS);
            this.posMatrix.appendTranslation(this._x, this._y, this._z);
        };
        Object3D.prototype.updateRotationMatrix = function () {
        };
        return Object3D;
    }(Pan3d.EventDispatcher));
    Pan3d.Object3D = Object3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Object3D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Camera3D = /** @class */ (function (_super) {
        __extends(Camera3D, _super);
        function Camera3D() {
            var _this = _super.call(this) || this;
            _this._distance = 500;
            _this.offset = new Pan3d.Vector3D();
            _this.lastFoucs3D = new Pan3d.Vector3D;
            _this.needChange = true;
            _this.cavanRect = new Pan3d.Rectangle(0, 0, 512, 512);
            _this.cameraMatrix = new Pan3d.Matrix3D;
            _this.scene2dScale = 1;
            return _this;
        }
        Object.defineProperty(Camera3D.prototype, "distance", {
            get: function () {
                return this._distance;
            },
            set: function (value) {
                this._distance = value;
            },
            enumerable: true,
            configurable: true
        });
        Camera3D.prototype.lookAt = function ($target) {
            this.lookAtTarget = $target;
        };
        Object.defineProperty(Camera3D.prototype, "astarRect", {
            set: function (value) {
                this._astarRect = new Pan3d.Rectangle();
                this._astarRect.x = value.x;
                this._astarRect.y = value.y;
                this._astarRect.width = value.width;
                this._astarRect.height = value.height;
                this._midPos = new Pan3d.Vector3D();
                this._midPos.x = this._astarRect.x + this._astarRect.width / 2;
                this._midPos.z = this._astarRect.y + this._astarRect.height / 2;
                this._scaleVec = new Pan3d.Vector3D();
                this._scaleVec.x = (this._astarRect.width - 100) / this._astarRect.width;
                this._scaleVec.z = (this._astarRect.height - 100) / this._astarRect.height;
            },
            enumerable: true,
            configurable: true
        });
        Camera3D.prototype.update = function () {
            if (this.lookAtTarget) {
                var ty = 28;
                if (this._astarRect && this._astarRect.width < 600) {
                    var $toPos = new Pan3d.Vector3D;
                    $toPos.x = ((this.lookAtTarget.px - this._midPos.x) * this._scaleVec.x) + this._midPos.x;
                    $toPos.z = ((this.lookAtTarget.pz - this._midPos.z) * this._scaleVec.z) + this._midPos.z;
                    $toPos.y = this.lookAtTarget.py;
                    Pan3d.Scene_data.focus3D.x = $toPos.x;
                    Pan3d.Scene_data.focus3D.y = $toPos.y + ty;
                    Pan3d.Scene_data.focus3D.z = $toPos.z;
                }
                else {
                    Pan3d.Scene_data.focus3D.x = this.lookAtTarget.px;
                    Pan3d.Scene_data.focus3D.y = this.lookAtTarget.py + ty;
                    Pan3d.Scene_data.focus3D.z = this.lookAtTarget.pz;
                }
                if (this.lastFoucs3D.x != Pan3d.Scene_data.focus3D.x || this.lastFoucs3D.y != Pan3d.Scene_data.focus3D.y || this.lastFoucs3D.z != Pan3d.Scene_data.focus3D.z) {
                    this.lastFoucs3D.x = Pan3d.Scene_data.focus3D.x;
                    this.lastFoucs3D.y = Pan3d.Scene_data.focus3D.y;
                    this.lastFoucs3D.z = Pan3d.Scene_data.focus3D.z;
                    this.needChange = true;
                }
                else {
                    this.needChange = false;
                }
                // Scene_data.focus3D.rotationY = Scene_data.gameAngle;
            }
        };
        Object.defineProperty(Camera3D.prototype, "postion", {
            get: function () {
                return new Pan3d.Vector3D(this.x, this.y, this.z);
            },
            enumerable: true,
            configurable: true
        });
        return Camera3D;
    }(Pan3d.Object3D));
    Pan3d.Camera3D = Camera3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Camera3D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ObjData = /** @class */ (function (_super) {
        __extends(ObjData, _super);
        function ObjData() {
            var _this = _super.call(this) || this;
            _this.vertices = new Array;
            _this.uvs = new Array;
            _this.indexs = new Array;
            _this.lightuvs = new Array;
            _this.normals = new Array;
            _this.tangents = new Array;
            _this.bitangents = new Array;
            _this._treNum = 0;
            /**顶点 uv lightuv normal 合成一个 va */
            _this.compressBuffer = false;
            _this.hasdispose = false;
            return _this;
        }
        Object.defineProperty(ObjData.prototype, "treNum", {
            get: function () {
                return this._treNum;
            },
            set: function (value) {
                this._treNum = value;
            },
            enumerable: true,
            configurable: true
        });
        ObjData.prototype.getMaxSize = function () {
            /*
            var minV3d: Vector3D = new Vector3D;
            var maxV3d: Vector3D = new Vector3D;
            for (var i: number = 0; i < this.vertices.length/3; i++) {
                var P: Vector3D = new Vector3D(this.vertices[i * 3 + 0], this.vertices[i * 3 + 1], this.vertices[i * 3 + 2])
                if (!minV3d) {  maxV3d = P.clone()  }
                if (!maxV3d) {   maxV3d = P.clone()  }
          
                minV3d.x = Math.min(minV3d.x, P.x)
                minV3d.y = Math.min(minV3d.y, P.y)
                minV3d.z = Math.min(minV3d.z, P.z)

                maxV3d.x = Math.max(maxV3d.x, P.x)
                maxV3d.y = Math.max(maxV3d.y, P.y)
                maxV3d.z = Math.max(maxV3d.z, P.z)
 
            }
            var size: number = Math.max(Math.abs(minV3d.x), Math.abs(minV3d.y), Math.abs(minV3d.z), Math.abs(maxV3d.x), Math.abs(maxV3d.y), Math.abs(maxV3d.z));
            */
            var pv = 0;
            for (var i = 0; i < this.vertices.length; i++) {
                pv = (pv + Math.abs(this.vertices[i])) / 2;
            }
            console.log("模型size", pv);
            return pv;
        };
        ObjData.prototype.destory = function () {
            this.vertices.length = 0;
            this.vertices = null;
            this.uvs.length = 0;
            this.uvs = null;
            this.indexs.length = 0;
            this.indexs = null;
            this.lightuvs.length = 0;
            this.lightuvs = null;
            this.normals.length = 0;
            this.normals = null;
            this.tangents.length = 0;
            this.tangents = null;
            this.bitangents.length = 0;
            this.bitangents = null;
            if (this.vertexBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.vertexBuffer);
                this.vertexBuffer = null;
            }
            if (this.uvBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.uvBuffer);
                this.uvBuffer = null;
            }
            if (this.indexBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.indexBuffer);
                this.indexBuffer = null;
            }
            if (this.lightUvBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.lightUvBuffer);
                this.lightUvBuffer = null;
            }
            if (this.normalsBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.normalsBuffer);
                this.normalsBuffer = null;
            }
            if (this.tangentBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.tangentBuffer);
                this.tangentBuffer = null;
            }
            if (this.bitangentBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.bitangentBuffer);
                this.bitangentBuffer = null;
            }
            this.hasdispose = true;
        };
        return ObjData;
    }(Pan3d.ResCount));
    Pan3d.ObjData = ObjData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ObjData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MeshData = /** @class */ (function (_super) {
        __extends(MeshData, _super);
        function MeshData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.boneIDAry = new Array;
            _this.boneWeightAry = new Array;
            _this.boneNewIDAry = new Array;
            _this.particleAry = new Array;
            return _this;
        }
        MeshData.prototype.getBindPosMatrix = function () {
            var ary = new Array;
            var invertAry = new Array;
            for (var i = 0; i < this.bindPosAry.length; i++) {
                var objbone = this.bindPosAry[i];
                var OldQ = new Pan3d.Quaternion(objbone[0], objbone[1], objbone[2]);
                OldQ.setMd5W();
                var newM = OldQ.toMatrix3D();
                newM.appendTranslation(objbone[3], objbone[4], objbone[5]);
                invertAry.push(newM.clone());
                newM.invert();
                ary.push(newM);
            }
            this.bindPosMatrixAry = ary;
            this.bindPosInvertMatrixAry = invertAry;
        };
        MeshData.prototype.clone = function () {
            var temp = new MeshData();
            for (var key in this) {
                temp[key] = this[key];
            }
            return temp;
        };
        MeshData.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this.materialParam) {
                this.materialParam.destory();
                this.materialParam = null;
                this.materialParamData = null;
            }
            this.boneIDAry.length = 0;
            this.boneWeightAry.length = 0;
            this.boneNewIDAry.length = 0;
            this.boneIDAry = null;
            this.boneWeightAry = null;
            this.boneNewIDAry = null;
            if (this.boneWeightBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.boneWeightBuffer);
                this.boneWeightBuffer = null;
            }
            if (this.boneIdBuffer) {
                Pan3d.Scene_data.context3D.deleteBuffer(this.boneIdBuffer);
                this.boneIdBuffer = null;
            }
            if (this.material) {
                this.material.clearUseNum();
            }
            this.particleAry.length = 0;
            this.particleAry = null;
            //for (){
            //}
        };
        return MeshData;
    }(Pan3d.ObjData));
    Pan3d.MeshData = MeshData;
    var BindParticle = /** @class */ (function () {
        //public particle: CombineParticle;
        function BindParticle($url, $socketName) {
            this.url = $url;
            this.socketName = $socketName;
        }
        return BindParticle;
    }());
    Pan3d.BindParticle = BindParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MeshData.js.map
var Pan3d;
(function (Pan3d) {
    var Dictionary = /** @class */ (function () {
        function Dictionary(init) {
            this._keys = new Array;
            this._values = new Array;
            for (var x = 0; init && x < init.length; x++) {
                this[init[x].key] = init[x].value;
                this._keys.push(init[x].key);
                this._values.push(init[x].value);
            }
        }
        Dictionary.prototype.add = function (key, value) {
            this[key] = value;
            this._keys.push(key);
            this._values.push(value);
        };
        Dictionary.prototype.has = function (key) {
            if (this[key]) {
                return true;
            }
            else {
                return false;
            }
        };
        Dictionary.prototype.remove = function (key) {
            var index = this._keys.indexOf(key, 0);
            this._keys.splice(index, 1);
            this._values.splice(index, 1);
            delete this[key];
        };
        Dictionary.prototype.keys = function () {
            return this._keys;
        };
        Dictionary.prototype.values = function () {
            return this._values;
        };
        Dictionary.prototype.containsKey = function (key) {
            if (typeof this[key] === "undefined") {
                return false;
            }
            return true;
        };
        Dictionary.prototype.toLookup = function () {
            return this;
        };
        return Dictionary;
    }());
    Pan3d.Dictionary = Dictionary;
    var WeakSet = /** @class */ (function () {
        function WeakSet() {
            this._item = new Array;
        }
        WeakSet.prototype.add = function ($data) {
            this._item.push($data);
        };
        WeakSet.prototype.has = function ($data) {
            for (var i = 0; i < this._item.length; i++) {
                if (this._item[i] == $data) {
                    return true;
                }
            }
            return false;
        };
        return WeakSet;
    }());
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Dictionary.js.map
var Pan3d;
(function (Pan3d) {
    var ColorType = /** @class */ (function () {
        function ColorType() {
        }
        ColorType.Orange7a2f21 = "[7a2f21]"; //桔
        ColorType.Orange9a683f = "[9a683f]"; //
        ColorType.Orange853d07 = "[853d07]"; //桔
        ColorType.Brown6a4936 = "[6a4936]"; //深棕
        ColorType.Brown623424 = "[623424]"; //深棕
        ColorType.Brownac8965 = "[ac8965]";
        ColorType.Reddb4051 = "[db4051]"; //红
        ColorType.Redd92200 = "[d92200]"; //红
        ColorType.Redff0000 = "[ff0000]"; //红
        ColorType.Brownd8d49c = "[d8d49c]"; //棕
        ColorType.color843b11 = "[843b11]"; //棕
        ColorType.colorb96d49 = "[b96d49]"; //棕
        ColorType.colorcd2000 = "[cd2000]"; //棕
        ColorType.colorfef3d7 = "[fef3d7]"; //棕
        ColorType.color9a683f = "[9a683f]"; //棕
        ColorType.Brown7a2f21 = "[7a2f21]"; //棕
        ColorType.Brown40120a = "[40120a]"; //棕
        ColorType.Brown491207 = "[491207]"; //棕
        ColorType.Brown541616 = "[541616]"; //棕
        ColorType.Brown5a2610 = "[5a2610]"; //棕
        ColorType.Browndf9a68 = "[df9a68]";
        ColorType.Browndb39264 = "[b39264]";
        ColorType.Brownd662c0d = "[662c0d]";
        ColorType.colorefe4c4 = "[efe4c4]";
        ColorType.color802626 = "[802626]";
        ColorType.color9f7b4d = "[9f7b4d]";
        ColorType.color4b0808 = "[4b0808]";
        ColorType.color5f5c59 = "[5f5c59]";
        ColorType.color903713 = "[903713]";
        ColorType.colorfdf6da = "[fdf6da]";
        ColorType.color73301c = "[73301c]";
        ColorType.colorffeeb5 = "[ffeeb5]";
        ColorType.Green98ec2c = "   "; //绿
        ColorType.Green56da35 = "[56da35]"; //绿
        ColorType.Green20a200 = "[20a200]"; //绿
        ColorType.Greenadff00 = "[adff00]"; //绿
        ColorType.Green2ca937 = "[2ca937]"; //绿
        ColorType.Green464b11 = "[464b11]"; //绿
        ColorType.Green54db36 = "[54db36]"; //绿
        ColorType.Yellowf7d253 = "[f7d253]"; //黄
        ColorType.Yellowffecc6 = "[ffecc6]"; //黄
        ColorType.Yellowffd500 = "[ffd500]"; //黄
        ColorType.Yellowffe9b4 = "[ffe9b4]"; //黄
        ColorType.Yellowedce7e = "[edce7e]"; //黄
        ColorType.color4c1c07 = "[4c1c07]";
        ColorType.Whiteffffff = "[ffffff]"; //白
        ColorType.Whitefffce6 = "[fffce6]"; //白
        ColorType.Whitefff7db = "[fff7db]"; //白
        ColorType.White9A683F = "[9A683F]"; //白
        ColorType.Black000000 = "[000000]"; //黑
        ColorType.Whitefff4d6 = "[fff4d6]"; //白
        ColorType.Whiteffeed0 = "[ffeed0]"; //白
        ColorType.Whiteffeec9 = "[ffeec9]"; //白
        ColorType.Whiteffe9b4 = "[ffe9b4]"; //白
        ColorType.Whitefff0b4 = "[fff0b4]"; //白
        ColorType.Coffeeff9200 = "[ff9200]"; //橙黄
        ColorType.Coffeefee87b = "[fee87b]"; //橙黄
        ColorType.color2daa35 = "[2daa35]"; //绿
        ColorType.color4392ff = "[4392ff]"; //蓝
        ColorType.colorb759ff = "[b759ff]"; //紫
        ColorType.colorff7200 = "[ff7200]"; //桔
        ColorType.colorce0a00 = "[ce0a00]"; //红
        ColorType.coloraa874a = "[aa874a]"; //红
        ColorType.colorffecc6 = "[ffecc6]"; //红
        ColorType.colorfde87e = "[fde87e]"; //红
        ColorType.colord6e7ff = "[d6e7ff]"; //红"#"
        ColorType.colord27262e = "[27262e]";
        ColorType.colorffe9b4 = "[ffe9b4]";
        ColorType.color9c9b9b = "[9c9b9b]";
        ColorType.colorfff2d3 = "[fff2d3]";
        ColorType.color451800 = "[451800]";
        return ColorType;
    }());
    Pan3d.ColorType = ColorType;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ColorType.js.map
var Pan3d;
(function (Pan3d) {
    var BitMapData = /** @class */ (function () {
        function BitMapData($w, $h) {
            this.width = $w;
            this.height = $h;
            var $ctx = Pan3d.UIManager.getInstance().getContext2D(this.width, this.height, false);
            this.imgData = $ctx.getImageData(0, 0, this.width, this.height);
            for (var k = 0; k < this.imgData.data.length; k += 4) {
                this.imgData.data[k + 0] = 255;
                this.imgData.data[k + 1] = 255;
                this.imgData.data[k + 2] = 255;
                this.imgData.data[k + 3] = 255;
            }
        }
        BitMapData.prototype.getIndexByPos = function ($tx, $ty) {
            var a = $ty * this.width + $tx;
            return 4 * a;
        };
        BitMapData.prototype.setRgb = function ($tx, $ty, $ve) {
            $tx = Math.round($tx);
            $ty = Math.round($ty);
            var $idx = this.getIndexByPos($tx, $ty);
            this.imgData.data[$idx + 0] = $ve.x * 255;
            this.imgData.data[$idx + 1] = $ve.y * 255;
            this.imgData.data[$idx + 2] = $ve.z * 255;
            this.imgData.data[$idx + 3] = 255;
        };
        BitMapData.prototype.getRgb = function ($tx, $ty) {
            $tx = Math.round($tx);
            $ty = Math.round($ty);
            var $v = new Pan3d.Vector3D();
            var $idx = this.getIndexByPos($tx, $ty);
            $v.x = this.imgData.data[$idx + 0] / 255;
            $v.y = this.imgData.data[$idx + 1] / 255;
            $v.z = this.imgData.data[$idx + 2] / 255;
            $v.w = 1;
            return $v;
        };
        return BitMapData;
    }());
    Pan3d.BitMapData = BitMapData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BitMapData.js.map
var Pan3d;
(function (Pan3d) {
    var GlReset = /** @class */ (function () {
        function GlReset() {
        }
        GlReset.saveBasePrarame = function (gl) {
            this.GlarrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);
            this.GlelementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
            this.Glprogram = gl.getParameter(gl.CURRENT_PROGRAM);
            this.GlsFactor = gl.getParameter(gl.BLEND_SRC_RGB);
            this.GldFactor = gl.getParameter(gl.BLEND_DST_RGB);
            this.GldepthWriteMask = gl.getParameter(gl.DEPTH_WRITEMASK);
            this.GlcullFaceModel = gl.getParameter(gl.CULL_FACE_MODE);
            this.Glglviewport = gl.getParameter(gl.VIEWPORT);
            this.GlfrontFace = gl.getParameter(gl.FRONT_FACE);
            this.GlDepthTest = gl.getParameter(gl.DEPTH_TEST);
            this.GlCullFace = gl.getParameter(gl.CULL_FACE);
            this.GlStencilTest = gl.getParameter(gl.STENCIL_TEST);
        };
        GlReset.resetBasePrarame = function (gl) {
            gl.useProgram(this.Glprogram); //着色器
            gl.viewport(this.Glglviewport[0], this.Glglviewport[1], this.Glglviewport[2], this.Glglviewport[3]);
            gl.bindBuffer(gl.ARRAY_BUFFER, this.GlarrayBuffer); //定点对象
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.GlelementArrayBuffer);
            gl.blendFunc(this.GlsFactor, this.GldFactor); //混合模式
            gl.depthMask(this.GldepthWriteMask); //写入深度
            gl.cullFace(this.GlcullFaceModel); //正反面
            gl.frontFace(this.GlfrontFace); //正反面
            this.GlCullFace ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE);
            this.GlDepthTest ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST);
            this.GlStencilTest ? gl.enable(gl.STENCIL_TEST) : gl.disable(gl.STENCIL_TEST);
        };
        return GlReset;
    }());
    Pan3d.GlReset = GlReset;
    var Context3D = /** @class */ (function () {
        function Context3D() {
            this.setTextureNum = 0;
            this.setProgramNum = 0;
        }
        Context3D.prototype.init = function ($caves) {
            //this.renderContext = $caves.getContext("experimental-webgl");
            var gl = $caves.getContext('webgl', { stencil: true, alpha: true, depth: true, antialias: false })
                || $caves.getContext('experimental-webgl', { stencil: true, alpha: true, depth: true, antialias: false });
            this.renderContext = gl;
            this._contextSetTest = new ContextSetTest();
        };
        Context3D.prototype.resetSize = function ($width, $height) {
            this.renderContext.viewport(0, 0, $width, $height);
        };
        Context3D.prototype.uploadBuff3D = function ($jsData) {
            var arrayBuffer = this.renderContext.getParameter(this.renderContext.ARRAY_BUFFER_BINDING);
            var $buffData = this.renderContext.createBuffer();
            this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, $buffData);
            this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER, new Float32Array($jsData), this.renderContext.STATIC_DRAW);
            if (arrayBuffer) {
                this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, arrayBuffer);
            }
            return $buffData;
        };
        Context3D.prototype.uploadBuff3DArrayBuffer = function ($jsData) {
            var arrayBuffer = this.renderContext.getParameter(this.renderContext.ARRAY_BUFFER_BINDING);
            var $buffData = this.renderContext.createBuffer();
            this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, $buffData);
            this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER, $jsData, this.renderContext.STATIC_DRAW);
            if (arrayBuffer) {
                this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, arrayBuffer);
            }
            return $buffData;
        };
        Context3D.prototype.uploadBuff3DByBuffer = function ($buffData, $jsData) {
            this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, $buffData);
            this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER, new Float32Array($jsData), this.renderContext.STATIC_DRAW);
        };
        Context3D.prototype.uploadIndexBuff3D = function ($iStrData) {
            var elementArrayBuffer = this.renderContext.getParameter(this.renderContext.ELEMENT_ARRAY_BUFFER_BINDING);
            var $iBuffer = this.renderContext.createBuffer();
            this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER, $iBuffer);
            this.renderContext.bufferData(this.renderContext.ELEMENT_ARRAY_BUFFER, new Uint16Array($iStrData), this.renderContext.STATIC_DRAW);
            if (elementArrayBuffer) {
                this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER, elementArrayBuffer);
            }
            return $iBuffer;
        };
        Context3D.prototype.uploadIndexBuff3DByBuffer = function ($iBuffer, $iStrData) {
            this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER, $iBuffer);
            this.renderContext.bufferData(this.renderContext.ELEMENT_ARRAY_BUFFER, new Uint16Array($iStrData), this.renderContext.STATIC_DRAW);
        };
        //public num_setProgram:number = 0;
        Context3D.prototype.clearContext = function () {
            this.renderContext.depthMask(true);
            this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT | this.renderContext.DEPTH_BUFFER_BIT | this.renderContext.STENCIL_BUFFER_BIT);
        };
        Context3D.prototype.update = function () {
            this._contextSetTest.clear();
            this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER, null);
            this.renderContext.clearColor(63 / 255, 63 / 255, 63 / 255, 1.0);
            this.renderContext.clearDepth(1.0);
            this.renderContext.clearStencil(0.0);
            this.renderContext.enable(this.renderContext.DEPTH_TEST);
            this.renderContext.depthMask(true);
            this.renderContext.enable(this.renderContext.BLEND);
            this.renderContext.frontFace(this.renderContext.CW);
            this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT | this.renderContext.DEPTH_BUFFER_BIT | this.renderContext.STENCIL_BUFFER_BIT);
            //this.renderContext.blendFunc(this.renderContext.SRC_ALPHA, this.renderContext.ONE_MINUS_SRC_ALPHA);
            this.setBlendParticleFactors(0);
            this.renderContext.disable(this.renderContext.CULL_FACE);
            ////console.log("program设置次数：" + this.setProgramNum + "纹理设置次数：" + this.setTextureNum);
            this.setTextureNum = 0;
            this.setProgramNum = 0;
        };
        Context3D.prototype.updateFBO = function (fbo) {
            this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER, fbo.frameBuffer);
            this.renderContext.clearColor(63 / 255, 63 / 255, 63 / 255, 1.0);
            this.renderContext.clearDepth(1.0);
            this.renderContext.clearStencil(0.0);
            this.renderContext.enable(this.renderContext.DEPTH_TEST);
            this.renderContext.depthMask(true);
            this.renderContext.enable(this.renderContext.BLEND);
            this.renderContext.frontFace(this.renderContext.CW);
            this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT | this.renderContext.DEPTH_BUFFER_BIT | this.renderContext.STENCIL_BUFFER_BIT);
            //this.renderContext.blendFunc(this.renderContext.SRC_ALPHA, this.renderContext.ONE_MINUS_SRC_ALPHA);
            this.setBlendParticleFactors(0);
            this.renderContext.disable(this.renderContext.CULL_FACE);
        };
        Context3D.prototype.setDepthTest = function (tf) {
            if (tf) {
                this.renderContext.enable(this.renderContext.DEPTH_TEST);
            }
            else {
                this.renderContext.disable(this.renderContext.DEPTH_TEST);
            }
        };
        Context3D.prototype.setWriteDepth = function (tf) {
            if (this._contextSetTest.testZbuffer(tf)) {
                return;
            }
            this.renderContext.depthMask(tf);
        };
        Context3D.prototype.setBlendParticleFactors = function (type) {
            if (this._contextSetTest.testBlend(type)) {
                // return;
            }
            switch (type) {
                case 0:
                    this.renderContext.blendFunc(this.renderContext.ONE, this.renderContext.ONE_MINUS_SRC_ALPHA);
                    break;
                case 1:
                    this.renderContext.blendFunc(this.renderContext.ONE, this.renderContext.ONE);
                    break;
                case 2:
                    this.renderContext.blendFunc(this.renderContext.DST_COLOR, this.renderContext.ZERO);
                    break;
                case 3:
                    this.renderContext.blendFunc(this.renderContext.ONE, this.renderContext.ONE_MINUS_SRC_COLOR);
                    break;
                case 4:
                    this.renderContext.blendFunc(this.renderContext.SRC_ALPHA, this.renderContext.ONE);
                    break;
                case -1:
                    this.renderContext.blendFunc(this.renderContext.SRC_ALPHA, this.renderContext.ONE_MINUS_SRC_ALPHA);
                    break;
            }
        };
        Context3D.prototype.setProgram = function ($program) {
            if (this._contextSetTest.testProgram($program)) {
                return;
            }
            this.renderContext.useProgram($program);
            this.setProgramNum++;
        };
        Context3D.prototype.getLocation = function ($program, $name) {
            return this.renderContext.getUniformLocation($program, $name);
        };
        //public locationDic: any = new Object();
        /** ***************************setvc */
        Context3D.prototype.setVcMatrix3fv = function ($program, $name, $m) {
            this.renderContext.uniformMatrix3fv($program.getWebGLUniformLocation($name), false, $m);
        };
        Context3D.prototype.setVcMatrix4fv = function ($program, $name, $m) {
            this.renderContext.uniformMatrix4fv($program.getWebGLUniformLocation($name), false, $m);
        };
        Context3D.prototype.setVpMatrix = function ($program, $m) {
            if (this._contextSetTest.testVp()) {
                return;
            }
            this.renderContext.uniformMatrix4fv($program.getWebGLUniformLocation("vpMatrix3D"), false, $m);
        };
        Context3D.prototype.setVc4fv = function ($program, $name, $m) {
            this.renderContext.uniform4fv($program.getWebGLUniformLocation($name), $m);
        };
        Context3D.prototype.setVc1fv = function ($program, $name, $m) {
            this.renderContext.uniform1fv($program.getWebGLUniformLocation($name), $m);
        };
        Context3D.prototype.setVc3fv = function ($program, $name, $m) {
            this.renderContext.uniform3fv($program.getWebGLUniformLocation($name), $m);
        };
        Context3D.prototype.setVc2fv = function ($program, $name, $m) {
            this.renderContext.uniform2fv($program.getWebGLUniformLocation($name), $m);
        };
        Context3D.prototype.setVcFloat = function ($program, $name, $m) {
            this.renderContext.uniform1fv($program.getWebGLUniformLocation($name), $m);
        };
        Context3D.prototype.setuniform1f = function ($program, $name, a) {
            this.renderContext.uniform1f($program.getWebGLUniformLocation($name), a);
        };
        /** ******************************************* end setvc */
        Context3D.prototype.setuniform3f = function ($program, $name, a, b, c) {
            this.renderContext.uniform3f($program.getWebGLUniformLocation($name), a, b, c);
        };
        Context3D.prototype.setVcMatrix4fvLocation = function ($location, $m) {
            this.renderContext.uniformMatrix4fv($location, false, $m);
        };
        Context3D.prototype.setVc2f = function ($program, $name, a, b) {
            this.renderContext.uniform2f($program.getWebGLUniformLocation($name), a, b);
        };
        Context3D.prototype.setVcMatrix2fvLocation = function ($location, $m) {
            this.renderContext.uniformMatrix2fv($location, false, $m);
        };
        //  public static maxLen:number=0
        Context3D.prototype.setVc4fvLocation = function ($location, $m) {
            //if (Context3D.maxLen < $m.length) {
            //    //console.log("在此处有变化renderContext",$m.length);
            //    Context3D.maxLen = $m.length;
            //}
            this.renderContext.uniform4fv($location, $m);
        };
        Context3D.prototype.setVa = function (dataId, dataWidth, dataBuffer) {
            this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, dataBuffer);
            this.renderContext.enableVertexAttribArray(dataId);
            this.renderContext.vertexAttribPointer(dataId, dataWidth, this.renderContext.FLOAT, false, 0, 0);
        };
        Context3D.prototype.pushVa = function (dataBuffer) {
            if (this.renderContext.getParameter(this.renderContext.ARRAY_BUFFER_BINDING) == dataBuffer) {
                return true;
            }
            else {
                this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER, dataBuffer);
                return false;
            }
        };
        Context3D.prototype.setVaOffset = function (dataId, dataWidth, stride, offset) {
            this.renderContext.enableVertexAttribArray(dataId);
            this.renderContext.vertexAttribPointer(dataId, dataWidth, this.renderContext.FLOAT, false, stride, offset);
        };
        Context3D.prototype.clearVa = function (dataId) {
            this.renderContext.disableVertexAttribArray(dataId);
        };
        Context3D.prototype.drawCall = function ($iBuffer, $numTri) {
            this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER, $iBuffer);
            this.renderContext.drawElements(this.renderContext.TRIANGLES, $numTri, this.renderContext.UNSIGNED_SHORT, 0);
            // var errorID = this.renderContext.getError();
            // if (errorID != 0) {
            //     //console.log(errorID);
            // }
        };
        Context3D.prototype.drawLine = function ($iBuffer, $numTri) {
            this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER, $iBuffer);
            this.renderContext.drawElements(this.renderContext.LINES, $numTri, this.renderContext.UNSIGNED_SHORT, 0);
        };
        Context3D.prototype.setRenderTexture = function ($program, $name, $textureObject, $level, test) {
            if (test === void 0) { test = true; }
            if (test && this._contextSetTest.testTexture($name, $textureObject)) {
                return;
            }
            if ($level == 0) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE0);
            }
            else if ($level == 1) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE1);
            }
            else if ($level == 2) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE2);
            }
            else if ($level == 3) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE3);
            }
            else if ($level == 4) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE4);
            }
            else if ($level == 5) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE5);
            }
            else if ($level == 6) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE6);
            }
            this.renderContext.bindTexture(this.renderContext.TEXTURE_2D, $textureObject);
            this.renderContext.uniform1i($program.getWebGLUniformLocation($name), $level);
            this.setTextureNum++;
        };
        Context3D.prototype.setRenderTextureCube = function ($program, $name, $textureObject, $level) {
            if ($level == 0) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE0);
            }
            else if ($level == 1) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE1);
            }
            else if ($level == 2) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE2);
            }
            else if ($level == 3) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE3);
            }
            else if ($level == 4) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE4);
            }
            else if ($level == 5) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE5);
            }
            else if ($level == 6) {
                this.renderContext.activeTexture(this.renderContext.TEXTURE6);
            }
            this.renderContext.bindTexture(this.renderContext.TEXTURE_CUBE_MAP, $textureObject);
            this.renderContext.uniform1i(this.renderContext.getUniformLocation($program, $name), $level);
        };
        Context3D.prototype.updateTexture = function ($texture, $offsetx, $offsety, $img) {
            this.renderContext.bindTexture(this.renderContext.TEXTURE_2D, $texture);
            this.renderContext.texSubImage2D(this.renderContext.TEXTURE_2D, 0, $offsetx, $offsety, this.renderContext.RGBA, this.renderContext.UNSIGNED_BYTE, $img);
        };
        Context3D.prototype.getTexture = function ($img, $wrap, $filter, $mipmap) {
            if ($wrap === void 0) { $wrap = 0; }
            if ($filter === void 0) { $filter = 0; }
            if ($mipmap === void 0) { $mipmap = 0; }
            // $mipmap=0
            var $textureRect = new Pan3d.Rectangle(0, 0, Math.pow(2, Math.ceil(Math.log($img.width) / Math.log(2))), Math.pow(2, Math.ceil(Math.log($img.height) / Math.log(2))));
            if ($textureRect.width != $img.width || $textureRect.height != $img.height) {
                //console.log("图片尺寸不为2幂")
                //alert("图片尺寸不为2幂")
                var $ctx = Pan3d.UIManager.getInstance().getContext2D($textureRect.width, $textureRect.height, false);
                $ctx.drawImage($img, 0, 0, $img.width, $img.height, 0, 0, $textureRect.width, $textureRect.height);
                return this.getTexture($ctx.canvas, 0, 0);
            }
            var textureObject = this.renderContext.createTexture();
            this.renderContext.bindTexture(this.renderContext.TEXTURE_2D, textureObject);
            this.renderContext.texImage2D(this.renderContext.TEXTURE_2D, 0, this.renderContext.RGBA, this.renderContext.RGBA, this.renderContext.UNSIGNED_BYTE, $img);
            var filterNum;
            if ($filter == 0) {
                filterNum = this.renderContext.LINEAR;
            }
            else {
                filterNum = this.renderContext.NEAREST;
            }
            var mipNum;
            if ($filter == 0) {
                if ($mipmap == 0) {
                    mipNum = this.renderContext.LINEAR;
                }
                else if ($mipmap == 1) {
                    mipNum = this.renderContext.LINEAR_MIPMAP_LINEAR;
                }
                else if ($mipmap == 2) {
                    mipNum = this.renderContext.LINEAR_MIPMAP_NEAREST;
                }
            }
            else {
                if ($mipmap == 0) {
                    mipNum = this.renderContext.NEAREST;
                }
                else if ($mipmap == 1) {
                    mipNum = this.renderContext.NEAREST_MIPMAP_LINEAR;
                }
                else if ($mipmap == 2) {
                    mipNum = this.renderContext.NEAREST_MIPMAP_NEAREST;
                }
            }
            this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_MAG_FILTER, filterNum);
            this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_MIN_FILTER, mipNum);
            if ($wrap == 0) {
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_S, this.renderContext.REPEAT);
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_T, this.renderContext.REPEAT);
            }
            else {
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_S, this.renderContext.CLAMP_TO_EDGE);
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_T, this.renderContext.CLAMP_TO_EDGE);
            }
            if ($mipmap != 0) {
                this.renderContext.generateMipmap(this.renderContext.TEXTURE_2D);
            }
            // this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, 1);
            return textureObject;
        };
        Context3D.prototype.creatTexture = function ($width, $height, $wrap) {
            if ($wrap === void 0) { $wrap = 0; }
            var $texture = this.renderContext.createTexture();
            this.renderContext.bindTexture(this.renderContext.TEXTURE_2D, $texture);
            this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_MAG_FILTER, this.renderContext.LINEAR);
            this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_MIN_FILTER, this.renderContext.LINEAR);
            if ($wrap == 0) {
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_S, this.renderContext.REPEAT);
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_T, this.renderContext.REPEAT);
            }
            else {
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_S, this.renderContext.CLAMP_TO_EDGE);
                this.renderContext.texParameteri(this.renderContext.TEXTURE_2D, this.renderContext.TEXTURE_WRAP_T, this.renderContext.CLAMP_TO_EDGE);
            }
            this.renderContext.texImage2D(this.renderContext.TEXTURE_2D, 0, this.renderContext.RGB, $width, $height, 0, this.renderContext.RGB, this.renderContext.UNSIGNED_BYTE, null);
            return $texture;
        };
        Context3D.prototype.createFramebuffer = function () {
            var fboBuffer = this.renderContext.createFramebuffer();
            this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER, fboBuffer);
            return fboBuffer;
        };
        Context3D.prototype.deleteBuffer = function (buffer) {
            if (!buffer) {
                //console.log("aaa12");
            }
            //var ooo:any = buffer;
            //ooo.destory = true;
            this.renderContext.deleteBuffer(buffer);
            if (this.renderContext.getError() != 0) {
                //console.log("aaa12");
            }
        };
        Context3D.prototype.deleteTexture = function (texture) {
            //return;
            //var ooo:any = texture;
            //ooo.destory = true;
            this.renderContext.deleteTexture(texture);
        };
        Context3D.prototype.deleteShader = function (shader) {
            //return;
            this.renderContext.deleteShader(shader.vShader);
            this.renderContext.deleteShader(shader.fShader);
            this.renderContext.deleteProgram(shader.program);
        };
        Context3D.prototype.cullFaceBack = function (tf) {
            var gl = this.renderContext;
            if (tf) { //反面渲染
                gl.enable(gl.CULL_FACE);
                if (gl.getParameter(gl.CULL_FACE_MODE) != gl.FRONT) {
                    gl.cullFace(gl.FRONT);
                }
            }
            else { //正面渲染
                gl.enable(gl.CULL_FACE);
                if (gl.getParameter(gl.CULL_FACE_MODE) != gl.BACK) {
                    gl.cullFace(gl.BACK);
                }
            }
        };
        Context3D.prototype.setCullFaceModel = function (value) {
            if (value = 0) { //正面渲染
                this.cullFaceBack(false);
            }
            else if (value = 1) { //正面渲染
                this.cullFaceBack(true);
            }
            else if (value = 2) { //正反面渲染
                var gl = this.renderContext;
                gl.enable(gl.CULL_FACE);
            }
        };
        Context3D.prototype.clearTest = function () {
            this._contextSetTest.clear();
        };
        return Context3D;
    }());
    Pan3d.Context3D = Context3D;
    var FBO = /** @class */ (function () {
        function FBO(w, h) {
            if (w === void 0) { w = 128; }
            if (h === void 0) { h = 128; }
            this.color = new Pan3d.Vector3D(20 / 255, 20 / 255, 20 / 255, 1.0);
            this.makeSize(w, h);
        }
        FBO.prototype.resetSize = function (w, h) {
            var a = Math.pow(2, Math.ceil(Math.log(w) / Math.log(2)));
            var b = Math.pow(2, Math.ceil(Math.log(h) / Math.log(2)));
            if (this.width != a || this.height != b) {
                console.log("改变FBO尺寸", a, b);
                this.makeSize(a, b);
            }
        };
        FBO.prototype.makeSize = function (w, h) {
            var gl = Pan3d.Scene_data.context3D.renderContext;
            this.texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            this.frameBuffer = gl.createFramebuffer();
            this.depthBuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);
            this.width = w;
            this.height = h;
        };
        return FBO;
    }());
    Pan3d.FBO = FBO;
    var ContextSetTest = /** @class */ (function () {
        function ContextSetTest() {
            // public enableVaAry: Array<boolean> = new Array;
            this.vaAry = new Array;
            this._blendType = -1000;
            this._cullType = false;
            this._zbufferType = true;
            this._vpMatrix = false;
        }
        ContextSetTest.prototype.testTexture = function ($name, $textureObject) {
            if (this._textureDic[$name] == $textureObject) {
                return true;
            }
            else {
                this._textureDic[$name] = $textureObject;
                return false;
            }
        };
        ContextSetTest.prototype.testProgram = function ($program) {
            if (this._program == $program) {
                return true;
            }
            else {
                this._program = $program;
                this._textureDic = new Object();
                this._vpMatrix = false;
                return false;
            }
        };
        ContextSetTest.prototype.testVa = function (dataBuffer) {
            return false;
        };
        ContextSetTest.prototype.clear = function () {
            this._blendType = -1000;
            this._cullType = false;
            this._vpMatrix = false;
            this._program = null;
            this._vabuffer = null;
        };
        ContextSetTest.prototype.testBlend = function ($type) {
            if (this._blendType == $type) {
                return true;
            }
            else {
                this._blendType = $type;
                return false;
            }
        };
        ContextSetTest.prototype.testCull = function ($type) {
            if (this._cullType == $type) {
                return true;
            }
            else {
                this._cullType = $type;
                return false;
            }
        };
        ContextSetTest.prototype.testZbuffer = function ($type) {
            if (this._zbufferType == $type) {
                return true;
            }
            else {
                this._zbufferType = $type;
                return false;
            }
        };
        ContextSetTest.prototype.testVp = function () {
            if (this._vpMatrix) {
                return true;
            }
            else {
                this._vpMatrix = true;
                return false;
            }
        };
        return ContextSetTest;
    }());
    Pan3d.ContextSetTest = ContextSetTest;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Context3D.js.map
var Pan3d;
(function (Pan3d) {
    var Scene_data = /** @class */ (function () {
        function Scene_data() {
        }
        Object.defineProperty(Scene_data, "viewMatrx3D", {
            get: function () {
                return Scene_data._viewMatrx3D;
            },
            set: function (value) {
                Scene_data._viewMatrx3D = value;
            },
            enumerable: true,
            configurable: true
        });
        Scene_data.sceneViewHW = 500;
        Scene_data.fileRoot = "res/";
        Scene_data.ossRoot = "https://webpan.oss-cn-shanghai.aliyuncs.com/";
        Scene_data.fileuiRoot = "res/";
        Scene_data.verticalScene = false;
        Scene_data.effectsLev = 2; //2高配1中配0低配
        Scene_data.camFar = 1000; //镜头最远距离
        Scene_data.version = 1;
        Scene_data.frameTime = 1000 / 60;
        Scene_data.MAX_NUMBER = 10000000;
        Scene_data.user = 0; //0为小刘，1为pan
        Scene_data.scaleLight = [2.0];
        Scene_data.useByte = true;
        Scene_data.fogColor = [0, 0, 0];
        Scene_data.fogData = [1000, 0.003];
        Scene_data.gameAngle = 0;
        Scene_data.sceneNumId = 0;
        Scene_data.supportBlob = false;
        return Scene_data;
    }());
    Pan3d.Scene_data = Scene_data;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Scene_data.js.map
//# sourceMappingURL=IBind.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3D = /** @class */ (function (_super) {
        __extends(Display3D, _super);
        function Display3D() {
            var _this = _super.call(this) || this;
            _this.sceneVisible = true;
            _this._hasDestory = false;
            _this._onStage = false;
            return _this;
        }
        Display3D.prototype.update = function () {
        };
        Object.defineProperty(Display3D.prototype, "onStage", {
            get: function () {
                return this._onStage;
            },
            enumerable: true,
            configurable: true
        });
        Display3D.prototype.addStage = function () {
            this._onStage = true;
        };
        Display3D.prototype.removeStage = function () {
            this._onStage = false;
        };
        Display3D.prototype.resize = function () {
        };
        Display3D.prototype.destory = function () {
            if (this.objData) {
                this.objData.useNum--;
            }
        };
        return Display3D;
    }(Pan3d.Object3D));
    Pan3d.Display3D = Display3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DSprite = /** @class */ (function (_super) {
        __extends(Display3DSprite, _super);
        function Display3DSprite() {
            var _this = _super.call(this) || this;
            _this.time = 0;
            _this.dynamic = false;
            _this._rotationMatrix = new Pan3d.Matrix3D;
            return _this;
            //this.lightMapTexture = TextureManager.getInstance().defaultLightMap;
        }
        Display3DSprite.prototype.getSocket = function (socketName, resultMatrix) {
            resultMatrix = this.posMatrix.clone();
        };
        Object.defineProperty(Display3DSprite.prototype, "aabbVect", {
            get: function () {
                if (!this._aabbVect) {
                    var $aabb = this.aabb;
                    var ax = $aabb.x;
                    var ay = $aabb.y;
                    var az = $aabb.z;
                    var bx = $aabb.width;
                    var by = $aabb.height;
                    var bz = $aabb.depth;
                    this._aabbVect = new Array;
                    this._aabbVect.push(new Pan3d.Vector3D(ax, ay, az));
                    this._aabbVect.push(new Pan3d.Vector3D(ax + bx, ay, az));
                    this._aabbVect.push(new Pan3d.Vector3D(ax, ay + by, az));
                    this._aabbVect.push(new Pan3d.Vector3D(ax, ay, az + bz));
                    this._aabbVect.push(new Pan3d.Vector3D(ax + bx, ay + by, az));
                    this._aabbVect.push(new Pan3d.Vector3D(ax + bx, ay, az + bz));
                    this._aabbVect.push(new Pan3d.Vector3D(ax, ay + by, az + bz));
                    this._aabbVect.push(new Pan3d.Vector3D(ax + bx, ay + by, az + bz));
                }
                return this._aabbVect;
            },
            enumerable: true,
            configurable: true
        });
        Display3DSprite.prototype.setObjUrl = function (value) {
            var _this = this;
            this.objurl = value;
            Pan3d.ObjDataManager.getInstance().getObjData(Pan3d.Scene_data.fileRoot + value, function ($obj) {
                _this.objData = $obj;
                if (_this.material) {
                    if (!_this.objData.tangentBuffer) {
                        Pan3d.ObjDataManager.getInstance().creatTBNBuffer(_this.objData);
                    }
                }
            });
        };
        Display3DSprite.prototype.setPicUrl = function ($str) {
            var _this = this;
            this.picUrl = $str;
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + $str, function ($texture) {
                _this.baseTexture = $texture;
            });
        };
        Display3DSprite.prototype.setLightMapUrl = function (value) {
            var _this = this;
            if (!value || value == "") {
                return;
            }
            var url = Pan3d.Scene_data.fileRoot + value;
            Pan3d.TextureManager.getInstance().getTexture(url, function ($texture) {
                //this.lightMapTexture = $texture;
                _this.lightMapTextureRes = $texture;
            });
        };
        Object.defineProperty(Display3DSprite.prototype, "lightMapTexture", {
            get: function () {
                if (!this.lightMapTextureRes) {
                    //alert("无光照贴图") 
                    //console.log("无光照贴图------------------------------------");
                }
                return this.lightMapTextureRes.texture;
            },
            enumerable: true,
            configurable: true
        });
        Display3DSprite.prototype.setMaterialUrl = function (value, $paramData) {
            var _this = this;
            if ($paramData === void 0) { $paramData = null; }
            value = value.replace("_byte.txt", ".txt");
            value = value.replace(".txt", "_byte.txt");
            this.materialUrl = Pan3d.Scene_data.fileRoot + value;
            //var materialshader: MaterialShader = new MaterialShader;
            Pan3d.MaterialManager.getInstance().getMaterialByte(this.materialUrl, function ($material) {
                _this.material = $material;
                if (_this.material.useNormal) {
                    if (_this.objData && !_this.objData.tangentBuffer) {
                        Pan3d.ObjDataManager.getInstance().creatTBNBuffer(_this.objData);
                    }
                }
                if (_this.material.usePbr || _this.material.directLight) {
                    _this._rotationData = new Float32Array(9);
                    _this.updateRotationMatrix();
                }
                if ($paramData) {
                    _this.materialParam = new Pan3d.MaterialBaseParam();
                    _this.materialParam.setData(_this.material, $paramData);
                }
            }, null, true, Pan3d.MaterialShader.MATERIAL_SHADER, Pan3d.MaterialShader);
        };
        Object.defineProperty(Display3DSprite.prototype, "lightProbe", {
            get: function () {
                return this._lightProbe;
            },
            set: function (value) {
                this._lightProbe = value;
                if (this._lightProbe) {
                    if (!this.resultSHVec) {
                        this.resultSHVec = new Array;
                        var ary = [0.4444730390920146, -0.3834955622240026, -0.33124467509627725, 0.09365654209093091,
                            -0.05673310882817577, 0.2120523322966496, 0.02945768486978205, -0.04965996229802928, -0.1136529129285836];
                        for (var i = 0; i < 9; i++) {
                            this.resultSHVec.push(new Pan3d.Vector3D(ary[i], ary[i], ary[i]));
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Display3DSprite.prototype.update = function () {
            if (this.dynamic) {
                if (!this.sceneVisible) {
                    return;
                }
            }
            this.updateMaterial();
            // return;
            // Scene_data.context3D.setProgram(this.program);
            // Scene_data.context3D.setVcMatrix4fv(this.program, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            // Scene_data.context3D.setVcMatrix4fv(this.program, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            // Scene_data.context3D.setVcMatrix4fv(this.program, "posMatrix3D", this.posMatrix.m);
            // var mk = [0, 0, 0, 0];
            // Scene_data.context3D.setVc4fv(this.program, "testconst", mk);
            // var mk2 = [1.5, 0, 0, 0];
            // Scene_data.context3D.setVc4fv(this.program, "testconst2", mk2);
            // //if (this.baseTexture) {
            // //    Scene_data.context3D.setRenderTexture(this.program, "s_texture", this.baseTexture,0);
            // //}
            // Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            // Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
            // Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        Display3DSprite.prototype.updateMaterial = function () {
            if (!this.material || !this.objData) {
                return;
            }
            Pan3d.Scene_data.context3D.setBlendParticleFactors(this.material.blendMode);
            Pan3d.Scene_data.context3D.cullFaceBack(this.material.backCull);
            this.updateBind();
            ////console.log(this.material.url);
            Pan3d.Scene_data.context3D.setProgram(this.material.shader.program);
            Pan3d.Scene_data.context3D.setWriteDepth(this.material.writeZbuffer);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.material.shader, "posMatrix3D", this.posMatrix.m);
            this.setCam();
            //this.setBaseMaterialVc(this.material);
            this.setMaterialVc(this.material, this.materialParam);
            this.setMaterialTexture(this.material, this.materialParam);
            this.setDirectLight(this.material);
            this.setMaterialVa();
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        Display3DSprite.prototype.setMaterialVa = function () {
            if (this.objData.compressBuffer) {
                this.setMaterialVaCompress();
            }
            else {
                this.setMaterialVaIndependent();
            }
        };
        Display3DSprite.prototype.setMaterialVaIndependent = function () {
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
            if (!(this.material.directLight || this.material.noLight)) {
                Pan3d.Scene_data.context3D.setVa(2, 2, this.objData.lightUvBuffer);
            }
            if (this.material.usePbr || this.material.directLight) {
                Pan3d.Scene_data.context3D.setVa(3, 3, this.objData.normalsBuffer);
                Pan3d.Scene_data.context3D.setVcMatrix3fv(this.material.shader, "rotationMatrix3D", this._rotationData);
            }
            if (this.material.useNormal) {
                Pan3d.Scene_data.context3D.setVa(4, 3, this.objData.tangentBuffer);
                Pan3d.Scene_data.context3D.setVa(5, 3, this.objData.bitangentBuffer);
            }
        };
        Display3DSprite.prototype.setMaterialVaCompress = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.objData.vertexBuffer);
            if (tf) {
                return;
            }
            Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.objData.stride, 0);
            Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.objData.stride, this.objData.uvsOffsets);
            if (!(this.material.directLight || this.material.noLight)) {
                Pan3d.Scene_data.context3D.setVaOffset(2, 2, this.objData.stride, this.objData.lightuvsOffsets);
            }
            if (this.material.usePbr || this.material.directLight) {
                Pan3d.Scene_data.context3D.setVaOffset(3, 3, this.objData.stride, this.objData.normalsOffsets);
                Pan3d.Scene_data.context3D.setVcMatrix3fv(this.material.shader, "rotationMatrix3D", this._rotationData);
            }
            if (this.material.useNormal) {
                Pan3d.Scene_data.context3D.setVaOffset(4, 3, this.objData.stride, this.objData.tangentsOffsets);
                Pan3d.Scene_data.context3D.setVaOffset(5, 3, this.objData.stride, this.objData.bitangentsOffsets);
            }
        };
        Display3DSprite.prototype.setDirectLight = function ($material) {
            if ($material.directLight) {
                Pan3d.Scene_data.context3D.setVc3fv($material.shader, "ambientColor", Pan3d.Scene_data.light.ambientColor);
                Pan3d.Scene_data.context3D.setVc3fv($material.shader, "sunDirect", Pan3d.Scene_data.light.sunDirect);
                Pan3d.Scene_data.context3D.setVc3fv($material.shader, "sunColor", Pan3d.Scene_data.light.sunColor);
            }
        };
        Display3DSprite.prototype.setCam = function () {
            // var mvc:Float32Array = new Float32Array(16 * 3);
            // mvc.set(this.posMatrix.m,0);
            // mvc.set(Scene_data.viewMatrx3D.m,16);
            // mvc.set(Scene_data.cam3D.cameraMatrix.m,32);
            //Scene_data.context3D.setVcMatrix4fv(this.material.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //Scene_data.context3D.setVcMatrix4fv(this.material.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //var m:Matrix3D = new Matrix3D;
            //m.prepend(Scene_data.viewMatrx3D);
            // m.prepend(Scene_data.cam3D.cameraMatrix);
            //Scene_data.context3D.setVcMatrix4fv(this.material.shader, "vpMatrix3D", Scene_data.vpMatrix.m);
            Pan3d.Scene_data.context3D.setVpMatrix(this.material.shader, Pan3d.Scene_data.vpMatrix.m);
        };
        Display3DSprite.prototype.setBind = function ($bindTarget, $bindSocket) {
            this.bindTarget = $bindTarget;
            this.bindSocket = $bindSocket;
            this.bindMatrix = new Pan3d.Matrix3D();
        };
        Display3DSprite.prototype.setGroup = function ($pos, $rotaion, $scale) {
            this._isInGroup = true;
            this._groupPos = $pos;
            this._groupRotation = $rotaion;
            this._groupScale = $scale;
            this.groupMatrix = new Pan3d.Matrix3D();
            this.groupRotationMatrix = new Pan3d.Matrix3D();
            this.groupMatrix.isIdentity = false;
            this.groupMatrix.identity();
            this.groupMatrix.appendScale($scale.x, $scale.y, $scale.z);
            this.groupMatrix.appendRotation($rotaion.x, Pan3d.Vector3D.X_AXIS);
            this.groupMatrix.appendRotation($rotaion.y, Pan3d.Vector3D.Y_AXIS);
            this.groupMatrix.appendRotation($rotaion.z, Pan3d.Vector3D.Z_AXIS);
            this.groupMatrix.appendTranslation($pos.x, $pos.y, $pos.z);
            this.groupRotationMatrix.isIdentity = false;
            this.groupRotationMatrix.identity();
            this.groupRotationMatrix.prependRotation($rotaion.z, Pan3d.Vector3D.Z_AXIS);
            this.groupRotationMatrix.prependRotation($rotaion.y, Pan3d.Vector3D.Y_AXIS);
            this.groupRotationMatrix.prependRotation($rotaion.x, Pan3d.Vector3D.X_AXIS);
        };
        Display3DSprite.prototype.updateBind = function () {
            if (this.bindTarget) {
                this.posMatrix.identity();
                this.posMatrix.appendScale(this._scaleX, this._scaleY, this._scaleZ);
                if (this._isInGroup) {
                    this.posMatrix.append(this.groupMatrix);
                    //posMatrix.prependTranslation(groupPos.x, groupPos.y, groupPos.z);
                    //posMatrix.prependRotation(groupRotation.z, Vector3D.Z_AXIS);
                    //posMatrix.prependRotation(groupRotation.y, Vector3D.Y_AXIS);
                    //posMatrix.prependRotation(groupRotation.x, Vector3D.X_AXIS);
                    //posMatrix.prependScale(groupScale.x, groupScale.y, groupScale.z);
                }
                this.bindTarget.getSocket(this.bindSocket, this.bindMatrix);
                this.posMatrix.append(this.bindMatrix);
                this.bindMatrix.copyTo(this._rotationMatrix);
                this._rotationMatrix.identityPostion();
                if (this._isInGroup) {
                    this._rotationMatrix.prepend(this.groupRotationMatrix);
                    //_rotationMatrix.prependRotation(groupRotation.z, Vector3D.Z_AXIS);
                    //_rotationMatrix.prependRotation(groupRotation.y, Vector3D.Y_AXIS);
                    //_rotationMatrix.prependRotation(groupRotation.x, Vector3D.X_AXIS);
                }
                this.sceneVisible = this.bindTarget.visible;
            }
        };
        Display3DSprite.prototype.setBaseMaterialVc = function ($material) {
            var t = 0;
            if ($material.hasTime) {
                t = (Pan3d.TimeUtil.getTimer() - this.time) % 100000 * 0.001;
            }
            if ($material.hasTime || $material.usePbr || $material.useKill) {
                Pan3d.Scene_data.context3D.setVc4fv($material.shader, "fc0", [1, 0, $material.killNum, t]); //sceneEvnScale,null,killNum,time;
            }
            if ($material.scaleLightMap) {
                Pan3d.Scene_data.context3D.setVcFloat($material.shader, "scalelight", Pan3d.Scene_data.scaleLight);
            }
            if ($material.usePbr || $material.fogMode == 1) {
                this.setCamPos($material);
            }
            if ($material.fogMode != 0) {
                Pan3d.Scene_data.context3D.setVc2fv($material.shader, "fogdata", Pan3d.Scene_data.fogData);
                Pan3d.Scene_data.context3D.setVc3fv($material.shader, "fogcolor", Pan3d.Scene_data.fogColor);
            }
        };
        Display3DSprite.prototype.setCamPos = function ($material) {
            // var p: Vector3D = new Vector3D(Scene_data.cam3D.x, Scene_data.cam3D.y, Scene_data.cam3D.z, 1.0);
            // p.scaleBy(1/100)
            // Scene_data.context3D.setVc4fv($material.shader, "fc2", [p.x,p.y,p.z,p.w]);
            $material.updateCam(Pan3d.Scene_data.cam3D.x / 100, Pan3d.Scene_data.cam3D.y / 100, Pan3d.Scene_data.cam3D.z / 100);
        };
        Display3DSprite.prototype.setMaterialVc = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            if ($material.fcNum <= 0) {
                return;
            }
            var t = 0;
            if ($material.hasTime) {
                t = (Pan3d.TimeUtil.getTimer() - this.time) % 100000 * 0.001;
            }
            $material.update(t);
            this.setCamPos($material);
            if ($mp) {
                $mp.update();
            }
            Pan3d.Scene_data.context3D.setVc4fv($material.shader, "fc", $material.fcData);
            ////console.log($material.fcData);
            // var constVec:Array<ConstItem> = $material.constList;
            // for(var i:number=0;i<constVec.length;i++){
            //     Scene_data.context3D.setVc4fv($material.shader, constVec[i].name, constVec[i].vecNum);
            // }
        };
        Display3DSprite.prototype.setMaterialTexture = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].type == Pan3d.TexItem.LIGHTMAP) {
                    //_context.setTextureAt(texVec[i].id, lightMapTexture);
                    Pan3d.Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, this.lightMapTexture, texVec[i].id);
                }
                else if (texVec[i].type == Pan3d.TexItem.LTUMAP && Pan3d.Scene_data.pubLut) {
                    Pan3d.Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, Pan3d.Scene_data.pubLut, texVec[i].id);
                    //_context.setTextureAt(texVec[i].id, Scene_data.prbLutTexture.texture);
                }
                else if (texVec[i].type == Pan3d.TexItem.CUBEMAP) {
                    if ($material.useDynamicIBL) { // && _reflectionTextureVo) {
                        //_context.setTextureAt(texVec[i].id, _reflectionTextureVo.texture);
                    }
                    else {
                        var index = Math.floor($material.roughness * 5);
                        if (Pan3d.Scene_data.skyCubeMap) {
                            var cubeTexture = Pan3d.Scene_data.skyCubeMap[index];
                            Pan3d.Scene_data.context3D.setRenderTextureCube($material.shader.program, texVec[i].name, cubeTexture, texVec[i].id);
                        }
                    }
                }
                //else if (texVec[i].type == TexItem.HEIGHTMAP) {
                //    //_context.setTextureAt(texVec[i].id, _cubeTexture);
                //    setHeightTexture(texVec[i].id);
                //} else if (texVec[i].type == TexItem.REFRACTIONMAP) {
                //    if (_reflectionTextureVo) {
                //        _context.setTextureAt(texVec[i].id, _reflectionTextureVo.ZeTexture);
                //    }
                //}
                else {
                    //_context.setTextureAt(texVec[i].id, texVec[i].texture);
                    if (texVec[i].texture) {
                        Pan3d.Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, texVec[i].texture, texVec[i].id);
                    }
                }
            }
            if ($mp) {
                for (i = 0; i < $mp.dynamicTexList.length; i++) {
                    //_context.setTextureAt($mParam.dynamicTexList[i].target.id, $mParam.dynamicTexList[i].texture);
                    if ($mp.dynamicTexList[i].target) {
                        Pan3d.Scene_data.context3D.setRenderTexture($material.shader, $mp.dynamicTexList[i].target.name, $mp.dynamicTexList[i].texture, $mp.dynamicTexList[i].target.id);
                    }
                }
            }
        };
        Display3DSprite.prototype.checkMaterialTexture = function ($material) {
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].type == Pan3d.TexItem.LIGHTMAP) {
                    if (!this.lightMapTexture) {
                        return false;
                    }
                }
                else if (texVec[i].type == Pan3d.TexItem.LTUMAP) {
                    if (!Pan3d.Scene_data.pubLut) {
                        return false;
                    }
                }
                else if (texVec[i].type == Pan3d.TexItem.CUBEMAP) {
                    if ($material.useDynamicIBL) { // && _reflectionTextureVo) {
                        //_context.setTextureAt(texVec[i].id, _reflectionTextureVo.texture);
                    }
                    else {
                        if (!Pan3d.Scene_data.skyCubeMap) {
                            return false;
                        }
                    }
                }
                else {
                    if (!texVec[i].texture) {
                        return false;
                    }
                }
            }
            return true;
        };
        Display3DSprite.prototype.updateRotationMatrix = function () {
            try {
                this._rotationMatrix.identity();
                this._rotationMatrix.appendRotation(this._rotationX, Pan3d.Vector3D.X_AXIS);
                this._rotationMatrix.appendRotation(this._rotationY, Pan3d.Vector3D.Y_AXIS);
                this._rotationMatrix.appendRotation(this._rotationZ, Pan3d.Vector3D.Z_AXIS);
                if (this._rotationData) {
                    this._rotationMatrix.getRotaionM33(this._rotationData);
                }
            }
            catch (err) {
                //console.log("在此处理错误1");
            }
        };
        Display3DSprite.prototype.setPos = function ($v3d) {
            this.x = $v3d.x;
            this.y = $v3d.y + 10;
            this.z = $v3d.z;
        };
        Display3DSprite.prototype.destory = function () {
            _super.prototype.destory.call(this);
            this.name = null;
            this.objurl = null;
            this.picUrl = null;
            this.materialUrl = null;
            if (this.material) {
                this.material.useNum--;
            }
            if (this.materialParam) {
                this.materialParam.destory();
                this.materialParam = null;
            }
            if (this.lightMapTextureRes) {
                this.lightMapTextureRes.clearUseNum();
            }
            this._rotationMatrix = null;
            this._rotationData = null;
            this.bindMatrix = null;
            this.bindTarget = null;
            this.bindSocket = null;
            this._groupPos = null;
            this._groupRotation = null;
            this._groupScale = null;
            this.groupMatrix = null;
            this.groupRotationMatrix = null;
        };
        return Display3DSprite;
    }(Pan3d.Display3D));
    Pan3d.Display3DSprite = Display3DSprite;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DSky = /** @class */ (function (_super) {
        __extends(Display3DSky, _super);
        function Display3DSky() {
            var _this = _super.call(this) || this;
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.SkyShader.Sky_Shader);
            _this.program = _this.shader.program;
            return _this;
        }
        Display3DSky.prototype.setObjUrl = function (value) {
            var _this = this;
            this.objurl = value;
            Pan3d.ObjDataManager.getInstance().getObjData(Pan3d.Scene_data.fileRoot + value, function ($objData) {
                _this.objData = $objData;
            });
        };
        Display3DSky.prototype.setCubeUrl = function (value) {
            var _this = this;
            Pan3d.TextureManager.getInstance().loadCubeTexture(value, function ($ary) { _this.cubeTextList = $ary; });
        };
        Display3DSky.prototype.update = function () {
            Pan3d.Scene_data.context3D.setProgram(this.program);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
            if (this.cubeTextList) {
                Pan3d.Scene_data.context3D.setRenderTextureCube(this.program, "s_texture", this.cubeTextList[0], 0);
            }
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.normalsBuffer);
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        return Display3DSky;
    }(Pan3d.Display3D));
    Pan3d.Display3DSky = Display3DSky;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DSky.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3dMovie = /** @class */ (function (_super) {
        __extends(Display3dMovie, _super);
        function Display3dMovie() {
            var _this = _super.call(this) || this;
            _this._completeState = 0;
            _this._defaultAction = "stand";
            _this._curentFrame = 0;
            _this._actionTime = 0;
            _this._fileScale = 1;
            _this._hasDestory = false;
            /**正在播放的技能*/
            _this._isSinging = false;
            _this.meshVisible = true;
            _this._nextScale = 1;
            _this.locationDic = new Object;
            _this._animDic = new Object;
            _this._partDic = new Object;
            _this._partUrl = new Object;
            _this._preLoadActionDic = new Object;
            _this._waitLoadActionDic = new Object;
            _this.showCapsule = false;
            _this._enablePhysics = false;
            return _this;
        }
        Object.defineProperty(Display3dMovie.prototype, "isSinging", {
            get: function () {
                return this._isSinging;
            },
            set: function (value) {
                this._isSinging = value;
                //console.log(" this._isSinging",this._isSinging)
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Display3dMovie.prototype, "curentAction", {
            get: function () {
                return this._curentAction;
            },
            set: function (value) {
                this._curentAction = value;
            },
            enumerable: true,
            configurable: true
        });
        Display3dMovie.prototype.fixAstartData = function (pos) { };
        Display3dMovie.prototype.setRoleUrl = function (value) {
            var _this = this;
            this.clearMesh();
            Pan3d.MeshDataManager.getInstance().getMeshData(value, function ($skinMesh) {
                if (_this._hasDestory) {
                    $skinMesh.useNum--;
                    return;
                }
                _this._skinMesh = $skinMesh;
                _this.fileScale = $skinMesh.fileScale;
                if (_this.onStage) {
                    _this.addSkinMeshParticle();
                }
                _this._animDic = $skinMesh.animDic;
                _this.onMeshLoaded();
            });
        };
        Display3dMovie.prototype.onMeshLoaded = function () {
            this.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE));
        };
        Display3dMovie.prototype.clearMesh = function () {
            this.removeSkinMeshParticle();
            if (this._skinMesh) {
                this._skinMesh.useNum--;
            }
            this._skinMesh = null;
            this._animDic = new Object;
        };
        Display3dMovie.prototype.addSkinMeshParticle = function () {
            if (!this._skinMesh) {
                return;
            }
            var dicAry = new Array;
            this._partDic["mesh"] = dicAry;
            var meshAry = this._skinMesh.meshAry;
            if (!meshAry) {
                return;
            }
            for (var i = 0; i < meshAry.length; i++) {
                var particleAry = meshAry[i].particleAry;
                for (var j = 0; j < particleAry.length; j++) {
                    var bindPartcle = particleAry[j];
                    var particle;
                    particle = Pan3d.ParticleManager.getInstance().getParticleByte(Pan3d.Scene_data.fileRoot + bindPartcle.url);
                    if (!particle.sourceData) {
                        console.log("particle.sourceData error");
                    }
                    particle.dynamic = true;
                    particle.bindSocket = bindPartcle.socketName;
                    dicAry.push(particle);
                    particle.bindTarget = this;
                    Pan3d.ParticleManager.getInstance().addParticle(particle);
                }
            }
        };
        Display3dMovie.prototype.removeSkinMeshParticle = function () {
            var dicAry = this._partDic["mesh"];
            if (!dicAry) {
                return;
            }
            for (var i = 0; i < dicAry.length; i++) {
                Pan3d.ParticleManager.getInstance().removeParticle(dicAry[i]);
                dicAry[i].destory();
            }
            this._partDic["mesh"] = null;
        };
        Display3dMovie.prototype.roleResCom = function ($roleRes, $batchNum) {
            //this._roleRes = $roleRes;
            //this._roleRes.useNum++;
            //this._meshUrl = this._roleRes.roleUrl;
            //MeshDataManager.getInstance().getMeshData(this._meshUrl, ($skinMesh: SkinMesh) => {
            //    this._skinMesh = $skinMesh;
            //    if ($batchNum != 1) {
            //        this._skinMesh.type = 1;
            //    }
            //    for (var key in this._animDic) {
            //        this.processAnimByMesh(this._animDic[key]);
            //    }
            //    $skinMesh.loadMaterial(($m: Material) => { this.loadMaterialCom($m) });
            //    $skinMesh.loadParticle(this);
            //    this.fileScale = $skinMesh.fileScale;
            //}, $batchNum);
            //var actionAry: Array<string> = this._roleRes.actionAry;
            //for (var i: number = 0; i<actionAry.length;i++){
            //    this.addAction(actionAry[i], this._roleRes.roleUrl + actionAry[i]);
            //}
        };
        Display3dMovie.prototype.setMeshUrl = function (value, $batchNum) {
            var _this = this;
            if ($batchNum === void 0) { $batchNum = 1; }
            this._meshUrl = Pan3d.Scene_data.fileRoot + value;
            Pan3d.MeshDataManager.getInstance().getMeshData(this._meshUrl, function ($skinMesh) {
                _this._skinMesh = $skinMesh;
                if ($batchNum != 1) {
                    _this._skinMesh.type = 1;
                }
                for (var key in _this._animDic) {
                    _this.processAnimByMesh(_this._animDic[key]);
                }
                $skinMesh.loadMaterial(function ($m) { _this.loadMaterialCom($m); });
                //$skinMesh.loadParticle(this);
                _this.fileScale = $skinMesh.fileScale;
            }, $batchNum);
        };
        Object.defineProperty(Display3dMovie.prototype, "scale", {
            get: function () {
                return this._nextScale;
            },
            set: function (value) {
                this._nextScale = value;
                this._scaleX = value * this._fileScale;
                this._scaleY = value * this._fileScale;
                this._scaleZ = value * this._fileScale;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Display3dMovie.prototype, "fileScale", {
            set: function (value) {
                this._fileScale = value;
                this._scaleX = this._nextScale * value;
                this._scaleY = this._nextScale * value;
                this._scaleZ = this._nextScale * value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Display3dMovie.prototype, "shadow", {
            set: function (value) {
                if (value) {
                    if (!this._shadow) {
                        this._shadow = Pan3d.ShadowManager.getInstance().addShadow();
                    }
                }
                else {
                    if (this._shadow) {
                        Pan3d.ShadowManager.getInstance().removeShadow(this._shadow);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Display3dMovie.prototype.setShadowSize = function (value) {
            if (this._shadow) {
                this._shadow.size = value;
            }
        };
        Display3dMovie.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            this.addSkinMeshParticle();
            if (this._shadow) {
                this._shadow.visible = true;
            }
        };
        Display3dMovie.prototype.removeStage = function () {
            _super.prototype.removeStage.call(this);
            if (this._shadow) {
                Pan3d.ShadowManager.getInstance().removeShadow(this._shadow);
            }
            for (var key in this._partDic) {
                var ary = this._partDic[key];
                for (var i = 0; i < ary.length; i++) {
                    if (ary[i] instanceof Pan3d.CombineParticle) {
                        Pan3d.ParticleManager.getInstance().removeParticle(ary[i]);
                    }
                    else if (ary[i] instanceof Pan3d.Display3DSprite) {
                        Pan3d.SceneManager.getInstance().removeSpriteDisplay(ary[i]);
                    }
                }
            }
        };
        Display3dMovie.prototype.loadMaterialCom = function ($material) {
            if ($material.lightProbe) {
                this.lightProbe = true;
            }
        };
        Display3dMovie.prototype.setCollision = function ($radius, $height) {
        };
        Display3dMovie.prototype.applyVisible = function () {
        };
        Display3dMovie.prototype.removePart = function ($key) {
            var ary = this._partDic[$key];
            if (!ary) {
                return;
            }
            for (var i = 0; i < ary.length; i++) {
                if (ary[i] instanceof Pan3d.CombineParticle) {
                    Pan3d.ParticleManager.getInstance().removeParticle(ary[i]);
                    ary[i].destory();
                }
                else if (ary[i] instanceof Pan3d.Display3DSprite) {
                    Pan3d.SceneManager.getInstance().removeSpriteDisplay(ary[i]);
                    ary[i].destory();
                }
            }
            this._partDic[$key] = null;
            this._partUrl[$key] = null;
            delete this._partDic[$key];
            delete this._partUrl[$key];
        };
        /**
            部位，路径，类型 1为粒子 0为其他
        */
        Display3dMovie.prototype.addPart = function ($key, $bindSocket, $url) {
            var _this = this;
            if (this._partUrl[$key] == $url) { //如果相同则返回
                return;
            }
            else if (this._partUrl[$key]) { //如果不同则先移除
                this.removePart($key);
            }
            if (!this._partDic[$key]) {
                this._partDic[$key] = new Array;
            }
            this._partUrl[$key] = $url;
            var ary = this._partDic[$key];
            Pan3d.GroupDataManager.getInstance().getGroupData(Pan3d.Scene_data.fileRoot + $url, function (groupRes) {
                _this.loadPartRes($bindSocket, groupRes, ary);
            });
            //var groupRes: GroupRes = new GroupRes;
            //groupRes.load(Scene_data.fileRoot +  $url, () => { this.loadPartRes($bindSocket,groupRes,ary) });
        };
        Display3dMovie.prototype.loadPartRes = function ($bindSocket, groupRes, ary) {
            if (this._hasDestory) {
                return;
            }
            for (var i = 0; i < groupRes.dataAry.length; i++) {
                var item = groupRes.dataAry[i];
                var posV3d;
                var rotationV3d;
                var scaleV3d;
                if (item.isGroup) {
                    posV3d = new Pan3d.Vector3D(item.x, item.y, item.z);
                    rotationV3d = new Pan3d.Vector3D(item.rotationX, item.rotationY, item.rotationZ);
                    scaleV3d = new Pan3d.Vector3D(item.scaleX, item.scaleY, item.scaleZ);
                }
                if (item.types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                    var particle = Pan3d.ParticleManager.getInstance().getParticleByte(Pan3d.Scene_data.fileRoot + item.particleUrl);
                    ary.push(particle);
                    particle.bindTarget = this;
                    particle.bindSocket = $bindSocket;
                    particle.dynamic = true;
                    Pan3d.ParticleManager.getInstance().addParticle(particle);
                    if (item.isGroup) {
                        particle.setGroup(posV3d, rotationV3d, scaleV3d);
                    }
                }
                else if (item.types == Pan3d.BaseRes.PREFAB_TYPE) {
                    var display = new Pan3d.Display3DSprite();
                    display.setObjUrl(item.objUrl);
                    display.setMaterialUrl(item.materialUrl, item.materialInfoArr);
                    display.dynamic = true;
                    ary.push(display);
                    display.setBind(this, $bindSocket);
                    Pan3d.SceneManager.getInstance().addSpriteDisplay(display);
                    if (item.isGroup) {
                        display.setGroup(posV3d, rotationV3d, scaleV3d);
                    }
                }
            }
            this.applyVisible();
        };
        // public reset(): void
        // {
        //     for (var key in this._partDic) {
        //         var ary: Array<any> = this._partDic[key];
        //         for (var i: number = 0; i < ary.length; i++) {
        //             if (ary[i] instanceof CombineParticle) {
        //                 ParticleManager.getInstance().addParticle(<CombineParticle>ary[i])
        //             } else if (ary[i] instanceof Display3DSprite) {
        //                 SceneManager.getInstance().addDisplay(<Display3DSprite>ary[i])
        //             }
        //         }
        //     }
        // }
        // private loadPartInfoCom($byte: ArrayBuffer, $bindSocket: string, ary: Array<any> ): void {
        //     var byte: ByteArray = new ByteArray($byte);
        //     var length: number = byte.readInt();
        //     for (var i: number = 0; i < length; i++){
        //         var types: number = byte.readInt();
        //         var url: string = byte.readUTF();
        //         var url2: string;
        //         if (types == 1) {
        //             url2 = byte.readUTF();
        //         } 
        //         var isGroup: boolean = byte.readBoolean();
        //         var posV3d: Vector3D;
        //         var rotationV3d: Vector3D;
        //         var scaleV3d: Vector3D;
        //         if (isGroup) {
        //             posV3d = byte.readVector3D()
        //             rotationV3d = byte.readVector3D()
        //             scaleV3d = byte.readVector3D()
        //         }
        //         if (types == 0) {
        //         } else if (types == 1){
        //             var display: Display3DSprite = new Display3DSprite();
        //             display.setObjUrl(url);
        //             display.setMaterialUrl(url2);
        //             ary.push(display);
        //             display.setBind(this, $bindSocket);
        //             SceneManager.getInstance().addDisplay(display);
        //             if (isGroup){
        //                 display.setGroup(posV3d, rotationV3d, scaleV3d);
        //             }
        //         }
        //     }
        // }
        Display3dMovie.prototype.getSocket = function (socketName, resultMatrix) {
            resultMatrix.identity();
            if (!this._skinMesh) {
                //resultMatrix.appendTranslation(this._x,this._y,this._z);
                resultMatrix.append(this.posMatrix);
                return;
            }
            else if (!this._skinMesh.boneSocketDic[socketName]) {
                if (socketName = "none") {
                    resultMatrix.appendTranslation(this._x, this._y, this._z);
                }
                else {
                    resultMatrix.append(this.posMatrix);
                }
                return;
            }
            var boneSocketData = this._skinMesh.boneSocketDic[socketName];
            //if (!boneSocketData) {
            //    resultMatrix.append(this.posMatrix);
            //    return;
            //}
            var testmatix;
            var index = boneSocketData.index;
            testmatix = this.getFrameMatrix(index);
            resultMatrix.appendScale(1 / this._scaleX, 1 / this._scaleY, 1 / this._scaleZ);
            resultMatrix.appendRotation(boneSocketData.rotationX, Pan3d.Vector3D.X_AXIS);
            resultMatrix.appendRotation(boneSocketData.rotationY, Pan3d.Vector3D.Y_AXIS);
            resultMatrix.appendRotation(boneSocketData.rotationZ, Pan3d.Vector3D.Z_AXIS);
            resultMatrix.appendTranslation(boneSocketData.x, boneSocketData.y, boneSocketData.z);
            if (testmatix) {
                resultMatrix.append(this._skinMesh.meshAry[this._skinMesh.meshAry.length - 1].bindPosInvertMatrixAry[index]);
                resultMatrix.append(testmatix);
            }
            resultMatrix.append(this.posMatrix);
        };
        Display3dMovie.prototype.getSunType = function () {
            return 0;
        };
        Display3dMovie.prototype.getFrameMatrix = function (index) {
            if (this._animDic[this.curentAction]) {
                var animData = this._animDic[this.curentAction];
                if (this._curentFrame >= animData.matrixAry.length) {
                    return animData.matrixAry[0][index];
                }
                return animData.matrixAry[this._curentFrame][index];
            }
            else if (this._animDic[this._defaultAction]) {
                var animData = this._animDic[this._defaultAction];
                return animData.matrixAry[this._curentFrame][index];
            }
            return null;
        };
        Display3dMovie.prototype.addAction = function (name, url, needPerLoad) {
            if (needPerLoad === void 0) { needPerLoad = false; }
            this._preLoadActionDic[name] = url;
            if (name == this._defaultAction || name == this.curentAction) {
                this.setAnimUrl(name, url);
            }
            else if (needPerLoad) {
                this.setAnimUrl(name, url);
            }
        };
        Display3dMovie.prototype.setAnimUrl = function (name, url) {
            var _this = this;
            this._waitLoadActionDic[name] = true;
            Pan3d.AnimManager.getInstance().getAnimData(url, function ($animData) {
                _this._animDic[name] = $animData;
                _this.processAnimByMesh($animData);
                _this._waitLoadActionDic[name] = false;
            });
        };
        Display3dMovie.prototype.play = function ($action, $completeState, needFollow) {
            if ($completeState === void 0) { $completeState = 0; }
            if (needFollow === void 0) { needFollow = true; }
            //FpsMc.tipStr = "1" + $action + "," + this._curentAction;
            if (this.curentAction == $action) {
                return;
            }
            //FpsMc.tipStr = "2";
            this.curentAction = $action;
            this._completeState = $completeState;
            this._actionTime = 0;
            this.updateFrame(0);
            //FpsMc.tipStr = "3";
            if (this._animDic.hasOwnProperty($action)) {
                //FpsMc.tipStr = "4";
                return true;
            }
            else {
                //FpsMc.tipStr = "5";
                if (!this._waitLoadActionDic[$action] && this._preLoadActionDic[$action]) {
                    //FpsMc.tipStr = "6";
                    this.setAnimUrl($action, this._preLoadActionDic[$action]);
                }
                return false;
            }
        };
        Display3dMovie.prototype.processAnimByMesh = function ($animData) {
            if (!this._skinMesh) {
                return;
            }
            if ($animData.hasProcess) {
                return;
            }
            for (var i = 0; i < $animData.matrixAry.length; i++) {
                var frameAry = $animData.matrixAry[i];
                for (var j = 0; j < frameAry.length; j++) {
                    frameAry[j].prepend(this._skinMesh.meshAry[0].bindPosMatrixAry[j]);
                }
            }
            $animData.hasProcess = true;
        };
        Display3dMovie.prototype.update = function () {
            if (!this._skinMesh) {
                return;
            }
            if (this.lightProbe) {
                this.resultSHVec = Pan3d.LightProbeManager.getInstance().getData(new Pan3d.Vector3D(this.x, this.y + 10, this.z));
            }
            // if(this.name == "老鹰"){
            //  //console.log(this.name);  
            // }
            this.updateBind();
            if (this.meshVisible) {
                for (var i = 0; i < this._skinMesh.meshAry.length; i++) {
                    this.updateMaterialMesh(this._skinMesh.meshAry[i]);
                }
            }
            if (this.showCapsule) {
                this.updateShowCapsule();
            }
        };
        Display3dMovie.prototype.updateFrame = function (t) {
            this._actionTime += t;
            var actionKey;
            if (this.curentAction && this._animDic[this.curentAction]) {
                actionKey = this.curentAction;
            }
            else if (this._animDic[this._defaultAction]) {
                actionKey = this._defaultAction;
            }
            else {
                return;
            }
            var animData = this._animDic[actionKey];
            this._curentFrame = float2int(this._actionTime / (Pan3d.Scene_data.frameTime * 2));
            if (this._curentFrame >= animData.matrixAry.length) {
                if (this._completeState == 0) {
                    this._actionTime = 0;
                    this._curentFrame = 0;
                }
                else if (this._completeState == 1) {
                    this._curentFrame = animData.matrixAry.length - 1;
                }
                else if (this._completeState == 2) {
                    //this.play(this._defaultAction);
                    this._curentFrame = 0;
                    this._completeState = 0;
                    this.changeAction(this.curentAction);
                }
                else if (this._completeState == 3) {
                }
            }
        };
        Display3dMovie.prototype.changeAction = function ($action) {
            this.curentAction = this._defaultAction;
        };
        Display3dMovie.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this._skinMesh) {
                this._skinMesh.useNum--;
            }
            for (var key in this._partDic) {
                var ary = this._partDic[key];
                for (var i = 0; i < ary.length; i++) {
                    if (ary[i] instanceof Pan3d.CombineParticle) {
                        ary[i].destory();
                    }
                    else if (ary[i] instanceof Pan3d.Display3DSprite) {
                        ary[i].destory();
                    }
                }
            }
            this._partDic = null;
            this._hasDestory = true;
        };
        Display3dMovie.prototype.updateShowCapsule = function () {
            if (this.capsuleLineSprite) {
                this.capsuleLineSprite.x = this.x;
                this.capsuleLineSprite.y = this.y + this._capsule.radius;
                this.capsuleLineSprite.z = this.z;
                this.capsuleLineSprite.update();
            }
            else {
                this.capsuleLineSprite = new Pan3d.LineDisplaySprite();
                this.capsuleLineSprite.clear();
                this.capsuleLineSprite.baseColor = new Pan3d.Vector3D(1, 0, 0, 1);
                this.drawCylinder(this._capsule.radius, this._capsule.height);
                this.drawBall(this._capsule.radius);
                this.capsuleLineSprite.upToGpu();
            }
        };
        Display3dMovie.prototype.drawBall = function ($r) {
            var radiusNum100 = $r;
            var num = 12;
            var p;
            var m;
            var lastPos;
            var i;
            var j;
            var bm;
            var bp;
            for (j = 0; j <= num; j++) {
                lastPos = null;
                for (i = num / 2; i < num; i++) {
                    p = new Pan3d.Vector3D(radiusNum100, 0, 0);
                    m = new Pan3d.Matrix3D;
                    m.appendRotation((360 / num) * i, Pan3d.Vector3D.Z_AXIS);
                    p = m.transformVector(p);
                    bm = new Pan3d.Matrix3D;
                    bm.appendRotation((360 / num) * j, Pan3d.Vector3D.Y_AXIS);
                    p = bm.transformVector(p);
                    if (lastPos) {
                        this.capsuleLineSprite.makeLineMode(lastPos, p);
                    }
                    lastPos = p.clone();
                }
            }
            for (j = 1; j <= 4; j++) {
                bm = new Pan3d.Matrix3D;
                bm.appendRotation(j * -20, Pan3d.Vector3D.Z_AXIS);
                bp = bm.transformVector(new Pan3d.Vector3D(radiusNum100, 0, 0));
                lastPos = null;
                for (i = 0; i < num; i++) {
                    p = bp.clone();
                    m = new Pan3d.Matrix3D;
                    m.appendRotation((360 / num) * i, Pan3d.Vector3D.Y_AXIS);
                    p = m.transformVector(p);
                    if (lastPos) {
                        this.capsuleLineSprite.makeLineMode(lastPos, p);
                    }
                    if (i == num - 1) {
                        this.capsuleLineSprite.makeLineMode(bp, p);
                    }
                    lastPos = p.clone();
                }
            }
        };
        Display3dMovie.prototype.drawCylinder = function ($w, $h) {
            var w = $w;
            var h = $h;
            var jindu = 12;
            var lastA;
            var lastB;
            var i;
            for (i = 0; i < jindu; i++) {
                var a = new Pan3d.Vector3D(w, 0, 0);
                var b = new Pan3d.Vector3D(w, +h, 0);
                var m = new Pan3d.Matrix3D;
                m.appendRotation(i * (360 / jindu), Pan3d.Vector3D.Y_AXIS);
                var A = m.transformVector(a);
                var B = m.transformVector(b);
                this.capsuleLineSprite.makeLineMode(A, B);
                //this.capsuleLineSprite.makeLineMode(A, new Vector3D(0, 0, 0))
                this.capsuleLineSprite.makeLineMode(B, new Pan3d.Vector3D(0, +h, 0));
                if (i == (jindu - 1)) {
                    this.capsuleLineSprite.makeLineMode(A, a);
                    this.capsuleLineSprite.makeLineMode(B, b);
                }
                if (lastA || lastB) {
                    this.capsuleLineSprite.makeLineMode(A, lastA);
                    this.capsuleLineSprite.makeLineMode(B, lastB);
                }
                lastA = A.clone();
                lastB = B.clone();
            }
        };
        Display3dMovie.prototype.setVcMatrix = function ($mesh) {
            //Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            Pan3d.Scene_data.context3D.setVpMatrix($mesh.material.shader, Pan3d.Scene_data.vpMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "posMatrix3D", this.posMatrix.m);
            //Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
        };
        Display3dMovie.prototype.setVa = function ($mesh) {
            if ($mesh.compressBuffer) {
                this.setVaCompress($mesh);
            }
            else {
                this.setVaIndependent($mesh);
            }
        };
        Display3dMovie.prototype.setVaIndependent = function ($mesh) {
            Pan3d.Scene_data.context3D.setVa(0, 3, $mesh.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 2, $mesh.uvBuffer);
            Pan3d.Scene_data.context3D.setVa(2, 4, $mesh.boneIdBuffer);
            Pan3d.Scene_data.context3D.setVa(3, 4, $mesh.boneWeightBuffer);
            if ($mesh.material.usePbr) {
                Pan3d.Scene_data.context3D.setVa(4, 4, $mesh.normalsBuffer);
                Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
                if ($mesh.material.useNormal) {
                    Pan3d.Scene_data.context3D.setVa(5, 4, $mesh.tangentBuffer);
                    Pan3d.Scene_data.context3D.setVa(6, 4, $mesh.bitangentBuffer);
                }
            }
            else {
                if ($mesh.material.lightProbe || $mesh.material.directLight) {
                    Pan3d.Scene_data.context3D.setVa(4, 4, $mesh.normalsBuffer);
                    Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
                }
            }
        };
        Display3dMovie.prototype.setVaCompress = function ($mesh) {
            var tf = Pan3d.Scene_data.context3D.pushVa($mesh.vertexBuffer);
            if (tf) {
                ////console.log('cccccc')
                return;
            }
            Pan3d.Scene_data.context3D.setVaOffset(0, 3, $mesh.stride, 0);
            Pan3d.Scene_data.context3D.setVaOffset(1, 2, $mesh.stride, $mesh.uvsOffsets);
            Pan3d.Scene_data.context3D.setVaOffset(2, 4, $mesh.stride, $mesh.boneIDOffsets);
            Pan3d.Scene_data.context3D.setVaOffset(3, 4, $mesh.stride, $mesh.boneWeightOffsets);
            if ($mesh.material.usePbr) {
                Pan3d.Scene_data.context3D.setVaOffset(4, 3, $mesh.stride, $mesh.normalsOffsets);
                Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
                if ($mesh.material.useNormal) {
                    Pan3d.Scene_data.context3D.setVaOffset(5, 3, $mesh.stride, $mesh.tangentsOffsets);
                    Pan3d.Scene_data.context3D.setVaOffset(6, 3, $mesh.stride, $mesh.bitangentsOffsets);
                }
            }
            else {
                if ($mesh.material.lightProbe || $mesh.material.directLight) {
                    Pan3d.Scene_data.context3D.setVaOffset(4, 3, $mesh.stride, $mesh.normalsOffsets);
                    Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
                }
            }
        };
        Display3dMovie.prototype.clearVa = function () {
            Pan3d.Scene_data.context3D.clearVa(2);
            Pan3d.Scene_data.context3D.clearVa(3);
            Pan3d.Scene_data.context3D.clearVa(4);
            Pan3d.Scene_data.context3D.clearVa(5);
            Pan3d.Scene_data.context3D.clearVa(6);
        };
        Display3dMovie.prototype.updateMaterialMesh = function ($mesh) {
            if (!$mesh.material) {
                return;
            }
            Pan3d.Scene_data.context3D.setProgram($mesh.material.shader.program);
            // Scene_data.context3D.cullFaceBack($mesh.material.backCull);
            Pan3d.Scene_data.context3D.cullFaceBack(false);
            Pan3d.Scene_data.context3D.setBlendParticleFactors($mesh.material.blendMode);
            // Scene_data.context3D.setBlendParticleFactors(-1);
            this.setVcMatrix($mesh);
            //this.setBaseMaterialVc($mesh.material);
            this.setMaterialVc($mesh.material, $mesh.materialParam);
            ////console.log($mesh.material.fcData);
            this.setMaterialTexture($mesh.material, $mesh.materialParam);
            this.setVa($mesh);
            //this.setLightProbeVc($mesh.material);
            this.setDirectLight($mesh.material);
            this.setMeshVc($mesh);
            Pan3d.Scene_data.context3D.drawCall($mesh.indexBuffer, $mesh.treNum);
        };
        Display3dMovie.prototype.setLightProbeVc = function ($material) {
            if ($material.lightProbe) {
                for (var i = 0; i < this.resultSHVec.length; i++) {
                    Pan3d.Scene_data.context3D.setVc3fv($material.shader, "sh[" + i + "]", [this.resultSHVec[i].x, this.resultSHVec[i].y, this.resultSHVec[i].z]);
                }
            }
        };
        Display3dMovie.prototype.setMeshVc = function ($mesh) {
            var animData;
            if (this._animDic[this.curentAction]) {
                animData = this._animDic[this.curentAction];
            }
            else if (this._animDic[this._defaultAction]) {
                animData = this._animDic[this._defaultAction];
            }
            else {
                return;
            }
            var $dualQuatFrame = animData.getBoneQPAryByMesh($mesh)[$mesh.uid][this._curentFrame];
            if (!$dualQuatFrame) {
                return;
            }
            Pan3d.Scene_data.context3D.setVc4fv($mesh.material.shader, "boneQ", $dualQuatFrame.quat); //旋转
            Pan3d.Scene_data.context3D.setVc3fv($mesh.material.shader, "boneD", $dualQuatFrame.pos); //所有的位移
        };
        Display3dMovie.prototype.setPos = function ($v3d) {
            ////console.log($v3d);
            _super.prototype.setPos.call(this, $v3d);
            if (this._shadow) {
                this._shadow.x = $v3d.x;
                this._shadow.y = $v3d.y + 8;
                this._shadow.z = $v3d.z;
            }
        };
        Object.defineProperty(Display3dMovie.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.updateMatrix();
                if (this._shadow) {
                    this._shadow.x = value;
                }
                this.changePos();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Display3dMovie.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.updateMatrix();
                if (this._shadow) {
                    this._shadow.y = value;
                }
                this.changePos();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Display3dMovie.prototype, "z", {
            get: function () {
                return this._z;
            },
            set: function (value) {
                this._z = value;
                this.updateMatrix();
                if (this._shadow) {
                    this._shadow.z = value;
                }
                this.changePos();
            },
            enumerable: true,
            configurable: true
        });
        Display3dMovie.prototype.changePos = function () {
        };
        return Display3dMovie;
    }(Pan3d.Display3DSprite));
    Pan3d.Display3dMovie = Display3dMovie;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3dMovie.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3dBatchMovie = /** @class */ (function (_super) {
        __extends(Display3dBatchMovie, _super);
        function Display3dBatchMovie() {
            var _this = _super.call(this) || this;
            _this.batchNum = 0;
            _this.batchPos = new Array;
            return _this;
        }
        Object.defineProperty(Display3dBatchMovie.prototype, "fileScale", {
            set: function (value) {
                this._fileScale = value;
                for (var i = 0; i < this.batchPos.length; i++) {
                    this.batchPos[i].fileScale = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Display3dBatchMovie.prototype.addSun = function ($obj) {
            this.batchPos.push($obj);
            $obj.fileScale = this._fileScale;
        };
        Display3dBatchMovie.prototype.setVcMatrix = function ($mesh) {
            Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
            for (var i = 0; i < this.batchPos.length; i++) {
                Pan3d.Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "posMatrixAry[" + i + "]", this.batchPos[i].posMatrix.m);
            }
        };
        Display3dBatchMovie.prototype.setLightProbeVc = function ($material) {
        };
        Display3dBatchMovie.prototype.setVa = function ($mesh) {
            Pan3d.Scene_data.context3D.setVa(0, 3, $mesh.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, $mesh.uvBuffer);
            Pan3d.Scene_data.context3D.setVa(2, 4, $mesh.boneIdBuffer);
            Pan3d.Scene_data.context3D.setVa(3, 4, $mesh.boneWeightBuffer);
            if ($mesh.material.usePbr) {
                Pan3d.Scene_data.context3D.setVa(4, 4, $mesh.normalsBuffer);
                if ($mesh.material.useNormal) {
                    Pan3d.Scene_data.context3D.setVa(5, 4, $mesh.tangentBuffer);
                    Pan3d.Scene_data.context3D.setVa(6, 4, $mesh.bitangentBuffer);
                }
            }
            else {
                if ($mesh.material.lightProbe || $mesh.material.directLight) {
                    Pan3d.Scene_data.context3D.setVa(4, 4, $mesh.normalsBuffer);
                }
            }
        };
        Display3dBatchMovie.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            if (this.batchPos.length) {
                for (var i = 0; i < this.batchPos.length; i++) {
                    this.batchPos[i].add();
                }
            }
        };
        Display3dBatchMovie.prototype.removeStage = function () {
            _super.prototype.removeStage.call(this);
            if (this.batchPos.length) {
                for (var i = 0; i < this.batchPos.length; i++) {
                    this.batchPos[i].remove();
                }
            }
        };
        return Display3dBatchMovie;
    }(Pan3d.Display3dMovie));
    Pan3d.Display3dBatchMovie = Display3dBatchMovie;
    var Movie3D = /** @class */ (function (_super) {
        __extends(Movie3D, _super);
        function Movie3D() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.posData = [0, 0, 0, 10];
            _this.hasReach = false;
            _this._fileScale = 1;
            return _this;
        }
        Object.defineProperty(Movie3D.prototype, "shadow", {
            set: function (value) {
                if (value) {
                    if (!this._shadow) {
                        this._shadow = Pan3d.ShadowManager.getInstance().addShadow();
                        this._shadow.x = this._x;
                        this._shadow.y = this._y;
                        this._shadow.z = this._z;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Movie3D.prototype, "fileScale", {
            set: function (value) {
                this._fileScale = value;
                this._scaleX *= value;
                this._scaleY *= value;
                this._scaleZ *= value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Movie3D.prototype, "scale", {
            set: function (value) {
                this._scaleX = value * this._fileScale;
                this._scaleY = value * this._fileScale;
                this._scaleZ = value * this._fileScale;
                this.posData[3] = 20 * value;
                this.updateMatrix();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Movie3D.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.posData[0] = value;
                this.updateMatrix();
                if (this._shadow) {
                    if (this.retinueShadowFix) {
                        this._shadow.x = value + this.retinueShadowFix.x;
                    }
                    else {
                        this._shadow.x = value;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Movie3D.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.posData[1] = value;
                this.updateMatrix();
                if (this._shadow) {
                    if (this.retinueShadowFix) {
                        this._shadow.y = value + this.retinueShadowFix.y + 2;
                    }
                    else {
                        this._shadow.y = value + 2;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Movie3D.prototype, "z", {
            get: function () {
                return this._z;
            },
            set: function (value) {
                this._z = value;
                this.posData[2] = value;
                this.updateMatrix();
                if (this._shadow) {
                    if (this.retinueShadowFix) {
                        this._shadow.z = value + this.retinueShadowFix.z;
                    }
                    else {
                        this._shadow.z = value;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Movie3D.prototype.add = function () {
            if (this._shadow) {
                this._shadow.visible = true;
            }
        };
        Movie3D.prototype.remove = function () {
            if (this._shadow) {
                this._shadow.visible = false;
            }
        };
        return Movie3D;
    }(Pan3d.Object3D));
    Pan3d.Movie3D = Movie3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3dBatchMovie.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3dShadow = /** @class */ (function (_super) {
        __extends(Display3dShadow, _super);
        function Display3dShadow() {
            var _this = _super.call(this) || this;
            _this.needUpdate = false;
            _this.locationFloat32 = new Float32Array(0);
            _this.shadowList = new Array;
            _this.objData = new Pan3d.ObjData;
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.Display3DShadowShader.Display3DShadowShader);
            _this.program = _this.shader.program;
            _this.posProLocation = Pan3d.Scene_data.context3D.getLocation(_this.program, "pos");
            return _this;
        }
        Display3dShadow.prototype.addShadow = function ($shdow) {
            this.shadowList.push($shdow);
            $shdow.display = this;
            this.applyObjData();
        };
        Display3dShadow.prototype.removeShadow = function ($shdow) {
            var index = this.shadowList.indexOf($shdow);
            if (index != -1) {
                this.shadowList.splice(index, 1);
                this.applyObjData();
            }
            if (this.shadowList.length == 0) {
            }
        };
        Display3dShadow.prototype.stateChage = function () {
            for (var i = 0; i < this.shadowList.length; i++) {
                if (this.shadowList[i].visible) {
                    break;
                }
            }
            if (i == this.shadowList.length) {
                this.needUpdate = false;
            }
            else {
                this.needUpdate = true;
            }
        };
        Display3dShadow.prototype.hasIdle = function () {
            return this.shadowList.length < 30;
        };
        Display3dShadow.prototype.applyObjData = function () {
            this.objData.vertices.length = 0;
            this.objData.uvs.length = 0;
            this.objData.indexs.length = 0;
            var wh = 5;
            for (var i = 0; i < this.shadowList.length; i++) {
                this.objData.vertices.push(-wh, 0, wh, wh, 0, wh, wh, 0, -wh, -wh, 0, -wh);
                this.objData.uvs.push(0, 0, i, 0, 1, i, 1, 1, i, 1, 0, i);
                this.objData.indexs.push(i * 4, 1 + i * 4, 2 + i * 4, i * 4, 2 + i * 4, 3 + i * 4);
            }
            this.objData.treNum = this.shadowList.length * 6;
            if (this.objData.vertexBuffer) {
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer, this.objData.vertices);
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer, this.objData.uvs);
                Pan3d.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer, this.objData.indexs);
            }
            else {
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Display3dShadow.prototype.update = function () {
            this.needUpdate = true;
            if (!this.needUpdate || this.shadowList.length == 0) {
                return;
            }
            if (this.objData.treNum) {
                Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
                Pan3d.Scene_data.context3D.setProgram(this.program);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
                if (this.locationFloat32.length != this.shadowList.length * 4) {
                    this.locationFloat32 = new Float32Array(this.shadowList.length * 4);
                }
                for (var i = 0; i < this.shadowList.length; i++) {
                    //Scene_data.context3D.setVc4fv(this.program, "pos[" + i + "]", this.shadowList[i].data);
                    if (!this.shadowList[i].visible) {
                        //Scene_data.context3D.setVc4fvLocation(this.locationAry[i], [0, 10000, 0, 0]);
                        this.locationFloat32[i * 4 + 0] = 0;
                        this.locationFloat32[i * 4 + 1] = 10000;
                        this.locationFloat32[i * 4 + 2] = 0;
                        this.locationFloat32[i * 4 + 3] = 0;
                    }
                    else {
                        this.locationFloat32[i * 4 + 0] = this.shadowList[i].data[0];
                        this.locationFloat32[i * 4 + 1] = this.shadowList[i].data[1];
                        this.locationFloat32[i * 4 + 2] = this.shadowList[i].data[2];
                        this.locationFloat32[i * 4 + 3] = this.shadowList[i].data[3];
                    }
                }
                Pan3d.Scene_data.context3D.setVc4fvLocation(this.posProLocation, this.locationFloat32);
                Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", Display3dShadow.texture, 0);
                Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return Display3dShadow;
    }(Pan3d.Display3D));
    Pan3d.Display3dShadow = Display3dShadow;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3dShadow.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3dBg = /** @class */ (function (_super) {
        __extends(Display3dBg, _super);
        function Display3dBg() {
            var _this = _super.call(this) || this;
            _this._scaleData = [1, 1];
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.UIImageShader.UI_IMG_SHADER);
            _this.program = _this.shader;
            _this.initData();
            return _this;
        }
        Display3dBg.prototype.initData = function () {
            this.objData = new Pan3d.ObjData();
            this.objData.vertices.push(-1, 1, 0.99, 1, 1, 0.99, 1, -1, 0.99, -1, -1, 0.99);
            this.objData.uvs.push(0, 0, 1, 0, 1, 1, 0, 1);
            this.objData.indexs.push(0, 1, 2, 0, 2, 3);
            this.objData.treNum = 6;
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
        };
        Display3dBg.prototype.resize = function () {
            this.appleyPos();
        };
        Display3dBg.prototype.setImgInfo = function ($url, $width, $height) {
            this.setImgUrl($url);
            this._width = $width;
            this._height = $height;
        };
        Display3dBg.prototype.setImgUrl = function ($url) {
            //TextureManager.getInstance().getTexture(Scene_data.fileRoot + $url, ($texture: WebGLTexture) => {
            //    this.texture = $texture;
            //});
        };
        Display3dBg.prototype.appleyPos = function () {
            var widthScale = this._width / Pan3d.Scene_data.stageWidth;
            var heightScale = this._height / Pan3d.Scene_data.stageHeight;
            if (widthScale < heightScale) {
                this._scaleData[0] = 1;
                this._scaleData[1] = (this._height / Pan3d.Scene_data.stageHeight) / widthScale;
            }
            else {
                this._scaleData[0] = (this._width / Pan3d.Scene_data.stageWidth) / heightScale;
                this._scaleData[1] = 1;
            }
        };
        Display3dBg.prototype.update = function () {
            this.appleyPos();
            Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
            Pan3d.Scene_data.context3D.setVc2fv(this.shader, "scale", this._scaleData);
            Pan3d.Scene_data.context3D.setVcFloat(this.shader, "alpha", [1.0]);
            Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        return Display3dBg;
    }(Pan3d.Display3D));
    Pan3d.Display3dBg = Display3dBg;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3dBg.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display2dMovie = /** @class */ (function (_super) {
        __extends(Display2dMovie, _super);
        function Display2dMovie() {
            var _this = _super.call(this) || this;
            _this.batchPos = new Array;
            _this._time = 0;
            _this._allFrame = 12;
            _this._uvData = [0, 0];
            _this._uWidth = 0;
            _this._vWidth = 0;
            _this._state = 0;
            _this.frameRate = 3;
            _this.objData = new Pan3d.ObjData();
            _this.watchCaramMatrix = new Pan3d.Matrix3D;
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.Movie2DShader.MOVIE2D_SHADER);
            _this.program = _this.shader.program;
            return _this;
        }
        Display2dMovie.prototype.update = function () {
            this.watchCaramMatrix.identity();
            this.watchCaramMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            this.watchCaramMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "watchCamMatrix3D", this.watchCaramMatrix.m);
            for (var i = 0; i < this.batchPos.length; i++) {
                Pan3d.Scene_data.context3D.setVc4fv(this.shader, "posdata[" + i + "]", this.batchPos[i].posData);
            }
            Pan3d.Scene_data.context3D.setVc2fv(this.shader, "outuv", this._uvData);
            Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.movieTexture, 0);
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        Display2dMovie.prototype.updateFrame = function (t) {
            this._time += t;
            var _curentFrame = float2int(this._time / (Pan3d.Scene_data.frameTime * 2) / this.frameRate);
            if (_curentFrame >= this._allFrame) {
                if (this._state == 0) {
                    this._time = 0;
                    _curentFrame = 0;
                }
                else if (this._state == 1) {
                    _curentFrame = this._allFrame - 1;
                }
                else if (this._state == 2) {
                    this.play("stand");
                    _curentFrame = 0;
                    this._state = 0;
                }
                else if (this._state == 3) {
                }
            }
            this._uvData[0] = _curentFrame * this._uWidth;
        };
        Display2dMovie.prototype.play = function (action, state) {
            if (state === void 0) { state = 0; }
            this._state = state;
            this._time = 0;
            if (action == "walk") {
                this._uvData[1] = this._vWidth;
            }
            else if (action.indexOf("attack") != -1) {
                this._uvData[1] = this._vWidth * 2;
            }
            else {
                this._uvData[1] = 0;
            }
        };
        Display2dMovie.prototype.addSun = function ($obj) {
            this.batchPos.push($obj);
        };
        Display2dMovie.prototype.setUrl = function ($url) {
            //TextureManager.getInstance().getTexture(Scene_data.fileRoot + $url, ($text:WebGLTexture) => {this.movieTexture = $text });
        };
        Display2dMovie.prototype.initData = function (num, scale, uscale, vscale, allFrame, random) {
            if (random === void 0) { random = false; }
            this.objData.vertices.length = 0;
            this.objData.uvs.length = 0;
            this.objData.indexs.length = 0;
            this._uWidth = uscale;
            this._vWidth = vscale;
            this._allFrame = allFrame;
            for (var i = 0; i < num; i++) {
                this.objData.vertices.push(-0.5 * scale, 1, 0, 0.5 * scale, 1, 0, 0.5 * scale, 0, 0, -0.5 * scale, 0, 0);
                var upox = 0;
                if (random) {
                    upox = float2int(allFrame * Math.random()) * uscale;
                }
                this.objData.uvs.push(0 + upox, 0, i, uscale + upox, 0, i, uscale + upox, 1 * vscale, i, 0 + upox, 1 * vscale, i);
                this.objData.indexs.push(i * 4, 1 + i * 4, 2 + i * 4, i * 4, 2 + i * 4, 3 + i * 4);
            }
            this.objData.treNum = this.objData.indexs.length;
            if (this.objData.vertexBuffer) {
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer, this.objData.vertices);
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer, this.objData.uvs);
                Pan3d.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer, this.objData.indexs);
            }
            else {
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Display2dMovie.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            if (this.batchPos.length) {
                for (var i = 0; i < this.batchPos.length; i++) {
                    this.batchPos[i].add();
                }
            }
        };
        Display2dMovie.prototype.removeStage = function () {
            _super.prototype.removeStage.call(this);
            if (this.batchPos.length) {
                for (var i = 0; i < this.batchPos.length; i++) {
                    this.batchPos[i].remove();
                }
            }
        };
        return Display2dMovie;
    }(Pan3d.Display3D));
    Pan3d.Display2dMovie = Display2dMovie;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display2dMovie.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DUISprite = /** @class */ (function (_super) {
        __extends(Display3DUISprite, _super);
        function Display3DUISprite() {
            var _this = _super.call(this) || this;
            _this.uiMatrix = new Pan3d.Matrix3D;
            _this.uiMatrix.prependTranslation(0, 0, 600);
            _this.uiMatrix.prependRotation(-15, Pan3d.Vector3D.X_AXIS);
            _this.uiMatrix.prependRotation(0, Pan3d.Vector3D.Y_AXIS);
            _this.uiViewMatrix = new Pan3d.Matrix3D;
            return _this;
        }
        Display3DUISprite.prototype.loadRes = function ($name) {
            var _this = this;
            if (!this.modelRes) {
                this.modelRes = new Pan3d.ModelRes();
            }
            this.modelRes.load(Pan3d.Scene_data.fileRoot + getModelUrl($name), function () { _this.loadResComFinish(); });
        };
        Display3DUISprite.prototype.loadResComFinish = function () {
            this.setObjUrl(this.modelRes.objUrl);
            this.setMaterialUrl(this.modelRes.materialUrl);
        };
        Display3DUISprite.prototype.loadGroup = function ($name) {
            var _this = this;
            var groupRes = new Pan3d.GroupRes;
            groupRes.load(Pan3d.Scene_data.fileRoot + "model/" + $name + ".txt", function () { _this.loadPartRes(groupRes); });
        };
        Display3DUISprite.prototype.loadPartRes = function (groupRes) {
            for (var i = 0; i < groupRes.dataAry.length; i++) {
                var item = groupRes.dataAry[i];
                if (item.types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                }
                else if (item.types == Pan3d.BaseRes.PREFAB_TYPE) {
                    this.setObjUrl(item.objUrl);
                    this.setMaterialUrl(item.materialUrl, item.materialInfoArr);
                }
            }
        };
        Display3DUISprite.prototype.resize = function () {
            this.uiViewMatrix.identity();
            this.uiViewMatrix.perspectiveFieldOfViewLH(1, 1, 500, 5000);
            this.uiViewMatrix.appendScale(1000 / Pan3d.Scene_data.stageWidth, 1000 / Pan3d.Scene_data.stageHeight, 1);
        };
        Display3DUISprite.prototype.setCam = function () {
            //Scene_data.context3D.setVcMatrix4fv(this.material.shader, "posMatrix3D", this.posMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.material.shader, "viewMatrix3D", this.uiViewMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.material.shader, "camMatrix3D", this.uiMatrix.m);
        };
        Display3DUISprite.prototype.update = function () {
            Pan3d.Scene_data.context3D.setWriteDepth(true);
            Pan3d.Scene_data.context3D.setDepthTest(true);
            _super.prototype.update.call(this);
            Pan3d.Scene_data.context3D.setWriteDepth(false);
            Pan3d.Scene_data.context3D.setDepthTest(false);
            ////console.log(this.posMatrix.m)
        };
        return Display3DUISprite;
    }(Pan3d.Display3DSprite));
    Pan3d.Display3DUISprite = Display3DUISprite;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DUISprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display2DSprite = /** @class */ (function (_super) {
        __extends(Display2DSprite, _super);
        function Display2DSprite() {
            var _this = _super.call(this) || this;
            _this.batchPos = new Array;
            _this.objData = new Pan3d.ObjData();
            _this.watchCaramMatrix = new Pan3d.Matrix3D;
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.Sprite2DShader.SPRITE2D_SHADER);
            _this.program = _this.shader.program;
            return _this;
        }
        Display2DSprite.prototype.setInfo = function ($configurl, $imgurl, $fun) {
            if (!this._imgAtlas) {
                this._imgAtlas = new Pan3d.UIAtlas;
            }
            this._imgAtlas.setInfo($configurl, $imgurl, $fun);
        };
        Display2DSprite.prototype.getSprite = function ($name) {
            var obj = new Sprite();
            obj.uvData = this._imgAtlas.getRec($name);
            return obj;
        };
        Display2DSprite.prototype.addSprite = function () {
            var spriteAry = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                spriteAry[_i] = arguments[_i];
            }
            for (var i = 0; i < spriteAry.length; i++) {
                this.batchPos.push(spriteAry[i]);
            }
            this.applyData();
        };
        Display2DSprite.prototype.applyData = function () {
            this.objData.vertices.length = 0;
            this.objData.uvs.length = 0;
            this.objData.indexs.length = 0;
            for (var i = 0; i < this.batchPos.length; i++) {
                var uv = this.batchPos[i].uvData;
                var whscale = uv.pixelHeight / uv.pixelWitdh;
                this.objData.vertices.push(-0.5 * uv.width, 1 * whscale * uv.width, 0, 0.5 * uv.width, 1 * whscale * uv.width, 0, 0.5 * uv.width, 0, 0, -0.5 * uv.width, 0, 0);
                this.objData.uvs.push(uv.x, uv.y, i, uv.x + uv.width, uv.y, i, uv.x + uv.width, uv.y + uv.height, i, uv.x, uv.y + uv.height, i);
                this.objData.indexs.push(i * 4, 1 + i * 4, 2 + i * 4, i * 4, 2 + i * 4, 3 + i * 4);
            }
            this.objData.treNum = this.objData.indexs.length;
            if (this.objData.vertexBuffer) {
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer, this.objData.vertices);
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer, this.objData.uvs);
                Pan3d.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer, this.objData.indexs);
            }
            else {
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Display2DSprite.prototype.update = function () {
            if (this.batchPos.length == 0) {
                return;
            }
            this.watchCaramMatrix.identity();
            this.watchCaramMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            this.watchCaramMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "watchCamMatrix3D", this.watchCaramMatrix.m);
            for (var i = 0; i < this.batchPos.length; i++) {
                Pan3d.Scene_data.context3D.setVc4fv(this.shader, "posdata[" + i + "]", this.batchPos[i].posData);
            }
            Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._imgAtlas.texture, 0);
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        return Display2DSprite;
    }(Pan3d.Display3D));
    Pan3d.Display2DSprite = Display2DSprite;
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.posData = [0, 0, 0, 100];
            return _this;
        }
        Sprite.prototype.setPos = function (xpos, ypos, zpos) {
            this.x = xpos;
            this.y = ypos;
            this.z = zpos;
        };
        Object.defineProperty(Sprite.prototype, "scale", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                this._scaleX = value;
                this.posData[3] = 100 * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "x", {
            set: function (value) {
                this._x = value;
                this.posData[0] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "y", {
            set: function (value) {
                this._y = value;
                this.posData[1] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "z", {
            set: function (value) {
                this._z = value;
                this.posData[2] = value;
            },
            enumerable: true,
            configurable: true
        });
        return Sprite;
    }(Pan3d.Object3D));
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display2DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GroundDataMesh = /** @class */ (function () {
        function GroundDataMesh() {
        }
        //处理成可以使用的2幂材质数据源
        GroundDataMesh.prototype.mekeUseTexture = function ($img) {
            var $textureRect = new Pan3d.Rectangle(0, 0, Math.pow(2, Math.ceil(Math.log($img.width) / Math.log(2))), Math.pow(2, Math.ceil(Math.log($img.height) / Math.log(2))));
            if ($textureRect.width != $img.width || $textureRect.height != $img.height) {
                var $temp = new Pan3d.BitMapData($textureRect.width, $textureRect.height);
                for (var i = 0; i < $temp.width; i++) {
                    for (var j = 0; j < $temp.height; j++) {
                        var $v = $img.getRgb(i / $temp.width * $img.width, j / $temp.height * $img.height);
                        $temp.setRgb(i, j, $v);
                    }
                }
                //    //console.log("地形信息图调整:注需要编辑器地面设置为2幂")
                return $temp;
            }
            else {
                return $img;
            }
        };
        GroundDataMesh.prototype.calibration = function () {
            this.idBitmap = this.mekeUseTexture(this.idBitmap);
            this.infoBitmap = this.mekeUseTexture(this.infoBitmap);
        };
        GroundDataMesh.meshAllgroundData = function ($byte) {
            var cellNumX = $byte.readInt();
            var cellNumZ = $byte.readInt();
            var $groudItem = new Array();
            for (var i = 0; i < cellNumX; i++) {
                for (var j = 0; j < cellNumZ; j++) {
                    var tx = $byte.readInt();
                    var ty = $byte.readInt();
                    var $tw = $byte.readInt();
                    var $th = $byte.readInt();
                    var $groundDataMesh = new GroundDataMesh();
                    $groundDataMesh.idBitmap = new Pan3d.BitMapData($tw, $th);
                    $groundDataMesh.infoBitmap = new Pan3d.BitMapData($tw, $th);
                    $groundDataMesh.tx = tx;
                    $groundDataMesh.ty = ty;
                    $groudItem.push($groundDataMesh);
                    for (var k = 0; k < $tw; k++) {
                        for (var h = 0; h < $th; h++) {
                            var $vid;
                            var $indexKey = $byte.readByte();
                            switch ($indexKey) {
                                case 0:
                                    $vid = new Pan3d.Vector3D(0, 1, 2);
                                    break;
                                case 1:
                                    $vid = new Pan3d.Vector3D(0, 1, 3);
                                    break;
                                case 2:
                                    $vid = new Pan3d.Vector3D(0, 2, 3);
                                    break;
                                case 3:
                                    $vid = new Pan3d.Vector3D(1, 2, 3);
                                    break;
                                default:
                                    throw new Error("信息索引没有编入");
                                //break;
                            }
                            $groundDataMesh.idBitmap.setRgb(k, h, new Pan3d.Vector3D($vid.x / 255, $vid.y / 255, $vid.z / 255, 1));
                            var $vinfo = new Pan3d.Vector3D();
                            $vinfo.x = $byte.readByte() + 128;
                            $vinfo.y = $byte.readByte() + 128;
                            $vinfo.z = 255 - $vinfo.x - $vinfo.y;
                            $groundDataMesh.infoBitmap.setRgb(k, h, new Pan3d.Vector3D($vinfo.x / 255, $vinfo.y / 255, $vinfo.z / 255, 1));
                        }
                    }
                    $groundDataMesh.calibration();
                }
            }
            var $sixUrl = $byte.readUTF();
            for (var $tempidx = 0; $tempidx < $groudItem.length; $tempidx++) {
                $groudItem[$tempidx].sixurl = $sixUrl;
            }
            return $groudItem;
        };
        return GroundDataMesh;
    }());
    Pan3d.GroundDataMesh = GroundDataMesh;
    var TerrainDisplay3DSprite = /** @class */ (function (_super) {
        __extends(TerrainDisplay3DSprite, _super);
        function TerrainDisplay3DSprite() {
            var _this = _super.call(this) || this;
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.TerrainDisplay3DShader.TerrainDisplay3DShader, new Pan3d.TerrainDisplay3DShader());
            _this.groundShader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.TerrainDisplay3DShader.TerrainDisplay3DShader);
            return _this;
        }
        TerrainDisplay3DSprite.prototype.update = function () {
            if (this.groundShader && this.baseSixteenRes && this.idMapPicDataTexture) {
                this.upDataToDraw();
            }
            else {
                _super.prototype.update.call(this);
            }
        };
        TerrainDisplay3DSprite.prototype.upDataToDraw = function () {
            if (this.groundShader && this.baseSixteenRes) {
                Pan3d.Scene_data.context3D.cullFaceBack(false);
                Pan3d.Scene_data.context3D.setProgram(this.groundShader.program);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.groundShader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.groundShader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.groundShader, "posMatrix3D", this.posMatrix.m);
                Pan3d.Scene_data.context3D.setVc4fv(this.groundShader, "colorData", [1, 0, 1, 1]);
                var tf = Pan3d.Scene_data.context3D.pushVa(this.objData.vertexBuffer);
                if (!tf) {
                    Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.objData.stride, 0);
                    Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.objData.stride, this.objData.uvsOffsets);
                }
                Pan3d.Scene_data.context3D.setRenderTexture(this.groundShader, "idmaptexture", this.idMapPicDataTexture, 0);
                Pan3d.Scene_data.context3D.setRenderTexture(this.groundShader, "infotexture", this.infoMapPicDataTexture, 1);
                Pan3d.Scene_data.context3D.setRenderTexture(this.groundShader, "sixtexture", this.baseSixteenRes.texture, 2);
                Pan3d.Scene_data.context3D.setRenderTexture(this.groundShader, "lightexture", this.lightMapTexture, 3);
                Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        TerrainDisplay3DSprite.prototype.setGrounDataMesh = function ($groundDataMesh) {
            var _this = this;
            this.idMapPicDataTexture = Pan3d.Scene_data.context3D.getTexture($groundDataMesh.idBitmap.imgData, 0, 1);
            this.infoMapPicDataTexture = Pan3d.Scene_data.context3D.getTexture($groundDataMesh.infoBitmap.imgData, 0, 1);
            var $textureUrl = $groundDataMesh.sixurl;
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + $textureUrl, function ($texture) {
                _this.baseSixteenRes = $texture;
            });
        };
        return TerrainDisplay3DSprite;
    }(Pan3d.Display3DSprite));
    Pan3d.TerrainDisplay3DSprite = TerrainDisplay3DSprite;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TerrainDisplay3DSprite.js.map
var Pan3d;
(function (Pan3d) {
    var Engine = /** @class */ (function () {
        function Engine() {
        }
        Engine.init = function ($caves) {
            var isIpad = /ipad/i.test(navigator.userAgent);
            var isIphone = /iPhone/i.test(navigator.userAgent);
            var isAndroid = /android/i.test(navigator.userAgent);
            var isWindow = /iindow/i.test(navigator.userAgent);
            var sUserAgent = navigator.userAgent.toLowerCase();
            ////console.log("--sUserAgent--",sUserAgent,isIpad,isIphone,isAndroid,isWindow);
            if (isIpad || isIphone || isAndroid) {
                Pan3d.Scene_data.isPc = false;
            }
            else {
                Pan3d.Scene_data.isPc = true;
            }
            if (isIpad || isIphone) {
                Pan3d.Scene_data.isIos = true;
            }
            else {
                Pan3d.Scene_data.isIos = false;
            }
            Pan3d.Scene_data.vpMatrix = new Pan3d.Matrix3D;
            Pan3d.Scene_data.canvas3D = $caves;
            Pan3d.Scene_data.context3D = new Pan3d.Context3D();
            Pan3d.Scene_data.context3D.init($caves);
            Pan3d.UIManager.getInstance().init();
            Pan3d.Scene_data.cam3D = new Pan3d.Camera3D;
            Pan3d.Scene_data.focus3D = new Pan3d.Object3D;
            Pan3d.Scene_data.focus3D.x = 0;
            Pan3d.Scene_data.focus3D.y = 0;
            Pan3d.Scene_data.focus3D.z = 0;
            Pan3d.Scene_data.focus3D.rotationY = 135;
            Pan3d.Scene_data.focus3D.rotationX = -45;
            Pan3d.Scene_data.light = new Pan3d.LightVo();
            Engine.testBlob();
            Engine.resetSize();
            // Engine.initShadow();
            Pan3d.TimeUtil.init();
            Pan3d.PathManager.init();
        };
        Engine.resReady = function () {
            Engine.initPbr();
        };
        Engine.testBlob = function () {
            //Scene_data.supportBlob = false;
            //return;
            try {
                var blob = new Blob();
            }
            catch (e) {
                Pan3d.Scene_data.supportBlob = false;
                return;
            }
            Pan3d.Scene_data.supportBlob = true;
        };
        Engine.initPbr = function () {
            if (!Pan3d.Scene_data.pubLut) {
                Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + "base/brdf_ltu.jpg", function ($texture) {
                    Pan3d.Scene_data.pubLut = $texture.texture;
                }, 1);
            }
            if (!Pan3d.Scene_data.skyCubeMap) {
                Pan3d.TextureManager.getInstance().loadCubeTexture(Pan3d.Scene_data.fileRoot + "base/cube/e", function ($ary) {
                    Pan3d.Scene_data.skyCubeMap = $ary;
                });
            }
        };
        Engine.initShadow = function () {
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + "base/shadow.png", function ($texture) {
                Pan3d.Display3dShadow.texture = $texture.texture;
            });
        };
        Engine.resetSize = function (a, b) {
            if (a === void 0) { a = 0; }
            if (b === void 0) { b = 0; }
            Pan3d.Scene_data.stageWidth = document.body.clientWidth;
            Pan3d.Scene_data.stageHeight = document.body.clientHeight;
            Pan3d.Scene_data.canvas3D.width = Pan3d.Scene_data.stageWidth;
            Pan3d.Scene_data.canvas3D.height = Pan3d.Scene_data.stageHeight;
            Pan3d.Scene_data.context3D.resetSize(Pan3d.Scene_data.stageWidth, Pan3d.Scene_data.stageHeight);
            Pan3d.UIManager.getInstance().resize();
            Pan3d.BloodManager.getInstance().resize();
            this.resetViewMatrx3D();
            Pan3d.Scene_data.canvas3D.style.position = "absolute";
            Pan3d.Scene_data.canvas3D.style.left = "0px";
            Pan3d.Scene_data.canvas3D.style.top = "0px";
        };
        Engine.resetViewMatrx3D = function () {
            if (Pan3d.Scene_data.viewMatrx3D) {
                Pan3d.Scene_data.viewMatrx3D.identity();
            }
            else {
                Pan3d.Scene_data.viewMatrx3D = new Pan3d.Matrix3D;
            }
            var fovw = Pan3d.Scene_data.stageWidth;
            var fovh = Pan3d.Scene_data.stageHeight;
            Pan3d.Scene_data.sceneViewHW = Math.max(fovw, fovh);
            Pan3d.Scene_data.viewMatrx3D.perspectiveFieldOfViewLH(this.sceneCamScale, 1, 50, Pan3d.Scene_data.camFar);
            Pan3d.Scene_data.viewMatrx3D.appendScale(1 * (Pan3d.Scene_data.sceneViewHW / fovw * 2), fovw / fovh * (Pan3d.Scene_data.sceneViewHW / fovw * 2), 1);
        };
        Engine.update = function () {
            Pan3d.TimeUtil.update();
            Pan3d.SceneManager.getInstance().update();
            Pan3d.FpsMc.update();
        };
        Engine.unload = function () {
            //NetManager.getInstance().close();
        };
        Engine.needVertical = true;
        Engine.needInputTxt = false; //在输入文本时，将不再可调整大小
        Engine.sceneCamScale = 1.76;
        return Engine;
    }());
    Pan3d.Engine = Engine;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Engine.js.map
var Pan3d;
(function (Pan3d) {
    var MathClass = /** @class */ (function () {
        function MathClass() {
        }
        MathClass.getCamView = function (_Cam, _focus_3d) {
            //var $dis: number = 1000;
            _Cam.update();
            //计算出相机的位置
            var $m = new Pan3d.Matrix3D;
            $m.appendRotation(-_focus_3d.rotationX, Pan3d.Vector3D.X_AXIS);
            $m.appendRotation(-_focus_3d.rotationY, Pan3d.Vector3D.Y_AXIS);
            $m.appendTranslation(_focus_3d.x, _focus_3d.y, _focus_3d.z);
            var $p = $m.transformVector(new Pan3d.Vector3D(0, 0, -_Cam.distance));
            _Cam.x = $p.x;
            _Cam.y = $p.y;
            _Cam.z = $p.z;
            _Cam.rotationX = _focus_3d.rotationX;
            _Cam.rotationY = _focus_3d.rotationY;
            //重置相机矩阵
            _Cam.cameraMatrix.identity();
            _Cam.cameraMatrix.prependTranslation(0, 0, _Cam.distance);
            _Cam.cameraMatrix.prependRotation(_Cam.rotationX, Pan3d.Vector3D.X_AXIS);
            _Cam.cameraMatrix.prependRotation(_Cam.rotationY, Pan3d.Vector3D.Y_AXIS);
            _Cam.cameraMatrix.prependTranslation(-_focus_3d.x, -_focus_3d.y, -_focus_3d.z);
            this.camOffSetShock(_Cam);
            this.updateVp();
            return _Cam.cameraMatrix.m;
        };
        MathClass.camOffSetShock = function (_Cam) {
            if (this.SetShock) {
                _Cam.cameraMatrix.prependTranslation(_Cam.offset.x, _Cam.offset.y, _Cam.offset.z);
            }
        };
        MathClass.updateVp = function () {
            Pan3d.Scene_data.vpMatrix.identity();
            Pan3d.Scene_data.vpMatrix.prepend(Pan3d.Scene_data.viewMatrx3D);
            Pan3d.Scene_data.vpMatrix.prepend(Pan3d.Scene_data.cam3D.cameraMatrix);
        };
        MathClass.MathCam = function (_Cam) {
            var camera3dMatrix = new Pan3d.Matrix3D();
            camera3dMatrix.prependRotation(_Cam.rotationX, Pan3d.Vector3D.X_AXIS);
            camera3dMatrix.prependRotation(_Cam.rotationY, Pan3d.Vector3D.Y_AXIS);
            camera3dMatrix.prependTranslation(-_Cam.x, -_Cam.y, -_Cam.z);
            _Cam.cameraMatrix.identity();
            _Cam.cameraMatrix.append(camera3dMatrix);
        };
        MathClass.GetViewHitBoxData = function ($far) {
            var cameraMatrixInvert = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
            cameraMatrixInvert.invert();
            var sx = Pan3d.Scene_data.viewMatrx3D.m[0];
            var sy = Pan3d.Scene_data.viewMatrx3D.m[5];
            if (this.viewBoxVecItem) {
                if (this.lastViewScale.x != sx || this.lastViewScale.y != sy) {
                    this.viewBoxVecItem[0] = (new Pan3d.Vector3D(-$far / sx, -$far / sy, $far));
                    this.viewBoxVecItem[1] = (new Pan3d.Vector3D(-$far / sx, +$far / sy, $far));
                    this.viewBoxVecItem[2] = (new Pan3d.Vector3D(+$far / sx, -$far / sy, $far));
                    this.viewBoxVecItem[3] = (new Pan3d.Vector3D(+$far / sx, +$far / sy, $far));
                    this.viewBoxVecItem[4] = (new Pan3d.Vector3D(0, 0, 0));
                }
            }
            else {
                this.lastViewScale = new Pan3d.Vector2D(sx, sy);
                this.viewBoxVecItem = new Array;
                this.viewBoxVecItem.push(new Pan3d.Vector3D(-$far / sx, -$far / sy, $far));
                this.viewBoxVecItem.push(new Pan3d.Vector3D(-$far / sx, +$far / sy, $far));
                this.viewBoxVecItem.push(new Pan3d.Vector3D(+$far / sx, -$far / sy, $far));
                this.viewBoxVecItem.push(new Pan3d.Vector3D(+$far / sx, +$far / sy, $far));
                this.viewBoxVecItem.push(new Pan3d.Vector3D(0, 0, 0));
            }
        };
        MathClass.GetViewHitBoxDataCopy = function ($dis) {
            if (!this.viewBoxVecItem) {
                this.viewBoxVecItem = new Array;
                this.viewBoxVecItem.push(new Pan3d.Vector3D());
                this.viewBoxVecItem.push(new Pan3d.Vector3D());
                this.viewBoxVecItem.push(new Pan3d.Vector3D());
                this.viewBoxVecItem.push(new Pan3d.Vector3D());
            }
            var $disNum = $dis / (Pan3d.Scene_data.sceneViewHW / 2);
            var $far = Pan3d.Scene_data.sceneViewHW / 2 * $disNum;
            var fovw = Pan3d.Scene_data.stageWidth;
            var fovh = Pan3d.Scene_data.stageHeight;
            var m = new Pan3d.Matrix3D;
            m.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            m.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            var uc = Pan3d.Scene_data.viewMatrx3D.transformVector(new Pan3d.Vector3D(500, 0, 500));
            var zScale = uc.x / uc.w;
            var ss = 0.8;
            var fw = (fovw / 2 / zScale) * $disNum * ss;
            var fh = (fovh / 2 / zScale) * $disNum * ss;
            this.viewBoxVecItem[0] = this.gettempPos(new Pan3d.Vector3D(-fw, -fh, $far), m);
            this.viewBoxVecItem[1] = this.gettempPos(new Pan3d.Vector3D(+fw, -fh, $far), m);
            this.viewBoxVecItem[2] = this.gettempPos(new Pan3d.Vector3D(+fw, +fh, $far), m);
            this.viewBoxVecItem[3] = this.gettempPos(new Pan3d.Vector3D(-fw, +fh, $far), m);
        };
        MathClass.gettempPos = function (a, m) {
            var b = m.transformVector(a);
            b = b.add(new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z));
            return b;
        };
        MathClass.mathmidpoint = function (a, b, t) {
            var _nx, _ny, _nz;
            _nx = a.x + (b.x - a.x) * t;
            _ny = a.y + (b.y - a.y) * t;
            _nz = a.z + (b.z - a.z) * t;
            a.x = _nx;
            a.y = _ny;
            a.z = _nz;
        };
        MathClass.drawbezier = function (_array, _time) {
            var _newarray = new Array();
            if (_array.length == 0) {
                return { x: 0, y: 0, z: 0 };
            }
            for (var i = 0; i < _array.length; i++) {
                _newarray.push({ x: _array[i].x, y: _array[i].y, z: _array[i].z });
            }
            while (_newarray.length > 1) {
                for (var j = 0; j < _newarray.length - 1; j++) {
                    this.mathmidpoint(_newarray[j], _newarray[j + 1], _time);
                }
                _newarray.pop();
            }
            return _newarray[0];
        };
        MathClass.math_distance = function (x1, y1, x2, y2) {
            return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));
        };
        MathClass.math_angle = function (x1, y1, x2, y2) {
            var d_x = x1 - x2;
            var d_y = y1 - y2;
            var z = Math.atan(d_y / d_x) * 180 / Math.PI;
            return z;
        };
        MathClass.easeIn = function (t, b, c, d) {
            return c * (t /= d) * t + b;
        };
        MathClass.easeOut = function (t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
        };
        MathClass.easeInOut = function (t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return c / 2 * t * t + b;
            }
            else {
                return -c / 2 * ((--t) * (t - 2) - 1) + b;
            }
        };
        /**
         * 2D坐标转换成3D坐标，当然要给一个相离镜头的深度
         * @param $stage3DVO 为stage3d的坐标信息
         * @param $point  2d位置是场景的坐标，
         * @param $depht  默认深度为500,
         * @return  3D的坐标
         *
         */
        MathClass.mathDisplay2Dto3DWorldPos = function ($stage3DVO, $point, $depht) {
            if ($depht === void 0) { $depht = 300; }
            var cameraMatrixInvert = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
            var viewMatrx3DInvert = Pan3d.Scene_data.viewMatrx3D.clone();
            cameraMatrixInvert.invert();
            viewMatrx3DInvert.invert();
            var a = new Pan3d.Vector3D();
            a.x = $point.x - $stage3DVO.x;
            a.y = $point.y - $stage3DVO.y;
            a.x = a.x * 2 / $stage3DVO.width - 1;
            a.y = 1 - a.y * 2 / $stage3DVO.height;
            a.w = $depht;
            a.x = a.x * a.w;
            a.y = a.y * a.w;
            a = viewMatrx3DInvert.transformVector(a);
            a.z = $depht;
            a = cameraMatrixInvert.transformVector(a);
            return a;
        };
        MathClass.SetShock = true;
        return MathClass;
    }());
    Pan3d.MathClass = MathClass;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MathClass.js.map
var Pan3d;
(function (Pan3d) {
    var MathUtil = /** @class */ (function () {
        function MathUtil() {
        }
        /**
         * 2D坐标转换成3D坐标，当然要给一个相离镜头的深度
         * @param $point  2d位置是场景的坐标，
         * @param $depht  默认深度为500,
         * @return  3D的坐标
         *
         */
        MathUtil.mathDisplay2Dto3DWorldPos = function ($point, $depht) {
            if ($depht === void 0) { $depht = 300; }
            var $disNum = $depht / (Pan3d.Scene_data.sceneViewHW / 2);
            var $far = Pan3d.Scene_data.sceneViewHW / 2 * $disNum;
            var fovw = Pan3d.Scene_data.stageWidth;
            var fovh = Pan3d.Scene_data.stageHeight;
            var m = new Pan3d.Matrix3D;
            m.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            m.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            var uc = Pan3d.Scene_data.viewMatrx3D.transformVector(new Pan3d.Vector3D(500, 0, 500));
            var zScale = uc.x / uc.w;
            var fw = (fovw / 2 / zScale) * $disNum;
            var fh = (fovh / 2 / zScale) * $disNum;
            var tx = (($point.x / fovw) * fw) * 2;
            var ty = (($point.y / fovh) * fh) * 2;
            var p = this.gettempPos(new Pan3d.Vector3D(-fw + tx, +fh - ty, $far), m);
            return p;
        };
        //计算出鼠标与地面Y为0的坐标点
        MathUtil.getGroundPanelPos = function ($evt) {
            var pos = Pan3d.MathClass.mathDisplay2Dto3DWorldPos(new Pan3d.Rectangle(0, 0, Pan3d.Scene_data.stageWidth, Pan3d.Scene_data.stageHeight), new Pan3d.Vector2D($evt.x, $evt.y), 300);
            var triItem = new Array;
            triItem.push(new Pan3d.Vector3D(0, 0, 0));
            triItem.push(new Pan3d.Vector3D(-100, 0, 100));
            triItem.push(new Pan3d.Vector3D(+100, 0, 100));
            var camPos = new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            return this.getLinePlaneInterectPointByTri(camPos, pos, triItem);
        };
        MathUtil.gettempPos = function (a, m) {
            var b = m.transformVector(a);
            b = b.add(new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z));
            return b;
        };
        //3d坐标转换成场景像素坐标
        MathUtil.math3DWorldtoDisplay2DPos = function ($pos) {
            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
            m.append(Pan3d.Scene_data.viewMatrx3D.clone());
            var fovw = Pan3d.Scene_data.stageWidth;
            var fovh = Pan3d.Scene_data.stageHeight;
            var p = m.transformVector($pos);
            var b = new Pan3d.Vector2D;
            b.x = ((p.x / p.w) + 1) * (fovw / 2);
            b.y = ((-p.y / p.w) + 1) * (fovh / 2);
            return b;
        };
        //计算2D 点到直线的距离
        MathUtil.pointToLine2dDis = function (point1, point2, out) {
            var A = (point1.y - point2.y) / Math.sqrt(Math.pow((point1.y - point2.y), 2) + Math.pow((point1.x - point2.x), 2));
            var B = (point2.x - point1.x) / Math.sqrt(Math.pow((point1.y - point2.y), 2) + Math.pow((point1.x - point2.x), 2));
            var C = (point1.x * point2.y - point2.x * point1.y) / Math.sqrt(Math.pow((point1.y - point2.y), 2) + Math.pow((point1.x - point2.x), 2));
            return Math.abs(A * out.x + B * out.y + C) / Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2));
        };
        MathUtil.argbToHex = function (a, r, g, b) {
            // 转换颜色
            var color = a << 24 | r << 16 | g << 8 | b;
            return color;
        };
        MathUtil.hexToArgb = function (expColor) {
            var color = new Pan3d.Vector3D();
            color.w = (expColor >> 24) & 0xFF;
            color.x = (expColor >> 16) & 0xFF;
            color.y = (expColor >> 8) & 0xFF;
            color.z = (expColor) & 0xFF;
            return color;
        };
        /**
     *
     * @param linePoint_a  线起点
     * @param linePoint_b  线结点
     * @param planePoint  构成面的三个点
     * @return 交点坐标
     *
     */
        MathUtil.getLinePlaneInterectPointByTri = function (linePoint_a, linePoint_b, planePoint) {
            if (planePoint.length < 3)
                return null;
            var nomal = new Pan3d.Vector3D(0, 2000, 0);
            nomal = Pan3d.Vector3D.calTriNormal(planePoint[0], planePoint[1], planePoint[2]);
            return this.getLineAndPlaneIntersectPoint(linePoint_a, linePoint_b, planePoint[0], nomal);
        };
        /**
         * 空间一条射线和平面的交点
         * @param linePoint_a  过直线的一点
         * @param linePoint_b  过直线另一点
         * @param planePoint   过平面一点
         * @param planeNormal  平面的法线
         * @return
         *
         */
        MathUtil.getLineAndPlaneIntersectPoint = function (linePoint_a, linePoint_b, planePoint, planeNormal) {
            var lineVector = new Pan3d.Vector3D(linePoint_a.x - linePoint_b.x, linePoint_a.y - linePoint_b.y, linePoint_a.z - linePoint_b.z);
            lineVector.normalize();
            var pt = lineVector.x * planeNormal.x + lineVector.y * planeNormal.y + lineVector.z * planeNormal.z;
            var t = ((planePoint.x - linePoint_a.x) * planeNormal.x + (planePoint.y - linePoint_a.y) * planeNormal.y + (planePoint.z - linePoint_a.z) * planeNormal.z) / pt;
            var aPro1 = new Pan3d.Vector3D;
            aPro1.setTo(linePoint_a.x + lineVector.x * t, linePoint_a.y + lineVector.y * t, linePoint_a.z + lineVector.z * t);
            return aPro1;
        };
        MathUtil.lookAt = function (eyePos, lookAt) {
            var matr = new Pan3d.Matrix3D();
            matr.buildLookAtLH(eyePos, lookAt, Pan3d.Vector3D.Y_AXIS);
            return matr;
        };
        MathUtil.MathCam = function (_Cam) {
            _Cam.cameraMatrix.identity();
            _Cam.cameraMatrix.prependRotation(_Cam.rotationX, Pan3d.Vector3D.X_AXIS);
            _Cam.cameraMatrix.prependRotation(_Cam.rotationY, Pan3d.Vector3D.Y_AXIS);
            _Cam.cameraMatrix.prependTranslation(-_Cam.x + _Cam.offset.x, -_Cam.y + _Cam.offset.y, -_Cam.z + _Cam.offset.z);
        };
        MathUtil.prototype.getCamData = function (tempMatrix3D) {
            var $Minvert = tempMatrix3D.clone();
            $Minvert.invert();
            var $motherAct = new Pan3d.Object3D;
            $motherAct.x = -$Minvert.position.x;
            $motherAct.y = -$Minvert.position.y;
            $motherAct.z = -$Minvert.position.z;
            return $motherAct;
        };
        return MathUtil;
    }());
    Pan3d.MathUtil = MathUtil;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MathUtil.js.map
var Pan3d;
(function (Pan3d) {
    var Matrix3D = /** @class */ (function () {
        function Matrix3D() {
            this.isIdentity = true;
            var mk = [
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
            this.m = new Float32Array(mk);
        }
        Matrix3D.prototype.clone = function ($target) {
            if ($target === void 0) { $target = null; }
            //var $target: Matrix3D = new Matrix3D;
            if (!$target) {
                $target = new Matrix3D;
            }
            $target.m[0] = this.m[0];
            $target.m[1] = this.m[1];
            $target.m[2] = this.m[2];
            $target.m[3] = this.m[3];
            $target.m[4] = this.m[4];
            $target.m[5] = this.m[5];
            $target.m[6] = this.m[6];
            $target.m[7] = this.m[7];
            $target.m[8] = this.m[8];
            $target.m[9] = this.m[9];
            $target.m[10] = this.m[10];
            $target.m[11] = this.m[11];
            $target.m[12] = this.m[12];
            $target.m[13] = this.m[13];
            $target.m[14] = this.m[14];
            $target.m[15] = this.m[15];
            return $target;
        };
        Object.defineProperty(Matrix3D.prototype, "position", {
            get: function () {
                return new Pan3d.Vector3D(this.m[12], this.m[13], this.m[14], this.m[15]);
            },
            enumerable: true,
            configurable: true
        });
        Matrix3D.prototype.copyTo = function ($target) {
            $target.m[0] = this.m[0];
            $target.m[1] = this.m[1];
            $target.m[2] = this.m[2];
            $target.m[3] = this.m[3];
            $target.m[4] = this.m[4];
            $target.m[5] = this.m[5];
            $target.m[6] = this.m[6];
            $target.m[7] = this.m[7];
            $target.m[8] = this.m[8];
            $target.m[9] = this.m[9];
            $target.m[10] = this.m[10];
            $target.m[11] = this.m[11];
            $target.m[12] = this.m[12];
            $target.m[13] = this.m[13];
            $target.m[14] = this.m[14];
            $target.m[15] = this.m[15];
        };
        Matrix3D.prototype.identity = function () {
            this.m[0] = 1;
            this.m[1] = 0;
            this.m[2] = 0;
            this.m[3] = 0;
            this.m[4] = 0;
            this.m[5] = 1;
            this.m[6] = 0;
            this.m[7] = 0;
            this.m[8] = 0;
            this.m[9] = 0;
            this.m[10] = 1;
            this.m[11] = 0;
            this.m[12] = 0;
            this.m[13] = 0;
            this.m[14] = 0;
            this.m[15] = 1;
        };
        Matrix3D.prototype.invert = function () {
            var a = this.m;
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, 
            // Calculate the determinant
            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            this.m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            this.m[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            this.m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            this.m[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
            this.m[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            this.m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            this.m[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            this.m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
            this.m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            this.m[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            this.m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            this.m[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
            this.m[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
            this.m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
            this.m[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
            this.m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        };
        Matrix3D.prototype.invertToMatrix = function ($target) {
            var a = this.m;
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, 
            // Calculate the determinant
            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            $target.m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            $target.m[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            $target.m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            $target.m[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
            $target.m[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            $target.m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            $target.m[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            $target.m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
            $target.m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            $target.m[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            $target.m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            $target.m[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
            $target.m[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
            $target.m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
            $target.m[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
            $target.m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        };
        Matrix3D.prototype.appendTranslation = function (x, y, z) {
            Matrix3D.tempM.identity();
            Matrix3D.tempM.prependTranslation(x, y, z);
            this.append(Matrix3D.tempM);
        };
        Matrix3D.prototype.prependTranslation = function (x, y, z) {
            var out = this.m;
            out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];
            out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];
            out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];
            out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];
        };
        Matrix3D.prototype.transformVector = function ($p) {
            var out = new Pan3d.Vector3D;
            out.x = this.m[0] * $p.x + this.m[4] * $p.y + this.m[8] * $p.z + this.m[12] * $p.w;
            out.y = this.m[1] * $p.x + this.m[5] * $p.y + this.m[9] * $p.z + this.m[13] * $p.w;
            out.z = this.m[2] * $p.x + this.m[6] * $p.y + this.m[10] * $p.z + this.m[14] * $p.w;
            out.w = this.m[3] * $p.x + this.m[7] * $p.y + this.m[11] * $p.z + this.m[15] * $p.w;
            return out;
        };
        Matrix3D.prototype.append = function ($matrx3d) {
            Matrix3D.tempM.m[0] = $matrx3d.m[0];
            Matrix3D.tempM.m[1] = $matrx3d.m[1];
            Matrix3D.tempM.m[2] = $matrx3d.m[2];
            Matrix3D.tempM.m[3] = $matrx3d.m[3];
            Matrix3D.tempM.m[4] = $matrx3d.m[4];
            Matrix3D.tempM.m[5] = $matrx3d.m[5];
            Matrix3D.tempM.m[6] = $matrx3d.m[6];
            Matrix3D.tempM.m[7] = $matrx3d.m[7];
            Matrix3D.tempM.m[8] = $matrx3d.m[8];
            Matrix3D.tempM.m[9] = $matrx3d.m[9];
            Matrix3D.tempM.m[10] = $matrx3d.m[10];
            Matrix3D.tempM.m[11] = $matrx3d.m[11];
            Matrix3D.tempM.m[12] = $matrx3d.m[12];
            Matrix3D.tempM.m[13] = $matrx3d.m[13];
            Matrix3D.tempM.m[14] = $matrx3d.m[14];
            Matrix3D.tempM.m[15] = $matrx3d.m[15];
            Matrix3D.tempM.prepend(this);
            this.m[0] = Matrix3D.tempM.m[0];
            this.m[1] = Matrix3D.tempM.m[1];
            this.m[2] = Matrix3D.tempM.m[2];
            this.m[3] = Matrix3D.tempM.m[3];
            this.m[4] = Matrix3D.tempM.m[4];
            this.m[5] = Matrix3D.tempM.m[5];
            this.m[6] = Matrix3D.tempM.m[6];
            this.m[7] = Matrix3D.tempM.m[7];
            this.m[8] = Matrix3D.tempM.m[8];
            this.m[9] = Matrix3D.tempM.m[9];
            this.m[10] = Matrix3D.tempM.m[10];
            this.m[11] = Matrix3D.tempM.m[11];
            this.m[12] = Matrix3D.tempM.m[12];
            this.m[13] = Matrix3D.tempM.m[13];
            this.m[14] = Matrix3D.tempM.m[14];
            this.m[15] = Matrix3D.tempM.m[15];
            /*
            var $mat: Matrix3D = $matrx3d.clone();
            $mat.prepend(this);
    
            this.m[0] = $mat.m[0];
            this.m[1] = $mat.m[1];
            this.m[2] = $mat.m[2];
            this.m[3] = $mat.m[3];
            this.m[4] = $mat.m[4];
            this.m[5] = $mat.m[5];
            this.m[6] = $mat.m[6];
            this.m[7] = $mat.m[7];
            this.m[8] = $mat.m[8];
            this.m[9] = $mat.m[9];
            this.m[10] = $mat.m[10];
            this.m[11] = $mat.m[11];
            this.m[12] = $mat.m[12];
            this.m[13] = $mat.m[13];
            this.m[14] = $mat.m[14];
            this.m[15] = $mat.m[15];
            */
        };
        Matrix3D.prototype.prepend = function ($matrx3d) {
            var b = $matrx3d.m;
            var out = this.m;
            var a = this.m;
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
            // Cache only the current line of the second matrix
            var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
            out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[4];
            b1 = b[5];
            b2 = b[6];
            b3 = b[7];
            out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[8];
            b1 = b[9];
            b2 = b[10];
            b3 = b[11];
            out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[12];
            b1 = b[13];
            b2 = b[14];
            b3 = b[15];
            out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        };
        Matrix3D.prototype.appendRotation = function (rad, axis) {
            Matrix3D.tempM.identity();
            Matrix3D.tempM.prependRotation(rad, axis);
            this.append(Matrix3D.tempM);
        };
        Matrix3D.prototype.tomat3 = function () {
            var mk = Array.prototype.concat.apply([], arguments);
            mk = [
                1, 0, 0,
                0, 1, 0,
                0, 0, 1
            ];
            var b = new Float32Array(mk);
            b[0] = this.m[0];
            b[1] = this.m[1];
            b[2] = this.m[2];
            b[3] = this.m[4];
            b[4] = this.m[5];
            b[5] = this.m[6];
            b[6] = this.m[8];
            b[7] = this.m[9];
            b[8] = this.m[10];
            return b;
        };
        Matrix3D.prototype.getRotaionM33 = function (b) {
            b[0] = this.m[0];
            b[1] = this.m[1];
            b[2] = this.m[2];
            b[3] = this.m[4];
            b[4] = this.m[5];
            b[5] = this.m[6];
            b[6] = this.m[8];
            b[7] = this.m[9];
            b[8] = this.m[10];
        };
        Matrix3D.prototype.identityScale = function () {
            /*
                  var M: Matrix3D = new Matrix3D
                  var ro: Vector3D = this.toEulerAngles();
                  M.appendRotation(ro.x , Vector3D.X_AXIS);
                  M.appendRotation(ro.y , Vector3D.Y_AXIS);
                  M.appendRotation(ro.z , Vector3D.Z_AXIS);
                  M.appendTranslation(this.position.x,this.position.y, this.position.z)
                  this.m = M.m;
               */
        };
        Matrix3D.prototype.identityPostion = function () {
            this.m[12] = 0;
            this.m[13] = 0;
            this.m[14] = 0;
        };
        Object.defineProperty(Matrix3D.prototype, "x", {
            get: function () {
                return this.m[12];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3D.prototype, "y", {
            get: function () {
                return this.m[13];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3D.prototype, "z", {
            get: function () {
                return this.m[14];
            },
            enumerable: true,
            configurable: true
        });
        Matrix3D.prototype.prependRotation = function (rad, axis) {
            var out = this.m;
            var a = this.m;
            var x = axis.x, y = axis.y, z = axis.z, len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
            if (Math.abs(len) < 0.000001) {
                return null;
            }
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad * Math.PI / 180);
            c = Math.cos(rad * Math.PI / 180);
            t = 1 - c;
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            // Construct the elements of the rotation matrix
            b00 = x * x * t + c;
            b01 = y * x * t + z * s;
            b02 = z * x * t - y * s;
            b10 = x * y * t - z * s;
            b11 = y * y * t + c;
            b12 = z * y * t + x * s;
            b20 = x * z * t + y * s;
            b21 = y * z * t - x * s;
            b22 = z * z * t + c;
            // Perform rotation-specific matrix multiplication
            out[0] = a00 * b00 + a10 * b01 + a20 * b02;
            out[1] = a01 * b00 + a11 * b01 + a21 * b02;
            out[2] = a02 * b00 + a12 * b01 + a22 * b02;
            out[3] = a03 * b00 + a13 * b01 + a23 * b02;
            out[4] = a00 * b10 + a10 * b11 + a20 * b12;
            out[5] = a01 * b10 + a11 * b11 + a21 * b12;
            out[6] = a02 * b10 + a12 * b11 + a22 * b12;
            out[7] = a03 * b10 + a13 * b11 + a23 * b12;
            out[8] = a00 * b20 + a10 * b21 + a20 * b22;
            out[9] = a01 * b20 + a11 * b21 + a21 * b22;
            out[10] = a02 * b20 + a12 * b21 + a22 * b22;
            out[11] = a03 * b20 + a13 * b21 + a23 * b22;
            if (a !== out) { // If the source and destination differ, copy the unchanged last row
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }
            return out;
        };
        Matrix3D.prototype.prependScale = function (x, y, z) {
            var a = this.m;
            var out = this.m;
            out[0] = a[0] * x;
            out[1] = a[1] * x;
            out[2] = a[2] * x;
            out[3] = a[3] * x;
            out[4] = a[4] * y;
            out[5] = a[5] * y;
            out[6] = a[6] * y;
            out[7] = a[7] * y;
            out[8] = a[8] * z;
            out[9] = a[9] * z;
            out[10] = a[10] * z;
            out[11] = a[11] * z;
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out;
        };
        ;
        Matrix3D.prototype.appendScale = function (x, y, z) {
            Matrix3D.tempM.identity();
            Matrix3D.tempM.prependScale(x, y, z);
            this.append(Matrix3D.tempM);
        };
        Matrix3D.prototype.perspectiveFieldOfViewLH = function (fieldOfViewY, aspectRatio, zNear, zFar) {
            var yScale = 1.0 / Math.tan(fieldOfViewY / 2.0);
            var xScale = yScale / aspectRatio;
            var out = this.m;
            out[0] = xScale;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = yScale;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = zFar / (zFar - zNear);
            out[11] = 1;
            out[12] = 0;
            out[13] = 0;
            out[14] = (zNear * zFar) / (zNear - zFar);
            out[15] = 0;
            /*
              public function perspectiveFieldOfViewLH(fieldOfViewY:Number,
                                                     aspectRatio:Number,
                                                     zNear:Number,
                                                     zFar:Number):void {
                var yScale:Number = 1.0/Math.tan(fieldOfViewY/2.0);
                var xScale:Number = yScale / aspectRatio;
                this.copyRawDataFrom(Vector.<Number>([
                    xScale, 0.0, 0.0, 0.0,
                    0.0, yScale, 0.0, 0.0,
                    0.0, 0.0, zFar/(zFar-zNear), 1.0,
                    0.0, 0.0, (zNear*zFar)/(zNear-zFar), 0.0
                ]));
            }
    
            */
        };
        Matrix3D.prototype.fromVtoV = function ($basePos, $newPos) {
            var axis = $basePos.cross($newPos);
            axis.normalize();
            var angle = Math.acos($basePos.dot($newPos));
            var q = new Pan3d.Quaternion();
            q.fromAxisAngle(axis, angle);
            q.toMatrix3D(this);
        };
        Matrix3D.prototype.buildLookAtLH = function (eyePos, lookAt, up) {
            var out = this.m;
            var zaxis = new Pan3d.Vector3D;
            zaxis.x = lookAt.x - eyePos.x;
            zaxis.y = lookAt.y - eyePos.y;
            zaxis.z = lookAt.z - eyePos.z;
            zaxis.normalize();
            var xaxis = up.cross(zaxis);
            xaxis.normalize();
            var yaxis = zaxis.cross(xaxis);
            out[0] = xaxis.x;
            out[1] = yaxis.x;
            out[2] = zaxis.x;
            out[3] = 0.0;
            out[4] = xaxis.y;
            out[5] = yaxis.y;
            out[6] = zaxis.y;
            out[7] = 0.0;
            out[8] = xaxis.z;
            out[9] = yaxis.z;
            out[10] = zaxis.z;
            out[11] = 0.0;
            out[12] = -xaxis.dot(eyePos);
            out[13] = -yaxis.dot(eyePos);
            out[14] = -zaxis.dot(eyePos);
            out[15] = 1.0;
        };
        Matrix3D.mul = function (a, b, c) {
            var d = b[0], e = b[1], f = b[2], g = b[3], h = b[4], k = b[5], l = b[6], m = b[7], n = b[8], r = b[9], p = b[10], q = b[11], u = b[12], s = b[13], z = b[14];
            b = b[15];
            var t = c[0], v = c[1], w = c[2], x = c[3];
            a[0] = t * d + v * h + w * n + x * u;
            a[1] = t * e + v * k + w * r + x * s;
            a[2] = t * f + v * l + w * p + x * z;
            a[3] = t * g + v * m + w * q + x * b;
            t = c[4];
            v = c[5];
            w = c[6];
            x = c[7];
            a[4] = t * d + v * h + w * n + x * u;
            a[5] = t * e + v * k + w * r + x * s;
            a[6] = t * f + v * l + w * p + x * z;
            a[7] = t * g + v * m + w * q + x * b;
            t = c[8];
            v = c[9];
            w = c[10];
            x = c[11];
            a[8] = t * d + v * h + w * n + x * u;
            a[9] = t * e + v * k + w * r + x * s;
            a[10] = t * f + v * l + w * p + x * z;
            a[11] =
                t * g + v * m + w * q + x * b;
            t = c[12];
            v = c[13];
            w = c[14];
            x = c[15];
            a[12] = t * d + v * h + w * n + x * u;
            a[13] = t * e + v * k + w * r + x * s;
            a[14] = t * f + v * l + w * p + x * z;
            a[15] = t * g + v * m + w * q + x * b;
            return a;
        };
        Matrix3D.prototype.toEulerAngles = function () {
            var $q = new Pan3d.Quaternion();
            $q.fromMatrix(this);
            var v3d = $q.toEulerAngles();
            v3d.scaleBy(180 / Math.PI);
            return v3d;
        };
        Matrix3D.prototype.getRotationing = function () {
            var out = [0, 0, 0, 0];
            var scaling = this.getScaling();
            var is1 = 1 / scaling.x;
            var is2 = 1 / scaling.y;
            var is3 = 1 / scaling.z;
            var sm11 = this.m[0] * is1;
            var sm12 = this.m[1] * is2;
            var sm13 = this.m[2] * is3;
            var sm21 = this.m[4] * is1;
            var sm22 = this.m[5] * is2;
            var sm23 = this.m[6] * is3;
            var sm31 = this.m[8] * is1;
            var sm32 = this.m[9] * is2;
            var sm33 = this.m[10] * is3;
            var ccav = sm11 + sm22 + sm33;
            var S = 0;
            if (ccav > 0) {
                S = Math.sqrt(ccav + 1.0) * 2;
                out[3] = 0.25 * S;
                out[0] = (sm23 - sm32) / S;
                out[1] = (sm31 - sm13) / S;
                out[2] = (sm12 - sm21) / S;
            }
            else if ((sm11 > sm22) && (sm11 > sm33)) {
                S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
                out[3] = (sm23 - sm32) / S;
                out[0] = 0.25 * S;
                out[1] = (sm12 + sm21) / S;
                out[2] = (sm31 + sm13) / S;
            }
            else if (sm22 > sm33) {
                S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
                out[3] = (sm31 - sm13) / S;
                out[0] = (sm12 + sm21) / S;
                out[1] = 0.25 * S;
                out[2] = (sm23 + sm32) / S;
            }
            else {
                S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
                out[3] = (sm12 - sm21) / S;
                out[0] = (sm31 + sm13) / S;
                out[1] = (sm23 + sm32) / S;
                out[2] = 0.25 * S;
            }
            return new Pan3d.Vector3D(out[0], out[1], out[2], out[3]);
        };
        Matrix3D.prototype.getScaling = function () {
            //   http://glmatrix.net/
            var m11 = this.m[0];
            var m12 = this.m[1];
            var m13 = this.m[2];
            var m21 = this.m[4];
            var m22 = this.m[5];
            var m23 = this.m[6];
            var m31 = this.m[8];
            var m32 = this.m[9];
            var m33 = this.m[10];
            var a = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
            var b = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
            var c = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
            return new Pan3d.Vector3D(a, b, c);
        };
        Matrix3D.tempM = new Matrix3D();
        return Matrix3D;
    }());
    Pan3d.Matrix3D = Matrix3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Matrix3D.js.map
var Pan3d;
(function (Pan3d) {
    var Quaternion = /** @class */ (function () {
        function Quaternion($x, $y, $z, $w) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($z === void 0) { $z = 0; }
            if ($w === void 0) { $w = 1; }
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.w = 1;
            this.x = $x;
            this.y = $y;
            this.z = $z;
            this.w = $w;
        }
        Quaternion.prototype.print = function () {
            alert(String(this.x) + " " + String(this.y) + " " + String(this.z) + " " + String(this.w));
        };
        Quaternion.prototype.toEulerAngles = function (target) {
            if (target === void 0) { target = null; }
            if (!target) {
                target = new Pan3d.Vector3D;
            }
            var x = this.x, y = this.y, z = this.z, w = this.w;
            target.x = Math.atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y));
            target.y = Math.asin(2 * (w * y - z * x));
            target.z = Math.atan2(2 * (w * z + x * y), 1 - 2 * (y * y + z * z));
            return target;
        };
        Quaternion.prototype.toMatrix3D = function ($matrix3d) {
            if ($matrix3d === void 0) { $matrix3d = null; }
            if (!$matrix3d) {
                $matrix3d = new Pan3d.Matrix3D;
            }
            var out = $matrix3d.m;
            var x = this.x, y = this.y, z = this.z, w = this.w, x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
            out[0] = 1 - yy - zz;
            out[1] = yx + wz;
            out[2] = zx - wy;
            out[3] = 0;
            out[4] = yx - wz;
            out[5] = 1 - xx - zz;
            out[6] = zy + wx;
            out[7] = 0;
            out[8] = zx + wy;
            out[9] = zy - wx;
            out[10] = 1 - xx - yy;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return $matrix3d;
        };
        Quaternion.prototype.fromAxisAngle = function (axis, angle) {
            var sin_a = Math.sin(angle / 2);
            var cos_a = Math.cos(angle / 2);
            this.x = axis.x * sin_a;
            this.y = axis.y * sin_a;
            this.z = axis.z * sin_a;
            this.w = cos_a;
            this.normalize();
        };
        Quaternion.prototype.normalize = function (val) {
            if (val === void 0) { val = 1; }
            var mag = val / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
            this.x *= mag;
            this.y *= mag;
            this.z *= mag;
            this.w *= mag;
        };
        Quaternion.prototype.fromMatrix = function ($matrix) {
            var m = [0, 0, 0, 0, 0, 0, 0, 0, 0];
            m[0] = $matrix.m[0];
            m[1] = $matrix.m[1];
            m[2] = $matrix.m[2];
            m[3] = $matrix.m[4];
            m[4] = $matrix.m[5];
            m[5] = $matrix.m[6];
            m[6] = $matrix.m[8];
            m[7] = $matrix.m[9];
            m[8] = $matrix.m[10];
            var fTrace = m[0] + m[4] + m[8];
            var fRoot;
            var out = [0, 0, 0, 0];
            if (fTrace > 0.0) {
                // |w| > 1/2, may as well choose w > 1/2
                fRoot = Math.sqrt(fTrace + 1.0); // 2w
                out[3] = 0.5 * fRoot;
                fRoot = 0.5 / fRoot; // 1/(4w)
                out[0] = (m[5] - m[7]) * fRoot;
                out[1] = (m[6] - m[2]) * fRoot;
                out[2] = (m[1] - m[3]) * fRoot;
            }
            else {
                // |w| <= 1/2
                var i = 0;
                if (m[4] > m[0])
                    i = 1;
                if (m[8] > m[i * 3 + i])
                    i = 2;
                var j = (i + 1) % 3;
                var k = (i + 2) % 3;
                fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                out[i] = 0.5 * fRoot;
                fRoot = 0.5 / fRoot;
                out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
            }
            this.x = out[0];
            this.y = out[1];
            this.z = out[2];
            this.w = out[3];
        };
        Quaternion.prototype.setMd5W = function () {
            this.w = 1 - (this.x * this.x + this.y * this.y + this.z * this.z);
            if (this.w < 0) {
                this.w = 0;
            }
            else {
                this.w = -Math.sqrt(this.w);
            }
        };
        Quaternion.prototype.slerp = function (qa, qb, t) {
            var w1 = qa.w, x1 = qa.x, y1 = qa.y, z1 = qa.z;
            var w2 = qb.w, x2 = qb.x, y2 = qb.y, z2 = qb.z;
            var dot = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;
            // shortest direction
            if (dot < 0) {
                dot = -dot;
                w2 = -w2;
                x2 = -x2;
                y2 = -y2;
                z2 = -z2;
            }
            if (dot < 0.95) {
                // interpolate angle linearly
                var angle = Math.acos(dot);
                var s = 1 / Math.sin(angle);
                var s1 = Math.sin(angle * (1 - t)) * s;
                var s2 = Math.sin(angle * t) * s;
                this.w = w1 * s1 + w2 * s2;
                this.x = x1 * s1 + x2 * s2;
                this.y = y1 * s1 + y2 * s2;
                this.z = z1 * s1 + z2 * s2;
            }
            else {
                // nearly identical angle, interpolate linearly
                this.w = w1 + t * (w2 - w1);
                this.x = x1 + t * (x2 - x1);
                this.y = y1 + t * (y2 - y1);
                this.z = z1 + t * (z2 - z1);
                var len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
                this.w *= len;
                this.x *= len;
                this.y *= len;
                this.z *= len;
            }
        };
        return Quaternion;
    }());
    Pan3d.Quaternion = Quaternion;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Quaternion.js.map
var Pan3d;
(function (Pan3d) {
    var Vector3D = /** @class */ (function () {
        function Vector3D($x, $y, $z, $w) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($z === void 0) { $z = 0; }
            if ($w === void 0) { $w = 1; }
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.w = 1;
            this.x = $x;
            this.y = $y;
            this.z = $z;
            this.w = $w;
        }
        Vector3D.prototype.normalize = function () {
            var le = this.length;
            if (le == 0) {
                return;
            }
            this.scaleBy(1 / le);
        };
        Object.defineProperty(Vector3D.prototype, "length", {
            get: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            },
            enumerable: true,
            configurable: true
        });
        Vector3D.prototype.scaleBy = function (value) {
            this.x *= value;
            this.y *= value;
            this.z *= value;
            this.w *= value;
        };
        Vector3D.prototype.divideScalar = function (value) {
            if (value != 0) {
                this.x = this.x / value;
                this.y = this.y / value;
                this.z = this.z / value;
            }
            else {
                this.x = 0;
                this.y = 0;
                this.z = 0;
            }
        };
        Vector3D.prototype.distanceToSquared = function (v) {
            return Vector3D.distance(this, v);
        };
        Vector3D.prototype.scaleByW = function () {
            this.x *= this.w;
            this.y *= this.w;
            this.z *= this.w;
        };
        Vector3D.prototype.add = function (value) {
            return new Vector3D(this.x + value.x, this.y + value.y, this.z + value.z);
        };
        Vector3D.prototype.subtract = function (value) {
            return new Vector3D(this.x - value.x, this.y - value.y, this.z - value.z);
        };
        Vector3D.prototype.addByNum = function ($x, $y, $z, $w) {
            if ($w === void 0) { $w = 0; }
            this.x += $x;
            this.y += $y;
            this.z += $z;
            this.w += $w;
        };
        Vector3D.prototype.setTo = function ($x, $y, $z) {
            this.x = $x;
            this.y = $y;
            this.z = $z;
        };
        Vector3D.prototype.setByte = function (byte) {
            this.x = byte.readFloat();
            this.y = byte.readFloat();
            this.z = byte.readFloat();
        };
        Vector3D.prototype.cross = function (value) {
            return new Vector3D(this.y * value.z - this.z * value.y, this.z * value.x - this.x * value.z, this.x * value.y - this.y * value.x);
        };
        Vector3D.prototype.dot = function (value) {
            return this.x * value.x + this.y * value.y + this.z * value.z;
        };
        Vector3D.prototype.clone = function () {
            return new Vector3D(this.x, this.y, this.z);
        };
        Vector3D.distance = function (v1, v2) {
            var x1 = v1.x - v2.x;
            var y1 = v1.y - v2.y;
            var z1 = v1.z - v2.z;
            return Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
        };
        Vector3D.prototype.toString = function () {
            return "Vector3D(" + String(this.x) + "," + String(this.y) + "," + String(this.z) + "," + String(this.w) + ")";
        };
        Vector3D.dotMulVector = function (a, b) {
            return a.x * b.x + a.y * b.y + a.z * b.z;
        };
        Vector3D.getNrmByTwoVect = function (v0, v1) {
            var nrm3d = v1.subtract(v0);
            nrm3d.normalize();
            return nrm3d;
        };
        Vector3D.calTriNormal = function (v0, v1, v2, isNormallize) {
            if (isNormallize === void 0) { isNormallize = false; }
            var p1 = v1.subtract(v0);
            var p2 = v2.subtract(v1);
            var nrmVec = p1.cross(p2);
            if (isNormallize) {
                nrmVec.normalize();
            }
            return nrmVec;
        };
        /**
         *  根据三个点确定的平面球 另外一点在面的垂足
         * @param targetPoint
         * @param a
         * @param b
         * @param c
         * @return
         *
         */
        Vector3D.getPointPedalInPlane = function (targetPoint, a, b, c) {
            var planeNomal = this.calTriNormal(a, b, c, true);
            var plane = [];
            plane.push(a, b, c);
            return this.getProjPosition(planeNomal, targetPoint, plane);
        };
        /**
         * p点在三角形b确定的平面内的投影坐标点
         * @param bNomal
         * @param p
         * @param b
         * @return
         *
         */
        Vector3D.getProjPosition = function (bNomal, targetPoint, bTriPlane) {
            var checkPoint = targetPoint;
            var pedal = (bNomal.x * (bTriPlane[0].x - checkPoint.x) + bNomal.y * (bTriPlane[0].y - checkPoint.y) + bNomal.z * (bTriPlane[0].z - checkPoint.z)) / (bNomal.x * bNomal.x + bNomal.y * bNomal.y + bNomal.z * bNomal.z);
            var pedalVector3d = new Vector3D(checkPoint.x + pedal * bNomal.x, checkPoint.y + pedal * bNomal.y, checkPoint.z + pedal * bNomal.z);
            return pedalVector3d;
        };
        Vector3D.X_AXIS = new Vector3D(1, 0, 0);
        Vector3D.Y_AXIS = new Vector3D(0, 1, 0);
        Vector3D.Z_AXIS = new Vector3D(0, 0, 1);
        return Vector3D;
    }());
    Pan3d.Vector3D = Vector3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Vector3D.js.map
var Pan3d;
(function (Pan3d) {
    var Vector2D = /** @class */ (function () {
        function Vector2D($x, $y) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            this.x = 0;
            this.y = 0;
            this.x = $x;
            this.y = $y;
        }
        Vector2D.prototype.normalize = function () {
            var le = this.length;
            if (le == 0) {
                return;
            }
            this.scaleBy(1 / le);
        };
        Object.defineProperty(Vector2D.prototype, "length", {
            get: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            },
            enumerable: true,
            configurable: true
        });
        Vector2D.prototype.scaleBy = function (value) {
            this.x *= value;
            this.y *= value;
        };
        Vector2D.prototype.sub = function (val) {
            return new Vector2D(val.x - this.x, val.y - this.y);
        };
        Vector2D.prototype.add = function (val) {
            return new Vector2D(val.x + this.x, val.y + this.y);
        };
        Vector2D.prototype.toString = function () {
            return "Vector2D(" + String(this.x) + "," + String(this.y) + ")";
        };
        Vector2D.distance = function (p1, p2) {
            var xx = p1.x - p2.x;
            var yy = p1.y - p2.y;
            return Math.sqrt(xx * xx + yy * yy);
        };
        Vector2D.prototype.subtract = function (value) {
            return new Vector2D(this.x - value.x, this.y - value.y);
        };
        return Vector2D;
    }());
    Pan3d.Vector2D = Vector2D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Vector2D.js.map
var Pan3d;
(function (Pan3d) {
    var Rectangle = /** @class */ (function () {
        function Rectangle($x, $y, $width, $height) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($width === void 0) { $width = 1; }
            if ($height === void 0) { $height = 1; }
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 1;
            this.x = $x;
            this.y = $y;
            this.width = $width;
            this.height = $height;
        }
        Rectangle.prototype.clone = function () {
            return new Rectangle(this.x, this.y, this.width, this.height);
        };
        Rectangle.prototype.sets = function ($x, $y, $width, $height) {
            this.x = $x;
            this.y = $y;
            this.width = $width;
            this.height = $height;
        };
        Rectangle.prototype.setRec = function ($rec) {
            this.x = $rec.x;
            this.y = $rec.y;
            this.width = $rec.width;
            this.height = $rec.height;
        };
        Rectangle.prototype.isHitByPoint = function (tx, ty) {
            return (tx >= this.x && ty >= this.y && tx <= this.x + this.width && ty <= this.y + this.height);
        };
        return Rectangle;
    }());
    Pan3d.Rectangle = Rectangle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Rectangle.js.map
var Pan3d;
(function (Pan3d) {
    var Circle = /** @class */ (function () {
        function Circle($x, $y, $radius) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($radius === void 0) { $radius = 0; }
            this.setData($x, $y, $radius);
        }
        Circle.prototype.setData = function ($x, $y, $radius) {
            this.x = $x;
            this.y = $y;
            this.radius = $radius;
        };
        Circle.prototype.setPos = function ($x, $y) {
            this.x = $x;
            this.y = $y;
        };
        Object.defineProperty(Circle.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Circle.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Circle.prototype.setRadius = function ($radius) {
            this.radius = $radius;
        };
        Circle.prototype.testPoint = function ($point) {
            var xx = this.x - $point.x;
            var yy = this.y - $point.y;
            return Math.sqrt(xx * xx + yy * yy) < this.radius;
        };
        return Circle;
    }());
    Pan3d.Circle = Circle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Circle.js.map
var Pan3d;
(function (Pan3d) {
    var Groundposition = /** @class */ (function () {
        function Groundposition() {
        }
        Groundposition.getGroundPos = function ($x, $y) {
            var $ty = -500;
            if (!this._plantObjectMath) {
                var A = new Pan3d.Vector3D(0, $ty, 500);
                var B = new Pan3d.Vector3D(-500, $ty, 0);
                var C = new Pan3d.Vector3D(500, $ty, 0);
                this._plantObjectMath = Pan3d.Calculation._PanelEquationFromThreePt(A, B, C);
                this._plantnormal = new Pan3d.Vector3D(this._plantObjectMath.a, this._plantObjectMath.b, this._plantObjectMath.c);
                this._plantnormal.normalize();
                this._plane_a = new Pan3d.Vector3D(A.x, A.y, A.z);
            }
            //计算直线与平面交点
            var line_a = Pan3d.MathUtil.mathDisplay2Dto3DWorldPos(new Pan3d.Vector2D($x, $y), 500);
            var line_b = new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            var crossPoint = Pan3d.Calculation.calPlaneLineIntersectPoint(this._plantnormal, this._plane_a, line_a, line_b);
            return crossPoint;
        };
        return Groundposition;
    }());
    Pan3d.Groundposition = Groundposition;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Groundposition.js.map
var Pan3d;
(function (Pan3d) {
    var ObjectMath = /** @class */ (function () {
        function ObjectMath() {
            this.a = 0;
            this.b = 0;
            this.c = 0;
            this.d = 0;
        }
        return ObjectMath;
    }());
    Pan3d.ObjectMath = ObjectMath;
    var Calculation = /** @class */ (function () {
        function Calculation() {
        }
        Calculation._PanelEquationFromThreePt = function (p1, p2, p3) {
            //得到平面方程 ax+by+cz+d=0(传入三个点,返回平面方程a,b,c,d);
            var a = ((p2.y - p1.y) * (p3.z - p1.z) - (p2.z - p1.z) * (p3.y - p1.y));
            var b = ((p2.z - p1.z) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.z - p1.z));
            var c = ((p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x));
            var d = (0 - (a * p1.x + b * p1.y + c * p1.z));
            var tempObjectMath = new ObjectMath;
            tempObjectMath.a = a;
            tempObjectMath.b = b;
            tempObjectMath.c = c;
            tempObjectMath.d = d;
            return tempObjectMath;
        };
        Calculation.calPlaneLineIntersectPoint = function (planeVector, planePoint, linePointA, linePointB) {
            var ret = new Pan3d.Vector3D();
            var vp1 = planeVector.x;
            var vp2 = planeVector.y;
            var vp3 = planeVector.z;
            var n1 = planePoint.x;
            var n2 = planePoint.y;
            var n3 = planePoint.z;
            var v1 = linePointA.x - linePointB.x;
            var v2 = linePointA.y - linePointB.y;
            var v3 = linePointA.z - linePointB.z;
            var m1 = linePointB.x;
            var m2 = linePointB.y;
            var m3 = linePointB.z;
            var vpt = v1 * vp1 + v2 * vp2 + v3 * vp3;
            //首先判断直线是否与平面平行
            if (vpt == 0) {
                return null;
            }
            else {
                var t = ((n1 - m1) * vp1 + (n2 - m2) * vp2 + (n3 - m3) * vp3) / vpt;
                ret.x = m1 + v1 * t;
                ret.y = m2 + v2 * t;
                ret.z = m3 + v3 * t;
            }
            return ret;
        };
        return Calculation;
    }());
    Pan3d.Calculation = Calculation;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Calculation.js.map
/**
 * Endian 类中包含一些值，它们表示用于表示多字节数字的字节顺序。
 * 字节顺序为 bigEndian（最高有效字节位于最前）或 littleEndian（最低有效字节位于最前）。
 * @class egret.Endian
 * @classdesc
 */
var Pan3d;
(function (Pan3d) {
    var Endian = /** @class */ (function () {
        function Endian() {
        }
        /**
         * 表示多字节数字的最低有效字节位于字节序列的最前面。
         * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
         * @constant {string} egret.Endian.LITTLE_ENDIAN
         */
        Endian.LITTLE_ENDIAN = "littleEndian";
        /**
         * 表示多字节数字的最高有效字节位于字节序列的最前面。
         * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
         * @constant {string} egret.Endian.BIG_ENDIAN
         */
        Endian.BIG_ENDIAN = "bigEndian";
        return Endian;
    }());
    Pan3d.Endian = Endian;
    /**
     * @class ByteArray
     * @classdesc
     * ByteArray 类提供用于优化读取、写入以及处理二进制数据的方法和属性。
     * 注意：ByteArray 类适用于需要在字节层访问数据的高级 开发人员。
     */
    var Pan3dByteArray = /** @class */ (function () {
        /**
         * 创建一个 ByteArray 对象以引用指定的 ArrayBuffer 对象
         * @param buffer {ArrayBuffer} 数据源
         */
        function Pan3dByteArray(buffer) {
            this.BUFFER_EXT_SIZE = 0; //Buffer expansion size
            this.optcode = 0;
            this.EOF_byte = -1;
            this.EOF_code_point = -1;
            this._setArrayBuffer(buffer || new ArrayBuffer(this.BUFFER_EXT_SIZE));
            this.endian = Endian.BIG_ENDIAN;
        }
        Pan3dByteArray.prototype._setArrayBuffer = function (buffer) {
            this.write_position = buffer.byteLength;
            this.data = new DataView(buffer);
            this._position = 0;
        };
        Pan3dByteArray.prototype.setdata = function (srcByte) {
            this._setArrayBuffer(srcByte.buffer);
        };
        Object.defineProperty(Pan3dByteArray.prototype, "buffer", {
            get: function () {
                return this.data.buffer;
            },
            /**
             * @private
             */
            set: function (value) {
                this.data = new DataView(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pan3dByteArray.prototype, "dataView", {
            get: function () {
                return this.data;
            },
            /**
             * @private
             */
            set: function (value) {
                this.data = value;
                this.write_position = value.byteLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pan3dByteArray.prototype, "bufferOffset", {
            /**
             * @private
             */
            get: function () {
                return this.data.byteOffset;
            },
            enumerable: true,
            configurable: true
        });
        Pan3dByteArray.prototype.getByte = function (i) {
            return this.data.getUint8(i);
        };
        Pan3dByteArray.prototype.setByte = function (i, num) {
            this.data.setUint8(i, num);
        };
        Object.defineProperty(Pan3dByteArray.prototype, "position", {
            /**
             * 将文件指针的当前位置（以字节为单位）移动或返回到 ByteArray 对象中。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
             * @member {number} ByteArray#position
             */
            get: function () {
                return this._position;
            },
            set: function (value) {
                //if (this._position < value) {
                //    if (!this.validate(value - this._position)) {
                //        return;
                //    }
                //}
                this._position = value;
                this.write_position = value > this.write_position ? value : this.write_position;
            },
            enumerable: true,
            configurable: true
        });
        Pan3dByteArray.prototype.reset = function () {
            this.clear();
        };
        Object.defineProperty(Pan3dByteArray.prototype, "length", {
            /**
             * ByteArray 对象的长度（以字节为单位）。
             * 如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧。
             * 如果将长度设置为小于当前长度的值，将会截断该字节数组。
             * @member {number} ByteArray#length
             */
            get: function () {
                return this.write_position;
            },
            set: function (value) {
                this.validateBuffer(value, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pan3dByteArray.prototype, "bytesAvailable", {
            /**
             * 可从字节数组的当前位置到数组末尾读取的数据的字节数。
             * 每次访问 ByteArray 对象时，将 bytesAvailable 属性与读取方法结合使用，以确保读取有效的数据。
             * @member {number} ByteArray#bytesAvailable
             */
            get: function () {
                return this.data.byteLength - this._position;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 清除字节数组的内容，并将 length 和 position 属性重置为 0。
         * @method ByteArray#clear
         */
        Pan3dByteArray.prototype.clear = function () {
            this._setArrayBuffer(new ArrayBuffer(this.BUFFER_EXT_SIZE));
        };
        //public getArray():Uint8Array {
        //    if (this.array == null) {
        //        this.array = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);
        //    }
        //    return this.array;
        //}
        /**
         * 从字节流中读取布尔值。读取单个字节，如果字节非零，则返回 true，否则返回 false
         * @return 如果字节不为零，则返回 true，否则返回 false
         * @method ByteArray#readBoolean
         */
        Pan3dByteArray.prototype.readBoolean = function () {
            //if (!this.validate(ByteArray.SIZE_OF_BOOLEAN)) return null;
            return this.data.getUint8(this.position++) != 0;
        };
        /**
         * 从字节流中读取带符号的字节
         * @return 介于 -128 和 127 之间的整数
         * @method ByteArray#readByte
         */
        Pan3dByteArray.prototype.readByte = function () {
            //if (!this.validate(ByteArray.SIZE_OF_INT8)) return null;
            return this.data.getInt8(this.position++);
        };
        /**
         * 从字节流中读取 length 参数指定的数据字节数。从 offset 指定的位置开始，将字节读入 bytes 参数指定的 ByteArray 对象中，并将字节写入目标 ByteArray 中
         * @param bytes 要将数据读入的 ByteArray 对象
         * @param offset bytes 中的偏移（位置），应从该位置写入读取的数据
         * @param length 要读取的字节数。默认值 0 导致读取所有可用的数据
         * @method ByteArray#readBytes
         */
        Pan3dByteArray.prototype.readBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            //if (length == 0) {
            //    length = this.bytesAvailable;
            //}
            //else if (!this.validate(length)) {
            //    return null;
            //}
            //if (bytes) {
            //    bytes.validateBuffer(length);
            //}
            //else {
            //    bytes = new ByteArray(new ArrayBuffer(length));
            //}
            //This method is expensive
            for (var i = 0; i < length; i++) {
                bytes.data.setUint8(i + offset, this.data.getUint8(this.position++));
            }
        };
        //public get leftBytes():ArrayBuffer {
        //    var begin = this.data.byteOffset + this.position;
        //    var end = this.data.byteLength;
        //    var result = new ArrayBuffer(end - begin);
        //    var resultBytes = new Uint8Array(result);
        //    var sourceBytes = new Uint8Array(this.data.buffer, begin, end - begin);
        //    resultBytes.set(sourceBytes);
        //    return resultBytes.buffer;
        //}
        /**
         * 从字节流中读取一个 IEEE 754 双精度（64 位）浮点数
         * @return 双精度（64 位）浮点数
         * @method ByteArray#readDouble
         */
        Pan3dByteArray.prototype.readDouble = function () {
            //if (!this.validate(ByteArray.SIZE_OF_FLOAT64)) return null;
            var value = this.data.getFloat64(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_FLOAT64;
            return value;
        };
        /**
         * 从字节流中读取一个 IEEE 754 单精度（32 位）浮点数
         * @return 单精度（32 位）浮点数
         * @method ByteArray#readFloat
         */
        Pan3dByteArray.prototype.readFloat = function () {
            //if (!this.validate(ByteArray.SIZE_OF_FLOAT32)) return null;
            var value = this.data.getFloat32(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_FLOAT32;
            return value;
        };
        /**
         * 从字节流中读取一个带符号的 32 位整数
         * @return 介于 -2147483648 和 2147483647 之间的 32 位带符号整数
         * @method ByteArray#readFloat
         */
        Pan3dByteArray.prototype.readInt = function () {
            //if (!this.validate(ByteArray.SIZE_OF_INT32)) return null;
            var value = this.data.getInt32(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_INT32;
            return value;
        };
        Pan3dByteArray.prototype.getInt = function () {
            var value = this.data.getInt32(this.position, this.endian == Endian.LITTLE_ENDIAN);
            return value;
        };
        Pan3dByteArray.prototype.readInt32 = function () {
            return this.readInt();
        };
        //        public readInt64():Int64{
        //            if (!this.validate(ByteArray.SIZE_OF_UINT32)) return null;
        //
        //            var low = this.data.getInt32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        //            this.position += ByteArray.SIZE_OF_INT32;
        //            var high = this.data.getInt32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        //            this.position += ByteArray.SIZE_OF_INT32;
        //            return new Int64(low,high);
        //        }
        /**
         * 使用指定的字符集从字节流中读取指定长度的多字节字符串
         * @param length 要从字节流中读取的字节数
         * @param charSet 表示用于解释字节的字符集的字符串。可能的字符集字符串包括 "shift-jis"、"cn-gb"、"iso-8859-1"”等
         * @return UTF-8 编码的字符串
         * @method ByteArray#readMultiByte
         */
        //public readMultiByte(length:number, charSet?:string):string {
        //    if (!this.validate(length)) return null;
        //
        //    return "";
        //}
        /**
         * 从字节流中读取一个带符号的 16 位整数
         * @return 介于 -32768 和 32767 之间的 16 位带符号整数
         * @method ByteArray#readShort
         */
        Pan3dByteArray.prototype.readShort = function () {
            //if (!this.validate(ByteArray.SIZE_OF_INT16)) return null;
            if (this.position >= this.data.byteLength) {
                //console.log("readShort")
            }
            var value = this.data.getInt16(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_INT16;
            return value;
        };
        //自己添加的读无符号短整行2个字节 Pan
        Pan3dByteArray.prototype.readFloatTwoByte = function ($scaleNum) {
            return this.readShort() / $scaleNum;
            // return (this.readByte() * 127 + this.readByte()) / $scaleNum
        };
        //自己添加的读无符号短整行1个字节 lyf
        Pan3dByteArray.prototype.readFloatOneByte = function () {
            return (this.readByte() + 128) / 256;
        };
        /**
         * 从字节流中读取无符号的字节
         * @return 介于 0 和 255 之间的 32 位无符号整数
         * @method ByteArray#readUnsignedByte
         */
        Pan3dByteArray.prototype.readUnsignedByte = function () {
            //if (!this.validate(ByteArray.SIZE_OF_UINT8)) return null;
            return this.data.getUint8(this.position++);
        };
        Pan3dByteArray.prototype.readUint8 = function () {
            return this.readUnsignedByte();
        };
        Pan3dByteArray.prototype.readInt8 = function () {
            return this.readByte();
        };
        /**
         * 从字节流中读取一个无符号的 32 位整数
         * @return 介于 0 和 4294967295 之间的 32 位无符号整数
         * @method ByteArray#readUnsignedInt
         */
        Pan3dByteArray.prototype.readUnsignedInt = function () {
            //if (!this.validate(ByteArray.SIZE_OF_UINT32)) return null;
            var value = this.data.getUint32(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_UINT32;
            return value;
        };
        Pan3dByteArray.prototype.readUint32 = function () {
            return this.readUnsignedInt();
        };
        Pan3dByteArray.prototype.readUint64 = function () {
            return this.readDouble();
        };
        //public readVariableSizedUnsignedInt():number {
        //    var i:number;
        //    var c:number = this.data.getUint8(this.position++);
        //    if (c != 0xFF) {
        //        i = c << 8;
        //        c = this.data.getUint8(this.position++);
        //        i |= c;
        //    }
        //    else {
        //        c = this.data.getUint8(this.position++);
        //        i = c << 16;
        //        c = this.data.getUint8(this.position++);
        //        i |= c << 8;
        //        c = this.data.getUint8(this.position++);
        //        i |= c;
        //    }
        //    return i;
        //}
        //		public readUnsignedInt64():UInt64{
        //            if (!this.validate(ByteArray.SIZE_OF_UINT32)) return null;
        //
        //            var low = this.data.getUint32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        //            this.position += ByteArray.SIZE_OF_UINT32;
        //            var high = this.data.getUint32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        //            this.position += ByteArray.SIZE_OF_UINT32;
        //			return new UInt64(low,high);
        //        }
        /**
         * 从字节流中读取一个无符号的 16 位整数
         * @return 介于 0 和 65535 之间的 16 位无符号整数
         * @method ByteArray#readUnsignedShort
         */
        Pan3dByteArray.prototype.readUnsignedShort = function () {
            //if (!this.validate(ByteArray.SIZE_OF_UINT16)) return null;
            var value = this.data.getUint16(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_UINT16;
            return value;
        };
        Pan3dByteArray.prototype.readUint16 = function () {
            return this.readUnsignedShort();
        };
        /**
         * 从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是无符号的短整型（以字节表示长度）
         * @return UTF-8 编码的字符串
         * @method ByteArray#readUTF
         */
        Pan3dByteArray.prototype.readUTF = function () {
            //if (!this.validate(ByteArray.SIZE_OF_UINT16)) return null;
            var length = this.data.getUint16(this.position, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_UINT16;
            if (length > 0) {
                return this.readUTFBytes(length);
            }
            else {
                return "";
            }
        };
        Pan3dByteArray.prototype.readString = function () {
            return this.readUTF();
        };
        /**
         * 从字节流中读取一个由 length 参数指定的 UTF-8 字节序列，并返回一个字符串
         * @param length 指明 UTF-8 字节长度的无符号短整型数
         * @return 由指定长度的 UTF-8 字节组成的字符串
         * @method ByteArray#readUTFBytes
         */
        Pan3dByteArray.prototype.readUTFBytes = function (length) {
            //if (!this.validate(length)) return null;
            var bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);
            this.position += length;
            /*var bytes: Uint8Array = new Uint8Array(new ArrayBuffer(length));
             for (var i = 0; i < length; i++) {
             bytes[i] = this.data.getUint8(this.position++);
             }*/
            return this.decodeUTF8(bytes);
        };
        Pan3dByteArray.prototype.readStringByLen = function (len) {
            return this.readUTFBytes(len);
        };
        //public readStandardString(length:number):string {
        //    if (!this.validate(length)) return null;
        //
        //    var str:string = "";
        //
        //    for (var i = 0; i < length; i++) {
        //        str += String.fromCharCode(this.data.getUint8(this.position++));
        //    }
        //    return str;
        //}
        //public readStringTillNull(keepEvenByte:boolean = true):string {
        //
        //    var str:string = "";
        //    var num:number = 0;
        //    while (this.bytesAvailable > 0) {
        //        var b:number = this.data.getUint8(this.position++);
        //        num++;
        //        if (b != 0) {
        //            str += String.fromCharCode(b);
        //        } else {
        //            if (keepEvenByte && num % 2 != 0) {
        //                this.position++;
        //            }
        //            break;
        //        }
        //    }
        //    return str;
        //}
        /**
         * 写入布尔值。根据 value 参数写入单个字节。如果为 true，则写入 1，如果为 false，则写入 0
         * @param value 确定写入哪个字节的布尔值。如果该参数为 true，则该方法写入 1；如果该参数为 false，则该方法写入 0
         * @method ByteArray#writeBoolean
         */
        Pan3dByteArray.prototype.writeBoolean = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_BOOLEAN);
            this.data.setUint8(this.position++, value ? 1 : 0);
        };
        /**
         * 在字节流中写入一个字节
         * 使用参数的低 8 位。忽略高 24 位
         * @param value 一个 32 位整数。低 8 位将被写入字节流
         * @method ByteArray#writeByte
         */
        Pan3dByteArray.prototype.writeByte = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_INT8);
            this.data.setInt8(this.position++, value);
        };
        Pan3dByteArray.prototype.writeUint8 = function (value) {
            this.writeByte(value);
        };
        Pan3dByteArray.prototype.writeInt8 = function (value) {
            this.writeByte(value);
        };
        //public writeUnsignedByte(value:number):void {
        //    this.validateBuffer(ByteArray.SIZE_OF_UINT8);
        //
        //    this.data.setUint8(this.position++, value);
        //}
        /**
         * 将指定字节数组 bytes（起始偏移量为 offset，从零开始的索引）中包含 length 个字节的字节序列写入字节流
         * 如果省略 length 参数，则使用默认长度 0；该方法将从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区
         * 如果 offset 或 length 超出范围，它们将被锁定到 bytes 数组的开头和结尾
         * @param bytes ByteArray 对象
         * @param offset 从 0 开始的索引，表示在数组中开始写入的位置
         * @param length 一个无符号整数，表示在缓冲区中的写入范围
         * @method ByteArray#writeBytes
         */
        Pan3dByteArray.prototype.writeBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            var writeLength;
            if (offset < 0) {
                return;
            }
            if (length < 0) {
                return;
            }
            else if (length == 0) {
                writeLength = bytes.length - offset;
            }
            else {
                writeLength = Math.min(bytes.length - offset, length);
            }
            if (writeLength > 0) {
                this.validateBuffer(writeLength);
                var tmp_data = new DataView(bytes.buffer);
                for (var i = offset; i < writeLength + offset; i++) {
                    this.data.setUint8(this.position++, tmp_data.getUint8(i));
                }
            }
        };
        /**
         * 在字节流中写入一个 IEEE 754 双精度（64 位）浮点数
         * @param value 双精度（64 位）浮点数
         * @method ByteArray#writeDouble
         */
        Pan3dByteArray.prototype.writeDouble = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_FLOAT64);
            this.data.setFloat64(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_FLOAT64;
        };
        /**
         * 在字节流中写入一个 IEEE 754 单精度（32 位）浮点数
         * @param value 单精度（32 位）浮点数
         * @method ByteArray#writeFloat
         */
        Pan3dByteArray.prototype.writeFloat = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_FLOAT32);
            this.data.setFloat32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_FLOAT32;
        };
        /**
         * 在字节流中写入一个带符号的 32 位整数
         * @param value 要写入字节流的整数
         * @method ByteArray#writeInt
         */
        Pan3dByteArray.prototype.writeInt = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_INT32);
            this.data.setInt32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_INT32;
        };
        Pan3dByteArray.prototype.writeInt32 = function (value) {
            this.writeInt(value);
        };
        /**
         * 使用指定的字符集将多字节字符串写入字节流
         * @param value 要写入的字符串值
         * @param charSet 表示要使用的字符集的字符串。可能的字符集字符串包括 "shift-jis"、"cn-gb"、"iso-8859-1"”等
         * @method ByteArray#writeMultiByte
         */
        //public writeMultiByte(value:string, charSet:string):void {
        //
        //}
        /**
         * 在字节流中写入一个 16 位整数。使用参数的低 16 位。忽略高 16 位
         * @param value 32 位整数，该整数的低 16 位将被写入字节流
         * @method ByteArray#writeShort
         */
        Pan3dByteArray.prototype.writeUnsignedShort = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_INT16);
            this.data.setInt16(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_INT16;
        };
        Pan3dByteArray.prototype.writeUint16 = function (value) {
            this.writeUnsignedShort(value);
        };
        Pan3dByteArray.prototype.writeUint64 = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_FLOAT64);
            this.data.setFloat64(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_FLOAT64;
        };
        Pan3dByteArray.prototype.writeShort = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_INT16);
            this.data.setUint16(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_INT16;
        };
        //public writeUnsignedShort(value:number):void {
        //    this.validateBuffer(ByteArray.SIZE_OF_UINT16);
        //
        //    this.data.setUint16(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        //    this.position += ByteArray.SIZE_OF_UINT16;
        //}
        /**
         * 在字节流中写入一个无符号的 32 位整数
         * @param value 要写入字节流的无符号整数
         * @method ByteArray#writeUnsignedInt
         */
        Pan3dByteArray.prototype.writeUnsignedInt = function (value) {
            this.validateBuffer(Pan3dByteArray.SIZE_OF_UINT32);
            this.data.setUint32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_UINT32;
        };
        Pan3dByteArray.prototype.writeUint32 = function (value) {
            this.writeUnsignedInt(value);
        };
        /**
         * 将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节
         * @param value 要写入的字符串值
         * @method ByteArray#writeUTF
         */
        Pan3dByteArray.prototype.writeUTF = function (value) {
            var utf8bytes = this.encodeUTF8(value);
            var length = utf8bytes.length;
            this.validateBuffer(Pan3dByteArray.SIZE_OF_UINT16 + length);
            this.data.setUint16(this.position, length, this.endian === Endian.LITTLE_ENDIAN);
            this.position += Pan3dByteArray.SIZE_OF_UINT16;
            this._writeUint8Array(utf8bytes, false);
        };
        Pan3dByteArray.prototype.writeString = function (value) {
            var strByteArray = new Pan3dByteArray();
            strByteArray.writeUTFBytes(value);
            this.writeUint16(strByteArray.length + 1); //标识字符数量
            this.writeBytes(strByteArray, 0, strByteArray.length);
            this.writeByte(0);
        };
        Pan3dByteArray.prototype.writeStringByLen = function (value, len) {
            var curPos = this.position;
            this.writeUTFBytes(value);
            this.position = curPos + len;
            this.length = this.position + 1;
        };
        Pan3dByteArray.prototype.readVector3D = function ($w) {
            if ($w === void 0) { $w = false; }
            var $p = new Pan3d.Vector3D;
            $p.x = this.readFloat();
            $p.y = this.readFloat();
            $p.z = this.readFloat();
            if ($w) {
                $p.w = this.readFloat();
            }
            return $p;
        };
        /**
         * 将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的词为字符串添加前缀
         * @param value 要写入的字符串值
         * @method ByteArray#writeUTFBytes
         */
        Pan3dByteArray.prototype.writeUTFBytes = function (value) {
            this._writeUint8Array(this.encodeUTF8(value));
        };
        Pan3dByteArray.prototype.toString = function () {
            return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable;
        };
        /**
         * 将 Uint8Array 写入字节流
         * @param bytes 要写入的Uint8Array
         * @param validateBuffer
         */
        Pan3dByteArray.prototype._writeUint8Array = function (bytes, validateBuffer) {
            if (validateBuffer === void 0) { validateBuffer = true; }
            if (validateBuffer) {
                this.validateBuffer(this.position + bytes.length);
            }
            for (var i = 0; i < bytes.length; i++) {
                this.data.setUint8(this.position++, bytes[i]);
            }
        };
        /**
         * @private
         */
        Pan3dByteArray.prototype.validate = function (len) {
            //len += this.data.byteOffset;
            if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) {
                return true;
            }
            else {
                //$error(1025);
            }
        };
        /**********************/
        /*  PRIVATE METHODS   */
        /**********************/
        Pan3dByteArray.prototype.validateBuffer = function (len, needReplace) {
            if (needReplace === void 0) { needReplace = false; }
            this.write_position = len > this.write_position ? len : this.write_position;
            len += this._position;
            if (this.data.byteLength < len || needReplace) {
                var tmp = new Uint8Array(new ArrayBuffer(len + this.BUFFER_EXT_SIZE));
                var length = Math.min(this.data.buffer.byteLength, len + this.BUFFER_EXT_SIZE);
                tmp.set(new Uint8Array(this.data.buffer, 0, length));
                this.buffer = tmp.buffer;
            }
        };
        /**
         * UTF-8 Encoding/Decoding
         */
        Pan3dByteArray.prototype.encodeUTF8 = function (str) {
            var pos = 0;
            var codePoints = this.stringToCodePoints(str);
            var outputBytes = [];
            while (codePoints.length > pos) {
                var code_point = codePoints[pos++];
                if (this.inRange(code_point, 0xD800, 0xDFFF)) {
                    this.encoderError(code_point);
                }
                else if (this.inRange(code_point, 0x0000, 0x007f)) {
                    outputBytes.push(code_point);
                }
                else {
                    var count, offset;
                    if (this.inRange(code_point, 0x0080, 0x07FF)) {
                        count = 1;
                        offset = 0xC0;
                    }
                    else if (this.inRange(code_point, 0x0800, 0xFFFF)) {
                        count = 2;
                        offset = 0xE0;
                    }
                    else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {
                        count = 3;
                        offset = 0xF0;
                    }
                    outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);
                    while (count > 0) {
                        var temp = this.div(code_point, Math.pow(64, count - 1));
                        outputBytes.push(0x80 + (temp % 64));
                        count -= 1;
                    }
                }
            }
            return new Uint8Array(outputBytes);
        };
        Pan3dByteArray.prototype.decodeUTF8 = function (data) {
            var fatal = false;
            var pos = 0;
            var result = "";
            var code_point;
            var utf8_code_point = 0;
            var utf8_bytes_needed = 0;
            var utf8_bytes_seen = 0;
            var utf8_lower_boundary = 0;
            while (data.length > pos) {
                var _byte = data[pos++];
                if (_byte === this.EOF_byte) {
                    if (utf8_bytes_needed !== 0) {
                        code_point = this.decoderError(fatal);
                    }
                    else {
                        code_point = this.EOF_code_point;
                    }
                }
                else {
                    if (utf8_bytes_needed === 0) {
                        if (this.inRange(_byte, 0x00, 0x7F)) {
                            code_point = _byte;
                        }
                        else {
                            if (this.inRange(_byte, 0xC2, 0xDF)) {
                                utf8_bytes_needed = 1;
                                utf8_lower_boundary = 0x80;
                                utf8_code_point = _byte - 0xC0;
                            }
                            else if (this.inRange(_byte, 0xE0, 0xEF)) {
                                utf8_bytes_needed = 2;
                                utf8_lower_boundary = 0x800;
                                utf8_code_point = _byte - 0xE0;
                            }
                            else if (this.inRange(_byte, 0xF0, 0xF4)) {
                                utf8_bytes_needed = 3;
                                utf8_lower_boundary = 0x10000;
                                utf8_code_point = _byte - 0xF0;
                            }
                            else {
                                this.decoderError(fatal);
                            }
                            utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
                            code_point = null;
                        }
                    }
                    else if (!this.inRange(_byte, 0x80, 0xBF)) {
                        utf8_code_point = 0;
                        utf8_bytes_needed = 0;
                        utf8_bytes_seen = 0;
                        utf8_lower_boundary = 0;
                        pos--;
                        code_point = this.decoderError(fatal, _byte);
                    }
                    else {
                        utf8_bytes_seen += 1;
                        utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
                        if (utf8_bytes_seen !== utf8_bytes_needed) {
                            code_point = null;
                        }
                        else {
                            var cp = utf8_code_point;
                            var lower_boundary = utf8_lower_boundary;
                            utf8_code_point = 0;
                            utf8_bytes_needed = 0;
                            utf8_bytes_seen = 0;
                            utf8_lower_boundary = 0;
                            if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {
                                code_point = cp;
                            }
                            else {
                                code_point = this.decoderError(fatal, _byte);
                            }
                        }
                    }
                }
                //Decode string
                if (code_point !== null && code_point !== this.EOF_code_point) {
                    if (code_point <= 0xFFFF) {
                        if (code_point > 0)
                            result += String.fromCharCode(code_point);
                    }
                    else {
                        code_point -= 0x10000;
                        result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));
                        result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));
                    }
                }
            }
            return result;
        };
        Pan3dByteArray.prototype.encoderError = function (code_point) {
            //$error(1026, code_point);
        };
        Pan3dByteArray.prototype.decoderError = function (fatal, opt_code_point) {
            if (fatal) {
                //$error(1027);
            }
            return opt_code_point || 0xFFFD;
        };
        Pan3dByteArray.prototype.inRange = function (a, min, max) {
            return min <= a && a <= max;
        };
        Pan3dByteArray.prototype.div = function (n, d) {
            return Math.floor(n / d);
        };
        Pan3dByteArray.prototype.stringToCodePoints = function (string) {
            /** @type {Array.<number>} */
            var cps = [];
            // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
            var i = 0, n = string.length;
            while (i < string.length) {
                var c = string.charCodeAt(i);
                if (!this.inRange(c, 0xD800, 0xDFFF)) {
                    cps.push(c);
                }
                else if (this.inRange(c, 0xDC00, 0xDFFF)) {
                    cps.push(0xFFFD);
                }
                else { // (inRange(c, 0xD800, 0xDBFF))
                    if (i === n - 1) {
                        cps.push(0xFFFD);
                    }
                    else {
                        var d = string.charCodeAt(i + 1);
                        if (this.inRange(d, 0xDC00, 0xDFFF)) {
                            var a = c & 0x3FF;
                            var b = d & 0x3FF;
                            i += 1;
                            cps.push(0x10000 + (a << 10) + b);
                        }
                        else {
                            cps.push(0xFFFD);
                        }
                    }
                }
                i += 1;
            }
            return cps;
        };
        Pan3dByteArray.SIZE_OF_BOOLEAN = 1;
        Pan3dByteArray.SIZE_OF_INT8 = 1;
        Pan3dByteArray.SIZE_OF_INT16 = 2;
        Pan3dByteArray.SIZE_OF_INT32 = 4;
        Pan3dByteArray.SIZE_OF_UINT8 = 1;
        Pan3dByteArray.SIZE_OF_UINT16 = 2;
        Pan3dByteArray.SIZE_OF_UINT32 = 4;
        Pan3dByteArray.SIZE_OF_FLOAT32 = 4;
        Pan3dByteArray.SIZE_OF_FLOAT64 = 8;
        return Pan3dByteArray;
    }());
    Pan3d.Pan3dByteArray = Pan3dByteArray;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Pan3dByteArray.js.map
var Pan3d;
(function (Pan3d) {
    var TestTriangle = /** @class */ (function () {
        function TestTriangle($p1, $p2, $p3, $precision) {
            if ($p1 === void 0) { $p1 = null; }
            if ($p2 === void 0) { $p2 = null; }
            if ($p3 === void 0) { $p3 = null; }
            if ($precision === void 0) { $precision = 0.1; }
            this.p1 = $p1;
            this.p2 = $p2;
            this.p3 = $p3;
            this.precision = $precision;
        }
        TestTriangle.prototype.setAllPoint = function ($p1, $p2, $p3) {
            this.p1 = $p1;
            this.p2 = $p2;
            this.p3 = $p3;
        };
        TestTriangle.prototype.checkPointIn = function (tp) {
            var area = this.getArea();
            var targetThreeTimesArea = 0;
            targetThreeTimesArea += TestTriangle.getAreaByPoints(tp, this.p1, this.p2);
            targetThreeTimesArea += TestTriangle.getAreaByPoints(tp, this.p2, this.p3);
            targetThreeTimesArea += TestTriangle.getAreaByPoints(tp, this.p3, this.p1);
            return targetThreeTimesArea == area || Math.abs(targetThreeTimesArea - area) < this.precision;
        };
        TestTriangle.prototype.getArea = function () {
            return TestTriangle.getAreaByPoints(this.p1, this.p2, this.p3);
        };
        TestTriangle.getAreaByPoints = function (p1, p2, p3) {
            // 方法一
            // 利用两点之间距离公式，求出三角形的三边长a，b，c后，
            // 令p = (a+b+c)/2。再套入以下公式就可以求出三角形的面积S :
            // S = sqrt(p*(p-a)*(p-b)*(p-c))
            var dx = p1.x - p2.x;
            var dy = p1.y - p2.y;
            var p1Len = Math.sqrt(dx * dx + dy * dy);
            dx = p2.x - p3.x;
            dy = p2.y - p3.y;
            var p2Len = Math.sqrt(dx * dx + dy * dy);
            dx = p3.x - p1.x;
            dy = p3.y - p1.y;
            var p3Len = Math.sqrt(dx * dx + dy * dy);
            var p = (p1Len + p2Len + p3Len) / 2;
            var v = p * (p - p1Len) * (p - p2Len) * (p - p3Len);
            if (v > 0) {
                return Math.sqrt(v);
            }
            return 0;
        };
        TestTriangle.baseTri = new TestTriangle;
        return TestTriangle;
    }());
    Pan3d.TestTriangle = TestTriangle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TestTriangle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ProgrmaManager = /** @class */ (function (_super) {
        __extends(ProgrmaManager, _super);
        function ProgrmaManager() {
            //this._dic = new Object();
            return _super.call(this) || this;
        }
        ProgrmaManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new ProgrmaManager();
            }
            return this._instance;
        };
        ProgrmaManager.prototype.getProgram = function ($str) {
            if (this._dic[$str]) {
                return this._dic[$str];
            }
            else {
                alert("please registe Program=>" + $str);
                return null;
            }
        };
        ProgrmaManager.prototype.registe = function ($str, $shader3D) {
            if (!this._dic[$str]) {
                $shader3D.encode();
                $shader3D.useNum = 1;
                $shader3D.name = $str;
                this._dic[$str] = $shader3D;
            }
        };
        ProgrmaManager.prototype.getMaterialProgram = function (key, shaderCls, $material, paramAry, parmaByFragmet) {
            if (paramAry === void 0) { paramAry = null; }
            if (parmaByFragmet === void 0) { parmaByFragmet = false; }
            var keyStr = key + "_" + $material.url;
            //if (keyStr.search("/standard_byte1111") != -1 &&true) { //FIXME
            //    //console.log(keyStr)
            //    this.outShader($material.shaderStr)
            //    $material.shaderStr =
            //    "precision mediump float;\n" +
            //    "uniform sampler2D fs0;\n" +
            //    "uniform sampler2D fs1;\n" +
            //    "uniform vec4 fc2;\n" +
            //    "uniform vec2 fogdata;\n" +
            //    "uniform vec3 fogcolor;\n" +
            //    "varying vec2 v0;\n" +
            //    "varying vec2 v2;\n" +
            //    "varying vec3 v1;\n" +
            //    "void main(void){\n" +
            //    "\n" +
            //    "vec4 ft0 = texture2D(fs0,v0);\n" +
            //    "vec4 ft1 = texture2D(fs1,v2);\n" +
            //    "ft1.xyz = ft1.xyz * 2.0;\n" +
            //    "ft1.xyz = ft1.xyz * ft0.xyz;\n" +
            //    "vec4 ft2 = vec4(0,0,0,1);\n" +
            //    "ft2.xyz = ft1.xyz;\n" +
            //    "ft2.w = 1.0;\n" +
            //   "ft1.x = distance(v1.xyz*0.01, fc2.xyz)*100.0;\n" +
            //   "ft1.x = ft1.x - fogdata.x;\n"+
            //   "ft1.x = fogdata.y * ft1.x;\n" +
            //   "ft1.x = clamp(ft1.x,0.0,1.0);\n"+
            //   "ft2.xyz = mix(ft2.xyz,fogcolor.xyz,ft1.x);\n" +
            //    "gl_FragColor = ft2;\n"+
            //     "}"
            //}
            if (paramAry) {
                for (var i = 0; i < paramAry.length; i++) {
                    keyStr += "_" + paramAry[i];
                }
                if (parmaByFragmet) {
                    keyStr += "true_";
                }
                else {
                    keyStr += "false_";
                }
            }
            if (this._dic[keyStr]) {
                this._dic[keyStr].useNum++;
                return this._dic[keyStr];
            }
            if (parmaByFragmet) {
                paramAry = [$material.usePbr, $material.useNormal, $material.hasFresnel,
                    $material.useDynamicIBL, $material.lightProbe, $material.directLight,
                    $material.noLight, $material.fogMode];
            }
            var shader = new shaderCls();
            shader.paramAry = paramAry;
            shader.fragment = $material.shaderStr;
            var encodetf = shader.encode();
            shader.useNum++;
            if (!encodetf) {
                //console.log("**********错误" + keyStr);
                //console.log(shader.vertex);
                //console.log(shader.fragment);
            }
            //if (keyStr.search("staticstandtrans") != -1 && true) {
            //this.outShader(shader.vertex)
            ////console.log(shader.vertex);
            ////console.log(shader.fragment);
            //}
            this._dic[keyStr] = shader;
            return shader;
        };
        ProgrmaManager.prototype.outShader = function ($str) {
            var $item = $str.split("\n");
            //console.log("----")
            for (var i = 0; i < $item.length; i++) {
                var str = "\"";
                str += $item[i];
                if (i < ($item.length - 1)) {
                    str += "\\n";
                    str += "\"";
                    str += "\+";
                }
                else {
                    str += "\"";
                }
                //console.log(str)
            }
            //console.log("----")
        };
        ProgrmaManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        return ProgrmaManager;
    }(Pan3d.ResGC));
    Pan3d.ProgrmaManager = ProgrmaManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ProgramManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Shader3D = /** @class */ (function (_super) {
        __extends(Shader3D, _super);
        function Shader3D() {
            var _this = _super.call(this) || this;
            _this.fragment = _this.getFragmentShaderString();
            return _this;
        }
        Object.defineProperty(Shader3D.prototype, "paramAry", {
            get: function () {
                return this._paramAry;
            },
            set: function (value) {
                this._paramAry = value;
            },
            enumerable: true,
            configurable: true
        });
        Shader3D.prototype.encode = function (v, f) {
            if (v) {
                this.vertex = v;
            }
            else {
                this.vertex = this.getVertexShaderString();
            }
            ////console.log(this.vertex);
            var $context = Pan3d.Scene_data.context3D.renderContext;
            this.program = $context.createProgram();
            this.vShader = $context.createShader($context.VERTEX_SHADER);
            this.fShader = $context.createShader($context.FRAGMENT_SHADER);
            $context.shaderSource(this.vShader, this.vertex);
            $context.shaderSource(this.fShader, this.fragment);
            $context.compileShader(this.vShader);
            $context.compileShader(this.fShader);
            $context.attachShader(this.program, this.vShader);
            $context.attachShader(this.program, this.fShader);
            this.binLocation($context);
            $context.linkProgram(this.program);
            //Scene_data.context3D.addProgram(this.program);
            this.localDic = new Object();
            var info = $context.getProgramInfoLog(this.program);
            var vInfo = $context.getShaderInfoLog(this.vShader);
            var fInfo = $context.getShaderInfoLog(this.fShader);
            if (info != "") {
                if (vInfo == "" && fInfo == "") {
                    return true;
                }
                //console.log("shader error: " + info + "," + vInfo + "," + fInfo);
                return false;
            }
            else {
                return true;
            }
        };
        Shader3D.prototype.getWebGLUniformLocation = function ($name) {
            var local = this.localDic[$name];
            if (local) {
                return local;
            }
            else {
                this.localDic[$name] = Pan3d.Scene_data.context3D.getLocation(this.program, $name);
                return this.localDic[$name];
            }
        };
        Shader3D.prototype.binLocation = function ($context) {
        };
        Shader3D.prototype.getVertexShaderString = function () {
            return "";
        };
        Shader3D.prototype.getFragmentShaderString = function () {
            return "";
        };
        Shader3D.prototype.destory = function () {
            this.vertex = null;
            this.fragment = null;
            this.name = null;
            this.localDic = null;
            Pan3d.Scene_data.context3D.deleteShader(this);
        };
        return Shader3D;
    }(Pan3d.ResCount));
    Pan3d.Shader3D = Shader3D;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Shader3D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BuildShader = /** @class */ (function (_super) {
        __extends(BuildShader, _super);
        function BuildShader() {
            return _super.call(this) || this;
        }
        BuildShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2CubeTexST");
        };
        BuildShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 v2CubeTexST;" +
                //"attribute vec2 v2LightBuff;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v_texCoord;" +
                //"varying vec2 v_texLight;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(v2CubeTexST.x, v2CubeTexST.y);" +
                //"   v_texLight = vec2(v2LightBuff.x, v2LightBuff.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        BuildShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            " precision mediump float;\n" +
                //" #endif\n" +
                "uniform sampler2D s_texture;\n" +
                //"uniform sampler2D light_texture;\n" +
                "uniform vec4 testconst;" +
                "uniform vec4 testconst2;" +
                "varying vec2 v_texCoord;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                "vec4 test = vec4(0,0,0,1);\n" +
                "test.xyz = mix(vec3(1,1,1)*0.5,testconst.xyz,0.5);\n" +
                //"test = test * testconst2;\n" +
                "infoUv.xyz = test.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        BuildShader.buildShader = "BuildShader";
        return BuildShader;
    }(Pan3d.Shader3D));
    Pan3d.BuildShader = BuildShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BuildShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialShader = /** @class */ (function (_super) {
        __extends(MaterialShader, _super);
        function MaterialShader() {
            var _this = _super.call(this) || this;
            _this.name = "Material_shader";
            return _this;
        }
        MaterialShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2CubeTexST");
            //if (this.paramAry[0]){
            //    $context.bindAttribLocation(this.program, 3, "v3Normal");
            //}
            //if (this.paramAry[1]){
            //    $context.bindAttribLocation(this.program, 4, "v3Tangent");
            //    $context.bindAttribLocation(this.program, 5, "v3Bitangent");
            //}
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            var noLight = this.paramAry[6];
            if (!(directLight || noLight)) {
                $context.bindAttribLocation(this.program, 2, "v2lightuv");
            }
            if (usePbr) {
                $context.bindAttribLocation(this.program, 3, "v3Normal");
                if (useNormal) {
                    $context.bindAttribLocation(this.program, 4, "v3Tangent");
                    $context.bindAttribLocation(this.program, 5, "v3Bitangent");
                }
            }
            else if (directLight) {
                $context.bindAttribLocation(this.program, 3, "v3Normal");
            }
        };
        MaterialShader.prototype.getVertexShaderString = function () {
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var hasFresnel = this.paramAry[2];
            var useDynamicIBL = this.paramAry[3];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            var noLight = this.paramAry[6];
            var fogMode = this.paramAry[7];
            var $str = "attribute vec3 v3Position;\n" +
                "attribute vec2 v2CubeTexST;\n" +
                "varying vec2 v0;\n";
            if (directLight) {
                $str += "varying vec3 v2;\n";
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "attribute vec2 v2lightuv;\n" +
                        "varying vec2 v2;\n";
            }
            if (usePbr) {
                $str +=
                    "attribute vec3 v3Normal;\n" +
                        "varying vec3 v1;\n";
                if (!useNormal) {
                    $str += "varying vec3 v4;\n";
                }
                else {
                    $str += "varying mat3 v4;\n";
                }
            }
            else if (fogMode != 0) {
                $str +=
                    "varying vec3 v1;\n";
            }
            if (useNormal) {
                $str +=
                    "attribute vec3 v3Tangent;\n" +
                        "attribute vec3 v3Bitangent;\n";
            }
            if (directLight) {
                if (!usePbr) {
                    $str +=
                        "attribute vec3 v3Normal;\n";
                }
                $str +=
                    "uniform vec3 sunDirect;\n" +
                        "uniform vec3 sunColor;\n" +
                        "uniform vec3 ambientColor;\n";
            }
            $str +=
                // "uniform mat4 viewMatrix3D;\n" +
                // "uniform mat4 camMatrix3D;\n" +
                "uniform mat4 vpMatrix3D;\n" +
                    "uniform mat4 posMatrix3D;\n" +
                    "uniform mat3 rotationMatrix3D;\n";
            $str +=
                "void main(void){\n" +
                    "v0 = vec2(v2CubeTexST.x, v2CubeTexST.y);\n" +
                    "vec4 vt0= vec4(v3Position, 1.0);\n" +
                    "vt0 = posMatrix3D * vt0;\n";
            if (!(directLight || noLight)) {
                $str += "v2 = vec2(v2lightuv.x, v2lightuv.y);\n";
            }
            if (usePbr || fogMode != 0) {
                $str +=
                    "v1 = vec3(vt0.x,vt0.y,vt0.z);\n";
            }
            $str +=
                //"vt0 = camMatrix3D * vt0;\n" +
                "vt0 = vpMatrix3D * vt0;\n";
            if (usePbr) {
                if (!useNormal) {
                    $str += "v4 = rotationMatrix3D * v3Normal;\n";
                }
                else {
                    $str +=
                        "v4 = mat3(rotationMatrix3D * v3Tangent,rotationMatrix3D * v3Bitangent, rotationMatrix3D * v3Normal);\n";
                }
            }
            if (directLight) {
                if (!usePbr) {
                    $str +=
                        //    "vec4 n = rotationMatrix3D * vec4(v3Normal, 1.0);\n" +
                        "vec3 n = rotationMatrix3D * v3Normal;\n" +
                            "float suncos = dot(n.xyz,sunDirect.xyz);\n";
                }
                else {
                    $str +=
                        "float suncos = dot(v4.xyz,sunDirect.xyz);\n";
                }
                $str +=
                    "suncos = clamp(suncos,0.0,1.0);\n" +
                        "v2 = sunColor * suncos + ambientColor;";
                //"v2 = vec3(1.0,0.0,0.0);\n";
            }
            $str += "gl_Position = vt0;" + "}";
            //   this.outstr($str);
            return $str;
        };
        MaterialShader.prototype.outstr = function (str) {
            var arr = str.split(";");
            for (var i = 0; i < arr.length; i++) {
                var $ddd = String(trim(arr[i]));
                //console.log("\"" + $ddd + "\;" + "\"" + "\+")
            }
            //   //console.log(arr)
        };
        MaterialShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            //" precision mediump float;\n" +
            //" #endif\n" +
            "uniform sampler2D s_texture1;\n" +
                //"uniform sampler2D light_texture;\n" +
                "uniform vec4 testconst;" +
                "varying vec2 v_texCoord;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                "infoUv.xyz = testconst.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        MaterialShader.MATERIAL_SHADER = "Material_shader";
        return MaterialShader;
    }(Pan3d.Shader3D));
    Pan3d.MaterialShader = MaterialShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialAnimShader = /** @class */ (function (_super) {
        __extends(MaterialAnimShader, _super);
        function MaterialAnimShader() {
            var _this = _super.call(this) || this;
            _this.name = "Material_Anim_shader";
            return _this;
        }
        MaterialAnimShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "pos");
            $context.bindAttribLocation(this.program, 1, "v2Uv");
            $context.bindAttribLocation(this.program, 2, "boneID");
            $context.bindAttribLocation(this.program, 3, "boneWeight");
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            if (usePbr) {
                $context.bindAttribLocation(this.program, 4, "normal");
                if (useNormal) {
                    $context.bindAttribLocation(this.program, 5, "tangent");
                    $context.bindAttribLocation(this.program, 6, "bitangent");
                }
            }
            else if (lightProbe || directLight) {
                $context.bindAttribLocation(this.program, 4, "normal");
            }
        };
        MaterialAnimShader.getMd5M44Str = function () {
            var str = "vec4 qdv(vec4 q,vec3 d, vec3 v ){\n" +
                "vec3 t = 2.0 * cross(q.xyz, v);\n" +
                "vec3 f = v + q.w * t + cross(q.xyz, t);\n" +
                "return  vec4(f.x+d.x,f.y+d.y,f.z+d.z,1.0);\n" +
                " }\n" +
                "vec4 getQDdata(vec3 vdata){\n" +
                "vec4 tempnum = qdv(boneQ[int(boneID.x)],boneD[int(boneID.x)],vdata) * boneWeight.x;\n" +
                "tempnum += qdv(boneQ[int(boneID.y)],boneD[int(boneID.y)],vdata) * boneWeight.y;\n" +
                "tempnum += qdv(boneQ[int(boneID.z)],boneD[int(boneID.z)],vdata)* boneWeight.z;\n" +
                "tempnum += qdv(boneQ[int(boneID.w)],boneD[int(boneID.w)],vdata) * boneWeight.w;\n" +
                "tempnum.x = tempnum.x*-1.0;\n" +
                "return  tempnum;\n" +
                " }\n";
            return str;
        };
        MaterialAnimShader.getMd5M44NrmStr = function () {
            var str = "vec4 qdvNrm(vec4 q, vec3 v ){\n" +
                "vec3 t = 2.0 * cross(q.xyz, v);\n" +
                "vec3 f = v + q.w * t + cross(q.xyz, t);\n" +
                "return  vec4(f.x,f.y,f.z,1.0);\n" +
                " }\n" +
                "vec4 getQDdataNrm(vec3 vdata){\n" +
                "vec4 tempnum = qdvNrm(boneQ[int(boneID.x)],vdata) * boneWeight.x;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.y)],vdata) * boneWeight.y;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.z)],vdata)* boneWeight.z;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.w)],vdata) * boneWeight.w;\n" +
                "tempnum.x = tempnum.x*-1.0;\n" +
                "tempnum.xyz = normalize(tempnum.xyz);\n" +
                "return  tempnum;\n" +
                " }\n";
            return str;
        };
        MaterialAnimShader.prototype.getVertexShaderString = function () {
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var hasFresnel = this.paramAry[2];
            var useDynamicIBL = this.paramAry[3];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            var noLight = this.paramAry[6];
            var $str = "attribute vec4 pos;\n" +
                "attribute vec2 v2Uv;\n" +
                "attribute vec4 boneID;\n" +
                "attribute vec4 boneWeight;\n" +
                "varying vec2 v0;\n" +
                "uniform vec4 boneQ[54];\n" +
                "uniform vec3 boneD[54];\n" +
                //"uniform mat4 viewMatrix3D;\n" +
                // "uniform mat4 camMatrix3D;\n" +
                "uniform mat4 vpMatrix3D;\n" +
                "uniform mat4 posMatrix3D;\n";
            if (lightProbe) {
                $str +=
                    "uniform vec3 sh[9];\n" +
                        "varying vec3 v2;\n";
            }
            else if (directLight) {
                $str +=
                    "uniform vec3 sunDirect;\n" +
                        "uniform vec3 sunColor;\n" +
                        "uniform vec3 ambientColor;\n" +
                        "varying vec3 v2;\n";
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "varying vec2 v2;\n";
            }
            if (usePbr) {
                $str +=
                    "attribute vec4 normal;\n" +
                        "uniform mat4 rotationMatrix3D;\n" +
                        "varying vec3 v1;\n";
                if (!useNormal) {
                    $str += "varying vec3 v4;\n";
                }
                else {
                    $str += "varying mat3 v4;\n";
                }
                if (useNormal) {
                    $str +=
                        "attribute vec4 tangent;\n" +
                            "attribute vec4 bitangent;\n";
                }
            }
            else if (lightProbe || directLight) {
                $str +=
                    "attribute vec4 normal;\n" +
                        "uniform mat4 rotationMatrix3D;\n";
            }
            $str +=
                MaterialAnimShader.getMd5M44Str() +
                    MaterialAnimShader.getMd5M44NrmStr() +
                    "void main(void){\n" +
                    "v0 = v2Uv;\n" +
                    "vec4 vt0 = getQDdata(vec3(pos.x,pos.y,pos.z));\n" +
                    "vt0.xyz = vt0.xyz*1.0;\n" +
                    "vt0 = posMatrix3D * vt0;\n";
            if (usePbr) {
                $str +=
                    "v1 = vec3(vt0.x,vt0.y,vt0.z);\n";
            }
            $str +=
                //"vt0 = camMatrix3D * vt0;\n" +
                //"vt0 = viewMatrix3D * vt0;\n" +
                "vt0 = vpMatrix3D * vt0;\n" +
                    "gl_Position = vt0;\n";
            if (usePbr) {
                if (!useNormal) {
                    $str +=
                        //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                        //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                        //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                        //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                        "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = vec3(vt0.x,vt0.y,vt0.z);\n";
                }
                else {
                    $str +=
                        //"vec4 vt2 = bone[int(boneID.x)] * tangent * boneWeight.x;\n" +
                        //"vt2 += bone[int(boneID.y)] * tangent * boneWeight.y;\n" +
                        //"vt2 += bone[int(boneID.z)] * tangent * boneWeight.z;\n" +
                        //"vt2 += bone[int(boneID.w)] * tangent * boneWeight.w;\n" +
                        "vec4 vt2 = getQDdataNrm(vec3(tangent.x,tangent.y,tangent.z));\n" +
                            "vt2 = rotationMatrix3D * vt2;\n" +
                            "vt2.xyz = normalize(vt2.xyz);\n" +
                            //"vec4 vt1 = bone[int(boneID.x)] * bitangent * boneWeight.x;\n" +
                            //"vt1 += bone[int(boneID.y)] * bitangent * boneWeight.y;\n" +
                            //"vt1 += bone[int(boneID.z)] * bitangent * boneWeight.z;\n" +
                            //"vt1 += bone[int(boneID.w)] * bitangent * boneWeight.w;\n" +
                            "vec4 vt1 = getQDdataNrm(vec3(bitangent.x,bitangent.y,bitangent.z));\n" +
                            "vt1 = rotationMatrix3D * vt1;\n" +
                            "vt1.xyz = normalize(vt1.xyz);\n" +
                            //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                            //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                            //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                            //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                            "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = mat3(vec3(vt2.x,vt2.y,vt2.z),vec3(vt1.x,vt1.y,vt1.z),vec3(vt0.x,vt0.y,vt0.z));\n";
                }
            }
            else if (lightProbe || directLight) {
                $str +=
                    //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                    //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                    //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                    //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                    "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                        "vt0 = rotationMatrix3D * vt0;\n" +
                        "vt0.xyz = normalize(vt0.xyz);\n";
                //"vt0 = vec4(0,1,0,1);\n";
            }
            if (lightProbe) {
                $str +=
                    "vec3 lpb = sh[0] * 0.28209479177387814;\n" +
                        "lpb += sh[1] * (vt0.y * -0.4886025119029199);\n" +
                        "lpb += sh[2] * (vt0.z * 0.4886025119029199);\n" +
                        "lpb += sh[3] * (vt0.x * -0.4886025119029199);\n" +
                        "lpb += sh[4] * (vt0.x * vt0.y * 1.0925484305920792);\n" +
                        "lpb += sh[5] * (vt0.z * vt0.y * -1.0925484305920792);\n" +
                        "lpb += sh[6] * ((3.0 * vt0.z * vt0.z - 1.0) * 0.31539156525252005);\n" +
                        "lpb += sh[7] * (vt0.z * vt0.x * -1.0925484305920792);\n" +
                        "lpb += sh[8] * ((vt0.x * vt0.x - vt0.y * vt0.y) * 0.5462742152960396);\n" +
                        "v2 = lpb;\n";
            }
            else if (directLight) {
                $str +=
                    "float suncos = dot(vt0.xyz,sunDirect.xyz);\n" +
                        "suncos = clamp(suncos,0.0,1.0);\n" +
                        "v2 = sunColor * suncos + ambientColor;";
                // "v2 += vec3(1.0,1.0,1.0);" 
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "v2 = v2Uv;\n";
            }
            $str += "}";
            //if (usePbr) {
            //    if (!useNormal) {
            //        $str += "v4 = vec3(v3Normal.x,v3Normal.y,v3Normal.z);\n";
            //    } else {
            //        $str += 
            //        "v4 = mat3(v3Tangent,v3Bitangent,v3Normal);\n"
            //    }
            //}
            return $str;
        };
        MaterialAnimShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            //" precision mediump float;\n" +
            //" #endif\n" +
            "uniform sampler2D s_texture1;\n" +
                //"uniform sampler2D light_texture;\n" +
                "uniform vec4 testconst;" +
                "varying vec2 v_texCoord;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                "infoUv.xyz = testconst.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        MaterialAnimShader.MATERIAL_ANIM_SHADER = "Material_Anim_shader";
        return MaterialAnimShader;
    }(Pan3d.Shader3D));
    Pan3d.MaterialAnimShader = MaterialAnimShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialAnimShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialBatchAnimShader = /** @class */ (function (_super) {
        __extends(MaterialBatchAnimShader, _super);
        function MaterialBatchAnimShader() {
            var _this = _super.call(this) || this;
            _this.name = "Material_Batch_Anim_Shader";
            return _this;
        }
        MaterialBatchAnimShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "pos");
            $context.bindAttribLocation(this.program, 1, "v2Uv");
            $context.bindAttribLocation(this.program, 2, "boneID");
            $context.bindAttribLocation(this.program, 3, "boneWeight");
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            if (usePbr) {
                $context.bindAttribLocation(this.program, 4, "normal");
                if (useNormal) {
                    $context.bindAttribLocation(this.program, 5, "tangent");
                    $context.bindAttribLocation(this.program, 6, "bitangent");
                }
            }
            else if (lightProbe || directLight) {
                $context.bindAttribLocation(this.program, 4, "normal");
            }
        };
        MaterialBatchAnimShader.prototype.getVertexShaderString = function () {
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var hasFresnel = this.paramAry[2];
            var useDynamicIBL = this.paramAry[3];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            var noLight = this.paramAry[6];
            var $str = "precision mediump float;\n" +
                "attribute vec4 pos;\n" +
                "attribute vec3 v2Uv;\n" +
                "attribute vec4 boneID;\n" +
                "attribute vec4 boneWeight;\n" +
                "varying vec2 v0;\n" +
                "uniform mat4 bone[19];\n" +
                "uniform mat4 viewMatrix3D;\n" +
                "uniform mat4 camMatrix3D;\n" +
                "uniform mat4 posMatrixAry[6];\n";
            if (lightProbe) {
                $str +=
                    "varying vec3 v2;\n";
            }
            else if (directLight) {
                $str +=
                    "uniform vec3 sunDirect;\n" +
                        "uniform vec3 sunColor;\n" +
                        "uniform vec3 ambientColor;\n" +
                        "varying vec3 v2;\n";
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "varying vec2 v2;\n";
            }
            if (usePbr) {
                $str +=
                    "attribute vec4 normal;\n" +
                        "uniform mat4 rotationMatrix3D;\n" +
                        "varying vec3 v1;\n";
                if (!useNormal) {
                    $str += "varying vec3 v4;\n";
                }
                else {
                    $str += "varying mat3 v4;\n";
                }
                if (useNormal) {
                    $str +=
                        "attribute vec4 tangent;\n" +
                            "attribute vec4 bitangent;\n";
                }
            }
            else if (lightProbe || directLight) {
                $str +=
                    "attribute vec4 normal;\n" +
                        "uniform mat4 rotationMatrix3D;\n";
            }
            $str +=
                "void main(void){\n" +
                    "v0 = vec2(v2Uv.xy);\n" +
                    "vec4 vt0 = bone[int(boneID.x)] * pos * boneWeight.x;\n" +
                    "vt0 += bone[int(boneID.y)] * pos * boneWeight.y;\n" +
                    "vt0 += bone[int(boneID.z)] * pos * boneWeight.z;\n" +
                    "vt0 += bone[int(boneID.w)] * pos * boneWeight.w;\n" +
                    "vt0 = posMatrixAry[int(v2Uv.z)] * vt0;\n";
            if (usePbr) {
                $str +=
                    "v1 = vec3(vt0.x,vt0.y,vt0.z);\n";
            }
            $str +=
                "vt0 = camMatrix3D * vt0;\n" +
                    "vt0 = viewMatrix3D * vt0;\n" +
                    "gl_Position = vt0;\n";
            if (usePbr) {
                if (!useNormal) {
                    $str +=
                        "vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                            "vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                            "vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                            "vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = vec3(vt0.x,vt0.y,vt0.z);\n";
                }
                else {
                    $str +=
                        "vec4 vt2 = bone[int(boneID.x)] * tangent * boneWeight.x;\n" +
                            "vt2 += bone[int(boneID.y)] * tangent * boneWeight.y;\n" +
                            "vt2 += bone[int(boneID.z)] * tangent * boneWeight.z;\n" +
                            "vt2 += bone[int(boneID.w)] * tangent * boneWeight.w;\n" +
                            "vt2 = rotationMatrix3D * vt2;\n" +
                            "vt2.xyz = normalize(vt2.xyz);\n" +
                            "vec4 vt1 = bone[int(boneID.x)] * bitangent * boneWeight.x;\n" +
                            "vt1 += bone[int(boneID.y)] * bitangent * boneWeight.y;\n" +
                            "vt1 += bone[int(boneID.z)] * bitangent * boneWeight.z;\n" +
                            "vt1 += bone[int(boneID.w)] * bitangent * boneWeight.w;\n" +
                            "vt1 = rotationMatrix3D * vt1;\n" +
                            "vt1.xyz = normalize(vt1.xyz);\n" +
                            "vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                            "vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                            "vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                            "vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = mat3(vec3(vt2.x,vt2.y,vt2.z),vec3(vt1.x,vt1.y,vt1.z),vec3(vt0.x,vt0.y,vt0.z));\n";
                }
            }
            else if (lightProbe || directLight) {
                $str +=
                    "vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                        "vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                        "vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                        "vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                        "vt0 = rotationMatrix3D * vt0;\n" +
                        "vt0.xyz = normalize(vt0.xyz);\n";
                //"vt0 = vec4(0,1,0,1);\n";
            }
            if (lightProbe) {
                $str +=
                    "vec3 lpb = normalize(vec3(1.0,1.0,-1.0));\n" +
                        "float lp = min(0.0,dot(lpb,vec3(vt0.xyz)));\n" +
                        "lp = lp * 2.0 + 0.7;\n" +
                        "v2 = vec3(lp,lp,lp);\n";
            }
            else if (directLight) {
                $str +=
                    "float suncos = dot(vt0.xyz,sunDirect.xyz);\n" +
                        "suncos = clamp(suncos,0.0,1.0);\n" +
                        "v2 = sunColor * suncos + ambientColor;";
                //"v2 = sunColor * suncos;"
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "v2 = v2Uv;\n";
            }
            $str += "}";
            //if (usePbr) {
            //    if (!useNormal) {
            //        $str += "v4 = vec3(v3Normal.x,v3Normal.y,v3Normal.z);\n";
            //    } else {
            //        $str += 
            //        "v4 = mat3(v3Tangent,v3Bitangent,v3Normal);\n"
            //    }
            //}
            return $str;
        };
        MaterialBatchAnimShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            //" precision mediump float;\n" +
            //" #endif\n" +
            "uniform sampler2D s_texture1;\n" +
                //"uniform sampler2D light_texture;\n" +
                "uniform vec4 testconst;" +
                "varying vec2 v_texCoord;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                "infoUv.xyz = testconst.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        return MaterialBatchAnimShader;
    }(Pan3d.Shader3D));
    Pan3d.MaterialBatchAnimShader = MaterialBatchAnimShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialBatchAnimShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkyShader = /** @class */ (function (_super) {
        __extends(SkyShader, _super);
        function SkyShader() {
            return _super.call(this) || this;
        }
        SkyShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v3Normal");
        };
        SkyShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec3 v3Normal;" +
                //"attribute vec2 v2LightBuff;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec3 vNormal;" +
                //"varying vec2 v_texLight;" +
                "void main(void)" +
                "{" +
                "   vNormal = vec3(v3Normal.x, v3Normal.y,v3Normal.z);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        SkyShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            //" precision mediump float;\n" +
            //" #endif\n" +
            "precision mediump float;\n" +
                "uniform samplerCube s_texture;\n" +
                //"uniform sampler2D light_texture;\n" +
                "varying vec3 vNormal;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = textureCube(s_texture, vNormal);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                //"vec4 test = testconst * testconst2;\n" +
                //"test = test * testconst2;\n" +
                //"infoUv.xyz = test.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        SkyShader.Sky_Shader = "SkyShader";
        return SkyShader;
    }(Pan3d.Shader3D));
    Pan3d.SkyShader = SkyShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkyShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DShadowShader = /** @class */ (function (_super) {
        __extends(Display3DShadowShader, _super);
        function Display3DShadowShader() {
            return _super.call(this) || this;
        }
        Display3DShadowShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        Display3DShadowShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform vec4 pos[30];" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(v2uv.x, v2uv.y);" +
                "   vec3 vt1= vec3(v3Pos.xyz * pos[int(v2uv.z)].w + pos[int(v2uv.z)].xyz);" +
                "   vec4 vt0= vec4(vt1, 1.0);" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        Display3DShadowShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DShadowShader.Display3DShadowShader = "Display3DShadowShader";
        return Display3DShadowShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DShadowShader = Display3DShadowShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DShadowShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIShader = /** @class */ (function (_super) {
        __extends(UIShader, _super);
        function UIShader() {
            return _super.call(this) || this;
        }
        UIShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        UIShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[50];" +
                "uniform vec4 ui2[50];" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   vec4 data = ui2[int(v2uv.z)];" +
                "   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                "   data = ui[int(v2uv.z)];" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy * data.zw * 2.0;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        UIShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        UIShader.UI_SHADER = "UIShader";
        return UIShader;
    }(Pan3d.Shader3D));
    Pan3d.UIShader = UIShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIImageShader = /** @class */ (function (_super) {
        __extends(UIImageShader, _super);
        function UIImageShader() {
            return _super.call(this) || this;
        }
        UIImageShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        UIImageShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec2 v2uv;" +
                "uniform vec2 scale;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(v2uv.x, v2uv.y);" +
                "   vec4 vt0= vec4(v3Pos.x*scale.x,v3Pos.y*scale.y,v3Pos.z,1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        UIImageShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "uniform float alpha;" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.w = alpha;\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        UIImageShader.UI_IMG_SHADER = "UI_img_Shader";
        return UIImageShader;
    }(Pan3d.Shader3D));
    Pan3d.UIImageShader = UIImageShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIImageShager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIMaskShader = /** @class */ (function (_super) {
        __extends(UIMaskShader, _super);
        function UIMaskShader() {
            return _super.call(this) || this;
        }
        UIMaskShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
        };
        UIMaskShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "uniform vec4 ui;" +
                "void main(void)" +
                "{" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy * ui.zw * 2.0;" +
                "   pos.x += ui.x * 2.0 - 1.0;" +
                "   pos.y += -ui.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        UIMaskShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor = vec4(0.5,0.5,0.5,1.0);\n" +
                "}";
            return $str;
        };
        UIMaskShader.UI_MASK_SHADER = "UImaskShader";
        return UIMaskShader;
    }(Pan3d.Shader3D));
    Pan3d.UIMaskShader = UIMaskShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIMaskShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Movie2DShader = /** @class */ (function (_super) {
        __extends(Movie2DShader, _super);
        function Movie2DShader() {
            return _super.call(this) || this;
        }
        Movie2DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        Movie2DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform mat4 viewMatrix3D;\n" +
                "uniform mat4 camMatrix3D;\n" +
                "uniform mat4 watchCamMatrix3D;\n" +
                "uniform vec4 posdata[24];" +
                "uniform vec2 outuv;" +
                //"uniform vec4 ui[6];" +
                //"uniform vec4 ui2[6];" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   vec4 data = posdata[int(v2uv.z)];" +
                //"   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                //"   data = ui[int(v2uv.z)];" +
                "   vec4 vt0= vec4(v3Pos * data.w,1.0);" +
                "   vt0= watchCamMatrix3D * vt0;" +
                "   vt0.xyz += data.xyz;" +
                //"   pos.xy = v3Pos.xy * data.zw * 2.0;" +
                //"   pos.x += data.x * 2.0 - 1.0;" +
                //"   pos.y += -data.y * 2.0 + 1.0;" +
                "   v_texCoord = vec2(v2uv.x,v2uv.y) + outuv;" +
                //"   vec4 vt0= vec4(v3Pos, 1.0);" +
                "   gl_Position = viewMatrix3D * camMatrix3D * vt0;" +
                "}";
            return $str;
        };
        Movie2DShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "if(infoUv.w < 0.1){discard;}\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Movie2DShader.MOVIE2D_SHADER = "Movie2DShader";
        return Movie2DShader;
    }(Pan3d.Shader3D));
    Pan3d.Movie2DShader = Movie2DShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Movie2DShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Sprite2DShader = /** @class */ (function (_super) {
        __extends(Sprite2DShader, _super);
        function Sprite2DShader() {
            return _super.call(this) || this;
        }
        Sprite2DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        Sprite2DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform mat4 viewMatrix3D;\n" +
                "uniform mat4 camMatrix3D;\n" +
                "uniform mat4 watchCamMatrix3D;\n" +
                "uniform vec4 posdata[12];" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   vec4 data = posdata[int(v2uv.z)];" +
                "   vec4 vt0= vec4(v3Pos * data.w,1.0);" +
                "   vt0= watchCamMatrix3D * vt0;" +
                "   vt0.xyz += data.xyz;" +
                "   v_texCoord = vec2(v2uv.x,v2uv.y);" +
                "   gl_Position = viewMatrix3D * camMatrix3D * vt0;" +
                "}";
            return $str;
        };
        Sprite2DShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "if(infoUv.w < 0.1){discard;}\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Sprite2DShader.SPRITE2D_SHADER = "Sprite2DShader";
        return Sprite2DShader;
    }(Pan3d.Shader3D));
    Pan3d.Sprite2DShader = Sprite2DShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Sprite2DShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TerrainDisplay3DShader = /** @class */ (function (_super) {
        __extends(TerrainDisplay3DShader, _super);
        function TerrainDisplay3DShader() {
            return _super.call(this) || this;
        }
        TerrainDisplay3DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2TexCoord");
        };
        TerrainDisplay3DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 v2TexCoord;\n" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v0;\n" +
                "void main(void)" +
                "{" +
                " v0 = v2TexCoord;" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TerrainDisplay3DShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;" +
                "uniform sampler2D idmaptexture;" +
                "uniform sampler2D infotexture;" +
                "uniform sampler2D sixtexture;" +
                "uniform sampler2D lightexture;" +
                "vec4 qdvNrm(float indx ,vec2 uvpos){" +
                "vec2 sixuvTx=uvpos; " +
                "float ccavid= floor(indx*255.0);" +
                "if (ccavid==0.0) {\n" +
                "} else  if (ccavid==1.0){\n" +
                "sixuvTx.x=sixuvTx.x+0.5;" +
                "} else  if (ccavid==2.0){" +
                "sixuvTx.y=sixuvTx.y+0.5;" +
                "}else{" +
                "sixuvTx.x=sixuvTx.x+0.5;" +
                "sixuvTx.y=sixuvTx.y+0.5;" +
                "}; " +
                "sixuvTx.x=sixuvTx.x+0.001;" +
                "sixuvTx.y=sixuvTx.y+0.001;" +
                "vec4 sixUvColor = texture2D(sixtexture, sixuvTx.xy);\n" +
                "return  sixUvColor;\n" +
                " }\n" +
                "varying vec2 v0;" +
                "void main(void)" +
                "{" +
                "vec4 idUv = texture2D(idmaptexture, v0.xy);\n" +
                "vec4 infoUv = texture2D(infotexture, v0.xy);\n" +
                "vec4 sixUv = texture2D(sixtexture, v0.xy);\n" +
                "vec4 lightUv = texture2D(lightexture, v0*0.995+0.0025);\n" +
                "vec2 sixuv=fract(v0*10.0); " +
                " sixuv=sixuv*0.498; " +
                "vec4 tempnumA = qdvNrm(idUv.x,sixuv) * infoUv.x;\n" +
                "vec4 tempnumB = qdvNrm(idUv.y,sixuv) * infoUv.y;\n" +
                "vec4 tempnumC = qdvNrm(idUv.z,sixuv) * infoUv.z;\n" +
                "vec4 tempnumD = tempnumA+tempnumB+tempnumC;\n" +
                " tempnumD.xyz=tempnumD.xyz*lightUv.xyz*2.0; " +
                "gl_FragColor = tempnumD;" +
                "}";
            return $str;
        };
        TerrainDisplay3DShader.TerrainDisplay3DShader = "TerrainDisplay3DShader";
        return TerrainDisplay3DShader;
    }(Pan3d.Shader3D));
    Pan3d.TerrainDisplay3DShader = TerrainDisplay3DShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TerrainDisplay3DShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var CombineParticleData = /** @class */ (function (_super) {
        __extends(CombineParticleData, _super);
        function CombineParticleData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CombineParticleData.prototype.destory = function () {
            for (var i = 0; i < this.dataAry.length; i++) {
                this.dataAry[i].destory();
            }
        };
        CombineParticleData.prototype.getCombineParticle = function () {
            var particle = new Pan3d.CombineParticle();
            particle.maxTime = this.maxTime;
            for (var i = 0; i < this.dataAry.length; i++) {
                var display = this.dataAry[i].creatPartilce();
                particle.addPrticleItem(display);
            }
            particle.sourceData = this;
            this.useNum++;
            return particle;
        };
        CombineParticleData.prototype.setDataByte = function (byte) {
            byte.position = 0;
            var version = byte.readInt();
            var len = byte.readInt();
            this.maxTime = 0;
            this.dataAry = new Array;
            for (var i = 0; i < len; i++) {
                var $particleType = byte.readInt();
                var pdata = this.getParticleDataType($particleType);
                pdata.version = version;
                pdata.setAllByteInfo(byte);
                this.dataAry.push(pdata);
                if (pdata.timelineData.maxFrameNum > this.maxTime) {
                    this.maxTime = pdata.timelineData.maxFrameNum;
                }
            }
            this.maxTime *= Pan3d.Scene_data.frameTime;
        };
        CombineParticleData.prototype.getParticleDataType = function ($type) {
            var pdata;
            switch ($type) {
                case 1:
                    {
                        pdata = new Pan3d.ParticleFacetData();
                        break;
                    }
                case 18:
                    {
                        pdata = new Pan3d.ParticleBallData();
                        break;
                    }
                case 3:
                    {
                        pdata = new Pan3d.ParticleLocusData();
                        break;
                    }
                case 14:
                    {
                        pdata = new Pan3d.ParticleLocusballData();
                        break;
                    }
                case 9:
                case 4:
                case 7:
                    {
                        pdata = new Pan3d.ParticleModelData();
                        break;
                    }
                case 8:
                    {
                        pdata = new Pan3d.ParticleFollowData();
                        break;
                    }
                case 12:
                    {
                        pdata = new Pan3d.ParticleFollowLocusData();
                        break;
                    }
                case 13:
                    {
                        pdata = new Pan3d.ParticleBoneData();
                        break;
                    }
            }
            return pdata;
        };
        return CombineParticleData;
    }(Pan3d.ResCount));
    Pan3d.CombineParticleData = CombineParticleData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CombineParticleData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var CombineParticle = /** @class */ (function (_super) {
        __extends(CombineParticle, _super);
        function CombineParticle() {
            var _this = _super.call(this) || this;
            _this._maxTime = 1000000;
            _this._rotationX = 0;
            _this._rotationY = 0;
            _this._rotationZ = 0;
            _this.hasMulItem = false;
            _this.sceneVisible = true;
            _this.dynamic = false;
            _this.hasDestory = false;
            _this._displayAry = new Array;
            _this._time = 0;
            _this.bindMatrix = new Pan3d.Matrix3D;
            _this.invertBindMatrix = new Pan3d.Matrix3D;
            _this.bindVecter3d = new Pan3d.Vector3D();
            _this.bindScale = new Pan3d.Vector3D(1, 1, 1);
            _this.groupMatrix = new Pan3d.Matrix3D();
            _this.groupRotationMatrix = new Pan3d.Matrix3D();
            return _this;
            //this.groupBindMatrix = new Matrix3D();
        }
        Object.defineProperty(CombineParticle.prototype, "displayAry", {
            get: function () {
                return this._displayAry;
            },
            set: function (value) {
                this._displayAry = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "maxTime", {
            set: function (value) {
                this._maxTime = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "bindTarget", {
            set: function (value) {
                this._bindTarget = value;
                this.invertBindMatrix.isIdentity = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "bindSocket", {
            set: function (value) {
                this._bindSocket = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "x", {
            get: function () {
                return this.bindVecter3d.x;
            },
            set: function (value) {
                this.bindVecter3d.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "y", {
            get: function () {
                return this.bindVecter3d.y;
            },
            set: function (value) {
                this.bindVecter3d.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "z", {
            get: function () {
                return this.bindVecter3d.z;
            },
            set: function (value) {
                this.bindVecter3d.z = value;
            },
            enumerable: true,
            configurable: true
        });
        CombineParticle.prototype.setPos = function ($xpos, $ypos, $zpos) {
            this.bindVecter3d.setTo($xpos, $ypos, $zpos);
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].resetPos();
            }
        };
        CombineParticle.prototype.setMulPos = function (ary) {
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].resetMulPos(ary);
            }
        };
        Object.defineProperty(CombineParticle.prototype, "scaleX", {
            set: function (value) {
                this.bindScale.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "scaleY", {
            set: function (value) {
                this.bindScale.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "scaleZ", {
            set: function (value) {
                this.bindScale.z = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "rotationX", {
            set: function (value) {
                this._rotationX = value;
                this.applyRotation();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "rotationY", {
            set: function (value) {
                this._rotationY = value;
                this.applyRotation();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CombineParticle.prototype, "rotationZ", {
            set: function (value) {
                this._rotationZ = value;
                this.applyRotation();
            },
            enumerable: true,
            configurable: true
        });
        CombineParticle.prototype.applyRotation = function () {
            this.bindMatrix.identity();
            this.bindMatrix.appendRotation(this._rotationX, Pan3d.Vector3D.X_AXIS);
            this.bindMatrix.appendRotation(this._rotationY, Pan3d.Vector3D.Y_AXIS);
            this.bindMatrix.appendRotation(this._rotationZ, Pan3d.Vector3D.Z_AXIS);
            this.bindMatrix.copyTo(this.invertBindMatrix);
            this.invertBindMatrix.invert();
            this.invertBindMatrix.isIdentity = false;
        };
        CombineParticle.prototype.setGroup = function ($pos, $rotaion, $scale) {
            this._isInGroup = true;
            this._groupPos = $pos;
            this._groupRotation = $rotaion;
            this._groupScale = $scale;
            this.groupMatrix.isIdentity = false;
            this.groupMatrix.identity();
            this.groupMatrix.appendScale($scale.x, $scale.y, $scale.z);
            this.groupMatrix.appendRotation($rotaion.x, Pan3d.Vector3D.X_AXIS);
            this.groupMatrix.appendRotation($rotaion.y, Pan3d.Vector3D.Y_AXIS);
            this.groupMatrix.appendRotation($rotaion.z, Pan3d.Vector3D.Z_AXIS);
            this.groupMatrix.appendTranslation($pos.x, $pos.y, $pos.z);
            this.groupRotationMatrix.isIdentity = false;
            this.groupRotationMatrix.identity();
            this.groupRotationMatrix.prependRotation($rotaion.z, Pan3d.Vector3D.Z_AXIS);
            this.groupRotationMatrix.prependRotation($rotaion.y, Pan3d.Vector3D.Y_AXIS);
            this.groupRotationMatrix.prependRotation($rotaion.x, Pan3d.Vector3D.X_AXIS);
        };
        CombineParticle.prototype.setDataByte = function (byte) {
            byte.position = 0;
            var version = byte.readInt();
            var len = byte.readInt();
            //this._sourceComNum = 0;
            this._maxTime = 0;
            //this._sourceAllNum = len;
            this._displayAry = new Array;
            for (var i = 0; i < len; i++) {
                var $particleType = byte.readInt();
                var display3D = this.getDisplay3DById($particleType);
                display3D.setAllByteInfo(byte, version);
                display3D.setBind(this.bindVecter3d, this.bindMatrix, this.bindScale, this.invertBindMatrix, this.groupMatrix);
                this._displayAry.push(display3D);
                if (display3D.timeline.maxFrameNum > this._maxTime) {
                    this._maxTime = display3D.timeline.maxFrameNum;
                }
            }
            this._maxTime *= Pan3d.Scene_data.frameTime;
        };
        CombineParticle.prototype.addPrticleItem = function ($dis) {
            $dis.visible = false;
            $dis.setBind(this.bindVecter3d, this.bindMatrix, this.bindScale, this.invertBindMatrix, this.groupMatrix);
            this._displayAry.push($dis);
        };
        CombineParticle.prototype.getDisplay3DById = function (particleType) {
            var diaplayInfo = new Object;
            diaplayInfo.particleType = particleType;
            return this.getDisplay3D(diaplayInfo);
        };
        CombineParticle.prototype.setData = function (ary) {
            //this._sourceComNum = 0;
            //this._sourceAllNum = ary.length; 
            this._displayAry = new Array;
            this._maxTime = 0;
            for (var i = 0; i < ary.length; i++) {
                var diaplayInfo = ary[i].display;
                var display3D = this.getDisplay3D(diaplayInfo);
                //display3D.setAllInfo(ary[i]);
                display3D.setBind(this.bindVecter3d, this.bindMatrix, this.bindScale, this.invertBindMatrix, this.groupMatrix);
                //display3D.addEventListener(EngineEvent.COMPLETE, this.onSourceLoadCom, this);
                //display3D.bindTarget = _bindTarget;
                //display3D.bindSocket = _bindSocket;
                //display3D.setAllInfo(diaplayInfo);
                //display3D.priority = priority;
                //display3D.outVisible = this._visible;
                //display3D.isInGroup = _isInGroup;
                //display3D.groupPos = _groupPos;
                //display3D.groupRotation = _groupRotation;
                //display3D.groupScale = _groupScale;
                this._displayAry.push(display3D);
                if (display3D.timeline.maxFrameNum > this._maxTime) {
                    this._maxTime = display3D.timeline.maxFrameNum;
                }
            }
            this._maxTime *= Pan3d.Scene_data.frameTime;
            //updateMatrix();
            //updateBind();
            //if (_hasStage) {
            //    addToRender();
            //}
            //maxTime = getMaxNum();
            //_hasData = true;
            //if (_cloneList) {//如果有对应的克隆队列
            //    for (i = 0; i < _cloneList.length; i++) {
            //        _cloneList[i].cloneData(this);
            //    }
            //    _cloneList.length = 0;
            //    _cloneList = null;
            //}
            //if (_hasRealDispose) {
            //    realDispose();
            //}
        };
        CombineParticle.prototype.updateTime = function (t) {
            this._time += t;
            if (!this._displayAry) {
                return;
            }
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].updateTime(this._time);
            }
            this.updateBind();
            if (this._time >= this._maxTime) {
                this.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE));
            }
        };
        CombineParticle.prototype.updateBind = function () {
            if (this._bindTarget) {
                this._bindTarget.getSocket(this._bindSocket, this.bindMatrix);
                this.bindVecter3d.setTo(this.bindMatrix.x, this.bindMatrix.y, this.bindMatrix.z);
                this.bindMatrix.identityPostion();
                if (!this.groupRotationMatrix.isIdentity) {
                    this.bindMatrix.copyTo(this.invertBindMatrix);
                    this.invertBindMatrix.prepend(this.groupRotationMatrix);
                    this.invertBindMatrix.invert();
                }
                else {
                    this.bindMatrix.invertToMatrix(this.invertBindMatrix);
                }
                //if (this.hasMulItem){
                //    if (this._bindTarget.getSunType() == 1){
                //        var bt: any = this._bindTarget;
                //        if (typeof bt.getMulSocket == 'function') {
                //            for (var i: number = 0; i < this._displayAry.length; i++) {
                //                bt.getMulSocket(this._displayAry[i].getMulBindList());
                //            }
                //        }
                //    }
                //}
            }
        };
        CombineParticle.prototype.reset = function () {
            this._time = 0;
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].reset();
            }
        };
        CombineParticle.prototype.update = function () {
            if (!this.sceneVisible) {
                return;
            }
            if (!this._displayAry) {
                return;
            }
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].update();
            }
        };
        CombineParticle.prototype.updateItem = function (idx) {
            if (!this.sceneVisible) {
                return;
            }
            if (this.hasDestory) {
                return;
            }
            this._displayAry[idx].update();
        };
        Object.defineProperty(CombineParticle.prototype, "size", {
            get: function () {
                if (!this._displayAry) {
                    return 0;
                }
                return this._displayAry.length;
            },
            enumerable: true,
            configurable: true
        });
        //private onSourceLoadCom(event: BaseEvent): void {
        //    //console.log(event.type);
        //    event.target.removeEventListener(BaseEvent.COMPLETE, this.onSourceLoadCom, this);
        //}
        CombineParticle.prototype.getDisplay3D = function (obj) {
            var types = obj.particleType;
            var display3D;
            switch (types) {
                case 1:
                    {
                        display3D = new Pan3d.Display3DFacetParticle();
                        break;
                    }
                case 18:
                    {
                        display3D = new Pan3d.Display3DBallPartilce();
                        break;
                    }
                case 3:
                    {
                        display3D = new Pan3d.Display3DLocusPartilce();
                        break;
                    }
                case 14:
                    {
                        display3D = new Pan3d.Display3DLocusBallPartilce();
                        break;
                    }
                case 9:
                    {
                        display3D = new Pan3d.Display3DModelObjParticle();
                        break;
                    }
                case 4:
                    {
                        display3D = new Pan3d.Display3DModelPartilce();
                        break;
                    }
                case 7:
                    {
                        display3D = new Pan3d.Display3dModelAnimParticle();
                        break;
                    }
                case 8:
                    {
                        display3D = new Pan3d.Display3DFollowPartilce();
                        break;
                    }
                // case 12:
                //     {
                //         display3D = new Display3DFollowLocusPartilce();
                //         break;
                //     }
                //case 22:
                //    {
                //        display3D = new Display3DFollowMulLocusParticle();
                //        this.hasMulItem = true;
                //        break;
                //    }
            }
            display3D.visible = false;
            return display3D;
        };
        CombineParticle.prototype.destory = function () {
            if (this.sourceData) {
                this.sourceData.useNum--;
            }
            for (var i = 0; i < this._displayAry.length; i++) {
                this._displayAry[i].destory();
            }
            this._displayAry.length = 0;
            this._displayAry = null;
            this.bindMatrix = null;
            this.bindVecter3d = null;
            this.bindScale = null;
            this.invertBindMatrix = null;
            this._bindTarget = null;
            this._bindSocket = null;
            this._groupPos = null;
            this._groupRotation = null;
            this._groupScale = null;
            this.groupMatrix = null;
            this.groupRotationMatrix = null;
            this.hasDestory = true;
        };
        return CombineParticle;
    }(Pan3d.EventDispatcher));
    Pan3d.CombineParticle = CombineParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CombineParticle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleManager = /** @class */ (function (_super) {
        __extends(ParticleManager, _super);
        function ParticleManager() {
            var _this = _super.call(this) || this;
            _this._time = 0;
            _this.renderDic = new Object;
            _this._particleList = new Array;
            return _this;
        }
        ParticleManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new ParticleManager();
            }
            return this._instance;
        };
        ParticleManager.prototype.getParticleByte = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            var combineParticle = new Pan3d.CombineParticle();
            var url = $url;
            if (this._dic[url]) {
                var baseData = this._dic[url];
                combineParticle = baseData.getCombineParticle();
            }
            // else {
            //     LoadManager.getInstance().load(url, LoadManager.BYTE_TYPE, ($byte: ArrayBuffer) => {
            //         var byte: ByteArray = new ByteArray($byte);
            //         combineParticle.setDataByte(byte)
            //     });
            // }
            combineParticle.url = url;
            return combineParticle;
        };
        ParticleManager.prototype.registerUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (this._dic[$url]) {
                var baseData = this._dic[$url];
                baseData.useNum++;
            }
        };
        ParticleManager.prototype.releaseUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (this._dic[$url]) {
                var baseData = this._dic[$url];
                baseData.clearUseNum();
            }
        };
        ParticleManager.prototype.addResByte = function ($url, $data) {
            if (!this._dic[$url]) {
                var baseData = new Pan3d.CombineParticleData();
                ////console.log("load particle",$url);
                baseData.setDataByte($data);
                this._dic[$url] = baseData;
            }
        };
        ParticleManager.prototype.update = function () {
            // for (var i: number = 0; i < this._particleList.length; i++) {
            //     this._particleList[i].update();
            // }
            this.updateRenderDic();
            this.clearPaticleVa();
        };
        ParticleManager.prototype.clearPaticleVa = function () {
            Pan3d.Scene_data.context3D.clearVa(2);
            Pan3d.Scene_data.context3D.clearVa(3);
            Pan3d.Scene_data.context3D.clearVa(4);
            Pan3d.Scene_data.context3D.clearVa(5);
        };
        ParticleManager.prototype.setHide = function () {
            for (var i = 0; i < this._particleList.length; i++) {
                if (!this._particleList[i].dynamic) {
                    //  this._particleList[i].sceneVisible = false;
                }
            }
        };
        Object.defineProperty(ParticleManager.prototype, "particleList", {
            get: function () {
                return this._particleList;
            },
            enumerable: true,
            configurable: true
        });
        ParticleManager.prototype.updateTime = function () {
            var _tempTime = Pan3d.TimeUtil.getTimer();
            var t = _tempTime - this._time;
            for (var i = 0; i < this._particleList.length; i++) {
                if (!this._particleList[i].sceneVisible) {
                    continue;
                }
                this._particleList[i].updateTime(t);
            }
            this._time = _tempTime;
        };
        ParticleManager.prototype.addRenderDic = function ($particle) {
            var url = $particle.url;
            if (!this.renderDic[url]) {
                this.renderDic[url] = new Array;
            }
            this.renderDic[url].push($particle);
        };
        ParticleManager.prototype.removeRenderDic = function ($particle) {
            var url = $particle.url;
            var indexs = this.renderDic[url].indexOf($particle);
            if (indexs == -1) {
                return;
            }
            this.renderDic[url].splice(indexs, 1);
            if (this.renderDic[url].length == 0) {
                delete this.renderDic[url];
            }
        };
        ParticleManager.prototype.updateRenderDic = function () {
            for (var key in this.renderDic) {
                var list = this.renderDic[key];
                if (list.length == 1) {
                    list[0].update();
                }
                else {
                    var size = list[0].size;
                    for (var j = 0; j < size; j++) {
                        for (var i = 0; i < list.length; i++) {
                            list[i].updateItem(j);
                        }
                    }
                }
            }
        };
        ParticleManager.prototype.addParticle = function ($particle) {
            if (this._particleList.lastIndexOf($particle) != -1) {
                return;
            }
            this._particleList.push($particle);
            this.addRenderDic($particle);
        };
        ParticleManager.prototype.removeParticle = function ($particle) {
            var indexs = this._particleList.indexOf($particle);
            if (indexs == -1) {
                return;
            }
            this._particleList.splice(indexs, 1);
            this.removeRenderDic($particle);
        };
        ParticleManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        return ParticleManager;
    }(Pan3d.ResGC));
    Pan3d.ParticleManager = ParticleManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DParticle = /** @class */ (function (_super) {
        __extends(Display3DParticle, _super);
        function Display3DParticle() {
            var _this = _super.call(this) || this;
            _this.isInGroup = false;
            _this.visible = true;
            _this._rotationMatrix = new Pan3d.Matrix3D();
            _this.modelMatrix = new Pan3d.Matrix3D();
            return _this;
        }
        Display3DParticle.prototype.onCreated = function () {
        };
        Display3DParticle.prototype.setBind = function ($pos, $rotation, $scale, $invertRotation, $groupMatrix) {
            this.bindVecter3d = $pos;
            this.bindMatrix = $rotation;
            this.bindScale = $scale;
            this.invertBindMatrix = $invertRotation;
            this.groupMatrix = $groupMatrix;
        };
        Display3DParticle.prototype.getMulBindList = function () {
            return null;
        };
        Display3DParticle.prototype.updateMatrix = function () {
            if (!this.bindMatrix) {
                return;
            }
            this.modelMatrix.identity();
            if (!this.groupMatrix.isIdentity) {
                this.posMatrix.append(this.groupMatrix);
            }
            this.modelMatrix.append(this.posMatrix);
            this.modelMatrix.append(this.bindMatrix);
            this.modelMatrix.appendTranslation(this.bindVecter3d.x, this.bindVecter3d.y, this.bindVecter3d.z);
        };
        Object.defineProperty(Display3DParticle.prototype, "cantUseEffectsLev", {
            //特效配置等级显示  是否能显示
            get: function () {
                var temp = this.data._renderPriority <= Pan3d.Scene_data.effectsLev; //0
                return !temp;
            },
            enumerable: true,
            configurable: true
        });
        Display3DParticle.prototype.updateTime = function (t) {
            if (this.cantUseEffectsLev) {
                return;
            }
            this._time = t - this._beginTime;
            this._time += this.data._delayedTime; //加上延时 
            this.timeline.updateTime(t);
            this.visible = this.timeline.visible;
            this.posMatrix.identity();
            this.posMatrix.prependScale(this._scaleX * 0.1 * this.bindScale.x * this.data.overAllScale, this._scaleY * 0.1 * this.bindScale.y * this.data.overAllScale, this._scaleZ * 0.1 * this.bindScale.z * this.data.overAllScale);
            this.timeline.updateMatrix(this.posMatrix, this);
        };
        Display3DParticle.prototype.reset = function () {
            this.timeline.reset();
            this.updateTime(0);
        };
        Display3DParticle.prototype.clearAllAnim = function () {
        };
        Display3DParticle.prototype.update = function () {
            if (this.cantUseEffectsLev) {
                return;
            }
            if (!this.visible) {
                return;
            }
            if (!this.data.materialParam) {
                return;
            }
            if (this.data._alphaMode == 0) {
                this.data._alphaMode = -1; //特殊调整，还需要AS那边核对
                //  console.log("改了")
            }
            Pan3d.Scene_data.context3D.setBlendParticleFactors(this.data._alphaMode);
            Pan3d.Scene_data.context3D.cullFaceBack(this.data.materialParam.material.backCull);
            if (this.data.materialParam) {
                Pan3d.Scene_data.context3D.setProgram(this.data.materialParam.program);
            }
            this.updateMatrix();
            this.setVc();
            this.setVa();
            this.resetVa();
        };
        Display3DParticle.prototype.setVc = function () {
        };
        Display3DParticle.prototype.pushVc = function () {
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
        };
        Display3DParticle.prototype.setVa = function () {
        };
        Display3DParticle.prototype.resetVa = function () {
        };
        Display3DParticle.prototype.setMaterialVc = function () {
            if (!this.data.materialParam) {
                return;
            }
            var dynamicConstList = this.data.materialParam.dynamicConstList;
            var t = this._time % (Pan3d.Scene_data.frameTime * this.data._life);
            ////console.log(this._time);
            for (var i = 0; i < dynamicConstList.length; i++) {
                dynamicConstList[i].update(t);
            }
            if (this.data.materialParam.material.fcNum <= 0) {
                return;
            }
            t = t * this.data.materialParam.material.timeSpeed;
            this.data.materialParam.material.update(t);
            ////console.log("fc5",this.data.materialParam.material.fcData[4]);
            Pan3d.Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "fc", this.data.materialParam.material.fcData);
            // Scene_data.context3D.setVc4fv(this.data.materialParam.shader,"fc",[1,0,0,0,this.data.materialParam.material.fcData[4],0,0,0]); 
            /**
            if (this.data.materialParam.material.hasTime) {
                t = t * this.data.materialParam.material.timeSpeed;
    
                Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "fc0", [1, 0, 0, t])
            }
    
            var constVec: Array<ConstItem> = this.data.materialParam.material.constList;
            for (var i:number = 0; i < constVec.length; i++) {
                Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "fc" + constVec[i].id, constVec[i].vecNum);
            }
             */
        };
        Display3DParticle.prototype.setMaterialTexture = function () {
            if (!this.data.materialParam) {
                return;
            }
            var texVec = this.data.materialParam.material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].isDynamic) {
                    continue;
                }
                //_context3D.setTextureAt(texVec[i].id, texVec[i].texture);
                Pan3d.Scene_data.context3D.setRenderTexture(this.data.materialParam.shader, texVec[i].name, texVec[i].texture, texVec[i].id, true);
            }
            var texDynamicVec = this.data.materialParam.dynamicTexList;
            for (var i = 0; i < texDynamicVec.length; i++) {
                // _context3D.setTextureAt(texDynamicVec[i].target.id, texDynamicVec[i].texture);
                Pan3d.Scene_data.context3D.setRenderTexture(this.data.materialParam.shader, texDynamicVec[i].target.name, texDynamicVec[i].texture, texDynamicVec[i].target.id, true);
            }
        };
        Display3DParticle.prototype.inverBind = function () {
            if (!this.invertBindMatrix.isIdentity) {
                //this.bindMatrix.invert();
                this._rotationMatrix.prepend(this.invertBindMatrix);
                //this.bindMatrix.invert();
            }
        };
        Display3DParticle.prototype.resetPos = function () {
        };
        Display3DParticle.prototype.resetMulPos = function (ary) {
        };
        Display3DParticle.prototype.getVector3DByObject = function (obj) {
            if (!obj) {
                return null;
            }
            return new Pan3d.Vector3D(obj.x, obj.y, obj.z, obj.w);
        };
        Display3DParticle.prototype.clone = function () {
            return null;
        };
        Display3DParticle.prototype.setAllByteInfo = function ($byte, version) {
            if (version === void 0) { version = 0; }
            this.creatData();
            this.data.version = version;
            this.data.setAllByteInfo($byte);
            this.timeline = new Pan3d.TimeLine();
            this.timeline.setAllDataInfo(this.data.timelineData);
            this._beginTime = this.timeline.beginTime;
        };
        Display3DParticle.prototype.creatData = function () {
            this.data = new Pan3d.ParticleData;
        };
        Display3DParticle.prototype.setTimeLine = function ($tl) {
            this.timeline = $tl;
            this._beginTime = $tl.beginTime;
        };
        Display3DParticle.prototype.destory = function () {
            this.timeline = null;
            this.bindMatrix = null;
            this.bindVecter3d = null;
            this.bindScale = null;
            this.invertBindMatrix = null;
            this.groupMatrix = null;
            this._rotationMatrix = null;
            this.modelMatrix = null;
            this.groupPos = null;
            this.groupScale = null;
            this.groupRotation = null;
        };
        return Display3DParticle;
    }(Pan3d.Object3D));
    Pan3d.Display3DParticle = Display3DParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DParticle.js.map
var Pan3d;
(function (Pan3d) {
    var ParticleData = /** @class */ (function () {
        function ParticleData() {
            this._delayedTime = 0;
            this._width = 100; //宽度
            this._height = 100; //高度
            this._originWidthScale = 0.5; //原点宽度比例
            this._originHeightScale = 0.5; //原点高度比例
            this._eyeDistance = 0; //距离视点距离
            this._watchEye = false; //是否面向视点
            this._isZiZhuan = false;
            this.overAllScale = 1;
        }
        //public vcData:Float32Array;
        ParticleData.prototype.destory = function () {
            if (this.objData) {
                this.objData.destory();
            }
            this.materialParam.destory();
            this.timelineData.destory();
            this.timelineData = null;
        };
        ParticleData.prototype.uploadGpu = function () {
        };
        ParticleData.prototype.regShader = function () {
        };
        ParticleData.prototype.initVcData = function () {
        };
        ParticleData.prototype.creatPartilce = function () {
            var particle = this.getParticle();
            particle.data = this;
            var tl = new Pan3d.TimeLine();
            tl.setAllDataInfo(this.timelineData);
            particle.setTimeLine(tl);
            particle.onCreated();
            return particle;
        };
        ParticleData.prototype.getParticle = function () {
            return null;
        };
        ParticleData.prototype.setAllByteInfo = function ($byte) {
            this.timelineData = new Pan3d.TimeLineData();
            this.timelineData.setByteData($byte);
            this._beginTime = this.timelineData.beginTime;
            if (this.version >= 15) {
                this._delayedTime = $byte.readFloat();
            }
            this._width = $byte.readFloat();
            this._height = $byte.readFloat();
            this._widthFixed = $byte.readBoolean();
            this._heightFixed = $byte.readBoolean();
            this._originWidthScale = $byte.readFloat();
            this._originHeightScale = $byte.readFloat();
            this._eyeDistance = $byte.readFloat();
            this._alphaMode = $byte.readFloat();
            this._uSpeed = $byte.readFloat();
            this._vSpeed = $byte.readFloat();
            this._animLine = $byte.readFloat();
            this._animRow = $byte.readFloat();
            this._animInterval = $byte.readFloat();
            this._renderPriority = $byte.readFloat();
            this._distortion = $byte.readBoolean();
            this._isUV = $byte.readBoolean();
            this._isU = $byte.readBoolean();
            this._isV = $byte.readBoolean();
            this._life = $byte.readFloat();
            this._life = this._life > 10000 ? Pan3d.Scene_data.MAX_NUMBER : this._life;
            this._watchEye = $byte.readBoolean();
            this._ziZhuanAngly = new Pan3d.Vector3D();
            this._ziZhuanAngly.x = $byte.readFloat();
            this._ziZhuanAngly.y = $byte.readFloat();
            this._ziZhuanAngly.z = $byte.readFloat();
            this._ziZhuanAngly.w = $byte.readFloat();
            this.rotationV3d = new Pan3d.Vector3D;
            this.rotationV3d.x = $byte.readFloat();
            this.rotationV3d.y = $byte.readFloat();
            this.rotationV3d.z = $byte.readFloat();
            this.center = new Pan3d.Vector3D();
            this.center.x = $byte.readFloat();
            this.center.y = $byte.readFloat();
            this.center.z = $byte.readFloat();
            this.center.w = $byte.readFloat();
            this.overAllScale = $byte.readFloat();
            //var materialParamStr: string = $byte.readUTF();
            //this.materialParamData = JSON.parse(materialParamStr);
            if (this._ziZhuanAngly && (this._ziZhuanAngly.x != 0 || this._ziZhuanAngly.y != 0 || this._ziZhuanAngly.z != 0)) {
                this._isZiZhuan = true;
            }
            this.readMaterialPara($byte);
            var strMaterialUrl = $byte.readUTF();
            strMaterialUrl = strMaterialUrl.replace("_byte.txt", ".txt");
            strMaterialUrl = strMaterialUrl.replace(".txt", "_byte.txt");
            this.materialByteUrl = strMaterialUrl;
        };
        Object.defineProperty(ParticleData.prototype, "materialByteUrl", {
            set: function (value) {
                var _this = this;
                if (this._materialUrl == value) {
                    return;
                }
                this._materialUrl = value;
                Pan3d.MaterialManager.getInstance().getMaterialByte(Pan3d.Scene_data.fileRoot + value, function ($matrial) { _this.onMaterialLoad($matrial); });
            },
            enumerable: true,
            configurable: true
        });
        ParticleData.prototype.onMaterialLoad = function ($matrial) {
            this.materialParam = new Pan3d.MaterialParam;
            this.materialParam.setMaterial($matrial);
            this.materialParam.setLife(this._life);
            if (this.materialParamData) {
                this.materialParam.setTextObj(this.materialParamData.texAry);
                this.materialParam.setConstObj(this.materialParamData.conAry);
            }
            Pan3d.MaterialManager.getInstance().loadDynamicTexUtil(this.materialParam);
            this.regShader();
        };
        ParticleData.prototype.readMaterialPara = function ($byte) {
            this.materialParamData = new Object();
            var $materlUrl = $byte.readUTF();
            //  this.materialParamData.materialUrl = materialUrl;
            var texAryLen = $byte.readInt();
            this.materialParamData.texAry = new Array;
            for (var i = 0; i < texAryLen; i++) {
                var temp = new Object;
                temp.isParticleColor = $byte.readBoolean();
                temp.paramName = $byte.readUTF();
                temp.url = $byte.readUTF();
                if (temp.isParticleColor) {
                    temp.curve = new Object;
                    this.readTempCurve($byte, temp.curve);
                }
                this.materialParamData.texAry.push(temp);
            }
            this.readMaterialParaConAry($byte);
        };
        ParticleData.prototype.readTempCurve = function ($byte, curve) {
            curve.values = new Array();
            var has = false;
            if (this.version >= 12) {
                var valuesLen = $byte.readInt();
                if (valuesLen > 0) {
                    var scaleNum = $byte.readFloat();
                }
                for (var j = 0; j < valuesLen; j++) {
                    var rgbLen = $byte.readInt();
                    var valuesArr = new Array;
                    for (var k = 0; k < rgbLen; k++) {
                        valuesArr.push($byte.readByte() / 127 * scaleNum);
                    }
                    curve.values.push(valuesArr);
                }
                has = true;
            }
            curve.type = $byte.readFloat();
            curve.maxFrame = $byte.readFloat();
            curve.sideType = $byte.readBoolean();
            curve.speedType = $byte.readBoolean();
            curve.useColorType = $byte.readBoolean();
            curve.items = this.readItems($byte);
            if (!has) {
                this.makeCurveData(curve);
            }
        };
        ParticleData.prototype.readItems = function ($byte) {
            var items = new Array();
            var itemsLen = $byte.readInt();
            for (var u = 0; u < itemsLen; u++) {
                var $obj = new Object;
                $obj.frame = $byte.readInt();
                $obj.vec3 = $byte.readVector3D(true);
                $obj.rotation = $byte.readVector3D(true);
                $obj.rotationLeft = $byte.readVector3D(true);
                items.push($obj);
            }
            return items;
        };
        ParticleData.prototype.makeCurveData = function ($curve) {
            var arr = $curve.items;
            var r = new Array;
            var g = new Array;
            var b = new Array;
            var a = new Array;
            for (var i = 0; i < arr.length; i++) {
                if (i == (arr.length - 1)) { //最后一个
                    r.push(arr[i].vec3.x);
                    g.push(arr[i].vec3.y);
                    b.push(arr[i].vec3.z);
                    a.push(arr[i].vec3.w);
                }
                else {
                    var $speedNum = arr[i + 1].frame - arr[i].frame;
                    var $A = arr[i].vec3;
                    var $B = arr[i + 1].vec3;
                    var $a = $curve.items[i].rotation;
                    var $b = $curve.items[i + 1].rotationLeft;
                    r = r.concat(this.getBzData($A.x, $B.x, $a.x, $b.x, $speedNum));
                    g = g.concat(this.getBzData($A.y, $B.y, $a.y, $b.y, $speedNum));
                    b = b.concat(this.getBzData($A.z, $B.z, $a.z, $b.z, $speedNum));
                    a = a.concat(this.getBzData($A.w, $B.w, $a.w, $b.w, $speedNum));
                }
            }
            $curve.values = new Array();
            $curve.values[0] = r;
            $curve.values[1] = g;
            $curve.values[2] = b;
            $curve.values[3] = a;
        };
        ParticleData.prototype.getBzData = function ($ax, $bx, ar, br, $speedNum) {
            var num80 = 10;
            var a = new Pan3d.Vector2D(0, $ax * num80);
            var d = new Pan3d.Vector2D($speedNum, $bx * num80);
            var m = new Pan3d.Matrix3D;
            var p = new Pan3d.Vector3D;
            m.identity();
            m.appendRotation(-ar, Pan3d.Vector3D.Z_AXIS);
            p = m.transformVector(new Pan3d.Vector3D($speedNum / 2, 0, 0));
            var b = new Pan3d.Vector2D($speedNum / 2, a.y + p.y);
            m.identity();
            m.appendRotation(-br, Pan3d.Vector3D.Z_AXIS);
            p = m.transformVector(new Pan3d.Vector3D(-$speedNum / 2, 0, 0));
            var c = new Pan3d.Vector2D($speedNum / 2, d.y + p.y);
            var ary = [a, b, c, d];
            var posAry = new Array;
            var baseW = 3;
            for (var i = 1; i < $speedNum * 3; i++) {
                posAry.push(this.drawbezier(ary, i / ($speedNum * 3)));
            }
            var _valueVec = new Array;
            for (i = 0; i < $speedNum; i++) {
                for (var j = 0; j < posAry.length; j++) {
                    if (posAry[j].x >= i) {
                        _valueVec.push(posAry[j].y / num80);
                        break;
                    }
                }
            }
            return _valueVec;
        };
        ParticleData.prototype.drawbezier = function (_array, _time) {
            var _newarray = new Array();
            if (_array.length == 0) {
                return new Pan3d.Vector2D();
            }
            for (var i in _array) {
                _newarray.push(new Pan3d.Vector2D(_array[i].x, _array[i].y));
            }
            while (_newarray.length > 1) {
                for (var j = 0; j < _newarray.length - 1; j++) {
                    this.mathmidpoint(_newarray[j], _newarray[j + 1], _time);
                }
                _newarray.pop();
            }
            return _newarray[0];
        };
        ParticleData.prototype.mathmidpoint = function (a, b, t) {
            var _nx, _ny;
            _nx = a.x + (b.x - a.x) * t;
            _ny = a.y + (b.y - a.y) * t;
            a.x = _nx;
            a.y = _ny;
        };
        ParticleData.prototype.readMaterialParaConAry = function ($byte) {
            var arr = new Array;
            var conAryLen = $byte.readInt();
            for (var i = 0; i < conAryLen; i++) {
                var obj = new Object;
                obj.type = $byte.readFloat();
                obj.indexID = $byte.readFloat();
                obj.paramName = $byte.readUTF();
                obj.curve = new Object();
                this.readTempCurve($byte, obj.curve);
                arr.push(obj);
            }
            this.materialParamData.conAry = arr;
        };
        ParticleData.prototype.setFloat32Vec = function (key, ary) {
        };
        ParticleData.prototype.setFloat32Mat = function (key, ary) {
        };
        return ParticleData;
    }());
    Pan3d.ParticleData = ParticleData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleGpuData = /** @class */ (function (_super) {
        __extends(ParticleGpuData, _super);
        function ParticleGpuData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ParticleGpuData;
    }(Pan3d.ObjData));
    Pan3d.ParticleGpuData = ParticleGpuData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleGpuData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFacetParticle = /** @class */ (function (_super) {
        __extends(Display3DFacetParticle, _super);
        function Display3DFacetParticle() {
            var _this = _super.call(this) || this;
            _this._lifeVisible = true;
            //this.objData = new ParticleGpuData();
            //this.program = ProgrmaManager.getInstance().getProgram(Display3DFacetShader.Display3D_Facet_Shader);
            _this._resultUvVec = new Array(2);
            return _this;
        }
        Object.defineProperty(Display3DFacetParticle.prototype, "facetdata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DFacetParticle.prototype.creatData = function () {
            this.data = new Pan3d.ParticleFacetData;
        };
        Display3DFacetParticle.prototype.update = function () {
            if (!this._lifeVisible) {
                return;
            }
            _super.prototype.update.call(this);
        };
        Display3DFacetParticle.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._lifeVisible = true;
        };
        Display3DFacetParticle.prototype.setVc = function () {
            this.updateRotaionMatrix();
            this.updateUV();
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //this.data.setFloat32Mat("viewMatrix3D", Scene_data.viewMatrx3D.m);//0
            this.data.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //this.data.setFloat32Mat("camMatrix3D", Scene_data.cam3D.cameraMatrix.m);//16
            this.data.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "posMatrix3D", this.modelMatrix.m);
            //this.data.setFloat32Mat("posMatrix3D", this.modelMatrix.m);//48
            this.data.vcmatData.set(this.modelMatrix.m, 48);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "rotationMatrix3D", this._rotationMatrix.m);
            //this.data.setFloat32Mat("rotationMatrix3D", this._rotationMatrix.m);//32
            this.data.vcmatData.set(this._rotationMatrix.m, 32);
            //Scene_data.context3D.setVc2fv(this.data.materialParam.shader, "uvMove", this._resultUvVec);
            //this.data.setFloat32Vec("uvMove",this._resultUvVec);//64
            this.data.vcmatData.set(this._resultUvVec, 64);
            this.setMaterialVc();
            if (!this.facetdata._isCycle && this._time / Pan3d.Scene_data.frameTime > (this.data._life - 2)) {
                this._lifeVisible = false;
            }
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
        };
        Display3DFacetParticle.prototype.setVa = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);
            if (!tf) {
                Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.data.objData.stride, 0);
                Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.data.objData.stride, 12);
            }
            //Scene_data.context3D.setVa(0, 3, this.data.objData.vertexBuffer);
            //Scene_data.context3D.setVa(1, 2, this.data.objData.uvBuffer);
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.data.objData.indexBuffer, this.data.objData.treNum);
        };
        Display3DFacetParticle.prototype.updateRotaionMatrix = function () {
            this._rotationMatrix.identity();
            if (this.data._watchEye) {
                this.timeline.inverAxisRotation(this._rotationMatrix);
                if (!this.facetdata._locky && !this.facetdata._lockx) {
                    this.inverBind();
                }
                if (!this.facetdata._locky) {
                    this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
                }
                if (!this.facetdata._lockx) {
                    this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
                }
            }
            if (this.data._isZiZhuan) {
                this.timeline.applySelfRotation(this._rotationMatrix, this.data._ziZhuanAngly);
            }
        };
        Display3DFacetParticle.prototype.updateUV = function () {
            var currentFrame = float2int(this._time / Pan3d.Scene_data.frameTime);
            currentFrame = currentFrame > this.facetdata._maxAnimTime ? this.facetdata._maxAnimTime : currentFrame;
            currentFrame = (currentFrame / this.data._animInterval) % (this.data._animLine * this.data._animRow);
            this._resultUvVec[0] = float2int(currentFrame % this.data._animLine) / this.data._animLine + this._time / Pan3d.Scene_data.frameTime * this.data._uSpeed;
            this._resultUvVec[1] = float2int(currentFrame / this.data._animLine) / this.data._animRow + this._time / Pan3d.Scene_data.frameTime * this.data._vSpeed;
        };
        return Display3DFacetParticle;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DFacetParticle = Display3DFacetParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFacetParticle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFacetShader = /** @class */ (function (_super) {
        __extends(Display3DFacetShader, _super);
        function Display3DFacetShader() {
            return _super.call(this) || this;
        }
        Display3DFacetShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2TexCoord");
        };
        Display3DFacetShader.prototype.getMat4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DFacetShader.shader_mat4[key] + "]";
        };
        Display3DFacetShader.prototype.getVec4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DFacetShader.shader_vec4[key][0] + "][" + Display3DFacetShader.shader_vec4[key][1] + "]";
        };
        Display3DFacetShader.getVcSize = function () {
            return 5;
        };
        Display3DFacetShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec4 v3Position;\n" +
                "attribute vec2 v2TexCoord;\n" +
                "uniform mat4 vcmat[" + Display3DFacetShader.getVcSize() + "];\n" + //所有vc值
                //"uniform mat4 viewMatrix3D;\n" +
                //"uniform mat4 camMatrix3D;\n" +
                // "uniform mat4 rotationMatrix3D;\n" +
                //"uniform mat4 posMatrix3D;\n" +
                //"uniform vec2 uvMove;\n" +
                "varying vec2 v0;\n" +
                "void main(void){\n" +
                "   v0 = v2TexCoord + vec2(" + this.getVec4Str("uvMove") + ".xy);\n" +
                "   gl_Position = " + this.getMat4Str("viewMatrix3D") + "  * " + this.getMat4Str("camMatrix3D") + " * "
                + this.getMat4Str("posMatrix3D") + " * " + this.getMat4Str("rotationMatrix3D") + " * v3Position;\n" +
                "}";
            return $str;
        };
        Display3DFacetShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D tex;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(tex, v0.xy);\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DFacetShader.Display3D_Facet_Shader = "Display3DFacetShader";
        Display3DFacetShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1, rotationMatrix3D: 2, posMatrix3D: 3 };
        Display3DFacetShader.shader_vec4 = { uvMove: [4, 0] };
        return Display3DFacetShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DFacetShader = Display3DFacetShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFacetShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleFacetData = /** @class */ (function (_super) {
        __extends(ParticleFacetData, _super);
        function ParticleFacetData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._isCycle = false; //是否循环
            return _this;
        }
        ParticleFacetData.prototype.setAllByteInfo = function ($byte) {
            this._maxAnimTime = $byte.readFloat();
            this._isCycle = $byte.readBoolean();
            this._lockx = $byte.readBoolean();
            this._locky = $byte.readBoolean();
            _super.prototype.setAllByteInfo.call(this, $byte);
            this.initVcData();
            this.uploadGpu();
        };
        ParticleFacetData.prototype.getParticle = function () {
            return new Pan3d.Display3DFacetParticle;
        };
        ParticleFacetData.prototype.uploadGpu = function () {
            this.objData = new Pan3d.ObjData;
            this.makeRectangleData(this._width, this._height, this._originWidthScale, this._originHeightScale, this._isUV, this._isU, this._isV, this._animLine, this._animRow);
        };
        ParticleFacetData.prototype.makeRectangleData = function (width, height, offsetX, offsetY, isUV, isU, isV, animLine, animRow) {
            if (offsetX === void 0) { offsetX = 0.5; }
            if (offsetY === void 0) { offsetY = 0.5; }
            if (isUV === void 0) { isUV = false; }
            if (isU === void 0) { isU = false; }
            if (isV === void 0) { isV = false; }
            if (animLine === void 0) { animLine = 1; }
            if (animRow === void 0) { animRow = 1; }
            var uvAry = new Array;
            var verterList = new Array;
            var ary = new Array;
            ary.push(new Pan3d.Vector2D(0, 0));
            ary.push(new Pan3d.Vector2D(0, 1 / animRow));
            ary.push(new Pan3d.Vector2D(1 / animLine, 1 / animRow));
            ary.push(new Pan3d.Vector2D(1 / animLine, 0));
            if (isU) {
                for (var i = 0; i < ary.length; i++) {
                    ary[i].x = -ary[i].x;
                }
            }
            if (isV) {
                for (var i = 0; i < ary.length; i++) {
                    ary[i].y = -ary[i].y;
                }
            }
            if (isUV) {
                ary.push(ary.shift());
            }
            for (var i = 0; i < ary.length; i++) {
                uvAry.push(ary[i].x, ary[i].y);
            }
            verterList.push(-offsetX * width, height - offsetY * height, 0);
            verterList.push(ary[0].x, ary[0].y);
            verterList.push(width - offsetX * width, height - offsetY * height, 0);
            verterList.push(ary[1].x, ary[1].y);
            verterList.push(width - offsetX * width, -offsetY * height, 0);
            verterList.push(ary[2].x, ary[2].y);
            verterList.push(-offsetX * width, -offsetY * height, 0);
            verterList.push(ary[3].x, ary[3].y);
            var indexs = new Array;
            indexs.push(0, 1, 2, 0, 2, 3);
            this.objData.stride = 5 * 4;
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(verterList);
            //this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(uvAry);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(indexs);
            this.objData.treNum = indexs.length;
        };
        ParticleFacetData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DFacetShader.getVcSize() * 16);
        };
        ParticleFacetData.prototype.setFloat32Vec = function (key, ary) {
            var idxary = Pan3d.Display3DFacetShader.shader_vec4[key];
            var idx = idxary[0] * 16 + idxary[1] * 4;
            this.vcmatData.set(ary, idx);
        };
        ParticleFacetData.prototype.setFloat32Mat = function (key, ary) {
            var idx = Pan3d.Display3DFacetShader.shader_mat4[key] * 16;
            this.vcmatData.set(ary, idx);
        };
        ParticleFacetData.prototype.regShader = function () {
            //var shader: Display3DFacetShader = new Display3DFacetShader();
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DFacetShader.Display3D_Facet_Shader, Pan3d.Display3DFacetShader, this.materialParam.material);
            this.materialParam.program = this.materialParam.shader.program;
        };
        return ParticleFacetData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleFacetData = ParticleFacetData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleFacetData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DBallPartilce = /** @class */ (function (_super) {
        __extends(Display3DBallPartilce, _super);
        function Display3DBallPartilce() {
            return _super.call(this) || this;
            //this.objData = new ParticleBallGpuData();
        }
        Object.defineProperty(Display3DBallPartilce.prototype, "balldata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DBallPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleBallData;
        };
        Display3DBallPartilce.prototype.setVa = function () {
            this.setVaCompress();
            /**
            Scene_data.context3D.setVa(0, 3, this.data.objData.vertexBuffer);
            Scene_data.context3D.setVa(1, 3, this.data.objData.uvBuffer);
            Scene_data.context3D.setVa(2, 4, this.particleBallData.basePosBuffer);
            Scene_data.context3D.setVa(3, 3, this.particleBallData.beMoveBuffer);
    
            if (this.balldata._needSelfRotation) {
                Scene_data.context3D.setVa(4, 2, this.particleBallData.baseRotationBuffer);
            }
    
            if (this.balldata._needRandomColor) {
                Scene_data.context3D.setVa(5, 4, this.particleBallData.randomColorBuffer);
            }
             */
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.data.objData.indexBuffer, this.data.objData.treNum);
        };
        Display3DBallPartilce.prototype.setVaCompress = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);
            if (tf) {
                return;
            }
            Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.data.objData.stride, 0);
            Pan3d.Scene_data.context3D.setVaOffset(1, 3, this.data.objData.stride, 12);
            Pan3d.Scene_data.context3D.setVaOffset(2, 4, this.data.objData.stride, 24);
            Pan3d.Scene_data.context3D.setVaOffset(3, 3, this.data.objData.stride, 40);
            if (this.balldata._needSelfRotation) {
                Pan3d.Scene_data.context3D.setVaOffset(4, 2, this.data.objData.stride, 52);
            }
            if (this.balldata._needRandomColor) {
                Pan3d.Scene_data.context3D.setVaOffset(5, 4, this.particleBallData.stride, this.particleBallData.randomOffset);
            }
        };
        Display3DBallPartilce.prototype.resetVa = function () {
            //Scene_data.context3D.clearVa(2);
            //Scene_data.context3D.clearVa(3);
            //Scene_data.context3D.clearVa(4);
            //Scene_data.context3D.clearVa(5);
        };
        Display3DBallPartilce.prototype.setVc = function () {
            this.updateWatchCaramMatrix();
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //this.balldata.setFloat32Mat("viewMatrix3D", Scene_data.viewMatrx3D.m);
            this.balldata.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //this.balldata.setFloat32Mat("camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            this.balldata.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "modelMatrix", this.modelMatrix.m);
            //this.balldata.setFloat32Mat("modelMatrix", this.modelMatrix.m);//32
            this.balldata.vcmatData.set(this.modelMatrix.m, 32);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "watheye", this._rotationMatrix.m);
            //this.balldata.setFloat32Mat("watheye", this._rotationMatrix.m);//48
            this.balldata.vcmatData.set(this._rotationMatrix.m, 48);
            this.balldata._timeVec[0] = this._time / Pan3d.Scene_data.frameTime * this.balldata._playSpeed;
            //Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "time", this.balldata._timeVec);
            //this.balldata.setFloat32Vec("time", this.balldata._timeVec);//80
            this.balldata.vcmatData.set(this.balldata._timeVec, 80);
            /**
             if (this.balldata._needAddSpeed){
                 Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "force", this.balldata._addSpeedVec);
             }
    
             if (this.balldata._needScale){
                 Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "scale", this.balldata._scaleVec);
                 Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "scaleCtrl", this.balldata._scaleCtrlVec);
             }
            */
            if (this.balldata._is3Dlizi) {
                this.updateAllRotationMatrix();
                this.balldata._wordPosVec[0] = this.bindVecter3d.x;
                this.balldata._wordPosVec[1] = this.bindVecter3d.y;
                this.balldata._wordPosVec[2] = this.bindVecter3d.z;
                this.balldata._caramPosVec[0] = Pan3d.Scene_data.cam3D.x;
                this.balldata._caramPosVec[1] = Pan3d.Scene_data.cam3D.y;
                this.balldata._caramPosVec[2] = Pan3d.Scene_data.cam3D.z;
                //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "rotationMatrix", this.balldata._allRotationMatrix.m);
                //this.balldata.setFloat32Mat("rotationMatrix", this.balldata._allRotationMatrix.m);//64
                this.balldata.vcmatData.set(this.balldata._allRotationMatrix.m, 64);
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "worldPos", this.balldata._wordPosVec);
                //this.balldata.setFloat32Vec("worldPos", this.balldata._wordPosVec);//96
                this.balldata.vcmatData.set(this.balldata._wordPosVec, 96);
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "camPos", this.balldata._caramPosVec);
                //this.balldata.setFloat32Vec("camPos", this.balldata._caramPosVec);//100
                this.balldata.vcmatData.set(this.balldata._caramPosVec, 100);
            }
            /**
            if (this.balldata._uvType == 1) {
                Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "animCtrl", this.balldata._animCtrlVec);
            } else if (this.balldata._uvType == 2) {
                Scene_data.context3D.setVc2fv(this.data.materialParam.shader, "uvCtrl", this.balldata._uvCtrlVec);
            }
             */
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.balldata.vcmatData);
            this.setMaterialVc();
        };
        Display3DBallPartilce.prototype.updateWatchCaramMatrix = function () {
            this._rotationMatrix.identity();
            if (this.balldata.facez) {
                this._rotationMatrix.prependRotation(90, Pan3d.Vector3D.X_AXIS);
            }
            else if (this.balldata._is3Dlizi) {
                //if (_axisRotaion) {
                //    _rotationMatrix.prependRotation(-_axisRotaion.num, _axisRotaion.axis);
                //}
                this.timeline.inverAxisRotation(this._rotationMatrix);
                this.inverBind();
            }
            else if (this.balldata._watchEye) {
                //if (_axisRotaion) {
                //    _rotationMatrix.prependRotation(-_axisRotaion.num, _axisRotaion.axis);
                //}
                this.timeline.inverAxisRotation(this._rotationMatrix);
                this.inverBind();
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            }
        };
        Display3DBallPartilce.prototype.updateAllRotationMatrix = function () {
            this.balldata._allRotationMatrix.identity();
            this.balldata._allRotationMatrix.prependScale(this.data.overAllScale * this._scaleX * 0.1 * this.bindScale.x, this.data.overAllScale * this._scaleY * 0.1 * this.bindScale.y, this.data.overAllScale * this._scaleZ * 0.1 * this.bindScale.z);
            //if (_axisRotaion) {
            //    _allRotationMatrix.appendRotation(_axisRotaion.num, _axisRotaion.axis, _axisRotaion.axisPos);
            //}
            this.timeline.inverAxisRotation(this._rotationMatrix);
            if (this.isInGroup) {
                this.balldata._allRotationMatrix.appendRotation(this.groupRotation.x, Pan3d.Vector3D.X_AXIS);
                this.balldata._allRotationMatrix.appendRotation(this.groupRotation.y, Pan3d.Vector3D.Y_AXIS);
                this.balldata._allRotationMatrix.appendRotation(this.groupRotation.z, Pan3d.Vector3D.Z_AXIS);
            }
            if (this.bindMatrix) {
                this.balldata._allRotationMatrix.append(this.bindMatrix);
            }
        };
        Object.defineProperty(Display3DBallPartilce.prototype, "particleBallData", {
            get: function () {
                return (this.data.objData);
            },
            enumerable: true,
            configurable: true
        });
        return Display3DBallPartilce;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DBallPartilce = Display3DBallPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DBallPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DBallShader = /** @class */ (function (_super) {
        __extends(Display3DBallShader, _super);
        function Display3DBallShader() {
            return _super.call(this) || this;
        }
        Display3DBallShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "vPosition");
            $context.bindAttribLocation(this.program, 1, "texcoord");
            $context.bindAttribLocation(this.program, 2, "basePos");
            $context.bindAttribLocation(this.program, 3, "speed");
            var needRotation = this.paramAry[3];
            if (needRotation) {
                $context.bindAttribLocation(this.program, 4, "rotation");
            }
            var hasRandomClolr = this.paramAry[1];
            if (hasRandomClolr) {
                $context.bindAttribLocation(this.program, 5, "color");
            }
        };
        //public static shader_vec4 = {time:[0,0],scale:[1,1],scaleCtrl:[2,2],force:[3,3],worldPos:[4,0],camPos:[5,1],animCtrl:[6,2],uvCtrl:[7,3]};
        Display3DBallShader.prototype.getMat4Str = function (key) {
            return "vcmat[" + Display3DBallShader.shader_mat4[key] + "]";
        };
        Display3DBallShader.prototype.getVec4Str = function (key) {
            return "vcmat[" + Display3DBallShader.shader_vec4[key][0] + "][" + Display3DBallShader.shader_vec4[key][1] + "]";
            //return  "vc[" + Display3DBallShader.shader_vec4[key][0] + "]";
            //return key;
        };
        Display3DBallShader.getVcSize = function () {
            return 7;
        };
        Display3DBallShader.prototype.getVertexShaderString = function () {
            var baseStr;
            var scaleStr;
            var rotationStr;
            var posStr;
            var addSpeedStr;
            var mulStr;
            var resultPosStr;
            var uvStr;
            var particleColorStr;
            var randomColorStr;
            var uvDefaultStr;
            var uvAnimStr;
            var uvSpeedStr;
            var randomColorStr;
            var particleColorStr;
            var defineBaseStr;
            var defineScaleStr;
            var defineRotaionStr;
            var defineAddSpeedStr;
            var defineMulStr;
            var defineUvAnimStr;
            var defineUvSpeedStr;
            var defineRandomColor;
            var defineParticleColor;
            defineBaseStr =
                "attribute vec4 vPosition;\n" +
                    "attribute vec3 texcoord;\n" + //uv坐标xy
                    "attribute vec4 basePos;\n" + //基础位置xyz，发射起始时间w
                    "attribute vec3 speed;\n" + //速度xyz
                    "uniform mat4 vcmat[" + Display3DBallShader.getVcSize() + "];\n" + //所有vc值
                    //"uniform mat4 watheye;\n" +//面向视点矩阵
                    //"uniform mat4 viewMatrix3D;\n" +//模型矩阵
                    //"uniform mat4 modelMatrix;\n" +//模型矩阵
                    //"uniform mat4 camMatrix3D;\n" +//摄像机矩阵
                    //"uniform vec4 time;\n" +//当前时间x,自身加速度y,粒子生命z,是否循环w
                    "varying vec2 v0;\n";
            defineRandomColor =
                "attribute vec4 color;\n" + //随机颜色
                    "varying vec4 v2;\n"; //随机颜色
            defineScaleStr = "";
            //"uniform vec4 scale;\n" +//缩放x，抖动周期y，抖动振幅z
            //"uniform vec4 scaleCtrl;\n"//宽度不变，高度不变，最大比例，最小比例
            defineRotaionStr =
                "attribute vec2 rotation;\n"; //基础旋转x ， 旋转速度y
            defineAddSpeedStr = "";
            //"uniform vec3 force;\n";//外力x，外力y，外力z
            defineMulStr = "";
            //"uniform mat4 rotationMatrix;\n" +//旋转矩阵
            //"uniform vec3 worldPos;\n" +//世界中的位置
            //"uniform vec3 camPos;\n"//世界中的位置
            defineUvAnimStr = "";
            //"uniform vec3 animCtrl;\n"//动画行数x，动画列数，动画间隔
            defineUvSpeedStr = "";
            //"uniform vec2 uvCtrl;\n"//u滚动速度，v滚动速度
            defineParticleColor =
                "varying vec2 v1;\n"; //粒子颜色坐标
            baseStr =
                "float ctime = " + this.getVec4Str("time") + ".x - basePos.w;\n" + //计算当前时间
                    "if (" + this.getVec4Str("time") + ".w > 0.0 && ctime >= 0.0) {\n" +
                    "    ctime = fract(ctime / " + this.getVec4Str("time") + ".z) * " + this.getVec4Str("time") + ".z;\n" +
                    "}\n" +
                    "vec4 pos = vPosition;\n"; //自身位置
            scaleStr =
                "float stime = ctime - " + this.getVec4Str("scale") + ".w;\n" +
                    "stime = max(stime,0.0);\n" +
                    "float sf = " + this.getVec4Str("scale") + ".x * stime;\n" +
                    "if (" + this.getVec4Str("scale") + ".y != 0.0 && " + this.getVec4Str("scale") + ".z != 0.0) {\n" +
                    "    sf += sin(" + this.getVec4Str("scale") + ".y * stime) * " + this.getVec4Str("scale") + ".z;\n" +
                    "}\n" +
                    "if (sf > " + this.getVec4Str("scaleCtrl") + ".z) {\n" +
                    "    sf = " + this.getVec4Str("scaleCtrl") + ".z;\n" +
                    "} else if (sf < " + this.getVec4Str("scaleCtrl") + ".w) {\n" +
                    "    sf = " + this.getVec4Str("scaleCtrl") + ".w;\n" +
                    "}\n" +
                    "vec2 sv2 = vec2(" + this.getVec4Str("scaleCtrl") + ".x * sf, " + this.getVec4Str("scaleCtrl") + ".y * sf);\n" +
                    "sv2 = sv2 + 1.0;\n" +
                    "pos.x *= sv2.x;\n" +
                    "pos.y *= sv2.y;\n";
            rotationStr =
                "float angle = rotation.x + rotation.y * ctime;\n" +
                    "vec4 np = vec4(sin(angle), cos(angle), 0, 0);\n" +
                    "np.z = np.x * pos.y + np.y * pos.x;\n" + //b.x = sin_z * a.y + cos_z * a.x;
                    "np.w = np.y * pos.y - np.x * pos.x;\n" + //b.y = cos_z * a.y - sin_z * a.x;
                    "pos.xy = np.zw;\n";
            posStr =
                "vec3 addPos = speed * ctime;\n" + //运动部分
                    "vec3 uspeed = vec3(0,0,0);\n" +
                    "if (ctime < 0.0 || ctime >= " + this.getVec4Str("time") + ".z) {\n" + //根据时间控制粒子是否显示
                    "    addPos.y = addPos.y + 100000.0;\n" +
                    "}\n";
            addSpeedStr =
                "if(" + this.getVec4Str("time") + ".y != 0.0 && length(speed) != 0.0) {\n" +
                    "    uspeed = vec3(speed.x, speed.y, speed.z);\n" +
                    "    uspeed = normalize(uspeed);\n" +
                    "    uspeed = uspeed * " + this.getVec4Str("time") + ".y;\n" +
                    "    uspeed.xyz = uspeed.xyz + " + this.getVec4Str("force") + ".xyz;\n" +
                    "} else {\n" +
                    "    uspeed = vec3(" + this.getVec4Str("force") + ".x, " + this.getVec4Str("force") + ".y, " + this.getVec4Str("force") + ".z);\n" +
                    "}\n" +
                    "addPos.xyz = addPos.xyz + uspeed.xyz * ctime * ctime;\n";
            mulStr =
                "uspeed = speed + uspeed * ctime * 2.0;\n" + //当前速度方向
                    "uspeed = normalize(uspeed);\n" +
                    "vec4 tempMul = " + this.getMat4Str("rotationMatrix") + " * vec4(uspeed,1.0);\n" +
                    "uspeed.xyz = tempMul.xyz;\n" +
                    "uspeed = normalize(uspeed);\n" +
                    "vec3 cPos = addPos;\n" + //v(视点-位置)
                    "tempMul = " + this.getMat4Str("rotationMatrix") + " * vec4(cPos,1.0);\n" +
                    "cPos.xyz = tempMul.xyz; \n" +
                    "cPos.xyz = " + this.getVec4Str("worldPos") + ".xyz + cPos.xyz;\n" +
                    "cPos.xyz = " + this.getVec4Str("camPos") + ".xyz - cPos.xyz;\n" +
                    "cPos = normalize(cPos);\n" +
                    "cPos = cross(uspeed, cPos);\n" + //法线
                    "cPos = normalize(cPos);\n" +
                    "uspeed = uspeed * pos.x;\n" +
                    "cPos = cPos * pos.y;\n" +
                    "pos.xyz = uspeed.xyz + cPos.xyz;\n";
            resultPosStr =
                "pos = " + this.getMat4Str("watheye") + " * pos;\n" + //控制是否面向视点
                    "pos.xyz = pos.xyz + basePos.xyz + addPos.xyz;\n" +
                    "gl_Position = " + this.getMat4Str("viewMatrix3D") + " * " + this.getMat4Str("camMatrix3D") + " * " + this.getMat4Str("modelMatrix") + " * pos;\n";
            uvDefaultStr =
                "v0 = vec2(texcoord.x,texcoord.y);\n";
            uvAnimStr =
                "vec2 uv = vec2(texcoord.x,texcoord.y);\n" +
                    "float animframe = floor(ctime / " + this.getVec4Str("animCtrl") + ".z);\n" +
                    "animframe = animframe / " + this.getVec4Str("animCtrl") + ".x;\n" +
                    "uv.x += animframe;\n" +
                    "animframe = floor(animframe);\n" +
                    "uv.y += animframe / " + this.getVec4Str("animCtrl") + ".y;\n" +
                    "v0.xy = uv.xy;\n";
            uvSpeedStr =
                "vec2 uv = vec2(" + this.getVec4Str("uvCtrl") + ".x," + this.getVec4Str("uvCtrl") + ".y);\n" +
                    "uv.xy = uv.xy * ctime + texcoord.xy;\n" +
                    "v0.xy = uv.xy;\n";
            randomColorStr =
                "v2 = color;\n";
            particleColorStr =
                "v1 = vec2(ctime/" + this.getVec4Str("time") + ".z,1.0);\n";
            //this.paramAry
            var hasParticle = this.paramAry[0];
            var hasRandomClolr = this.paramAry[1];
            var isMul = this.paramAry[2];
            var needRotation = this.paramAry[3];
            var needScale = this.paramAry[4];
            var needAddSpeed = this.paramAry[5];
            var uvType = this.paramAry[6];
            var str = "";
            var defineStr = "";
            str += baseStr;
            defineStr += defineBaseStr;
            if (needScale) {
                str += scaleStr;
                defineStr += defineScaleStr;
            }
            if (needRotation) {
                str += rotationStr;
                defineStr += defineRotaionStr;
            }
            str += posStr;
            if (needAddSpeed) {
                str += addSpeedStr;
                defineStr += defineAddSpeedStr;
            }
            if (isMul) {
                str += mulStr;
                defineStr += defineMulStr;
            }
            str += resultPosStr;
            if (uvType == 1) {
                str += uvAnimStr;
                defineStr += defineUvAnimStr;
            }
            else if (uvType == 2) {
                str += uvSpeedStr;
                defineStr += defineUvSpeedStr;
            }
            else {
                str += uvDefaultStr;
            }
            if (hasRandomClolr) {
                str += randomColorStr;
                defineStr += defineRandomColor;
            }
            if (hasParticle) {
                str += particleColorStr;
                defineStr += defineParticleColor;
            }
            //str += uvStr
            //str += particleColorStr
            //str += randomColorStr
            var resultAllStr = defineStr + "void main(){\n" + str + "}";
            ////console.log(resultAllStr);
            return resultAllStr;
        };
        Display3DBallShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D tex;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(tex, v0.xy);\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DBallShader.Display3D_Ball_Shader = "Display3DBallShader";
        Display3DBallShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1, modelMatrix: 2, watheye: 3, rotationMatrix: 4 };
        Display3DBallShader.shader_vec4 = { time: [5, 0], scale: [5, 1], scaleCtrl: [5, 2], force: [5, 3], worldPos: [6, 0], camPos: [6, 1], animCtrl: [6, 2], uvCtrl: [6, 3] };
        return Display3DBallShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DBallShader = Display3DBallShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DBallShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleBallData = /** @class */ (function (_super) {
        __extends(ParticleBallData, _super);
        function ParticleBallData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._totalNum = 1;
            _this._acceleration = 0.2;
            _this._toscale = 0.00;
            _this._shootAngly = new Pan3d.Vector3D(1, 0, 0);
            _this._shootSpeed = 0;
            _this._isRandom = false;
            _this._isSendRandom = false;
            _this._isSendAngleRandom = false;
            _this._paticleMaxScale = 1;
            _this._paticleMinScale = 1;
            _this._addforce = new Pan3d.Vector3D(0, 0, 0);
            _this._lixinForce = new Pan3d.Vector3D(0, 0, 0);
            _this._waveform = new Pan3d.Vector3D(0, 0, 0, 0);
            _this._round = new Pan3d.Vector3D();
            _this._is3Dlizi = false;
            _this._speed = 1;
            _this._isLoop = false;
            _this._basePositon = new Pan3d.Vector3D(0, 0, 0);
            _this._baseRandomAngle = 0;
            _this._shapeType = 0;
            _this._playSpeed = 1;
            _this._beginScale = 0;
            return _this;
        }
        ParticleBallData.prototype.getParticle = function () {
            return new Pan3d.Display3DBallPartilce;
        };
        ParticleBallData.prototype.setAllByteInfo = function ($byte) {
            this._totalNum = $byte.readFloat();
            this._acceleration = $byte.readFloat();
            this._toscale = $byte.readFloat();
            this._shootSpeed = $byte.readFloat();
            this._isRandom = $byte.readBoolean();
            this._isSendRandom = $byte.readBoolean();
            this._round.x = $byte.readFloat();
            this._round.y = $byte.readFloat();
            this._round.z = $byte.readFloat();
            this._round.w = $byte.readFloat();
            this._is3Dlizi = $byte.readBoolean();
            this._halfCircle = $byte.readBoolean();
            this._shootAngly.x = $byte.readFloat();
            this._shootAngly.y = $byte.readFloat();
            this._shootAngly.z = $byte.readFloat();
            this._shootAngly.w = $byte.readFloat();
            this._shootAngly.normalize(); //发射锥角，设置为摸范围内 原来没有做处理，新加
            this._speed = $byte.readFloat();
            this._isLoop = $byte.readBoolean();
            this._isSendAngleRandom = $byte.readBoolean();
            this._waveform.x = $byte.readFloat();
            this._waveform.y = $byte.readFloat();
            this._waveform.z = $byte.readFloat();
            this._waveform.w = $byte.readFloat();
            this._closeSurface = $byte.readBoolean();
            this._isEven = $byte.readBoolean();
            this._paticleMaxScale = $byte.readFloat();
            this._paticleMinScale = $byte.readFloat();
            this._basePositon.x = $byte.readFloat();
            this._basePositon.y = $byte.readFloat();
            this._basePositon.z = $byte.readFloat();
            this._basePositon.w = $byte.readFloat();
            this._baseRandomAngle = $byte.readFloat();
            this._shapeType = $byte.readFloat();
            this._lockX = $byte.readBoolean();
            this._lockY = $byte.readBoolean();
            this._addforce.x = $byte.readFloat();
            this._addforce.y = $byte.readFloat();
            this._addforce.z = $byte.readFloat();
            this._addforce.w = $byte.readFloat();
            this._addforce.scaleByW();
            this._lixinForce.x = $byte.readFloat();
            this._lixinForce.y = $byte.readFloat();
            this._lixinForce.z = $byte.readFloat();
            this._lixinForce.w = $byte.readFloat();
            this._islixinAngly = $byte.readBoolean();
            this._particleRandomScale = new Pan3d.Vector3D();
            this._particleRandomScale.x = $byte.readFloat();
            this._particleRandomScale.y = $byte.readFloat();
            this._particleRandomScale.z = $byte.readFloat();
            this._particleRandomScale.w = $byte.readFloat();
            this._playSpeed = $byte.readFloat();
            this.facez = $byte.readBoolean();
            this._beginScale = $byte.readFloat();
            this._widthFixed = $byte.readBoolean();
            this._heightFixed = $byte.readBoolean();
            this.readRandomColor($byte);
            if (this._acceleration != 0 || this._addforce.x != 0 || this._addforce.y != 0 || this._addforce.z != 0) {
                this._needAddSpeed = true;
                this._addSpeedVec = [this._addforce.x, this._addforce.y, this._addforce.z];
            }
            else {
                this._needAddSpeed = false;
            }
            if (this._toscale != 0 || this._waveform.x != 0 || this._waveform.y != 0) {
                this._needScale = true;
                this._scaleVec = [this._toscale, this._waveform.x, this._waveform.y, this._beginScale];
                this._scaleCtrlVec = [this._widthFixed ? 0 : 1, this._heightFixed ? 0 : 1, this._paticleMaxScale - 1, this._paticleMinScale - 1];
            }
            else {
                this._needScale = false;
            }
            _super.prototype.setAllByteInfo.call(this, $byte);
            this._timeVec = [0, this._acceleration, this._life, this._isLoop ? 1 : -1];
            if (this._is3Dlizi) {
                this._wordPosVec = [0, 0, 0];
                this._caramPosVec = [0, 0, 0];
                this._allRotationMatrix = new Pan3d.Matrix3D();
            }
            this.initVcData();
        };
        ParticleBallData.prototype.readRandomColor = function ($byte) {
            var randomColorLen = $byte.readInt();
            var obj = new Object;
            obj.alpha = new Array;
            obj.color = new Array;
            obj.pos = new Array;
            //fs.writeFloat(randomColor.alpha[i])
            //fs.writeFloat(randomColor.color[i])
            //fs.writeFloat(randomColor.pos[i])
            for (var i = 0; i < randomColorLen; i++) {
                obj.alpha.push($byte.readFloat());
                obj.color.push($byte.readFloat());
                obj.pos.push($byte.readFloat());
            }
            this._textureRandomColorInfo = obj;
        };
        Object.defineProperty(ParticleBallData.prototype, "objBallData", {
            get: function () {
                return (this.objData);
            },
            enumerable: true,
            configurable: true
        });
        ParticleBallData.prototype.uploadGpu = function () {
            this.objData = new Pan3d.ParticleBallGpuData();
            this.initBaseData();
            this.initBasePos();
            this.initSpeed();
            this.initSelfRotaion();
            if (this._needRandomColor) {
                this.initBaseColor();
            }
            this.pushToGpu();
        };
        ParticleBallData.prototype.initBaseData = function () {
            var verterList = new Array;
            var uvAry = new Array;
            var indexs = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                this.makeRectangleData(verterList, uvAry, this._width, this._height, this._originWidthScale, this._originHeightScale, this._isUV, this._isU, this._isV, this._animLine, this._animRow, i);
                indexs.push(0 + i * 4, 1 + i * 4, 2 + i * 4, 0 + i * 4, 2 + i * 4, 3 + i * 4);
            }
            this.objBallData.vertices = verterList;
            this.objBallData.uvs = uvAry;
            this.objBallData.indexs = indexs;
        };
        ParticleBallData.prototype.makeRectangleData = function (verterList, uvAry, width, height, offsetX, offsetY, isUV, isU, isV, animLine, animRow, indexID) {
            if (offsetX === void 0) { offsetX = 0.5; }
            if (offsetY === void 0) { offsetY = 0.5; }
            if (isUV === void 0) { isUV = false; }
            if (isU === void 0) { isU = false; }
            if (isV === void 0) { isV = false; }
            if (animLine === void 0) { animLine = 1; }
            if (animRow === void 0) { animRow = 1; }
            if (indexID === void 0) { indexID = 0; }
            var ranScale = Math.random() * (this._particleRandomScale.x - this._particleRandomScale.y) + this._particleRandomScale.y;
            verterList.push((-offsetX * width) * ranScale, (height - offsetY * height) * ranScale, 0);
            verterList.push((width - offsetX * width) * ranScale, (height - offsetY * height) * ranScale, 0);
            verterList.push((width - offsetX * width) * ranScale, (-offsetY * height) * ranScale, 0);
            verterList.push((-offsetX * width) * ranScale, (-offsetY * height) * ranScale, 0);
            var ary = new Array;
            ary.push(new Pan3d.Vector2D(0, 0));
            ary.push(new Pan3d.Vector2D(0, 1 / animRow));
            ary.push(new Pan3d.Vector2D(1 / animLine, 1 / animRow));
            ary.push(new Pan3d.Vector2D(1 / animLine, 0));
            if (isU) {
                for (var i = 0; i < ary.length; i++) {
                    ary[i].x = -ary[i].x;
                }
            }
            if (isV) {
                for (var i = 0; i < ary.length; i++) {
                    ary[i].y = -ary[i].y;
                }
            }
            if (isUV) {
                ary.push(ary.shift());
            }
            for (var i = 0; i < ary.length; i++) {
                uvAry.push(ary[i].x, ary[i].y, indexID);
            }
        };
        ParticleBallData.prototype.initBasePos = function () {
            var basePos = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                var v3d;
                var ma;
                if (this._isRandom) {
                    var roundv3d = new Pan3d.Vector3D(this._round.x * this._round.w, this._round.y * this._round.w, this._round.z * this._round.w);
                    if (this._isEven) { //圆柱
                        if (this._closeSurface) { //紧贴表面
                            v3d = new Pan3d.Vector3D(0, 0, roundv3d.z);
                            ma = new Pan3d.Matrix3D;
                            ma.appendRotation(Math.random() * 360, Pan3d.Vector3D.Y_AXIS);
                            v3d = ma.transformVector(v3d);
                            v3d.y = roundv3d.y * Math.random() * 2 - roundv3d.y;
                        }
                        else {
                            v3d = new Pan3d.Vector3D(0, 0, roundv3d.z * Math.random() * 2 - roundv3d.z);
                            ma = new Pan3d.Matrix3D;
                            ma.appendRotation(Math.random() * 360, Pan3d.Vector3D.Y_AXIS);
                            v3d = ma.transformVector(v3d);
                            v3d.y = roundv3d.y * Math.random() * 2 - roundv3d.y;
                        }
                    }
                    else { //圆球
                        if (this._closeSurface) { //只有xyz相等时候才能紧贴表面
                            v3d = new Pan3d.Vector3D(0, 0, roundv3d.z);
                            ma = new Pan3d.Matrix3D;
                            if (this._halfCircle) {
                                ma.appendRotation(-Math.random() * 180, Pan3d.Vector3D.X_AXIS);
                            }
                            else {
                                ma.appendRotation(Math.random() * 360, Pan3d.Vector3D.X_AXIS);
                            }
                            ma.appendRotation(Math.random() * 360, Pan3d.Vector3D.Y_AXIS);
                            v3d = ma.transformVector(v3d);
                        }
                        else {
                            if (this._halfCircle) {
                                v3d = new Pan3d.Vector3D(roundv3d.x * Math.random() * 2 - roundv3d.x, roundv3d.y * Math.random(), roundv3d.z * Math.random() * 2 - roundv3d.z);
                            }
                            else {
                                v3d = new Pan3d.Vector3D(roundv3d.x * Math.random() * 2 - roundv3d.x, roundv3d.y * Math.random() * 2 - roundv3d.y, roundv3d.z * Math.random() * 2 - roundv3d.z);
                            }
                        }
                    }
                }
                else {
                    v3d = new Pan3d.Vector3D();
                }
                v3d = v3d.add(this._basePositon);
                for (var j = 0; j < 4; j++) {
                    basePos.push(v3d.x, v3d.y, v3d.z, i * this._shootSpeed);
                }
            }
            this.objBallData.basePos = basePos;
        };
        ParticleBallData.prototype.initSpeed = function () {
            var beMove = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                var resultv3d = new Pan3d.Vector3D;
                var v3d = new Pan3d.Vector3D;
                // if(this._shootAngly.z == -1){
                //     //console.log(this._shootAngly.z);
                // }
                if (this._shootAngly.x != 0 || this._shootAngly.y != 0 || this._shootAngly.z != 0) { //锥形速度
                    var r = Math.tan(this._shootAngly.w * Math.PI / 180 * Math.random());
                    var a = 360 * Math.PI / 180 * Math.random();
                    v3d = new Pan3d.Vector3D(Math.sin(a) * r, Math.cos(a) * r, 1);
                    var ma = new Pan3d.Matrix3D(); //moveMatrix3D();
                    ma.fromVtoV(new Pan3d.Vector3D(0, 0.0101, 0.99994), new Pan3d.Vector3D(this._shootAngly.x, this._shootAngly.y, this._shootAngly.z));
                    v3d = ma.transformVector(v3d);
                    if (isNaN(v3d.x)) {
                        throw new Error("发射锥角，可能有问题，确定是否有取膜");
                    }
                    v3d.normalize();
                    resultv3d = resultv3d.add(v3d);
                }
                if (this._lixinForce.x != 0 || this._lixinForce.y != 0 || this._lixinForce.z != 0) {
                    v3d = new Pan3d.Vector3D(Math.random() > 0.5 ? -this._lixinForce.x : this._lixinForce.x, Math.random() > 0.5 ? -this._lixinForce.y : this._lixinForce.y, Math.random() > 0.5 ? -this._lixinForce.z : this._lixinForce.z);
                    v3d.normalize();
                    resultv3d = resultv3d.add(v3d);
                }
                if (this._islixinAngly) {
                    if (this._isEven) {
                        v3d = new Pan3d.Vector3D(this.objBallData.basePos[i * 16], 0, this.objBallData.basePos[i * 16 + 2]);
                    }
                    else {
                        v3d = new Pan3d.Vector3D(this.objBallData.basePos[i * 16], this.objBallData.basePos[i * 16 + 1], this.objBallData.basePos[i * 16 + 2]);
                    }
                    v3d.normalize();
                    resultv3d = resultv3d.add(v3d);
                }
                resultv3d.normalize();
                if (this._isSendRandom) {
                    resultv3d.scaleBy(this._speed * Math.random());
                }
                else {
                    resultv3d.scaleBy(this._speed);
                }
                var ranAngle = this._baseRandomAngle * Math.random() * Math.PI / 180;
                for (var j = 0; j < 4; j++) {
                    beMove.push(resultv3d.x, resultv3d.y, resultv3d.z);
                }
            }
            this.objBallData.beMove = beMove;
        };
        ParticleBallData.prototype.initSelfRotaion = function () {
            var _baseRotationAngle = 0;
            var _baseRotationSpeed = 0;
            if (this._ziZhuanAngly.x == 0 && this._ziZhuanAngly.y == 0 && this._ziZhuanAngly.z == 0 && this._ziZhuanAngly.w == 0) {
                this._needSelfRotation = false;
                return;
            }
            if (this._is3Dlizi) {
                this._needSelfRotation = false;
                return;
            }
            this._needSelfRotation = true;
            var vecs = new Array;
            var flag = 0;
            while (flag < this._totalNum) {
                _baseRotationAngle = this._ziZhuanAngly.x;
                if (this._ziZhuanAngly.y == 1) {
                    _baseRotationAngle = _baseRotationAngle * Math.random();
                }
                _baseRotationSpeed = this._ziZhuanAngly.z;
                if (this._ziZhuanAngly.w == 1) {
                    _baseRotationSpeed = _baseRotationSpeed * Math.random();
                }
                else if (this._ziZhuanAngly.w == -1) {
                    _baseRotationSpeed = _baseRotationSpeed * (Math.random() * 2 - 1);
                }
                vecs.push(_baseRotationAngle, _baseRotationSpeed);
                vecs.push(_baseRotationAngle, _baseRotationSpeed);
                vecs.push(_baseRotationAngle, _baseRotationSpeed);
                vecs.push(_baseRotationAngle, _baseRotationSpeed);
                flag++;
            }
            this.objBallData.baseRotation = vecs;
        };
        ParticleBallData.prototype.initBaseColor = function () {
            var imgData = Pan3d.ColorTransition.getInstance().getImageData(this._textureRandomColorInfo);
            var colorNum = imgData.data;
            var colors = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                var index = float2int(128 * Math.random()) * 4;
                var ranColor = new Pan3d.Vector3D(colorNum[index], colorNum[index + 1], colorNum[index + 2], colorNum[index + 3]);
                ranColor.scaleBy(1 / 0xff);
                colors.push(ranColor.x, ranColor.y, ranColor.z, ranColor.w);
                colors.push(ranColor.x, ranColor.y, ranColor.z, ranColor.w);
                colors.push(ranColor.x, ranColor.y, ranColor.z, ranColor.w);
                colors.push(ranColor.x, ranColor.y, ranColor.z, ranColor.w);
            }
            this.objBallData.randomColor = colors;
        };
        ParticleBallData.prototype.pushToGpu = function () {
            this.compressVertex();
            /**
            this.objBallData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.vertices);//3
    
            this.objBallData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.uvs);//3
    
            this.objBallData.basePosBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.basePos);//4
    
            this.objBallData.beMoveBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.beMove);//3
    
            this.objBallData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objBallData.indexs);
    
            this.objBallData.treNum = this.objBallData.indexs.length;
    
            if (this._needSelfRotation) {
                this.objBallData.baseRotationBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.baseRotation);//2
            }
    
            if (this._needRandomColor) {
                this.objBallData.randomColorBuffer = Scene_data.context3D.uploadBuff3D(this.objBallData.randomColor);//4
            }
             */
        };
        ParticleBallData.prototype.compressVertex = function () {
            var size = this.objBallData.vertices.length / 3;
            var itemSize = 13;
            if (this._needSelfRotation) {
                itemSize += 2;
            }
            if (this._needRandomColor) {
                this.objBallData.randomOffset = itemSize * 4;
                itemSize += 4;
            }
            this.objBallData.stride = itemSize * 4;
            var ary = new Array;
            for (var i = 0; i < size; i++) {
                for (var j = 0; j < 3; j++) {
                    ary.push(this.objBallData.vertices[i * 3 + j]);
                }
                for (var j = 0; j < 3; j++) {
                    ary.push(this.objBallData.uvs[i * 3 + j]);
                }
                for (var j = 0; j < 4; j++) {
                    ary.push(this.objBallData.basePos[i * 4 + j]);
                }
                for (var j = 0; j < 3; j++) {
                    ary.push(this.objBallData.beMove[i * 3 + j]);
                }
                if (this._needSelfRotation) {
                    for (var j = 0; j < 2; j++) {
                        ary.push(this.objBallData.baseRotation[i * 2 + j]);
                    }
                }
                if (this._needRandomColor) {
                    for (var j = 0; j < 4; j++) {
                        ary.push(this.objBallData.randomColor[i * 4 + j]);
                    }
                }
            }
            this.objBallData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(ary);
            this.objBallData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objBallData.indexs);
            this.objBallData.treNum = this.objBallData.indexs.length;
            ////console.log(ary.length);
        };
        ParticleBallData.prototype.setFloat32Vec = function (key, ary) {
            var idxary = Pan3d.Display3DBallShader.shader_vec4[key];
            var idx = idxary[0] * 16 + idxary[1] * 4;
            //var idx:number = idxary[0] * 4;
            this.vcmatData.set(ary, idx);
        };
        ParticleBallData.prototype.setFloat32Mat = function (key, ary) {
            var idx = Pan3d.Display3DBallShader.shader_mat4[key] * 16;
            this.vcmatData.set(ary, idx);
        };
        ParticleBallData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DBallShader.getVcSize() * 16);
            this.setFloat32Vec("time", this._timeVec);
            if (this._needAddSpeed) {
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "force", this.balldata._addSpeedVec);
                this.setFloat32Vec("force", this._addSpeedVec);
            }
            if (this._needScale) {
                //Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "scale", this.balldata._scaleVec);
                //Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "scaleCtrl", this.balldata._scaleCtrlVec);
                this.setFloat32Vec("scale", this._scaleVec);
                this.setFloat32Vec("scaleCtrl", this._scaleCtrlVec);
            }
            if (this._uvType == 1) {
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "animCtrl", this.balldata._animCtrlVec);
                this.setFloat32Vec("animCtrl", this._animCtrlVec);
            }
            else if (this._uvType == 2) {
                //Scene_data.context3D.setVc2fv(this.data.materialParam.shader, "uvCtrl", this.balldata._uvCtrlVec);
                this.setFloat32Vec("uvCtrl", this._uvCtrlVec);
            }
        };
        ParticleBallData.prototype.regShader = function () {
            if (!this.materialParam) {
                return;
            }
            var shaderParameAry = this.getShaderParam();
            //var shader: Display3DBallShader = new Display3DBallShader()
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DBallShader.Display3D_Ball_Shader, Pan3d.Display3DBallShader, this.materialParam.material, shaderParameAry);
            this.materialParam.program = this.materialParam.shader.program;
        };
        ParticleBallData.prototype.getShaderParam = function () {
            if (this._animRow != 1 || this._animLine != 1) {
                this._uvType = 1;
                this._animCtrlVec = [this._animLine, this._animRow, this._animInterval];
            }
            else if (this._uSpeed != 0 || this._vSpeed != 0) {
                this._uvType = 2;
                this._uvCtrlVec = [this._uSpeed, this._vSpeed];
            }
            else {
                this._uvType = 0;
            }
            var hasParticleColor = this.materialParam.material.hasParticleColor;
            this._needRandomColor = this.materialParam.material.hasVertexColor;
            this.uploadGpu(); //椭球粒子需要判断是否包含随机色来确定va结构
            var shaderParameAry;
            var hasParticle;
            if (hasParticleColor) {
                hasParticle = 1;
            }
            else {
                hasParticle = 0;
            }
            var hasRandomClolr = this._needRandomColor ? 1 : 0;
            var isMul = this._is3Dlizi ? 1 : 0;
            var needRotation = this._needSelfRotation ? 1 : 0;
            var needScale = this._needScale ? 1 : 0;
            var needAddSpeed = this._needAddSpeed ? 1 : 0;
            shaderParameAry = [hasParticle, hasRandomClolr, isMul, needRotation, needScale, needAddSpeed, this._uvType];
            return shaderParameAry;
        };
        return ParticleBallData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleBallData = ParticleBallData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleBallData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleBallGpuData = /** @class */ (function (_super) {
        __extends(ParticleBallGpuData, _super);
        function ParticleBallGpuData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ParticleBallGpuData.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this.basePos) {
                this.basePos.length = 0;
                this.basePos = null;
                if (this.basePosBuffer) {
                    Pan3d.Scene_data.context3D.deleteBuffer(this.basePosBuffer);
                    this.basePosBuffer = null;
                }
            }
            if (this.beMove) {
                this.beMove.length = 0;
                this.beMove = null;
                if (this.beMoveBuffer) {
                    Pan3d.Scene_data.context3D.deleteBuffer(this.beMoveBuffer);
                    this.beMoveBuffer = null;
                }
            }
            if (this.randomColor) {
                this.randomColor.length = 0;
                this.randomColor = null;
                if (this.randomColorBuffer) {
                    Pan3d.Scene_data.context3D.deleteBuffer(this.randomColorBuffer);
                    this.randomColorBuffer = null;
                }
            }
            if (this.baseRotation) {
                this.baseRotation.length = 0;
                this.baseRotation = null;
                if (this.baseRotationBuffer) {
                    Pan3d.Scene_data.context3D.deleteBuffer(this.baseRotationBuffer);
                    this.baseRotationBuffer = null;
                }
            }
        };
        return ParticleBallGpuData;
    }(Pan3d.ParticleGpuData));
    Pan3d.ParticleBallGpuData = ParticleBallGpuData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleBallGpuData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BaseDiplay3dShader = /** @class */ (function (_super) {
        __extends(BaseDiplay3dShader, _super);
        function BaseDiplay3dShader() {
            return _super.call(this) || this;
        }
        BaseDiplay3dShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        BaseDiplay3dShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(u2Texture.x, u2Texture.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        BaseDiplay3dShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        BaseDiplay3dShader.BaseDiplay3dShader = "BaseDiplay3dShader";
        return BaseDiplay3dShader;
    }(Pan3d.Shader3D));
    Pan3d.BaseDiplay3dShader = BaseDiplay3dShader;
    var BaseDiplay3dSprite = /** @class */ (function (_super) {
        __extends(BaseDiplay3dSprite, _super);
        function BaseDiplay3dSprite() {
            var _this = _super.call(this) || this;
            _this.initData();
            _this.updateMatrix;
            return _this;
        }
        BaseDiplay3dSprite.prototype.initData = function () {
            Pan3d.ProgrmaManager.getInstance().registe(BaseDiplay3dShader.BaseDiplay3dShader, new BaseDiplay3dShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(BaseDiplay3dShader.BaseDiplay3dShader);
            this.program = this.shader.program;
            this.objData = new Pan3d.ObjData;
            this.objData.vertices = new Array();
            this.objData.vertices.push(0, 0, 0);
            this.objData.vertices.push(100, 0, 0);
            this.objData.vertices.push(100, 0, 100);
            this.objData.uvs = new Array();
            this.objData.uvs.push(0, 0);
            this.objData.uvs.push(1, 0);
            this.objData.uvs.push(0, 1);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 1, 2);
            this.loadTexture();
            this.upToGpu();
        };
        BaseDiplay3dSprite.prototype.loadTexture = function () {
            var $ctx = Pan3d.UIManager.getInstance().getContext2D(128, 128, false);
            $ctx.fillStyle = "rgb(255,255,255)";
            $ctx.fillRect(0, 0, 128, 128);
            this._uvTextureRes = Pan3d.TextureManager.getInstance().getCanvasTexture($ctx);
        };
        BaseDiplay3dSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        BaseDiplay3dSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer && this._uvTextureRes) {
                Pan3d.Scene_data.context3D.setProgram(this.program);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Pan3d.Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._uvTextureRes.texture, 0);
                Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return BaseDiplay3dSprite;
    }(Pan3d.Display3D));
    Pan3d.BaseDiplay3dSprite = BaseDiplay3dSprite;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BaseDiplay3dSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DLocusPartilce = /** @class */ (function (_super) {
        __extends(Display3DLocusPartilce, _super);
        function Display3DLocusPartilce() {
            return _super.call(this) || this;
            //this.objData = new ParticleGpuData();
        }
        Object.defineProperty(Display3DLocusPartilce.prototype, "locusdata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DLocusPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleLocusData;
        };
        Display3DLocusPartilce.prototype.setVa = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);
            if (!tf) {
                Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.data.objData.stride, 0);
                Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.data.objData.stride, 28);
                if (this.data._watchEye) {
                    Pan3d.Scene_data.context3D.setVaOffset(2, 4, this.data.objData.stride, 12);
                }
            }
            // Scene_data.context3D.setVa(0, 3, this.data.objData.vertexBuffer);
            // Scene_data.context3D.setVa(1, 2, this.data.objData.uvBuffer);
            // if (this.data._watchEye){
            //     Scene_data.context3D.setVa(2, 4, this.data.objData.normalsBuffer);
            // }
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.data.objData.indexBuffer, this.data.objData.treNum);
        };
        Display3DLocusPartilce.prototype.setVc = function () {
            this.updateUV();
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //this.data.setFloat32Mat("viewMatrix3D", Scene_data.viewMatrx3D.m);//0
            this.data.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //this.data.setFloat32Mat("camMatrix3D", Scene_data.cam3D.cameraMatrix.m);//16
            this.data.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "posMatrix3D", this.modelMatrix.m);
            //this.data.setFloat32Mat("posMatrix3D", this.modelMatrix.m);//32
            this.data.vcmatData.set(this.modelMatrix.m, 32);
            //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "uvMove", this.locusdata._resultUvVec);
            //this.data.setFloat32Vec("uvMove", this.locusdata._resultUvVec);//48
            this.data.vcmatData.set(this.locusdata._resultUvVec, 48);
            if (this.data._watchEye) {
                this.locusdata._caramPosVec[0] = Pan3d.Scene_data.cam3D.x;
                this.locusdata._caramPosVec[1] = Pan3d.Scene_data.cam3D.y;
                this.locusdata._caramPosVec[2] = Pan3d.Scene_data.cam3D.z;
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "camPos", this.locusdata._caramPosVec);
                //this.data.setFloat32Vec("camPos", this.locusdata._caramPosVec);//52
                this.data.vcmatData.set(this.locusdata._caramPosVec, 52);
            }
            if (this.locusdata._changUv) {
                //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "isUv", this.locusdata._uvVec);
                this.data.setFloat32Vec("isUv", this.locusdata._uvVec); //56
            }
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
            this.setMaterialVc();
        };
        Display3DLocusPartilce.prototype.updateUV = function () {
            var $nowTime = this._time / Pan3d.Scene_data.frameTime;
            var $lifeRoundNum = (this.data._life / 100);
            var $moveUv = this.locusdata._speed * $nowTime / this.locusdata._density / 10;
            if (this.locusdata._isEnd) {
                $moveUv = Math.min(1, $moveUv);
            }
            if (this.locusdata._isLoop) {
                if (this.locusdata._life) {
                    $moveUv = $moveUv % ($lifeRoundNum + 1);
                }
                else {
                    $moveUv = $moveUv % 1;
                }
            }
            this.locusdata._resultUvVec[0] = $moveUv;
        };
        return Display3DLocusPartilce;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DLocusPartilce = Display3DLocusPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DLocusPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DLocusShader = /** @class */ (function (_super) {
        __extends(Display3DLocusShader, _super);
        function Display3DLocusShader() {
            return _super.call(this) || this;
        }
        Display3DLocusShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2TexCoord");
            if (this.paramAry[0]) {
                $context.bindAttribLocation(this.program, 2, "v3Normal");
            }
        };
        Display3DLocusShader.prototype.getMat4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DLocusShader.shader_mat4[key] + "]";
        };
        Display3DLocusShader.prototype.getVec4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DLocusShader.shader_vec4[key][0] + "][" + Display3DLocusShader.shader_vec4[key][1] + "]";
        };
        Display3DLocusShader.getVcSize = function () {
            return 4;
        };
        Display3DLocusShader.prototype.getVertexShaderString = function () {
            var defineBaseStr = "attribute vec4 v3Position;\n" +
                "attribute vec2 v2TexCoord;\n" +
                "uniform mat4 vcmat[" + Pan3d.Display3DFacetShader.getVcSize() + "];\n" + //所有vc值
                //"uniform mat4 viewMatrix3D;\n" +
                //"uniform mat4 camMatrix3D;\n" +
                //"uniform mat4 posMatrix3D;\n" +
                // "uniform vec3 uvMove;\n" +
                "varying vec2 v0;\n" +
                "varying vec4 v2;\n";
            var defineWachtStr = "attribute vec4 v3Normal;\n"; // +
            //"uniform vec3 camPos;\n";
            var defineUvStr = "";
            //"uniform vec3 isUv;\n";
            var defineParticleColor = "varying vec2 v1;\n";
            var baseStr = "   vec2 tempv0 = v2TexCoord;\n" +
                "   tempv0.x -= " + this.getVec4Str("uvMove") + ".x;\n";
            var particleColorStr = "   v1 = v2TexCoord;\n";
            var baseUvStr = "   v0 = tempv0;\n";
            var uvStr = "   tempv0.xy *= " + this.getVec4Str("isUv") + ".xy;\n" +
                "   if(" + this.getVec4Str("isUv") + ".z >= 0.0){\n" +
                "   vec2 tempv1 = tempv0;\n" +
                "   tempv0.y = tempv1.x;\n" +
                "   tempv0.x = tempv1.y;}\n" +
                "   v0 = tempv0;\n";
            var killStr = "   float alpha = tempv0.x/" + this.getVec4Str("uvMove") + ".y;\n" +
                "   alpha = 1.0 - clamp(abs(alpha),0.0,1.0);\n" +
                "   float kill = -tempv0.x;\n" +
                "   kill *= tempv0.x - " + this.getVec4Str("uvMove") + ".z;\n" +
                "   v2 = vec4(kill,0.0,0.0,alpha);\n";
            var posStr = "   gl_Position = " + this.getMat4Str("viewMatrix3D") + "  * " + this.getMat4Str("camMatrix3D") + " * " + this.getMat4Str("posMatrix3D") + " * v3Position;\n";
            var watchPosStr = "   vec4 tempPos = " + this.getMat4Str("posMatrix3D") + " * v3Position;\n" +
                "   vec3 mulPos = vec3(tempPos.x,tempPos.y,tempPos.z);\n" +
                "   vec3 normals = vec3(v3Normal.x,v3Normal.y,v3Normal.z);\n" +
                "   mulPos = normalize(vec3(" + this.getVec4Str("camPos") + ".xyz) - mulPos);\n" +
                "   mulPos = cross(mulPos, normals);\n" +
                "   mulPos = normalize(mulPos);\n" +
                "   mulPos *= v3Normal.w;\n" +
                "   tempPos.xyz = mulPos.xyz + v3Position.xyz;\n" +
                "   gl_Position = " + this.getMat4Str("viewMatrix3D") + "  * " + this.getMat4Str("camMatrix3D") + " * " + this.getMat4Str("posMatrix3D") + " * tempPos;\n";
            var isWatchEye = this.paramAry[0];
            var isUV = this.paramAry[1];
            var hasParticleColor = this.paramAry[2];
            var defineStr = defineBaseStr;
            if (isWatchEye) {
                defineStr += defineWachtStr;
            }
            if (isUV) {
                defineStr += defineUvStr;
            }
            if (hasParticleColor) {
                defineStr += defineParticleColor;
            }
            var mainStr = baseStr + killStr;
            if (hasParticleColor) {
                mainStr += particleColorStr;
            }
            if (isUV) {
                mainStr += uvStr;
            }
            else {
                mainStr += baseUvStr;
            }
            if (isWatchEye) {
                mainStr += watchPosStr;
            }
            else {
                mainStr += posStr;
            }
            var resultStr = defineStr + "void main(void){\n" + mainStr + "}";
            return resultStr;
        };
        Display3DLocusShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D tex;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(tex, v0.xy);\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DLocusShader.Display3D_Locus_Shader = "Display3DLocusShader";
        Display3DLocusShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1, posMatrix3D: 2 };
        Display3DLocusShader.shader_vec4 = { uvMove: [3, 0], camPos: [3, 1], isUv: [3, 2] };
        return Display3DLocusShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DLocusShader = Display3DLocusShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DLocusShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleLocusData = /** @class */ (function (_super) {
        __extends(ParticleLocusData, _super);
        function ParticleLocusData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._speed = 1; //粒子运动数字
            _this._isLoop = false; //是否循环
            return _this;
        }
        ParticleLocusData.prototype.getParticle = function () {
            return new Pan3d.Display3DLocusPartilce;
        };
        ParticleLocusData.prototype.setAllByteInfo = function ($byte) {
            this._isLoop = $byte.readBoolean(); //b
            this._speed = $byte.readFloat(); //f
            this._density = $byte.readFloat(); //f
            this._isEnd = $byte.readBoolean(); //b
            this.objData = new Pan3d.ObjData;
            var vLen = $byte.getInt();
            var dataWidth = 9;
            var len = vLen * dataWidth * 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 3, 0, dataWidth, 4); //vertices
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 4, 3, dataWidth, 4); //normal
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 2, 7, dataWidth, 4); //uv
            // var vLen: number = $byte.readInt();
            // for (var i: number = 0; i < vLen; i++) {
            //     this.objData.vertices.push($byte.readFloat())
            // }
            // var nLen: number = $byte.readInt();
            // for (var i: number = 0; i < nLen; i++) {
            //     this.objData.normals.push($byte.readFloat())
            // }
            // var uLen: number = $byte.readInt();
            // for (var j: number = 0; j < uLen; j++) {
            //     this.objData.uvs.push($byte.readFloat())
            // }
            var iLen = $byte.readInt();
            for (var k = 0; k < iLen; k++) {
                this.objData.indexs.push($byte.readInt());
            }
            this.objData.stride = dataWidth * 4;
            _super.prototype.setAllByteInfo.call(this, $byte);
            this.initUV();
            if (this._watchEye) {
                this._caramPosVec = [0, 0, 0];
            }
            this._uvVec = [this._isU ? -1 : 1, this._isV ? -1 : 1, this._isUV ? 1 : -1];
            // this.uploadGpu();
            this.initVcData();
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            this.objData.treNum = this.objData.indexs.length;
        };
        ParticleLocusData.prototype.initUV = function () {
            this._resultUvVec = new Array(3);
            var $nowTime = 0;
            var $lifeRoundNum = (this._life / 100);
            var $moveUv = this._speed * $nowTime / this._density / 10;
            if (this._isEnd) {
                $moveUv = Math.min(1, $moveUv);
            }
            var $fcVector;
            if (this._isLoop) {
                if (this._life) {
                    $moveUv = $moveUv % ($lifeRoundNum + 1);
                    $fcVector = new Pan3d.Vector3D($moveUv, $lifeRoundNum, -$lifeRoundNum);
                }
                else {
                    $moveUv = $moveUv % 1;
                    $fcVector = new Pan3d.Vector3D($moveUv + 1, 99, -2);
                }
            }
            else {
                if (this._life) {
                    $fcVector = new Pan3d.Vector3D($moveUv, $lifeRoundNum, -1);
                }
                else {
                    $fcVector = new Pan3d.Vector3D($moveUv, 99, -1);
                }
            }
            this._resultUvVec[0] = $fcVector.x;
            this._resultUvVec[1] = $fcVector.y;
            this._resultUvVec[2] = $fcVector.z;
        };
        ParticleLocusData.prototype.uploadGpu = function () {
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            if (this._watchEye) {
                this.objData.normalsBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.normals);
            }
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            this.objData.treNum = this.objData.indexs.length;
        };
        ParticleLocusData.prototype.regShader = function () {
            if (!this.materialParam) {
                return;
            }
            var isWatchEye = this._watchEye ? 1 : 0;
            var changeUv = 0;
            var hasParticleColor = this.materialParam.material.hasParticleColor;
            if (this._isU || this._isV || this._isUV) {
                changeUv = 1;
                this._changUv = true;
            }
            else {
                this._changUv = false;
            }
            var shaderParameAry;
            shaderParameAry = [isWatchEye, changeUv, hasParticleColor ? 1 : 0];
            //var shader: Display3DLocusShader = new Display3DLocusShader();
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DLocusShader.Display3D_Locus_Shader, Pan3d.Display3DLocusShader, this.materialParam.material, shaderParameAry);
            this.materialParam.program = this.materialParam.shader.program;
        };
        ParticleLocusData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DLocusShader.getVcSize() * 16);
        };
        ParticleLocusData.prototype.setFloat32Vec = function (key, ary) {
            var idxary = Pan3d.Display3DLocusShader.shader_vec4[key];
            var idx = idxary[0] * 16 + idxary[1] * 4;
            this.vcmatData.set(ary, idx);
        };
        ParticleLocusData.prototype.setFloat32Mat = function (key, ary) {
            var idx = Pan3d.Display3DLocusShader.shader_mat4[key] * 16;
            this.vcmatData.set(ary, idx);
        };
        return ParticleLocusData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleLocusData = ParticleLocusData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleLocusData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DLocusBallPartilce = /** @class */ (function (_super) {
        __extends(Display3DLocusBallPartilce, _super);
        //protected _posAry: Array<number>;
        //protected _angleAry: Array<number>;
        //protected _tangentAry: Array<number>;
        //protected _tangentSpeed:number;
        function Display3DLocusBallPartilce() {
            return _super.call(this) || this;
        }
        Display3DLocusBallPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleLocusballData;
        };
        return Display3DLocusBallPartilce;
    }(Pan3d.Display3DBallPartilce));
    Pan3d.Display3DLocusBallPartilce = Display3DLocusBallPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DLocusBallPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleLocusballData = /** @class */ (function (_super) {
        __extends(ParticleLocusballData, _super);
        function ParticleLocusballData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ParticleLocusballData.prototype.getParticle = function () {
            return new Pan3d.Display3DLocusBallPartilce;
        };
        ParticleLocusballData.prototype.initBasePos = function () {
            var basePos = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                var v3d;
                var index = i * 3;
                if (this._isRandom) {
                    var roundv3d = new Pan3d.Vector3D(this._round.x * this._round.w, this._round.y * this._round.w, this._round.z * this._round.w);
                    v3d = new Pan3d.Vector3D(this._posAry[index] + Math.random() * roundv3d.x, this._posAry[index + 1] + Math.random() * roundv3d.y, this._posAry[index + 2] + Math.random() * roundv3d.z);
                }
                else {
                    v3d = new Pan3d.Vector3D(this._posAry[index], this._posAry[index + 1], this._posAry[index + 2]);
                }
                v3d = v3d.add(this._basePositon);
                for (var j = 0; j < 4; j++) {
                    basePos.push(v3d.x, v3d.y, v3d.z, i * this._shootSpeed);
                }
            }
            this.objBallData.basePos = basePos;
        };
        ParticleLocusballData.prototype.initSpeed = function () {
            var beMove = new Array;
            for (var i = 0; i < this._totalNum; i++) {
                var resultv3d = new Pan3d.Vector3D;
                if (this._tangentSpeed == 0) {
                    resultv3d.addByNum(this._angleAry[i * 3], this._angleAry[i * 3 + 1], this._angleAry[i * 3 + 2]);
                }
                else if (this._tangentSpeed == 2) {
                    resultv3d.setTo(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1);
                }
                else {
                    var v3d = new Pan3d.Vector3D(this._tangentAry[i * 3], this._tangentAry[i * 3 + 1], this._tangentAry[i * 3 + 2]);
                    v3d.scaleBy(this._tangentSpeed);
                    resultv3d = resultv3d.add(v3d);
                }
                resultv3d.normalize();
                if (this._isSendRandom) {
                    resultv3d.scaleBy(this._speed * Math.random());
                }
                else {
                    resultv3d.scaleBy(this._speed);
                }
                //var ranAngle: Number = this._baseRandomAngle * Math.random() * Math.PI / 180;
                for (var j = 0; j < 4; j++) {
                    beMove.push(resultv3d.x, resultv3d.y, resultv3d.z);
                }
            }
            this.objBallData.beMove = beMove;
        };
        ParticleLocusballData.prototype.setAllByteInfo = function ($byte) {
            this._tangentSpeed = $byte.readFloat();
            this._posAry = JSON.parse($byte.readUTF());
            this._angleAry = JSON.parse($byte.readUTF());
            this._tangentAry = JSON.parse($byte.readUTF());
            _super.prototype.setAllByteInfo.call(this, $byte);
            this.uploadGpu();
        };
        return ParticleLocusballData;
    }(Pan3d.ParticleBallData));
    Pan3d.ParticleLocusballData = ParticleLocusballData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleLocusballData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DModelPartilce = /** @class */ (function (_super) {
        __extends(Display3DModelPartilce, _super);
        function Display3DModelPartilce() {
            var _this = _super.call(this) || this;
            //this.objData = new ParticleGpuData();
            _this._resultUvVec = new Array(2);
            return _this;
        }
        Object.defineProperty(Display3DModelPartilce.prototype, "modeldata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DModelPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleModelData;
        };
        Display3DModelPartilce.prototype.setVc = function () {
            this.updateWatchCaramMatrix();
            this.updateUV();
            // Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            // Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            // Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "posMatrix3D", this.modelMatrix.m);
            // Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "rotationMatrix3D", this._rotationMatrix.m);
            // Scene_data.context3D.setVc2fv(this.data.materialParam.shader, "uvMove", this._resultUvVec);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //this.data.setFloat32Mat("viewMatrix3D", Scene_data.viewMatrx3D.m);//0
            this.data.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //this.data.setFloat32Mat("camMatrix3D", Scene_data.cam3D.cameraMatrix.m);//16
            this.data.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "posMatrix3D", this.modelMatrix.m);
            //this.data.setFloat32Mat("posMatrix3D", this.modelMatrix.m);//48
            this.data.vcmatData.set(this.modelMatrix.m, 48);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "rotationMatrix3D", this._rotationMatrix.m);
            //this.data.setFloat32Mat("rotationMatrix3D", this._rotationMatrix.m);//32
            this.data.vcmatData.set(this._rotationMatrix.m, 32);
            //Scene_data.context3D.setVc2fv(this.data.materialParam.shader, "uvMove", this._resultUvVec);
            //this.data.setFloat32Vec("uvMove",this._resultUvVec);//64
            this.data.vcmatData.set(this._resultUvVec, 64);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
            this.setMaterialVc();
        };
        Display3DModelPartilce.prototype.setVa = function () {
            //Scene_data.context3D.setVa(0, 3, this.data.objData.vertexBuffer);
            //Scene_data.context3D.setVa(1, 2, this.data.objData.uvBuffer);
            Pan3d.Scene_data.context3D.setWriteDepth(this.data._depthMode == 1);
            var tf = Pan3d.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);
            if (!tf) {
                Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.data.objData.stride, 0);
                Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.data.objData.stride, 12);
            }
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.data.objData.indexBuffer, this.data.objData.treNum);
            Pan3d.Scene_data.context3D.setWriteDepth(false);
        };
        Display3DModelPartilce.prototype.updateWatchCaramMatrix = function () {
            this._rotationMatrix.identity();
            if (this.data._watchEye) {
                this.timeline.inverAxisRotation(this._rotationMatrix);
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            }
            if (this.data._isZiZhuan) {
                this.timeline.applySelfRotation(this._rotationMatrix, this.data._ziZhuanAngly);
            }
            //if (_axisRotaion) {
            //    _rotationMatrix.prependRotation(-_axisRotaion.num, _axisRotaion.axis);
            //}
        };
        Display3DModelPartilce.prototype.updateUV = function () {
            var currentFrame = Math.floor((this._time / Pan3d.Scene_data.frameTime) / this.data._animInterval);
            var _maxAnimTime = this.data._animLine * this.data._animRow;
            this._resultUvVec[0] = Math.floor(currentFrame % this.data._animLine) / this.data._animLine;
            this._resultUvVec[1] = Math.floor(currentFrame / this.data._animLine) / this.data._animRow;
            this._resultUvVec[0] += this._time / Pan3d.Scene_data.frameTime * this.data._uSpeed;
            this._resultUvVec[1] += this._time / Pan3d.Scene_data.frameTime * this.data._vSpeed;
        };
        return Display3DModelPartilce;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DModelPartilce = Display3DModelPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DModelPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DModelObjParticle = /** @class */ (function (_super) {
        __extends(Display3DModelObjParticle, _super);
        function Display3DModelObjParticle() {
            return _super.call(this) || this;
        }
        Display3DModelObjParticle.prototype.update = function () {
            if (this._depthMode) {
                Pan3d.Scene_data.context3D.setDepthTest(true);
            }
            _super.prototype.update.call(this);
            if (this._depthMode) {
                Pan3d.Scene_data.context3D.setDepthTest(false);
            }
        };
        return Display3DModelObjParticle;
    }(Pan3d.Display3DModelPartilce));
    Pan3d.Display3DModelObjParticle = Display3DModelObjParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DModelObjParticle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3dModelAnimParticle = /** @class */ (function (_super) {
        __extends(Display3dModelAnimParticle, _super);
        function Display3dModelAnimParticle() {
            return _super.call(this) || this;
        }
        Display3dModelAnimParticle.prototype.updateUV = function () {
            var currentFrame = this._time / Pan3d.Scene_data.frameTime;
            currentFrame = currentFrame > this.modeldata._maxAnimTime ? this.modeldata._maxAnimTime : currentFrame;
            currentFrame = (currentFrame / this.data._animInterval) % (this.data._animLine * this.data._animRow);
            this._resultUvVec[0] = float2int(currentFrame % this.data._animLine) / this.data._animLine + this._time / Pan3d.Scene_data.frameTime * this.data._uSpeed;
            this._resultUvVec[1] = float2int(currentFrame / this.data._animLine) / this.data._animRow + this._time / Pan3d.Scene_data.frameTime * this.data._vSpeed;
        };
        return Display3dModelAnimParticle;
    }(Pan3d.Display3DModelPartilce));
    Pan3d.Display3dModelAnimParticle = Display3dModelAnimParticle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3dModelAnimParticle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleModelData = /** @class */ (function (_super) {
        __extends(ParticleModelData, _super);
        function ParticleModelData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ParticleModelData.prototype.getParticle = function () {
            return new Pan3d.Display3DModelPartilce();
        };
        ParticleModelData.prototype.setAllByteInfo = function ($byte) {
            this.objData = new Pan3d.ObjData;
            this._maxAnimTime = $byte.readFloat();
            // var vLen: number = $byte.readInt();
            // for (var i: number = 0; i < vLen; i++) {
            //     this.objData.vertices.push($byte.readFloat())
            // }
            // var uLen: number = $byte.readInt();
            // for (var j: number = 0; j < uLen; j++) {
            //     this.objData.uvs.push($byte.readFloat())
            // }
            var vLen = $byte.getInt();
            var dataWidth = 5;
            var len = vLen * dataWidth * 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 3, 0, dataWidth, 4); //vertices
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 2, 3, dataWidth, 4); //uv
            var iLen = $byte.readInt();
            for (var k = 0; k < iLen; k++) {
                this.objData.indexs.push($byte.readInt());
            }
            this.objData.stride = dataWidth * 4;
            if (this.version >= 36) {
                this._depthMode = $byte.readInt(); //新加模型特效深度信息
            }
            _super.prototype.setAllByteInfo.call(this, $byte);
            //this.uploadGpu();
            this.initVcData();
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            this.objData.treNum = this.objData.indexs.length;
        };
        ParticleModelData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DFacetShader.getVcSize() * 16);
        };
        ParticleModelData.prototype.uploadGpu = function () {
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            this.objData.treNum = this.objData.indexs.length;
        };
        ParticleModelData.prototype.regShader = function () {
            //var shader: Display3DFacetShader = new Display3DFacetShader()
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DFacetShader.Display3D_Facet_Shader, Pan3d.Display3DFacetShader, this.materialParam.material);
            this.materialParam.program = this.materialParam.shader.program;
        };
        ParticleModelData.prototype.setFloat32Vec = function (key, ary) {
            var idxary = Pan3d.Display3DFacetShader.shader_vec4[key];
            var idx = idxary[0] * 16 + idxary[1] * 4;
            this.vcmatData.set(ary, idx);
        };
        ParticleModelData.prototype.setFloat32Mat = function (key, ary) {
            var idx = Pan3d.Display3DFacetShader.shader_mat4[key] * 16;
            this.vcmatData.set(ary, idx);
        };
        return ParticleModelData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleModelData = ParticleModelData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleModelData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFollowPartilce = /** @class */ (function (_super) {
        __extends(Display3DFollowPartilce, _super);
        function Display3DFollowPartilce() {
            var _this = _super.call(this) || this;
            _this.flag = 0;
            return _this;
        }
        Object.defineProperty(Display3DFollowPartilce.prototype, "followdata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DFollowPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleFollowData;
        };
        Display3DFollowPartilce.prototype.onCreated = function () {
            this.initBingMatrixAry();
        };
        // public setAllByteInfo($byte: ByteArray, version: number = 0): void {
        //     super.setAllByteInfo($byte, version);
        //     this.initBingMatrixAry();
        // }
        Display3DFollowPartilce.prototype.setVc = function () {
            _super.prototype.setVc.call(this);
            this.updateBind();
            // for (var i: number = 0; i < this.followdata._totalNum; i++) {
            //     Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "bindpos[" + i + "]", this._bindMatrixAry[i]);
            // }
            Pan3d.Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "bindpos", this._bindMatrixAry);
        };
        Display3DFollowPartilce.prototype.initBingMatrixAry = function () {
            this._bindMatrixAry = new Float32Array(40 * 3);
            this._bindFlagAry = new Array;
            for (var i = 0; i < this.followdata._totalNum; i++) {
                //this._bindMatrixAry.push([0, 0, 0]);
                this._bindFlagAry.push(0);
            }
        };
        Display3DFollowPartilce.prototype.updateBind = function () {
            var time = this._time / Pan3d.Scene_data.frameTime;
            for (var i = this.flag; i < this.followdata._totalNum; i++) {
                var temp = (time - i * this.followdata._shootSpeed) / this.followdata._life;
                if (temp >= this._bindFlagAry[i]) {
                    //   //console.log(this.bindVecter3d);
                    var flag = i * 3;
                    this._bindMatrixAry[flag] = this.bindVecter3d.x;
                    this._bindMatrixAry[flag + 1] = this.bindVecter3d.y;
                    this._bindMatrixAry[flag + 2] = this.bindVecter3d.z;
                    this._bindFlagAry[i]++;
                }
            }
        };
        Display3DFollowPartilce.prototype.updateMatrix = function () {
            if (!this.bindMatrix) {
                return;
            }
            this.modelMatrix.identity();
            if (!this.groupMatrix.isIdentity) {
                this.posMatrix.append(this.groupMatrix);
            }
            this.modelMatrix.append(this.posMatrix);
        };
        Display3DFollowPartilce.prototype.updateAllRotationMatrix = function () {
            this.followdata._allRotationMatrix.identity();
            this.followdata._allRotationMatrix.prependScale(this.followdata.overAllScale * this._scaleX * 0.1 * this.bindScale.x, this.followdata.overAllScale * this._scaleY * 0.1 * this.bindScale.y, this.followdata.overAllScale * this._scaleZ * 0.1 * this.bindScale.z);
            if (this.isInGroup) {
                this.followdata._allRotationMatrix.appendRotation(this.groupRotation.x, Pan3d.Vector3D.X_AXIS);
                this.followdata._allRotationMatrix.appendRotation(this.groupRotation.y, Pan3d.Vector3D.Y_AXIS);
                this.followdata._allRotationMatrix.appendRotation(this.groupRotation.z, Pan3d.Vector3D.Z_AXIS);
            }
        };
        Display3DFollowPartilce.prototype.reset = function () {
            _super.prototype.reset.call(this);
            for (var i = 0; i < this.followdata._totalNum; i++) {
                this._bindMatrixAry[i * 3] = 0;
                this._bindMatrixAry[i * 3 + 1] = 0;
                this._bindMatrixAry[i * 3 + 2] = 0;
                this._bindFlagAry[i] = 0;
            }
        };
        Display3DFollowPartilce.prototype.updateWatchCaramMatrix = function () {
            this._rotationMatrix.identity();
            if (this.followdata.facez) {
                this._rotationMatrix.prependRotation(90, Pan3d.Vector3D.X_AXIS);
            }
            else if (this.followdata._watchEye) {
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
                this._rotationMatrix.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            }
        };
        return Display3DFollowPartilce;
    }(Pan3d.Display3DBallPartilce));
    Pan3d.Display3DFollowPartilce = Display3DFollowPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFollowPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFollowShader = /** @class */ (function (_super) {
        __extends(Display3DFollowShader, _super);
        function Display3DFollowShader() {
            return _super.call(this) || this;
        }
        Display3DFollowShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "vPosition");
            $context.bindAttribLocation(this.program, 1, "texcoord");
            $context.bindAttribLocation(this.program, 2, "basePos");
            $context.bindAttribLocation(this.program, 3, "speed");
            var needRotation = this.paramAry[3];
            if (needRotation) {
                $context.bindAttribLocation(this.program, 4, "rotation");
            }
            var hasRandomClolr = this.paramAry[1];
            if (hasRandomClolr) {
                $context.bindAttribLocation(this.program, 5, "color");
            }
        };
        //public static shader_vec4 = {time:[0,0],scale:[1,1],scaleCtrl:[2,2],force:[3,3],worldPos:[4,0],camPos:[5,1],animCtrl:[6,2],uvCtrl:[7,3]};
        Display3DFollowShader.prototype.getMat4Str = function (key) {
            return "vcmat[" + Pan3d.Display3DBallShader.shader_mat4[key] + "]";
        };
        Display3DFollowShader.prototype.getVec4Str = function (key) {
            return "vcmat[" + Pan3d.Display3DBallShader.shader_vec4[key][0] + "][" + Pan3d.Display3DBallShader.shader_vec4[key][1] + "]";
            //return  "vc[" + Display3DBallShader.shader_vec4[key][0] + "]";
            //return key;
        };
        Display3DFollowShader.getVcSize = function () {
            return 7;
        };
        Display3DFollowShader.prototype.getVertexShaderString = function () {
            var baseStr;
            var scaleStr;
            var rotationStr;
            var posStr;
            var addSpeedStr;
            var mulStr;
            var resultPosStr;
            var uvStr;
            var particleColorStr;
            var randomColorStr;
            var uvDefaultStr;
            var uvAnimStr;
            var uvSpeedStr;
            var randomColorStr;
            var particleColorStr;
            var defineBaseStr;
            var defineScaleStr;
            var defineRotaionStr;
            var defineAddSpeedStr;
            var defineMulStr;
            var defineUvAnimStr;
            var defineUvSpeedStr;
            var defineRandomColor;
            var defineParticleColor;
            defineBaseStr =
                "attribute vec4 vPosition;\n" +
                    "attribute vec3 texcoord;\n" + //uv坐标xy
                    "attribute vec4 basePos;\n" + //基础位置xyz，发射起始时间w
                    "attribute vec3 speed;\n" + //速度xyz
                    "uniform mat4 vcmat[" + Pan3d.Display3DBallShader.getVcSize() + "];\n" + //所有vc值
                    "uniform vec3 bindpos[30];\n" +
                    //"uniform mat4 watheye;\n" +//面向视点矩阵
                    //"uniform mat4 viewMatrix3D;\n" +//模型矩阵
                    //"uniform mat4 modelMatrix;\n" +//模型矩阵
                    //"uniform mat4 camMatrix3D;\n" +//摄像机矩阵
                    //"uniform vec4 time;\n" +//当前时间x,自身加速度y,粒子生命z,是否循环w
                    "varying vec2 v0;\n";
            defineRandomColor =
                "attribute vec4 color;\n" + //随机颜色
                    "varying vec4 v2;\n"; //随机颜色
            defineScaleStr = "";
            //"uniform vec4 scale;\n" +//缩放x，抖动周期y，抖动振幅z
            //"uniform vec4 scaleCtrl;\n"//宽度不变，高度不变，最大比例，最小比例
            defineRotaionStr =
                "attribute vec2 rotation;\n"; //基础旋转x ， 旋转速度y
            defineAddSpeedStr = "";
            //"uniform vec3 force;\n";//外力x，外力y，外力z
            defineMulStr = "";
            //"uniform mat4 rotationMatrix;\n" +//旋转矩阵
            //"uniform vec3 worldPos;\n" +//世界中的位置
            //"uniform vec3 camPos;\n"//世界中的位置
            defineUvAnimStr = "";
            //"uniform vec3 animCtrl;\n"//动画行数x，动画列数，动画间隔
            defineUvSpeedStr = "";
            //"uniform vec2 uvCtrl;\n"//u滚动速度，v滚动速度
            defineParticleColor =
                "varying vec2 v1;\n"; //粒子颜色坐标
            baseStr =
                "float ctime = " + this.getVec4Str("time") + ".x - basePos.w;\n" + //计算当前时间
                    "if (" + this.getVec4Str("time") + ".w > 0.0 && ctime >= 0.0) {\n" +
                    "    ctime = fract(ctime / " + this.getVec4Str("time") + ".z) * " + this.getVec4Str("time") + ".z;\n" +
                    "}\n" +
                    "vec4 pos = vPosition;\n"; //自身位置
            scaleStr =
                "float stime = ctime - " + this.getVec4Str("scale") + ".w;\n" +
                    "stime = max(stime,0.0);\n" +
                    "float sf = " + this.getVec4Str("scale") + ".x * stime;\n" +
                    "if (" + this.getVec4Str("scale") + ".y != 0.0 && " + this.getVec4Str("scale") + ".z != 0.0) {\n" +
                    "    sf += sin(" + this.getVec4Str("scale") + ".y * stime) * " + this.getVec4Str("scale") + ".z;\n" +
                    "}\n" +
                    "if (sf > " + this.getVec4Str("scaleCtrl") + ".z) {\n" +
                    "    sf = " + this.getVec4Str("scaleCtrl") + ".z;\n" +
                    "} else if (sf < " + this.getVec4Str("scaleCtrl") + ".w) {\n" +
                    "    sf = " + this.getVec4Str("scaleCtrl") + ".w;\n" +
                    "}\n" +
                    "vec2 sv2 = vec2(" + this.getVec4Str("scaleCtrl") + ".x * sf, " + this.getVec4Str("scaleCtrl") + ".y * sf);\n" +
                    "sv2 = sv2 + 1.0;\n" +
                    "pos.x *= sv2.x;\n" +
                    "pos.y *= sv2.y;\n";
            rotationStr =
                "float angle = rotation.x + rotation.y * ctime;\n" +
                    "vec4 np = vec4(sin(angle), cos(angle), 0, 0);\n" +
                    "np.z = np.x * pos.y + np.y * pos.x;\n" + //b.x = sin_z * a.y + cos_z * a.x;
                    "np.w = np.y * pos.y - np.x * pos.x;\n" + //b.y = cos_z * a.y - sin_z * a.x;
                    "pos.xy = np.zw;\n";
            posStr =
                "vec3 addPos = speed * ctime;\n" + //运动部分
                    "vec3 uspeed = vec3(0,0,0);\n" +
                    "if (ctime < 0.0 || ctime >= " + this.getVec4Str("time") + ".z) {\n" + //根据时间控制粒子是否显示
                    "    addPos.y = addPos.y + 100000.0;\n" +
                    "}\n";
            addSpeedStr =
                "if(" + this.getVec4Str("time") + ".y != 0.0 && length(speed) != 0.0) {\n" +
                    "    uspeed = vec3(speed.x, speed.y, speed.z);\n" +
                    "    uspeed = normalize(uspeed);\n" +
                    "    uspeed = uspeed * " + this.getVec4Str("time") + ".y;\n" +
                    "    uspeed.xyz = uspeed.xyz + " + this.getVec4Str("force") + ".xyz;\n" +
                    "} else {\n" +
                    "    uspeed = vec3(" + this.getVec4Str("force") + ".x, " + this.getVec4Str("force") + ".y, " + this.getVec4Str("force") + ".z);\n" +
                    "}\n" +
                    "addPos.xyz = addPos.xyz + uspeed.xyz * ctime * ctime;\n";
            mulStr =
                "uspeed = speed + uspeed * ctime * 2.0;\n" + //当前速度方向
                    "uspeed = normalize(uspeed);\n" +
                    "vec4 tempMul = " + this.getMat4Str("rotationMatrix") + " * vec4(uspeed,1.0);\n" +
                    "uspeed.xyz = tempMul.xyz;\n" +
                    "uspeed = normalize(uspeed);\n" +
                    "vec3 cPos = addPos;\n" + //v(视点-位置)
                    "tempMul = " + this.getMat4Str("rotationMatrix") + " * vec4(cPos,1.0);\n" +
                    "cPos.xyz = tempMul.xyz; \n" +
                    "cPos.xyz = " + this.getVec4Str("worldPos") + ".xyz + cPos.xyz;\n" +
                    "cPos.xyz = " + this.getVec4Str("camPos") + ".xyz - cPos.xyz;\n" +
                    "cPos = normalize(cPos);\n" +
                    "cPos = cross(uspeed, cPos);\n" + //法线
                    "cPos = normalize(cPos);\n" +
                    "uspeed = uspeed * pos.x;\n" +
                    "cPos = cPos * pos.y;\n" +
                    "pos.xyz = uspeed.xyz + cPos.xyz;\n";
            resultPosStr =
                "pos = " + this.getMat4Str("watheye") + " * pos;\n" + //控制是否面向视点
                    "pos.xyz = pos.xyz + basePos.xyz + addPos.xyz;\n" +
                    "pos = " + this.getMat4Str("modelMatrix") + " * pos;\n" +
                    "pos.xyz = pos.xyz + bindpos[int(texcoord.z)].xyz;\n" +
                    "gl_Position = " + this.getMat4Str("viewMatrix3D") + " * " + this.getMat4Str("camMatrix3D") + " * pos;\n";
            uvDefaultStr =
                "v0 = vec2(texcoord.x,texcoord.y);\n";
            uvAnimStr =
                "vec2 uv = vec2(texcoord.x,texcoord.y);\n" +
                    "float animframe = floor(ctime / " + this.getVec4Str("animCtrl") + ".z);\n" +
                    "animframe = animframe / " + this.getVec4Str("animCtrl") + ".x;\n" +
                    "uv.x += animframe;\n" +
                    "animframe = floor(animframe);\n" +
                    "uv.y += animframe / " + this.getVec4Str("animCtrl") + ".y;\n" +
                    "v0.xy = uv.xy;\n";
            uvSpeedStr =
                "vec2 uv = vec2(" + this.getVec4Str("uvCtrl") + ".x," + this.getVec4Str("uvCtrl") + ".y);\n" +
                    "uv.xy = uv.xy * ctime + texcoord.xy;\n" +
                    "v0.xy = uv.xy;\n";
            randomColorStr =
                "v2 = color;\n";
            particleColorStr =
                "v1 = vec2(ctime/" + this.getVec4Str("time") + ".z,1.0);\n";
            //this.paramAry
            var hasParticle = this.paramAry[0];
            var hasRandomClolr = this.paramAry[1];
            var isMul = this.paramAry[2];
            var needRotation = this.paramAry[3];
            var needScale = this.paramAry[4];
            var needAddSpeed = this.paramAry[5];
            var uvType = this.paramAry[6];
            var str = "";
            var defineStr = "";
            str += baseStr;
            defineStr += defineBaseStr;
            if (needScale) {
                str += scaleStr;
                defineStr += defineScaleStr;
            }
            if (needRotation) {
                str += rotationStr;
                defineStr += defineRotaionStr;
            }
            str += posStr;
            if (needAddSpeed) {
                str += addSpeedStr;
                defineStr += defineAddSpeedStr;
            }
            if (isMul) {
                str += mulStr;
                defineStr += defineMulStr;
            }
            str += resultPosStr;
            if (uvType == 1) {
                str += uvAnimStr;
                defineStr += defineUvAnimStr;
            }
            else if (uvType == 2) {
                str += uvSpeedStr;
                defineStr += defineUvSpeedStr;
            }
            else {
                str += uvDefaultStr;
            }
            if (hasRandomClolr) {
                str += randomColorStr;
                defineStr += defineRandomColor;
            }
            if (hasParticle) {
                str += particleColorStr;
                defineStr += defineParticleColor;
            }
            //str += uvStr
            //str += particleColorStr
            //str += randomColorStr
            var resultAllStr = defineStr + "void main(){\n" + str + "}";
            ////console.log(resultAllStr);
            return resultAllStr;
        };
        Display3DFollowShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D tex;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(tex, v0.xy);\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DFollowShader.Display3D_Follow_Shader = "Display3DFollowShader";
        Display3DFollowShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1, modelMatrix: 2, watheye: 3, rotationMatrix: 4 };
        Display3DFollowShader.shader_vec4 = { time: [5, 0], scale: [5, 1], scaleCtrl: [5, 2], force: [5, 3], worldPos: [6, 0], camPos: [6, 1], animCtrl: [6, 2], uvCtrl: [6, 3] };
        return Display3DFollowShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DFollowShader = Display3DFollowShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFollowShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleFollowData = /** @class */ (function (_super) {
        __extends(ParticleFollowData, _super);
        function ParticleFollowData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ParticleFollowData.prototype.getParticle = function () {
            return new Pan3d.Display3DFollowPartilce;
        };
        ParticleFollowData.prototype.setAllByteInfo = function ($byte) {
            _super.prototype.setAllByteInfo.call(this, $byte);
            //this.initBingMatrixAry();
            this.uploadGpu();
        };
        ParticleFollowData.prototype.regShader = function () {
            if (!this.materialParam) {
                return;
            }
            var shaderParameAry = this.getShaderParam();
            //var shader: Display3DFollowShader = new Display3DFollowShader()
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DFollowShader.Display3D_Follow_Shader, Pan3d.Display3DFollowShader, this.materialParam.material, shaderParameAry);
            this.materialParam.program = this.materialParam.shader.program;
        };
        return ParticleFollowData;
    }(Pan3d.ParticleBallData));
    Pan3d.ParticleFollowData = ParticleFollowData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleFollowData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFollowLocusPartilce = /** @class */ (function (_super) {
        __extends(Display3DFollowLocusPartilce, _super);
        function Display3DFollowLocusPartilce() {
            var _this = _super.call(this) || this;
            _this.flag = 0;
            //this.objData = new ParticleGpuData();
            _this._caramPosVec = [0, 0, 0];
            return _this;
        }
        Object.defineProperty(Display3DFollowLocusPartilce.prototype, "followlocusdata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DFollowLocusPartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleFollowLocusData;
        };
        // public setAllByteInfo($byte: ByteArray, version: number = 0): void {
        //     super.setAllByteInfo($byte, version);
        //     this.initBindMatrixAry();
        // }
        Display3DFollowLocusPartilce.prototype.onCreated = function () {
            this.initBindMatrixAry();
        };
        Display3DFollowLocusPartilce.prototype.initBindMatrixAry = function () {
            this._bindPosAry = new Array;
            this._gpuVc = new Float32Array(this.followlocusdata._fenduanshu * 6);
            for (var i = 0; i <= this.followlocusdata._fenduanshu; i++) {
                this._bindPosAry.push([0, 0, 5 * i]);
                this._bindPosAry.push([0, 0, 1]);
            }
        };
        Display3DFollowLocusPartilce.prototype.setVa = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);
            if (!tf) {
                Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.data.objData.stride, 0);
                Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.data.objData.stride, 12);
            }
            // Scene_data.context3D.setVa(0, 3, this.data.objData.vertexBuffer);
            // Scene_data.context3D.setVa(1, 2, this.data.objData.uvBuffer);
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.data.objData.indexBuffer, this.data.objData.treNum);
        };
        Display3DFollowLocusPartilce.prototype.setVc = function () {
            this.updateMatrix();
            this.updateBind();
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            this.data.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            this.data.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            this._caramPosVec[0] = Pan3d.Scene_data.cam3D.x;
            this._caramPosVec[1] = Pan3d.Scene_data.cam3D.y;
            this._caramPosVec[2] = Pan3d.Scene_data.cam3D.z;
            //Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "camPos", this._caramPosVec);
            this.data.vcmatData.set(this._caramPosVec, 32);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
            this.setBindPosVc();
            this.setMaterialVc();
        };
        Display3DFollowLocusPartilce.prototype.setBindPosVc = function () {
            for (var i = 0; i < this._bindPosAry.length; i++) {
                Pan3d.Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "bindpos[" + i + "]", this._bindPosAry[i]);
            }
        };
        Display3DFollowLocusPartilce.prototype.reset = function () {
            this.resetPos();
            _super.prototype.reset.call(this);
        };
        Display3DFollowLocusPartilce.prototype.updateMatrix = function () {
            this.modelMatrix.identity();
            this.modelMatrix.prepend(this.posMatrix);
        };
        Display3DFollowLocusPartilce.prototype.resetPos = function () {
            for (var i = 0; i < this._bindPosAry.length; i += 2) {
                this._bindPosAry[i][0] = this.bindVecter3d.x;
                this._bindPosAry[i][1] = this.bindVecter3d.y;
                this._bindPosAry[i][2] = this.bindVecter3d.z;
            }
            this.flag = Pan3d.TimeUtil.getTimer();
        };
        Display3DFollowLocusPartilce.prototype.updateBind = function () {
            var ctime = Pan3d.TimeUtil.getTimer();
            if ((ctime - this.flag) >= Display3DFollowLocusPartilce.waitCdTime) {
                var normal = this._bindPosAry.pop();
                var pos = this._bindPosAry.pop();
                pos[0] = this.bindVecter3d.x;
                pos[1] = this.bindVecter3d.y;
                pos[2] = this.bindVecter3d.z;
                var pos0 = this._bindPosAry[0];
                var normal0 = this._bindPosAry[1];
                var v3d = new Pan3d.Vector3D(pos[0] - pos0[0], pos[1] - pos0[1], pos[2] - pos0[2]);
                v3d.normalize();
                normal0[0] = v3d.x;
                normal[0] = v3d.x;
                normal0[1] = v3d.y;
                normal[1] = v3d.y;
                normal0[2] = v3d.z;
                normal[2] = v3d.z;
                this._bindPosAry.unshift(normal);
                this._bindPosAry.unshift(pos);
                this.flag = ctime;
            }
        };
        Display3DFollowLocusPartilce.waitCdTime = 35;
        return Display3DFollowLocusPartilce;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DFollowLocusPartilce = Display3DFollowLocusPartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFollowLocusPartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DFollowLocusShader = /** @class */ (function (_super) {
        __extends(Display3DFollowLocusShader, _super);
        function Display3DFollowLocusShader() {
            return _super.call(this) || this;
        }
        Display3DFollowLocusShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2TexCoord");
        };
        Display3DFollowLocusShader.prototype.getMat4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DFollowLocusShader.shader_mat4[key] + "]";
        };
        Display3DFollowLocusShader.prototype.getVec4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DFollowLocusShader.shader_vec4[key][0] + "][" + Display3DFollowLocusShader.shader_vec4[key][1] + "]";
        };
        Display3DFollowLocusShader.getVcSize = function () {
            return 3;
        };
        Display3DFollowLocusShader.prototype.getVertexShaderString = function () {
            var defineBaseStr = "attribute vec3 v3Position;\n" +
                "attribute vec2 v2TexCoord;\n" +
                "uniform mat4 vcmat[" + Pan3d.Display3DFacetShader.getVcSize() + "];\n" + //所有vc值
                // "uniform mat4 viewMatrix3D;\n" +
                // "uniform mat4 camMatrix3D;\n" +
                // "uniform vec3 camPos;\n" +
                "uniform vec3 bindpos[30];\n" +
                "varying vec2 v0;\n";
            var watchPosStr = "   vec3 cpos = bindpos[int(v3Position.x)];\n" +
                "   vec3 mulPos = normalize(vec3(" + this.getVec4Str("camPos") + ".xyz) - cpos);\n" +
                "   vec3 normals = bindpos[int(v3Position.y)];\n" +
                "   mulPos = cross(mulPos, normals);\n" +
                "   mulPos = normalize(mulPos);\n" +
                "   mulPos *= v3Position.z;\n" +
                "   cpos += mulPos;\n" +
                "   gl_Position = " + this.getMat4Str("viewMatrix3D") + "  * " + this.getMat4Str("camMatrix3D") + " * vec4(cpos,1.0);\n";
            var uvStr = "v0 = v2TexCoord;\n";
            var resultAllStr = defineBaseStr + "void main(){\n" + watchPosStr + uvStr + "}";
            return resultAllStr;
        };
        Display3DFollowLocusShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D tex;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(tex, v0.xy);\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        Display3DFollowLocusShader.Display3D_FollowLocus_Shader = "Display3DFollowLocusShader";
        Display3DFollowLocusShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1 };
        Display3DFollowLocusShader.shader_vec4 = { camPos: [2, 0] };
        return Display3DFollowLocusShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DFollowLocusShader = Display3DFollowLocusShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DFollowLocusShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleFollowLocusData = /** @class */ (function (_super) {
        __extends(ParticleFollowLocusData, _super);
        function ParticleFollowLocusData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ParticleFollowLocusData.prototype.getParticle = function () {
            return new Pan3d.Display3DFollowLocusPartilce;
        };
        ParticleFollowLocusData.prototype.setAllByteInfo = function ($byte) {
            this._fenduanshu = $byte.readFloat();
            _super.prototype.setAllByteInfo.call(this, $byte);
            //this.initBindMatrixAry();
            this.uploadGpu();
            this.initVcData();
        };
        ParticleFollowLocusData.prototype.uploadGpu = function () {
            this.objData = new Pan3d.ObjData;
            this.objData.vertices = new Array;
            this.objData.uvs = new Array;
            this.objData.indexs = new Array;
            for (var i = 0; i <= this._fenduanshu; i++) {
                var pA = new Pan3d.Vector2D(i / this._fenduanshu, 0);
                var pB = new Pan3d.Vector2D(i / this._fenduanshu, 1);
                pA.scaleBy(0.9);
                pB.scaleBy(0.9);
                if (this._isU) {
                    pA.x = -pA.x;
                    pB.x = -pB.x;
                }
                if (this._isV) {
                    pA.y = -pA.y;
                    pB.y = -pB.y;
                }
                var vcIndex = i * 2;
                this.objData.vertices.push(vcIndex, vcIndex + 1, -this._originWidthScale * this._width / 100);
                if (this._isUV) {
                    this.objData.vertices.push(pA.y, pA.x);
                }
                else {
                    this.objData.vertices.push(pA.x, pA.y);
                }
                this.objData.vertices.push(vcIndex, vcIndex + 1, (1 - this._originWidthScale) * this._width / 100);
                if (this._isUV) {
                    this.objData.vertices.push(pB.y, pB.x);
                }
                else {
                    this.objData.vertices.push(pB.x, pB.y);
                }
                // if (this._isUV) {
                //     this.objData.uvs.push(pA.y, pA.x);
                //     this.objData.uvs.push(pB.y, pB.x);
                // } else {
                //     this.objData.uvs.push(pA.x, pA.y);
                //     this.objData.uvs.push(pB.x, pB.y);
                // }
            }
            for (i = 0; i < this._fenduanshu; i++) {
                this.objData.indexs.push(0 + 2 * i, 1 + 2 * i, 2 + 2 * i, 1 + 2 * i, 3 + 2 * i, 2 + 2 * i);
            }
            this.pushToGpu();
        };
        ParticleFollowLocusData.prototype.pushToGpu = function () {
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            //this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            this.objData.stride = 5 * 4;
            this.objData.treNum = this.objData.indexs.length;
        };
        ParticleFollowLocusData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DFollowLocusShader.getVcSize() * 16);
        };
        ParticleFollowLocusData.prototype.regShader = function () {
            if (!this.materialParam) {
                return;
            }
            var shader = new Pan3d.Display3DFollowLocusShader();
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DFollowLocusShader.Display3D_FollowLocus_Shader, Pan3d.Display3DFollowLocusShader, this.materialParam.material);
            this.materialParam.program = this.materialParam.shader.program;
        };
        return ParticleFollowLocusData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleFollowLocusData = ParticleFollowLocusData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleFollowLocusData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Display3DBoneShader = /** @class */ (function (_super) {
        __extends(Display3DBoneShader, _super);
        function Display3DBoneShader() {
            return _super.call(this) || this;
        }
        Display3DBoneShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
            $context.bindAttribLocation(this.program, 2, "boneWeight");
            $context.bindAttribLocation(this.program, 3, "boneID");
        };
        Display3DBoneShader.prototype.getMat4Str = function (key) {
            //return key;
            return "vcmat[" + Display3DBoneShader.shader_mat4[key] + "]";
        };
        Display3DBoneShader.getVcSize = function () {
            return 3;
        };
        Display3DBoneShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 pos;" +
                "attribute vec2 v2uv;" +
                "attribute vec4 boneWeight;" +
                "attribute vec4 boneID;" +
                "uniform vec4 boneQ[54];\n" +
                "uniform vec3 boneD[54];\n" +
                "uniform mat4 vcmat[" + Display3DBoneShader.getVcSize() + "];\n" + //所有vc值
                //"uniform mat4 viewMatrix3D;\n" +
                //"uniform mat4 camMatrix3D;\n" +
                //"uniform mat4 posMatrix3D;\n" +
                "varying vec2 v0;\n" +
                Pan3d.MaterialAnimShader.getMd5M44Str() +
                "void main(void)" +
                "{" +
                "v0 = v2uv;\n" +
                "vec4 vt0 = getQDdata(vec3(pos.x,pos.y,pos.z));\n" +
                " gl_Position = " + this.getMat4Str("viewMatrix3D") + " * " + this.getMat4Str("camMatrix3D") + " *" + this.getMat4Str("posMatrix3D") + "* vt0;" +
                "}";
            return $str;
        };
        Display3DBoneShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor = vec4(1.0,0.0,1.0,1.0);\n" +
                "}";
            return $str;
        };
        Display3DBoneShader.Display3DBoneShader = "Display3DBoneShader";
        Display3DBoneShader.shader_mat4 = { viewMatrix3D: 0, camMatrix3D: 1, posMatrix3D: 2 };
        return Display3DBoneShader;
    }(Pan3d.Shader3D));
    Pan3d.Display3DBoneShader = Display3DBoneShader;
    var Display3DBonePartilce = /** @class */ (function (_super) {
        __extends(Display3DBonePartilce, _super);
        function Display3DBonePartilce() {
            var _this = _super.call(this) || this;
            _this.skipNum = 0;
            return _this;
        }
        Object.defineProperty(Display3DBonePartilce.prototype, "modeldata", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        Display3DBonePartilce.prototype.creatData = function () {
            this.data = new Pan3d.ParticleBoneData;
        };
        Display3DBonePartilce.prototype.update = function () {
            Pan3d.Scene_data.context3D.setWriteDepth(false);
            _super.prototype.update.call(this);
            //   Scene_data.context3D.setWriteDepth(false);
        };
        Display3DBonePartilce.prototype.setVc = function () {
            var currentFrame = float2int((this._time / Pan3d.Scene_data.frameTime) / 2);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
            //this.data.setFloat32Mat("viewMatrix3D", Scene_data.viewMatrx3D.m);
            this.data.vcmatData.set(Pan3d.Scene_data.viewMatrx3D.m, 0);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            //this.data.setFloat32Mat("camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
            this.data.vcmatData.set(Pan3d.Scene_data.cam3D.cameraMatrix.m, 16);
            //Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "posMatrix3D", this.modelMatrix.m);
            //this.data.setFloat32Mat("posMatrix3D", this.modelMatrix.m);
            this.data.vcmatData.set(this.modelMatrix.m, 32);
            Pan3d.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader, "vcmat", this.data.vcmatData);
            var $frameDualQuat = this.modeldata.animData.boneQPAry[0];
            var $frameLen = $frameDualQuat.length;
            var $frameId = currentFrame % $frameLen;
            /*
            for (var i: number = 0; i < this.modeldata.boneQDitem[$frameId].length; i++) {
                var $dq: ObjectBone = this.modeldata.boneQDitem[$frameId][i]
    
                Scene_data.context3D.setVc4fv(this.data.materialParam.program, "boneQ[" + i + "]", [$dq.qx, $dq.qy, $dq.qz, $dq.qw]);
                Scene_data.context3D.setVc3fv(this.data.materialParam.program, "boneD[" + i + "]", [$dq.tx, $dq.ty, $dq.tz]);
            }
            */
            var $dualQuatFrame = $frameDualQuat[$frameId];
            Pan3d.Scene_data.context3D.setVc4fv(this.data.materialParam.shader, "boneQ", $dualQuatFrame.quat); //旋转
            Pan3d.Scene_data.context3D.setVc3fv(this.data.materialParam.shader, "boneD", $dualQuatFrame.pos); //所有的位移
            this.setMaterialVc();
        };
        Display3DBonePartilce.prototype.setVa = function () {
            var tf = Pan3d.Scene_data.context3D.pushVa(this.modeldata.meshData.vertexBuffer);
            if (!tf) {
                Pan3d.Scene_data.context3D.setVaOffset(0, 3, this.modeldata.meshData.stride, 0);
                Pan3d.Scene_data.context3D.setVaOffset(1, 2, this.modeldata.meshData.stride, 12);
                Pan3d.Scene_data.context3D.setVaOffset(3, 4, this.modeldata.meshData.stride, 20);
                Pan3d.Scene_data.context3D.setVaOffset(2, 4, this.modeldata.meshData.stride, 36);
            }
            // Scene_data.context3D.setVa(0, 3, this.modeldata.meshData.vertexBuffer);
            // Scene_data.context3D.setVa(1, 2, this.modeldata.meshData.uvBuffer);
            // Scene_data.context3D.setVa(2, 4, this.modeldata.meshData.boneWeightBuffer);
            // Scene_data.context3D.setVa(3, 4, this.modeldata.meshData.boneIdBuffer);
            this.setMaterialTexture();
            Pan3d.Scene_data.context3D.drawCall(this.modeldata.meshData.indexBuffer, this.modeldata.meshData.treNum);
        };
        Display3DBonePartilce.prototype.resetVa = function () {
            //Scene_data.context3D.clearVa(2);
            //Scene_data.context3D.clearVa(3);
            _super.prototype.resetVa.call(this);
        };
        return Display3DBonePartilce;
    }(Pan3d.Display3DParticle));
    Pan3d.Display3DBonePartilce = Display3DBonePartilce;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Display3DBonePartilce.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ParticleBoneData = /** @class */ (function (_super) {
        __extends(ParticleBoneData, _super);
        function ParticleBoneData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.objScale = 1;
            return _this;
        }
        ParticleBoneData.prototype.getParticle = function () {
            return new Pan3d.Display3DBonePartilce();
        };
        ParticleBoneData.prototype.destory = function () {
            _super.prototype.destory.call(this);
            //this.timelineData.destory();
            //this.timelineData = null;
            this.meshData.destory();
            this.animData = null;
        };
        ParticleBoneData.prototype.setAllByteInfo = function ($byte) {
            this.meshData = new Pan3d.MeshData();
            this.animData = new Pan3d.AnimData();
            this.objScale = $byte.readFloat();
            var dataWidth = 13;
            var len = $byte.getInt();
            len *= dataWidth * 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 3, 0, dataWidth); //vertices
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 2, 3, dataWidth); //uvs
            Pan3d.BaseRes.readIntForTwoByte($byte, this.meshData.indexs);
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 4, 5, dataWidth, 2); //boneIDAry
            Pan3d.BaseRes.readBytes2ArrayBuffer($byte, data, 4, 9, dataWidth, 3); //boneWeightAry
            this.meshData.stride = dataWidth * 4;
            // BaseRes.readFloatTwoByte($byte, this.meshData.vertices)
            // //console.log($byte.position);
            // BaseRes.readFloatTwoByte($byte, this.meshData.uvs)
            // //console.log($byte.position);
            // BaseRes.readIntForTwoByte($byte, this.meshData.indexs);
            // //console.log($byte.position);
            // var numLength: number = $byte.readInt();
            // this.meshData.boneIDAry = new Array
            // for (var j: number = 0; j < numLength; j++) {
            //     this.meshData.boneIDAry.push($byte.readByte())
            // }
            // //console.log($byte.position);
            // numLength = $byte.readInt();
            // this.meshData.boneWeightAry = new Array
            // for (var j: number = 0; j < numLength; j++) {
            //     this.meshData.boneWeightAry.push(($byte.readByte() + 128) / 255);
            // }
            // //console.log($byte.position);
            this.readFrameQua($byte);
            ////console.log($byte.position);
            _super.prototype.setAllByteInfo.call(this, $byte);
            //this.uploadGpu();
            this.initVcData();
            this.meshData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            this.meshData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.meshData.indexs);
            this.meshData.treNum = this.meshData.indexs.length;
        };
        ParticleBoneData.prototype.initVcData = function () {
            this.vcmatData = new Float32Array(Pan3d.Display3DBoneShader.getVcSize() * 16);
        };
        ParticleBoneData.prototype.setFloat32Mat = function (key, ary) {
            var idx = Pan3d.Display3DBoneShader.shader_mat4[key] * 16;
            this.vcmatData.set(ary, idx);
        };
        ParticleBoneData.prototype.readFrameQua = function ($byte) {
            var $tempNum = $byte.readFloat();
            var $RGB32767 = 32767;
            var $frameNum = $byte.readInt();
            var $frameDualQuat = new Array;
            for (var i = 0; i < $frameNum; i++) {
                var $len = $byte.readInt();
                var $DualQuatFloat32Array = new Pan3d.DualQuatFloat32Array;
                $DualQuatFloat32Array.quat = new Float32Array($len * 4);
                $DualQuatFloat32Array.pos = new Float32Array($len * 3);
                for (var j = 0; j < $len; j++) {
                    $DualQuatFloat32Array.quat[j * 4 + 0] = $byte.readShort() / $RGB32767;
                    $DualQuatFloat32Array.quat[j * 4 + 1] = $byte.readShort() / $RGB32767;
                    $DualQuatFloat32Array.quat[j * 4 + 2] = $byte.readShort() / $RGB32767;
                    $DualQuatFloat32Array.quat[j * 4 + 3] = $byte.readShort() / $RGB32767;
                    $DualQuatFloat32Array.pos[j * 3 + 0] = $byte.readShort() / $RGB32767 * $tempNum;
                    $DualQuatFloat32Array.pos[j * 3 + 1] = $byte.readShort() / $RGB32767 * $tempNum;
                    $DualQuatFloat32Array.pos[j * 3 + 2] = $byte.readShort() / $RGB32767 * $tempNum;
                }
                $frameDualQuat.push($DualQuatFloat32Array);
            }
            this.animData.boneQPAry = new Array;
            this.animData.boneQPAry.push($frameDualQuat);
        };
        ParticleBoneData.prototype.uploadGpu = function () {
            this.uploadMesh(this.meshData);
        };
        ParticleBoneData.prototype.uploadMesh = function ($mesh) {
            $mesh.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.vertices);
            $mesh.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.uvs);
            $mesh.boneIdBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.boneIDAry);
            $mesh.boneWeightBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.boneWeightAry);
            $mesh.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D($mesh.indexs);
            $mesh.treNum = $mesh.indexs.length;
        };
        ParticleBoneData.prototype.regShader = function () {
            this.materialParam.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(Pan3d.Display3DBoneShader.Display3DBoneShader, Pan3d.Display3DBoneShader, this.materialParam.material);
            this.materialParam.program = this.materialParam.shader.program;
        };
        return ParticleBoneData;
    }(Pan3d.ParticleData));
    Pan3d.ParticleBoneData = ParticleBoneData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ParticleBoneData.js.map
var Pan3d;
(function (Pan3d) {
    var KeyFrame = /** @class */ (function () {
        function KeyFrame() {
        }
        return KeyFrame;
    }());
    Pan3d.KeyFrame = KeyFrame;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=KeyFrame.js.map
var Pan3d;
(function (Pan3d) {
    var TimeLineData = /** @class */ (function () {
        function TimeLineData() {
            this.dataAry = new Array;
        }
        TimeLineData.prototype.destory = function () {
            this.dataAry = null;
        };
        TimeLineData.prototype.setByteData = function ($byte) {
            var len = $byte.readFloat();
            for (var i = 0; i < len; i++) {
                var frameNum = $byte.readFloat();
                var key = this.addKeyFrame(frameNum);
                key.frameNum = frameNum;
                key.baseValue = new Array();
                for (var j = 0; j < 10; j++) {
                    key.baseValue.push($byte.readFloat());
                }
                var animLen = $byte.readFloat();
                key.animData = new Array;
                if (animLen > 0) {
                    for (var k = 0; k < animLen; k++) {
                        key.animData.push(this.getByteDataTemp($byte));
                    }
                }
            }
            this.maxFrameNum = this.dataAry[this.dataAry.length - 1].frameNum;
            this.beginTime = this.dataAry[0].frameNum * Pan3d.Scene_data.frameTime;
        };
        TimeLineData.prototype.addKeyFrame = function (num) {
            var keyframe = new Object();
            keyframe.frameNum = num;
            this.dataAry.push(keyframe);
            return keyframe;
        };
        TimeLineData.prototype.getByteDataTemp = function ($byte) {
            var obj = new Object;
            var animType = $byte.readInt();
            var dataLen = $byte.readInt();
            obj.data = new Array;
            obj.dataByte = new Array;
            for (var i = 0; i < dataLen; i++) {
                var ko = new Object;
                ko.type = $byte.readInt();
                //  ko.value = $byte.readUTF();
                // obj.data.push(ko);
                if (ko.type == 1) {
                    var num = $byte.readFloat();
                    obj.dataByte.push(num);
                }
                if (ko.type == 2) {
                    var v = new Pan3d.Vector3D();
                    v.x = $byte.readFloat();
                    v.y = $byte.readFloat();
                    v.z = $byte.readFloat();
                    obj.dataByte.push(v);
                }
            }
            obj.type = animType;
            return obj;
        };
        return TimeLineData;
    }());
    Pan3d.TimeLineData = TimeLineData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TimeLineData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TimeLine = /** @class */ (function (_super) {
        __extends(TimeLine, _super);
        function TimeLine() {
            var _this = _super.call(this) || this;
            _this._time = 0; //播放时间
            _this.targetFlag = -1;
            _this.beginTime = 0;
            _this.isByteData = false;
            _this.targetFlag = -1;
            _this.visible = false;
            _this.maxFrameNum = 0;
            _this._time = 0;
            _this._keyFrameAry = new Array;
            return _this;
        }
        TimeLine.prototype.updateMatrix = function (posMatrix, $particle) {
            if (this._axisMove) {
                posMatrix.prependTranslation(this._axisMove.axis.x * this._axisMove.num, this._axisMove.axis.y * this._axisMove.num, this._axisMove.axis.z * this._axisMove.num);
            }
            if (this._axisRotaion) {
                posMatrix.prependRotation(this._axisRotaion.num, this._axisRotaion.axis);
            }
            posMatrix.prependTranslation($particle.data.center.x, $particle.data.center.y, $particle.data.center.z);
            if (this._scaleChange) {
                //processScale();
                posMatrix.prependScale($particle.data._widthFixed ? 1 : this._scaleChange.num, $particle.data._heightFixed ? 1 : this._scaleChange.num, $particle.data._widthFixed ? 1 : this._scaleChange.num);
            }
            else if (this._scaleNosie) {
                //processNosie();
                posMatrix.prependScale($particle.data._widthFixed ? 1 : (1 + this._scaleNosie.num), $particle.data._heightFixed ? 1 : (1 + this._scaleNosie.num), $particle.data._widthFixed ? 1 : (1 + this._scaleNosie.num));
            }
            else if (this._scaleAnim) {
                //processScaleAnim();
                posMatrix.prependScale($particle.data._widthFixed ? 1 : this._scaleAnim.num, $particle.data._heightFixed ? 1 : this._scaleAnim.num, $particle.data._widthFixed ? 1 : this._scaleAnim.num);
                ////console.log(this._scaleAnim.num);
            }
            posMatrix.prependRotation($particle.data.rotationV3d.z, Pan3d.Vector3D.Z_AXIS);
            posMatrix.prependRotation($particle.data.rotationV3d.y, Pan3d.Vector3D.Y_AXIS);
            posMatrix.prependRotation($particle.data.rotationV3d.x, Pan3d.Vector3D.X_AXIS);
        };
        TimeLine.prototype.inverAxisRotation = function ($targetMatrix) {
            if (this._axisRotaion) {
                $targetMatrix.prependRotation(-this._axisRotaion.num, this._axisRotaion.axis);
            }
        };
        TimeLine.prototype.applySelfRotation = function ($targetMatrix, $axis) {
            if (this._selfRotaion) {
                $targetMatrix.prependRotation(this._selfRotaion.num, $axis);
            }
        };
        TimeLine.prototype.addKeyFrame = function (num) {
            var keyframe = new Pan3d.KeyFrame();
            keyframe.frameNum = num;
            this._keyFrameAry.push(keyframe);
            return keyframe;
        };
        TimeLine.prototype.updateTime = function (t) {
            if (!this._currentKeyFrame) {
                return;
            }
            this._time = t;
            this.getTarget();
            if (this._axisRotaion) {
                this._axisRotaion.update(this._time);
            }
            if (this._selfRotaion) {
                this._selfRotaion.update(this._time);
            }
            if (this._axisMove) {
                this._axisMove.update(this._time);
            }
            if (this._scaleChange) {
                this._scaleChange.update(this._time);
            }
            else if (this._scaleNosie) {
                this._scaleNosie.update(this._time);
            }
            else if (this._scaleAnim) {
                this._scaleAnim.update(this._time);
            }
        };
        TimeLine.prototype.getTarget = function () {
            var flag = -1;
            for (var i = 0; i < this._keyFrameAry.length; i++) {
                if (this._keyFrameAry[i].frameNum * Pan3d.Scene_data.frameTime < this._time) {
                    flag = i;
                }
                else {
                    break;
                }
            }
            if (flag != this.targetFlag) {
                this._currentKeyFrame = this._keyFrameAry[flag];
                this.targetFlag = flag;
                if (flag >= (this._keyFrameAry.length - 1) || !this._currentKeyFrame) {
                    this.visible = false;
                    this._currentKeyFrame = null;
                }
                else {
                    this.visible = true;
                    this.enterKeyFrame(this._currentKeyFrame.animData, this._currentKeyFrame.frameNum * Pan3d.Scene_data.frameTime, this._currentKeyFrame.baseValue);
                }
            }
        };
        TimeLine.prototype.enterKeyFrame = function (ary, baseTime, baseValueAry) {
            if (baseTime === void 0) { baseTime = 0; }
            if (baseValueAry === void 0) { baseValueAry = null; }
            if (baseValueAry == null) {
                return;
            }
            for (var i = 0; i < 10; i++) {
                if (!baseValueAry[i]) {
                    continue;
                }
                switch (i) {
                    case 1:
                        if (!this._selfRotaion)
                            this._selfRotaion = new Pan3d.SelfRotation;
                        this._selfRotaion.num = this._selfRotaion.baseNum = baseValueAry[i];
                        break;
                    case 2:
                        if (!this._axisRotaion)
                            this._axisRotaion = new Pan3d.AxisRotaion;
                        this._axisRotaion.num = this._axisRotaion.baseNum = baseValueAry[i];
                        break;
                    case 6:
                        if (!this._scaleChange)
                            this._scaleChange = new Pan3d.ScaleChange;
                        this._scaleChange.num = this._scaleChange.baseNum = baseValueAry[i];
                        break;
                    case 7:
                        if (!this._scaleAnim)
                            this._scaleAnim = new Pan3d.ScaleAnim;
                        this._scaleAnim.num = this._scaleAnim.baseNum = baseValueAry[i];
                        break;
                    case 8:
                        if (!this._scaleNosie)
                            this._scaleNosie = new Pan3d.ScaleNoise;
                        this._scaleNosie.num = this._scaleNosie.baseNum = baseValueAry[i];
                        break;
                    case 9:
                        if (!this._axisMove)
                            this._axisMove = new Pan3d.AxisMove;
                        this._axisMove.num = this._axisMove.baseNum = baseValueAry[i];
                        break;
                }
            }
            if (this._selfRotaion)
                this._selfRotaion.isDeath = true;
            if (this._axisRotaion)
                this._axisRotaion.isDeath = true;
            if (this._scaleChange)
                this._scaleChange.isDeath = true;
            if (this._scaleAnim)
                this._scaleAnim.isDeath = true;
            if (this._scaleNosie)
                this._scaleNosie.isDeath = true;
            if (this._axisMove)
                this._axisMove.isDeath = true;
            if (!ary) {
                return;
            }
            this.setBaseTimeByte(ary, baseTime, baseValueAry);
        };
        TimeLine.prototype.reset = function () {
            this._time = 0;
            this._currentKeyFrame = this._keyFrameAry[0];
            this.visible = false;
            this.targetFlag = -1;
        };
        TimeLine.prototype.setAllByteInfo = function ($byte, $allObj) {
            this.isByteData = true;
            var len = $byte.readFloat();
            for (var i = 0; i < len; i++) {
                var frameNum = $byte.readFloat();
                var key = this.addKeyFrame(frameNum);
                key.frameNum = frameNum;
                key.baseValue = new Array();
                for (var j = 0; j < 10; j++) {
                    key.baseValue.push($byte.readFloat());
                }
                var animLen = $byte.readFloat();
                key.animData = new Array;
                if (animLen > 0) {
                    for (var k = 0; k < animLen; k++) {
                        key.animData.push(this.getByteDataTemp($byte));
                    }
                }
            }
            this.maxFrameNum = this._keyFrameAry[this._keyFrameAry.length - 1].frameNum;
            this.beginTime = this._keyFrameAry[0].frameNum * Pan3d.Scene_data.frameTime;
            this._currentKeyFrame = this._keyFrameAry[0];
        };
        TimeLine.prototype.setAllDataInfo = function ($data) {
            this.isByteData = true;
            var len = $data.dataAry.length;
            for (var i = 0; i < len; i++) {
                var key = this.addKeyFrame($data.dataAry[i].frameNum);
                key.baseValue = $data.dataAry[i].baseValue;
                key.animData = $data.dataAry[i].animData;
            }
            this.maxFrameNum = $data.maxFrameNum;
            this.beginTime = $data.beginTime;
            this._currentKeyFrame = this._keyFrameAry[0];
        };
        TimeLine.prototype.setBaseTimeByte = function (ary, baseTime, baseValueAry) {
            if (baseTime === void 0) { baseTime = 0; }
            if (baseValueAry === void 0) { baseValueAry = null; }
            for (var i = 0; i < ary.length; i++) {
                if (ary[i].type == 1) {
                    if (!this._selfRotaion) {
                        this._selfRotaion = new Pan3d.SelfRotation;
                    }
                    else {
                        this._selfRotaion.reset();
                    }
                    // this._selfRotaion.data = (ary[i].data);
                    this._selfRotaion.dataByte(ary[i].data, ary[i].dataByte);
                    this._selfRotaion.baseTime = baseTime;
                }
                else if (ary[i].type == 2) {
                    if (!this._axisRotaion) {
                        this._axisRotaion = new Pan3d.AxisRotaion;
                    }
                    else {
                        this._axisRotaion.reset();
                    }
                    this._axisRotaion.dataByte(ary[i].data, ary[i].dataByte);
                    this._axisRotaion.baseTime = baseTime;
                }
                else if (ary[i].type == 6) {
                    if (!this._scaleChange) {
                        this._scaleChange = new Pan3d.ScaleChange;
                    }
                    else {
                        this._scaleChange.reset();
                    }
                    //this._scaleChange.data = (ary[i].data);
                    this._scaleChange.dataByte(ary[i].data, ary[i].dataByte);
                    this._scaleChange.baseTime = baseTime;
                }
                else if (ary[i].type == 7) {
                    if (!this._scaleAnim) {
                        this._scaleAnim = new Pan3d.ScaleAnim;
                    }
                    else {
                        this._scaleAnim.reset();
                    }
                    // this._scaleAnim.data = (ary[i].data);
                    this._scaleAnim.dataByte(ary[i].data, ary[i].dataByte);
                    this._scaleAnim.baseTime = baseTime;
                }
                else if (ary[i].type == 8) {
                    if (!this._scaleNosie) {
                        this._scaleNosie = new Pan3d.ScaleNoise;
                    }
                    else {
                        this._scaleNosie.reset();
                    }
                    //this._scaleNosie.data = (ary[i].data);
                    this._scaleNosie.dataByte(ary[i].data, ary[i].dataByte);
                    this._scaleNosie.baseTime = baseTime;
                }
                else if (ary[i].type == 9) {
                    if (!this._axisMove) {
                        this._axisMove = new Pan3d.AxisMove;
                    }
                    else {
                        this._axisMove.reset();
                    }
                    // this._axisMove.data = (ary[i].data);
                    this._axisMove.dataByte(ary[i].data, ary[i].dataByte);
                    this._axisMove.baseTime = baseTime;
                }
            }
        };
        TimeLine.prototype.getByteDataTemp = function ($byte) {
            var obj = new Object;
            var animType = $byte.readInt();
            var dataLen = $byte.readInt();
            obj.data = new Array;
            obj.dataByte = new Array;
            for (var i = 0; i < dataLen; i++) {
                var ko = new Object;
                ko.type = $byte.readInt();
                //  ko.value = $byte.readUTF();
                // obj.data.push(ko);
                if (ko.type == 1) {
                    var num = $byte.readFloat();
                    obj.dataByte.push(num);
                }
                if (ko.type == 2) {
                    var v = new Pan3d.Vector3D();
                    v.x = $byte.readFloat();
                    v.y = $byte.readFloat();
                    v.z = $byte.readFloat();
                    obj.dataByte.push(v);
                }
            }
            obj.type = animType;
            return obj;
        };
        /**
         * 获取最大的帧数
         * @return 最大帧数
         *
         */
        TimeLine.prototype.getMaxFrame = function () {
            return this._keyFrameAry[this._keyFrameAry.length - 1].frameNum;
        };
        TimeLine.prototype.dispose = function () {
            //this._keyFrameAry = null;
            //this._display3D.clear();
            //this._display3D = null;
            //this._currentKeyFrame = null;
        };
        return TimeLine;
    }(Pan3d.EventDispatcher));
    Pan3d.TimeLine = TimeLine;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TimeLine.js.map
var Pan3d;
(function (Pan3d) {
    var BaseAnim = /** @class */ (function () {
        function BaseAnim() {
            this.baseNum = 0;
            this.num = 0;
            this.time = 0;
            this.speed = 0;
            this.aSpeed = 0;
            this.beginTime = 0;
            this.lastTime = 0;
            this.baseTime = 0;
        }
        BaseAnim.prototype.BaseAnim = function () {
        };
        BaseAnim.prototype.update = function (t) {
            if (this._isDeath) {
                return;
            }
            this.time = t - this.baseTime;
            if (this._isActiva) {
                this.time = this.time - this.beginTime;
                if (this.time > this.lastTime) {
                    this.time = this.lastTime - this.beginTime;
                    this._isDeath = true;
                }
                this.coreCalculate();
            }
            else {
                if (this.time >= this.beginTime) {
                    if (this.time >= this.lastTime) {
                        this.time = this.lastTime - this.beginTime;
                        this.coreCalculate();
                        this._isDeath = true;
                    }
                    else {
                        this.time = this.time - this.beginTime;
                        this.coreCalculate();
                    }
                    this._isActiva = true;
                }
            }
        };
        BaseAnim.prototype.coreCalculate = function () {
            this.num = this.speed * this.time + this.aSpeed * this.time * this.time + this.baseNum;
        };
        BaseAnim.prototype.reset = function () {
            this._isActiva = false;
            this._isDeath = false;
            //time = 0;
            //baseNum = num;
            this.time = 0;
            this.num = 0;
        };
        BaseAnim.prototype.depthReset = function () {
            this._isActiva = false;
            this._isDeath = false;
            this.time = 0;
            this.baseNum = 0;
            this.num = 0;
        };
        Object.defineProperty(BaseAnim.prototype, "data", {
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseAnim.prototype, "isDeath", {
            get: function () {
                return this._isDeath;
            },
            set: function (value) {
                this._isDeath = value;
            },
            enumerable: true,
            configurable: true
        });
        BaseAnim.prototype.getAllNum = function (allTime) {
            allTime = Math.min(allTime, this.lastTime);
            allTime = allTime - this.beginTime;
            var num = this.speed * allTime + this.aSpeed * allTime * allTime;
            this.baseNum += num;
        };
        return BaseAnim;
    }());
    Pan3d.BaseAnim = BaseAnim;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BaseAnim.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var AxisMove = /** @class */ (function (_super) {
        __extends(AxisMove, _super);
        function AxisMove() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AxisMove.prototype, "data", {
            set: function (value) {
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                var vc = (value[2].value).split("|");
                this.axis = new Pan3d.Vector3D(Number(vc[0]), Number(vc[1]), Number(vc[2]));
                this.axis.normalize();
                this.speed = Number(value[3].value) * 0.1;
                this.aSpeed = Number(value[4].value) * 0.001;
            },
            enumerable: true,
            configurable: true
        });
        AxisMove.prototype.dataByte = function (va, arr) {
            this.beginTime = arr[0];
            if (arr[1] == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = arr[1];
            }
            this.axis = arr[2];
            this.axis.normalize();
            this.speed = arr[3] * 0.1;
            this.aSpeed = arr[4] * 0.001;
        };
        return AxisMove;
    }(Pan3d.BaseAnim));
    Pan3d.AxisMove = AxisMove;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AxisMove.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var AxisRotaion = /** @class */ (function (_super) {
        __extends(AxisRotaion, _super);
        function AxisRotaion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AxisRotaion.prototype, "data", {
            set: function (value) {
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                var vc = String(value[2].value).split("|");
                this.axis = new Pan3d.Vector3D(Number(vc[0]), Number(vc[1]), Number(vc[2]));
                vc = String(value[3].value).split("|");
                this.axisPos = new Pan3d.Vector3D(Number(vc[0]) * 100, Number(vc[1]) * 100, Number(vc[2]) * 100);
                this.speed = Number(value[4].value) * 0.1;
                this.aSpeed = Number(value[5].value) * 0.1;
            },
            enumerable: true,
            configurable: true
        });
        AxisRotaion.prototype.dataByte = function (va, arr) {
            this.beginTime = Number(arr[0]);
            if (Number(arr[1]) == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = Number(arr[1]);
            }
            this.axis = arr[2];
            this.axisPos = arr[3];
            this.speed = arr[4] * 0.1;
            this.aSpeed = arr[5] * 0.1;
        };
        return AxisRotaion;
    }(Pan3d.BaseAnim));
    Pan3d.AxisRotaion = AxisRotaion;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AxisRotaion.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ScaleAnim = /** @class */ (function (_super) {
        __extends(ScaleAnim, _super);
        function ScaleAnim() {
            var _this = _super.call(this) || this;
            _this.num = 1;
            return _this;
        }
        ScaleAnim.prototype.update = function (t) {
            if (this._isDeath) {
                return;
            }
            this.time = t - this.baseTime;
            if (this._isActiva) {
                this.coreCalculate();
                if (this.time > this.lastTime) {
                    this._isDeath = true;
                }
            }
            else {
                if (this.time >= this.beginTime) {
                    //this.time = this.time-this.beginTime;
                    this._isActiva = true;
                }
            }
        };
        ScaleAnim.prototype.coreCalculate = function () {
            var frameNum = float2int(this.time / Pan3d.Scene_data.frameTime);
            if (frameNum >= this.numAry.length) {
                this.num = this.numAry[this.numAry.length - 1];
            }
            else {
                this.num = this.numAry[frameNum];
            }
        };
        ScaleAnim.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.num = 1;
        };
        ScaleAnim.prototype.depthReset = function () {
            _super.prototype.depthReset.call(this);
            this.num = 1;
        };
        Object.defineProperty(ScaleAnim.prototype, "data", {
            set: function (value) {
                this.numAry = new Array;
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                this.beginScale = Number(value[2].value);
                this.scaleNum = Number(value[3].value);
                this.scaleAry = new Array;
                var addTime = 0;
                for (var i = 4; i < 4 + this.scaleNum * 2; i += 2) {
                    var obj = new Object;
                    obj.value = Number(value[i].value);
                    obj.time = Number(value[i + 1].value);
                    addTime += obj.time;
                    obj.beginTime = this.beginTime + addTime;
                    this.scaleAry.push(obj);
                }
                var frameNum;
                var btime = 0;
                var aTime = 1;
                if (this.scaleAry.length) {
                    frameNum = (this.scaleAry[this.scaleAry.length - 1].beginTime + this.scaleAry[this.scaleAry.length - 1].time) / Pan3d.Scene_data.frameTime;
                    aTime = this.scaleAry[0].beginTime;
                    this._currentTarget = this.scaleAry[0];
                }
                else {
                    frameNum = 0;
                }
                var flag = 0;
                for (i = 0; i < frameNum; i++) {
                    var ctime = Pan3d.Scene_data.frameTime * i;
                    if (ctime >= this._currentTarget.beginTime) {
                        this.beginScale = this._currentTarget.value;
                        btime = this._currentTarget.beginTime;
                        if (flag == this.scaleAry.length - 1) {
                            this._currentTarget = this.scaleAry[this.scaleAry.length - 1];
                        }
                        else {
                            flag++;
                            this._currentTarget = this.scaleAry[flag];
                        }
                        aTime = this._currentTarget.time;
                    }
                    var cNum = (ctime - btime) / aTime * (this._currentTarget.value - this.beginScale) + this.beginScale;
                    this.numAry.push(cNum);
                }
                this._currentTarget = this.scaleAry[0];
            },
            enumerable: true,
            configurable: true
        });
        ScaleAnim.prototype.dataByte = function (va, arr) {
            this.numAry = new Array;
            this.beginTime = arr[0];
            if (arr[1] == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = arr[1];
            }
            this.beginScale = arr[2];
            this.scaleNum = arr[3];
            this.scaleAry = new Array;
            var addTime = 0;
            for (var i = 4; i < 4 + this.scaleNum * 2; i += 2) {
                var obj = new Object;
                obj.value = arr[i];
                obj.time = arr[i + 1];
                addTime += obj.time;
                obj.beginTime = this.beginTime + addTime;
                this.scaleAry.push(obj);
            }
            var frameNum;
            var btime = 0;
            var aTime = 1;
            if (this.scaleAry.length) {
                frameNum = (this.scaleAry[this.scaleAry.length - 1].beginTime + this.scaleAry[this.scaleAry.length - 1].time) / Pan3d.Scene_data.frameTime;
                aTime = this.scaleAry[0].beginTime;
                this._currentTarget = this.scaleAry[0];
            }
            else {
                frameNum = 0;
            }
            var flag = 0;
            for (i = 0; i < frameNum; i++) {
                var ctime = Pan3d.Scene_data.frameTime * i;
                if (ctime >= this._currentTarget.beginTime) {
                    this.beginScale = this._currentTarget.value;
                    btime = this._currentTarget.beginTime;
                    if (flag == this.scaleAry.length - 1) {
                        this._currentTarget = this.scaleAry[this.scaleAry.length - 1];
                    }
                    else {
                        flag++;
                        this._currentTarget = this.scaleAry[flag];
                    }
                    aTime = this._currentTarget.time;
                }
                var cNum = (ctime - btime) / aTime * (this._currentTarget.value - this.beginScale) + this.beginScale;
                this.numAry.push(cNum);
            }
            this._currentTarget = this.scaleAry[0];
        };
        ScaleAnim.prototype.getAllNum = function (allTime) {
            allTime = Math.min(allTime, this.lastTime + this.beginTime);
            var target = this.scaleAry[this.scaleAry.length - 1];
            if (allTime >= (target.beginTime + target.time)) {
                this.baseNum = target.value;
                return;
            }
            var flag;
            for (var i = 0; i < this.scaleAry.length; i++) {
                if (allTime > this.scaleAry[i].this.beginTime) {
                    this._currentTarget = this.scaleAry[i];
                    this.beginTime = this._currentTarget.this.beginTime;
                    this.beginScale = this._currentTarget.value;
                    flag = i;
                }
            }
            flag++;
            this._currentTarget = this.scaleAry[flag];
            this.baseNum = (this._currentTarget.value - this.beginScale) / this._currentTarget.this.time * (allTime - this.beginTime) + this.beginScale;
        };
        return ScaleAnim;
    }(Pan3d.BaseAnim));
    Pan3d.ScaleAnim = ScaleAnim;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ScaleAnim.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ScaleChange = /** @class */ (function (_super) {
        __extends(ScaleChange, _super);
        function ScaleChange() {
            var _this = _super.call(this) || this;
            _this.num = 1;
            return _this;
        }
        ScaleChange.prototype.coreCalculate = function () {
            this.num = 1 + this.speed * this.time + this.baseNum;
            if (this.num < this.minNum) {
                this.num = this.minNum;
            }
            else if (this.num > this.maxNum) {
                this.num = this.maxNum;
            }
        };
        Object.defineProperty(ScaleChange.prototype, "data", {
            /**
             *
             * @param value
             *
             */
            set: function (value) {
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                this.speed = Number(value[2].value) * 0.001;
                this.minNum = Number(value[3].value) * 0.01;
                this.maxNum = Number(value[4].value) * 0.01;
            },
            enumerable: true,
            configurable: true
        });
        ScaleChange.prototype.dataByte = function (va, arr) {
            this.beginTime = arr[0];
            if (arr[1] == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = arr[1];
            }
            this.speed = arr[2] * 0.001;
            this.minNum = arr[3] * 0.01;
            this.maxNum = arr[4] * 0.01;
        };
        ScaleChange.prototype.getAllNum = function (allTime) {
            allTime = Math.min(allTime, this.lastTime);
            allTime = allTime - this.beginTime;
            var num = this.speed * allTime;
            this.baseNum += num;
            if (this.baseNum < this.minNum) {
                this.baseNum = this.minNum;
            }
            else if (num > this.maxNum) {
                this.baseNum = this.maxNum;
            }
        };
        ScaleChange.prototype.reset = function () {
            this._isActiva = false;
            this._isDeath = false;
            this.time = 0;
            this.num = 1;
        };
        ScaleChange.prototype.depthReset = function () {
            this._isActiva = false;
            this._isDeath = false;
            this.time = 0;
            this.baseNum = 0;
            this.num = 1;
        };
        return ScaleChange;
    }(Pan3d.BaseAnim));
    Pan3d.ScaleChange = ScaleChange;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ScaleChange.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ScaleNoise = /** @class */ (function (_super) {
        __extends(ScaleNoise, _super);
        function ScaleNoise() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScaleNoise.prototype.coreCalculate = function () {
            this.num = this.amplitude + this.amplitude * Math.sin(this.speed * this.time);
        };
        Object.defineProperty(ScaleNoise.prototype, "data", {
            set: function (value) {
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                this.amplitude = Number(value[2].value);
                this.speed = Number(value[3].value) * 0.01;
            },
            enumerable: true,
            configurable: true
        });
        ScaleNoise.prototype.dataByte = function (va, arr) {
            this.beginTime = arr[0];
            if (arr[1] == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = arr[1];
            }
            this.amplitude = arr[2];
            this.speed = arr[3] * 0.01;
        };
        ScaleNoise.prototype.getAllNum = function (allTime) {
            this.baseNum = this.amplitude + this.amplitude * Math.sin(this.speed * allTime);
        };
        return ScaleNoise;
    }(Pan3d.BaseAnim));
    Pan3d.ScaleNoise = ScaleNoise;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ScaleNoise.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SelfRotation = /** @class */ (function (_super) {
        __extends(SelfRotation, _super);
        function SelfRotation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SelfRotation.prototype, "data", {
            set: function (value) {
                this.beginTime = Number(value[0].value);
                if (Number(value[1].value) == -1) {
                    this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
                }
                else {
                    this.lastTime = Number(value[1].value);
                }
                this.speed = Number(value[2].value) * 0.1;
                this.aSpeed = Number(value[3].value) * 0.1;
            },
            enumerable: true,
            configurable: true
        });
        SelfRotation.prototype.dataByte = function (va, arr) {
            this.beginTime = arr[0];
            if (arr[1] == -1) {
                this.lastTime = Pan3d.Scene_data.MAX_NUMBER;
            }
            else {
                this.lastTime = arr[1];
            }
            this.speed = arr[2] * 0.1;
            this.aSpeed = arr[3] * 0.1;
        };
        return SelfRotation;
    }(Pan3d.BaseAnim));
    Pan3d.SelfRotation = SelfRotation;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SelfRotation.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var InteractiveEvent = /** @class */ (function (_super) {
        __extends(InteractiveEvent, _super);
        function InteractiveEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InteractiveEvent.Down = "down";
        InteractiveEvent.Up = "Up";
        InteractiveEvent.Move = "Move";
        InteractiveEvent.PinchStart = "PinchStart";
        InteractiveEvent.Pinch = "Pinch";
        return InteractiveEvent;
    }(Pan3d.BaseEvent));
    Pan3d.InteractiveEvent = InteractiveEvent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=InteractiveEvent.js.map
var Pan3d;
(function (Pan3d) {
    var TextAlign = /** @class */ (function () {
        function TextAlign() {
        }
        TextAlign.LEFT = "left";
        TextAlign.CENTER = "center";
        TextAlign.RIGHT = "right";
        TextAlign.TOP = "top";
        TextAlign.MIDDLE = "middle";
        TextAlign.BOTTOM = "bottom";
        return TextAlign;
    }());
    Pan3d.TextAlign = TextAlign;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TextAlign.js.map
var Pan3d;
(function (Pan3d) {
    var UIAtlas = /** @class */ (function () {
        //public texture: WebGLTexture;
        function UIAtlas() {
            this._hasDispose = false;
        }
        Object.defineProperty(UIAtlas.prototype, "texture", {
            get: function () {
                if (this.textureRes) {
                    return this.textureRes.texture;
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        UIAtlas.prototype.setInfo = function (configUrl, imgUrl, $fun, useImgUrl) {
            var _this = this;
            if (useImgUrl === void 0) { useImgUrl = null; }
            if (useImgUrl) {
                this._useImgUrl = useImgUrl;
            }
            else {
                this._useImgUrl = imgUrl;
            }
            Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileuiRoot + configUrl, Pan3d.LoadManager.XML_TYPE, function ($str) {
                var obj = JSON.parse($str);
                _this.configData = obj.uiArr;
                _this.layoutData = obj.panelArr;
                _this.loadImgUrl(imgUrl, $fun);
            });
        };
        UIAtlas.prototype.loadConfig = function (configUrl, $fun) {
            var _this = this;
            Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileuiRoot + configUrl, Pan3d.LoadManager.XML_TYPE, function ($str) {
                var obj = JSON.parse($str);
                _this.configData = obj.uiArr;
                $fun();
            });
        };
        UIAtlas.prototype.loadImgUrl = function (imgUrl, $fun) {
            var _this = this;
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileuiRoot + imgUrl, function ($texture) {
                //this.texture = $texture.texture;
                _this.textureRes = $texture;
                ////console.log(imgUrl);
                if (_this._useImgUrl) {
                    _this.loadUseImg($fun);
                }
                else {
                    $fun();
                }
            }, 1, null, 0);
        };
        UIAtlas.prototype.loadUseImg = function ($fun) {
            this.useImg = makeImage();
            this.useImg.onload = function () {
                $fun();
            };
            this.useImg.src = Pan3d.Scene_data.fileuiRoot + this._useImgUrl;
        };
        UIAtlas.prototype.getRec = function ($name) {
            var rec = new Pan3d.UIRectangle;
            for (var j = 0; j < this.configData.length; j++) {
                if (this.configData[j].name == $name) {
                    rec.x = this.configData[j].x;
                    rec.y = this.configData[j].y;
                    rec.width = this.configData[j].width;
                    rec.height = this.configData[j].height;
                    rec.pixelWitdh = this.configData[j].ow;
                    rec.pixelHeight = this.configData[j].oh;
                    rec.pixelX = this.configData[j].ox;
                    rec.pixelY = this.configData[j].oy;
                    rec.type = this.configData[j].type;
                    rec.cellX = this.configData[j].cellX;
                    rec.cellY = this.configData[j].cellY;
                    break;
                }
            }
            return rec;
        };
        UIAtlas.prototype.getLayoutData = function ($name) {
            if (!this.layoutData) {
                return null;
            }
            for (var key in this.layoutData) {
                var ary = this.layoutData[key].item;
                for (var i = 0; i < ary.length; i++) {
                    if (ary[i].name == $name) {
                        return ary[i];
                    }
                }
            }
        };
        UIAtlas.prototype.getGridRec = function ($name) {
            var rec = new Pan3d.UIGridRentangle;
            for (var j = 0; j < this.configData.length; j++) {
                if (this.configData[j].name == $name) {
                    rec.x = this.configData[j].x;
                    rec.y = this.configData[j].y;
                    rec.width = this.configData[j].width;
                    rec.height = this.configData[j].height;
                    rec.pixelWitdh = this.configData[j].ow;
                    rec.pixelHeight = this.configData[j].oh;
                    rec.pixelX = this.configData[j].ox;
                    rec.pixelY = this.configData[j].oy;
                    rec.ogw = this.configData[j].uow;
                    rec.ogh = this.configData[j].uoh;
                    break;
                }
            }
            return rec;
        };
        Object.defineProperty(UIAtlas.prototype, "hasData", {
            get: function () {
                return this.configData;
            },
            enumerable: true,
            configurable: true
        });
        UIAtlas.prototype.getObject = function ($name, $x, $y, $width, $height, $maxWidth, $maxHeight, $cellx, $celly) {
            if ($cellx === void 0) { $cellx = 0; }
            if ($celly === void 0) { $celly = 0; }
            var obj = new Object;
            obj.x = $x / $maxWidth;
            obj.y = $y / $maxHeight;
            obj.width = $width / $maxWidth;
            obj.height = $height / $maxHeight;
            obj.ow = $width;
            obj.oh = $height;
            obj.ox = $x;
            obj.oy = $y;
            obj.name = $name;
            obj.cellX = $cellx;
            obj.cellY = $celly;
            return obj;
        };
        UIAtlas.prototype.updateCtx = function ($ctx, xpos, ypos) {
            Pan3d.TextureManager.getInstance().updateTexture(this.texture, xpos, ypos, $ctx);
        };
        UIAtlas.prototype.upDataPicToTexture = function ($url, $iconName) {
            var _this = this;
            Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileRoot + $url, Pan3d.LoadManager.IMG_TYPE, function ($img) {
                var rec = _this.getRec($iconName);
                _this.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
                _this.ctx.drawImage($img, 0, 0, rec.pixelWitdh, rec.pixelHeight);
                Pan3d.TextureManager.getInstance().updateTexture(_this.texture, rec.pixelX, rec.pixelY, _this.ctx);
            });
        };
        UIAtlas.prototype.upDataWebPicToTexture = function ($url, $iconName) {
            var _this = this;
            Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.IMG_TYPE, function ($img) {
                var rec = _this.getRec($iconName);
                _this.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
                _this.ctx.drawImage($img, 0, 0, rec.pixelWitdh, rec.pixelHeight);
                Pan3d.TextureManager.getInstance().updateTexture(_this.texture, rec.pixelX, rec.pixelY, _this.ctx);
            });
        };
        UIAtlas.prototype.clearCtxTextureBySkilname = function ($iconName) {
            var rec = this.getRec($iconName);
            this.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            this.ctx.clearRect(0, 0, rec.pixelWitdh, rec.pixelHeight);
            Pan3d.TextureManager.getInstance().updateTexture(this.texture, rec.pixelX, rec.pixelY, this.ctx);
        };
        UIAtlas.prototype.copyPicToTexture = function ($srcSkin, $desSkin) {
            var srcRec = this.getRec($srcSkin);
            var desRec = this.getRec($desSkin);
            this.ctx = Pan3d.UIManager.getInstance().getContext2D(desRec.pixelWitdh, desRec.pixelHeight, false);
            this.ctx.drawImage(this.useImg, srcRec.pixelX, srcRec.pixelY, srcRec.pixelWitdh, srcRec.pixelWitdh, 0, 0, desRec.pixelWitdh, desRec.pixelWitdh);
            Pan3d.TextureManager.getInstance().updateTexture(this.texture, desRec.pixelX, desRec.pixelY, this.ctx);
        };
        /**
         * 渲染文字
         */
        UIAtlas.prototype.updateLable = function ($key, $str, fontsize, fontColor, textBaseline, textAlign, bolder, maxWidth) {
            if (textBaseline === void 0) { textBaseline = Pan3d.TextAlign.MIDDLE; }
            if (textAlign === void 0) { textAlign = Pan3d.TextAlign.CENTER; }
            if (bolder === void 0) { bolder = false; }
            if (maxWidth === void 0) { maxWidth = 0; }
            var rec = this.getRec($key);
            this.ctx = this.getTextCtx(rec, fontsize, fontColor, bolder, textBaseline, textAlign);
            var xpos = this.getTextxpos(textAlign, this.ctx);
            var ypos = this.getTextypos(textBaseline, this.ctx);
            if (maxWidth > 0) {
                this.wrapText(this.ctx, $str, xpos, ypos, maxWidth, fontsize + 3);
            }
            else {
                this.ctx.fillText($str, xpos, ypos);
            }
            Pan3d.TextureManager.getInstance().updateTexture(this.texture, rec.pixelX, rec.pixelY, this.ctx);
        };
        UIAtlas.prototype.updateArtNum = function ($targetName, $srcName, num) {
            var str = String(num);
            var targetRec = this.getRec($targetName);
            var srcRec = this.getRec($srcName);
            this.ctx = Pan3d.UIManager.getInstance().getContext2D(targetRec.pixelWitdh, targetRec.pixelHeight, false);
            var sw = srcRec.pixelWitdh / 10;
            for (var i = 0; i < str.length; i++) {
                var snum = Number(str.charAt(i));
                this.ctx.drawImage(this.useImg, srcRec.pixelX + snum * sw, srcRec.pixelY, sw, srcRec.pixelHeight, i * sw, 0, sw, srcRec.pixelHeight);
            }
            Pan3d.TextureManager.getInstance().updateTexture(this.texture, targetRec.pixelX, targetRec.pixelY, this.ctx);
        };
        //写入单行颜色字体，字号,对齐，基础颜色 并上传显卡
        UIAtlas.prototype.writeSingleLabel = function ($key, $str, fontsize, $align, $baseColor) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            Pan3d.LabelTextFont.writeSingleLabel(this, $key, $str, fontsize, $align, $baseColor);
        };
        //单行字绘制到CXT上
        UIAtlas.prototype.writeSingleLabelToCxt = function ($ctx, $str, fontsize, $tx, $ty) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            $ctx.textBaseline = Pan3d.TextAlign.TOP;
            $ctx.textAlign = Pan3d.TextAlign.LEFT;
            $ctx.font = (true ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            Pan3d.TextRegExp.wrapText($ctx, $str, "#ffffff", $tx, $ty, 9999, 20); //9999为无限大
        };
        /**
         * 未渲染文字。只是绘制到CanvasRenderingContext2D
         * 返回CanvasRenderingContext2D对象
         */
        UIAtlas.prototype.updateLableCtx = function ($ctx, $str, $x, $y, $fontsize, $textAlign, $textBaseline, $textcolor, $textbolder, $maxWidth) {
            if ($textAlign === void 0) { $textAlign = Pan3d.TextAlign.CENTER; }
            if ($textBaseline === void 0) { $textBaseline = Pan3d.TextAlign.MIDDLE; }
            if ($textcolor === void 0) { $textcolor = "#000000"; }
            if ($textbolder === void 0) { $textbolder = "bolder"; }
            if ($maxWidth === void 0) { $maxWidth = 0; }
            $ctx.textAlign = $textAlign;
            $ctx.textBaseline = $textBaseline;
            $ctx.fillStyle = $textcolor;
            $ctx.font = $textbolder + " " + $fontsize + "px " + Pan3d.UIData.font;
            var $xpos = this.getTextxpos($textAlign, $ctx);
            if ($maxWidth > 0) {
                this.wrapText($ctx, $str, $x, $y, $maxWidth, $fontsize + 3);
            }
            else {
                $ctx.fillText($str, $x + $xpos, $y);
            }
        };
        UIAtlas.prototype.getTextCtx = function ($rec, $fontsize, $fontColor, $bolder, $textBaseline, $textAlign) {
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
            $ctx.textBaseline = $textBaseline;
            $ctx.textAlign = $textAlign;
            $ctx.fillStyle = $fontColor;
            $ctx.font = ($bolder ? "bolder " : "") + " " + $fontsize + "px " + Pan3d.UIData.font;
            return $ctx;
        };
        UIAtlas.prototype.getTextxpos = function ($textAlign, $ctx) {
            var $xpos = 0;
            if ($textAlign == Pan3d.TextAlign.LEFT) {
                $xpos = 0;
            }
            else if ($textAlign == Pan3d.TextAlign.RIGHT) {
                $xpos = $ctx.canvas.width;
            }
            else if ($textAlign == Pan3d.TextAlign.CENTER) {
                $xpos = $ctx.canvas.width / 2;
            }
            return $xpos;
        };
        UIAtlas.prototype.getTextypos = function ($textBaseline, $ctx) {
            var $ypos = 0;
            if ($textBaseline == Pan3d.TextAlign.BOTTOM) {
                $ypos = $ctx.canvas.height;
            }
            else if ($textBaseline == Pan3d.TextAlign.TOP) {
                $ypos = 0;
            }
            else if ($textBaseline == Pan3d.TextAlign.MIDDLE) {
                $ypos = $ctx.canvas.height / 2;
            }
            return $ypos;
        };
        UIAtlas.prototype.wrapText = function (context, text, x, y, maxWidth, lineHeight) {
            var words = text;
            var line = "";
            for (var n = 0; n < words.length; n++) {
                if (words[n] == "\n") {
                    context.fillText(line, x, y);
                    line = "";
                    y += lineHeight;
                }
                else {
                    var testLine = line + words[n] + " ";
                    var metrics = context.measureText(testLine);
                    var testWidth = metrics.width;
                    if (testWidth > maxWidth) {
                        context.fillText(line, x, y);
                        line = words[n] + "";
                        y += lineHeight;
                    }
                    else {
                        line = testLine;
                    }
                }
            }
            context.fillText(line, x, y);
        };
        UIAtlas.prototype.dispose = function () {
            if (this._hasDispose) {
                return;
            }
            this.textureRes.clearUseNum();
            this.configData = null;
            this.layoutData = null;
            this.useImg = null;
            this._hasDispose = true;
        };
        return UIAtlas;
    }());
    Pan3d.UIAtlas = UIAtlas;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIAtlas.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIRectangle = /** @class */ (function (_super) {
        __extends(UIRectangle, _super);
        function UIRectangle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pixelWitdh = 1;
            _this.pixelHeight = 1;
            _this.pixelX = 0;
            _this.pixelY = 0;
            _this.cellX = 0;
            _this.cellY = 0;
            _this.type = 0;
            return _this;
        }
        return UIRectangle;
    }(Pan3d.Rectangle));
    Pan3d.UIRectangle = UIRectangle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIRectangle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIGridRentangle = /** @class */ (function (_super) {
        __extends(UIGridRentangle, _super);
        function UIGridRentangle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.ogw = 0;
            _this.ogh = 0;
            return _this;
        }
        return UIGridRentangle;
    }(Pan3d.UIRectangle));
    Pan3d.UIGridRentangle = UIGridRentangle;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIGridRectangle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UICompenent = /** @class */ (function (_super) {
        __extends(UICompenent, _super);
        function UICompenent() {
            var _this = _super.call(this) || this;
            //设定相对坐标
            _this._x = 0;
            _this._y = 0;
            _this._width = 0;
            _this._height = 0;
            _this.z = 0;
            //设定绝对坐标
            _this.absoluteX = 0;
            _this.absoluteY = 0;
            _this.absoluteWidth = 0;
            _this.absoluteHeight = 0;
            _this.enable = true;
            _this._left = 0;
            _this._right = 0;
            _this._center = 0;
            _this._xType = -1;
            _this._top = 0;
            _this._bottom = 0;
            _this._middle = 0;
            _this._yType = -1;
            //实际渲染坐标
            _this.renderX = 0;
            _this.renderY = 0;
            _this.renderWidth = 0;
            _this.renderHeight = 0;
            _this.scale = 1;
            _this.isVirtual = false;
            _this.vcId = 0;
            _this._uvScale = 1; // UV显示比例
            _this._rendering = false;
            _this.isU = false;
            _this.isV = false;
            _this.tr = new Pan3d.Rectangle;
            _this.mouseEnable = true;
            return _this;
        }
        Object.defineProperty(UICompenent.prototype, "rendering", {
            get: function () {
                return this._rendering;
            },
            set: function (val) {
                this._rendering = val;
            },
            enumerable: true,
            configurable: true
        });
        UICompenent.prototype.addStage = function () {
            this.renderData = [0, 0, 0, 0];
            this.renderData2 = [1, 1, 0, 0];
            this.applyAbsolutePoint();
            this.uiRender.addRenderUI(this);
        };
        UICompenent.prototype.removeStage = function () {
            this.uiRender.removeRenderUI(this);
        };
        UICompenent.prototype.pushVaData = function (objData, i, beginIndex) {
            objData.vertices.push(0, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0);
            objData.uvs.push(this.isU ? 1 : 0, this.isV ? 1 : 0, i, this.isU ? 0 : 1, this.isV ? 1 : 0, i, this.isU ? 0 : 1, this.isV ? 0 : 1, i, this.isU ? 1 : 0, this.isV ? 0 : 1, i);
            objData.indexs.push(beginIndex, 1 + beginIndex, 2 + beginIndex, beginIndex, 2 + beginIndex, 3 + beginIndex);
            return beginIndex + 4;
            /*
            objData.vertices.push(
                0, 0, 0,
                1, 0, 0,
                1, -1, 0,
                0, -1, 0);
            objData.uvs.push(
                0, 0, i,
                1, 0, i,
                1, 1, i,
                0, 1, i);
            objData.indexs.push(beginIndex, 1 + beginIndex, 2 + beginIndex, beginIndex, 2 + beginIndex, 3 + beginIndex);
            return beginIndex + 4;
            */
        };
        UICompenent.prototype.setVc = function (program, index) {
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui[" + index + "]", this.renderData);
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui2[" + index + "]", this.renderData2);
        };
        UICompenent.prototype.update = function () {
        };
        UICompenent.prototype.applyRenderSize = function () {
            if (!this.parent) {
                return;
            }
            this.renderX = this.absoluteX / Pan3d.Scene_data.stageWidth;
            this.renderY = this.absoluteY / Pan3d.Scene_data.stageHeight;
            this.renderWidth = this.absoluteWidth / Pan3d.Scene_data.stageWidth;
            this.renderHeight = this.absoluteHeight / Pan3d.Scene_data.stageHeight;
            if (this._uvScale >= 0) {
                //this.renderX + this.renderWidth * this.scale - this.renderWidth * this.scale * this._uvScale;
                this.renderData[0] = this.renderX;
                this.renderData[1] = this.renderY;
                this.renderData[2] = this.renderWidth * this.scale * this._uvScale;
                this.renderData[3] = this.renderHeight * this.scale;
                //this.tr.x +this.tr.width - this.tr.width * this._uvScale
                this.renderData2[0] = this.tr.width * this._uvScale;
                this.renderData2[1] = this.tr.height;
                this.renderData2[2] = this.tr.x;
                this.renderData2[3] = this.tr.y;
            }
            else {
                var $vt = Math.abs(this._uvScale);
                this.renderData[0] = this.renderX + this.renderWidth * (1 - $vt);
                this.renderData[1] = this.renderY;
                this.renderData[2] = this.renderWidth * this.scale * $vt;
                this.renderData[3] = this.renderHeight * this.scale;
                this.renderData2[0] = this.tr.width * $vt;
                this.renderData2[1] = this.tr.height;
                this.renderData2[2] = this.tr.x + (this.tr.width * (1 - $vt));
                this.renderData2[3] = this.tr.y;
            }
            this.uiRender.makeRenderDataVc(this.vcId);
            // 
        };
        Object.defineProperty(UICompenent.prototype, "uvScale", {
            get: function () {
                return this._uvScale;
            },
            set: function (value) {
                this._uvScale = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        UICompenent.prototype.setScale = function (num) {
            this.scale = num;
            this.applyAbsolutePoint();
        };
        UICompenent.prototype.applyAbsolutePoint = function () {
            if (this.parent) {
                var uiscale = Pan3d.UIData.Scale * this.parent.uiScale;
                if (this._xType == -1) {
                    this.absoluteX = this._x * uiscale * this.scale + this.parent.x;
                }
                else if (this._xType == 0) {
                    this.absoluteX = this._left * uiscale;
                }
                else if (this._xType == 1) {
                    this.absoluteX = Pan3d.Scene_data.stageWidth - this._right * uiscale - this.width * uiscale;
                }
                else if (this._xType == 2) {
                    this.absoluteX = this._center * uiscale + Pan3d.Scene_data.stageWidth / 2 - this.width * uiscale / 2;
                }
                if (this._yType == -1) {
                    this.absoluteY = this._y * uiscale * this.scale + this.parent.y;
                }
                else if (this._yType == 0) {
                    this.absoluteY = this._top * uiscale;
                }
                else if (this._yType == 1) {
                    this.absoluteY = Pan3d.Scene_data.stageHeight - this._bottom * uiscale - this.height * uiscale;
                }
                else if (this._yType == 2) {
                    this.absoluteY = this._middle * uiscale + Pan3d.Scene_data.stageHeight / 2 - this.height * uiscale / 2;
                }
                this.absoluteWidth = this.width * uiscale;
                this.absoluteHeight = this.height * uiscale;
                this.applyRenderSize();
            }
        };
        Object.defineProperty(UICompenent.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                if (value != this._x) {
                    this._x = value;
                    this.applyAbsolutePoint();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                if (value != this._y) {
                    this._y = value;
                    this.applyAbsolutePoint();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                if (value != this._width) {
                    this._width = value;
                    this.applyAbsolutePoint();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                if (value != this._height) {
                    this._height = value;
                    this.applyAbsolutePoint();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "left", {
            set: function (value) {
                this._left = value;
                this._xType = 0;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "right", {
            set: function (value) {
                this._right = value;
                this._xType = 1;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "center", {
            set: function (value) {
                this._center = value;
                this._xType = 2;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "top", {
            set: function (value) {
                this._top = value;
                this._yType = 0;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "bottom", {
            set: function (value) {
                this._bottom = value;
                this._yType = 1;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UICompenent.prototype, "middle", {
            set: function (value) {
                this._middle = value;
                this._yType = 2;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        UICompenent.prototype.testPoint = function ($x, $y) {
            if ($x > this.absoluteX && $x < (this.absoluteX + this.absoluteWidth) && $y > this.absoluteY && $y < (this.absoluteY + this.absoluteHeight)) {
                return true;
            }
            else {
                return false;
            }
        };
        UICompenent.prototype.setPos = function ($x, $y) {
            this.x = $x;
            this.y = $y;
        };
        UICompenent.prototype.interactiveEvent = function (e) {
            if (!this.enable) {
                return false;
            }
            var evtType = e.type;
            var eventMap = this._eventsMap;
            if (!eventMap) {
                return false;
            }
            var list = eventMap[e.type];
            if (!list) {
                return false;
            }
            if (!this.testPoint(e.x, e.y)) {
                return false;
            }
            var length = list.length;
            if (length == 0) {
                return false;
            }
            e.target = this;
            //for (var i: number = 0; i < length; i++) {
            //    var eventBin: any = list[i];
            //    eventBin.listener.call(eventBin.thisObject, e);
            //}
            for (var i = length - 1; i >= 0; i--) {
                var eventBin = list[i];
                //console.log("uiname", this.name)
                eventBin.listener.call(eventBin.thisObject, e);
            }
            return true;
        };
        UICompenent.prototype.preShow = function () {
            if (this.preParent) {
                this.preParent.addChild(this);
            }
        };
        UICompenent.prototype.preHide = function () {
            if (this.preParent) {
                this.preParent.removeChild(this);
            }
        };
        return UICompenent;
    }(Pan3d.EventDispatcher));
    Pan3d.UICompenent = UICompenent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UICompenent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIConatiner = /** @class */ (function () {
        function UIConatiner() {
            this._x = 0;
            this._y = 0;
            this._width = 0;
            this._height = 0;
            this._left = 0;
            this._right = 0;
            this._center = 0;
            this._xType = 0;
            this._top = 0;
            this._bottom = 0;
            this._middle = 0;
            this._yType = 0;
            this._list = new Array;
            this.renderList = new Array;
            this._hasStage = false;
            this._hasLoad = false;
            this._isLoading = false;
            this._needShowLoading = true;
            this._interfaceUI = false;
            this._layer = 100;
            this._uiScale = 1;
        }
        Object.defineProperty(UIConatiner.prototype, "uiScale", {
            get: function () {
                return this._uiScale;
            },
            set: function (val) {
                this._uiScale = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (val) {
                this._layer = val;
                for (var i = 0; i < this.renderList.length; i++) {
                    this.renderList[i].sortnum = this._layer;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "interfaceUI", {
            get: function () {
                return this._interfaceUI;
            },
            set: function (val) {
                this._interfaceUI = val;
                if (val) {
                    this.layer = 0;
                }
                else {
                    this.layer = 100;
                }
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.load = function ($complateFun, $needShowLoading) {
            if ($needShowLoading === void 0) { $needShowLoading = true; }
            if (this._isLoading) {
                return;
            }
            this._completeFun = $complateFun;
            this._needShowLoading = $needShowLoading;
            if (this._hasLoad) {
                $complateFun();
            }
            else {
                this._isLoading = true;
                if (this._needShowLoading) {
                    Pan3d.UILoading.getInstance().show();
                }
                this.makeBaseWinUi();
            }
        };
        Object.defineProperty(UIConatiner.prototype, "hasLoad", {
            get: function () {
                return this._hasLoad;
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.makeBaseWinUi = function () {
            this.applyLoad();
        };
        UIConatiner.prototype.applyLoad = function () {
        };
        UIConatiner.prototype.applyLoadComplete = function () {
            this._isLoading = false;
            this._completeFun();
            if (this._needShowLoading) {
                Pan3d.UILoading.getInstance().hide();
            }
            this._hasLoad = true;
        };
        Object.defineProperty(UIConatiner.prototype, "hasStage", {
            get: function () {
                return this._hasStage;
            },
            set: function (val) {
                this._hasStage = val;
                if (val) {
                    this.onAdd();
                }
                else {
                    this.onRemove();
                }
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.setUiListVisibleByItem = function ($arr, $flag) {
            try {
                for (var i = 0; i < $arr.length; i++) {
                    if ($flag) {
                        if (!$arr[i].parent) {
                            this.addChild($arr[i]);
                        }
                    }
                    else {
                        if ($arr[i].parent) {
                            this.removeChild($arr[i]);
                        }
                    }
                }
            }
            catch (err) {
                //console.log("在此处理错误3");
            }
        };
        UIConatiner.prototype.onAdd = function () { };
        UIConatiner.prototype.onRemove = function () { };
        UIConatiner.prototype.addChild = function ($ui) {
            if (!$ui) {
                //console.log("ui cuo ")
                throw new Error("ui cuo");
            }
            if ($ui.parent) {
                return;
            }
            this._list.push($ui);
            $ui.parent = this;
            $ui.addStage();
            return $ui;
        };
        UIConatiner.prototype.addVirtualContainer = function ($con) {
            if (!this.virtualContainerList) {
                this.virtualContainerList = new Array;
            }
            $con.parent = this;
            this.virtualContainerList.push($con);
        };
        UIConatiner.prototype.removeVirtualContainer = function ($con) {
        };
        UIConatiner.prototype.addUIList = function ($ary, $uiRender) {
            var $arr = new Array();
            for (var i = 0; i < $ary.length; i++) {
                var ui = $uiRender.getComponent($ary[i]);
                this.addChild(ui);
                $arr.push(ui);
            }
            return $arr;
        };
        UIConatiner.prototype.getUIList = function ($ary, $uiRender) {
            var $arr = new Array();
            for (var i = 0; i < $ary.length; i++) {
                var ui = $uiRender.getComponent($ary[i]);
                $arr.push(ui);
            }
            return $arr;
        };
        /*
        *添加事件UI
        */
        UIConatiner.prototype.addEvntBut = function ($name, $uiRender) {
            var $temp = this.addChild($uiRender.getComponent($name));
            $temp.addEventListener(Pan3d.InteractiveEvent.Down, this.butClik, this);
            return $temp;
        };
        UIConatiner.prototype.addEvntButUp = function ($name, $uiRender) {
            var $temp = this.addChild($uiRender.getComponent($name));
            $temp.addEventListener(Pan3d.InteractiveEvent.Up, this.butClik, this);
            return $temp;
        };
        /*
        *移除事件UI
        */
        UIConatiner.prototype.removeEvntBut = function ($ui) {
            $ui.removeEventListener(Pan3d.InteractiveEvent.Down, this.butClik, this);
            this.removeChild($ui);
        };
        UIConatiner.prototype.butClik = function (evt) {
        };
        /*
        *设置显示层的显示列表
        */
        UIConatiner.prototype.renderSetVisibel = function ($list, value) {
            for (var i = 0; i < $list.length; i++) {
                if (value) {
                    if (!$list[i].rendering) {
                        this.addRender($list[i]);
                    }
                }
                else {
                    if ($list[i].rendering) {
                        this.removeRender($list[i]);
                    }
                }
            }
        };
        UIConatiner.prototype.removeChild = function ($ui) {
            var index = this._list.indexOf($ui);
            if (index != -1) {
                this._list.splice(index, 1);
            }
            else {
                return;
            }
            $ui.parent = null;
            $ui.removeStage();
        };
        UIConatiner.prototype.removeAll = function () {
            while (this._list.length) {
                this.removeChild(this._list[0]);
            }
            while (this._maskList.length) {
                this.removeMaks(this._maskList[0]);
            }
        };
        UIConatiner.prototype.addMask = function ($mask) {
            if (!this._maskList) {
                this._maskList = new Array;
            }
            $mask.parent = this;
            $mask.applyAbsolutePoint();
            this._maskList.push($mask);
        };
        UIConatiner.prototype.removeMaks = function ($mask) {
            if (this._maskList) {
                var index = this._maskList.indexOf($mask);
                if (index != -1) {
                    this._maskList.splice(index, 1);
                }
            }
        };
        UIConatiner.prototype.addRender = function ($uiRender) {
            var index = this.renderList.indexOf($uiRender);
            if (index != -1) {
                return;
            }
            $uiRender.container = this;
            $uiRender.sortnum = this._layer;
            this.renderList.push($uiRender);
            if (this.hasStage) {
                this.perent.addUI($uiRender);
            }
        };
        UIConatiner.prototype.addRenderAt = function ($uiRender, $idx) {
            var index = this.renderList.indexOf($uiRender);
            if (index != -1) {
                return;
            }
            $uiRender.container = this;
            $uiRender.sortnum = this._layer;
            this.renderList.splice($idx, 0, $uiRender);
            if (this.hasStage) {
                Pan3d.UIManager.getInstance().addUI($uiRender);
            }
        };
        UIConatiner.prototype.removeRender = function ($uiRender) {
            var index = this.renderList.indexOf($uiRender);
            if (index != -1) {
                this.renderList.splice(index, 1);
            }
            else {
                return;
            }
            if (this.hasStage) {
                Pan3d.UIManager.getInstance().removeUI($uiRender);
            }
        };
        Object.defineProperty(UIConatiner.prototype, "panelScale", {
            get: function () {
                return this.uiScale * Pan3d.UIData.Scale;
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.resize = function () {
            if (this._xType == 0) {
                this._x = this._left * this.panelScale;
            }
            else if (this._xType == 1) {
                this._x = Pan3d.Scene_data.stageWidth - this._right * this.panelScale - this.width * this.panelScale;
            }
            else if (this._xType == 2) {
                this._x = this._center * this.panelScale + Pan3d.Scene_data.stageWidth / 2 - this.width * this.panelScale / 2;
            }
            if (this._yType == 0) {
                this._y = this._top * this.panelScale;
            }
            else if (this._yType == 1) {
                this._y = Pan3d.Scene_data.stageHeight - this._bottom * this.panelScale - this.height * this.panelScale;
            }
            else if (this._yType == 2) {
                this._y = this._middle * this.panelScale + Pan3d.Scene_data.stageHeight / 2 - this.height * this.panelScale / 2;
            }
            this.applyChild();
            this.resizeVirtualList();
        };
        UIConatiner.prototype.resizeVirtualList = function () {
            if (!this.virtualContainerList) {
                return;
            }
            for (var i = 0; i < this.virtualContainerList.length; i++) {
                this.virtualContainerList[i].resize();
            }
        };
        Object.defineProperty(UIConatiner.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (value) {
                this._left = value;
                this._xType = 0;
                this._x = this._left * this.panelScale;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (value) {
                this._right = value;
                this._xType = 1;
                this._x = Pan3d.Scene_data.stageWidth - this._right * this.panelScale - this.width * this.panelScale;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "center", {
            set: function (value) {
                this._center = value;
                this._xType = 2;
                this._x = this._center * this.panelScale + Pan3d.Scene_data.stageWidth / 2 - this.width * this.panelScale / 2;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (value) {
                this._top = value;
                this._yType = 0;
                this._y = this._top * this.panelScale;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (value) {
                this._bottom = value;
                this._yType = 1;
                this._y = Pan3d.Scene_data.stageHeight - this._bottom * this.panelScale - this.height * this.panelScale;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "middle", {
            set: function (value) {
                this._middle = value;
                this._yType = 2;
                this._y = this._middle * this.panelScale + Pan3d.Scene_data.stageHeight / 2 - this.height * this.panelScale / 2;
                this.applyChild();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "width", {
            get: function () {
                if (this._width != 0) {
                    return this._width;
                }
                var num = 0;
                for (var i = 0; i < this._list.length; i++) {
                    num = Math.max(this._list[i].width);
                }
                return num;
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "height", {
            get: function () {
                if (this._height != 0) {
                    return this._height;
                }
                var num = 0;
                for (var i = 0; i < this._list.length; i++) {
                    num = Math.max(this._list[i].height);
                }
                return num;
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.applyChild = function () {
            for (var i = 0; i < this._list.length; i++) {
                this._list[i].applyAbsolutePoint();
            }
            if (this._maskList) {
                for (var i = 0; i < this._maskList.length; i++) {
                    this._maskList[i].applyAbsolutePoint();
                }
            }
        };
        Object.defineProperty(UIConatiner.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIConatiner.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        UIConatiner.prototype.dispose = function () {
            //console.log("忘了重写disposepanel");
        };
        UIConatiner.prototype.setSizeForPanelUiCopy = function ($ui, $uiName, $uiRender) {
            var temp = $uiRender.getComponent($uiName);
            $ui.x = temp.x;
            $ui.y = temp.y;
            $ui.width = temp.width;
            $ui.height = temp.height;
        };
        UIConatiner.prototype.makeBaseUiatlas = function (w, h) {
            var $uiAtlas = new Pan3d.UIAtlas();
            $uiAtlas.configData = [];
            var kkwA = Math.pow(2, Math.ceil(Math.log(w) / Math.log(2)));
            var kkhB = Math.pow(2, Math.ceil(Math.log(h) / Math.log(2)));
            $uiAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(kkwA, kkhB, false);
            $uiAtlas.textureRes = Pan3d.TextureManager.getInstance().getCanvasTexture($uiAtlas.ctx);
            $uiAtlas.configData.push($uiAtlas.getObject("temp_ui", 0, 0, w, h, kkwA, kkhB));
            return $uiAtlas;
        };
        return UIConatiner;
    }());
    Pan3d.UIConatiner = UIConatiner;
    var Dis2DUIContianerBase = /** @class */ (function (_super) {
        __extends(Dis2DUIContianerBase, _super);
        function Dis2DUIContianerBase() {
            return _super.call(this) || this;
        }
        Dis2DUIContianerBase.prototype.update = function (t) {
        };
        Dis2DUIContianerBase.prototype.clearOneTemp = function () {
        };
        return Dis2DUIContianerBase;
    }(UIConatiner));
    Pan3d.Dis2DUIContianerBase = Dis2DUIContianerBase;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIContainer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIVirtualContainer = /** @class */ (function (_super) {
        __extends(UIVirtualContainer, _super);
        function UIVirtualContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.visible = true;
            return _this;
        }
        return UIVirtualContainer;
    }(Pan3d.UIConatiner));
    Pan3d.UIVirtualContainer = UIVirtualContainer;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIVirtualContainer.js.map
var Pan3d;
(function (Pan3d) {
    var MainUiLoad = /** @class */ (function () {
        function MainUiLoad() {
        }
        MainUiLoad.init = function ($res, $bfun, $loadFun) {
            if ($loadFun === void 0) { $loadFun = null; }
            this._itemLoad = $res; //初始化资源内容
            this._bFun = $bfun;
            this.loadFun = $loadFun;
            this.loadBaseConfigCom();
            return $res.length;
        };
        MainUiLoad.loadBaseConfigCom = function () {
            for (var i = 0; i < this._itemLoad.length; i++) {
                this.loadUIdata(this._itemLoad[i].xmlurl, this._itemLoad[i].picurl, this._itemLoad[i].name, Boolean(this._itemLoad[i].isTexture));
            }
        };
        MainUiLoad.loadOkNum = function ($num) {
            if (this.loadFun) {
                this.loadFun($num);
            }
        };
        MainUiLoad.loadUIdata = function ($xmlUrl, $imgUrl, $key, $isTexture) {
            var _this = this;
            if ($key === void 0) { $key = "default"; }
            if ($isTexture === void 0) { $isTexture = false; }
            if (!$isTexture) {
                var kim = makeImage();
                this._imgDic[$key] = kim;
                kim.onload = function (evt) {
                    _this.loadOkd();
                };
            }
            Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileRoot + $xmlUrl, Pan3d.LoadManager.XML_TYPE, function ($data) {
                var $arr = Array(JSON.parse($data))[0];
                _this._dic[$key] = $arr;
                if ($isTexture) {
                    Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + $imgUrl, function ($texture) {
                        _this._imgDic[$key] = $texture;
                        _this.loadOkd();
                    }, 1, null, 0);
                }
                else {
                    kim.src = Pan3d.Scene_data.fileRoot + $imgUrl;
                }
            });
        };
        MainUiLoad.loadOkd = function () {
            this._skipnum++;
            this.loadOkNum(this._skipnum);
            if (this._skipnum >= this._itemLoad.length) {
                this._bFun();
            }
        };
        MainUiLoad._skipnum = 0;
        MainUiLoad._dic = new Pan3d.Dictionary([]);
        MainUiLoad._imgDic = new Pan3d.Dictionary([]);
        return MainUiLoad;
    }());
    Pan3d.MainUiLoad = MainUiLoad;
    var UIData = /** @class */ (function () {
        function UIData() {
        }
        UIData.setDesignWH = function ($width, $height) {
            this.designWidth = $width;
            this.designHeight = $height;
            //  this.Scale = Math.min(Scene_data.stageWidth / $width, Scene_data.stageHeight / $height);
            this.resize();
        };
        UIData.resize = function () {
            this.Scale = Math.min(Pan3d.Scene_data.stageWidth / this.designWidth, Pan3d.Scene_data.stageHeight / this.designHeight);
        };
        UIData.init = function ($res, $bfun, $loadFun) {
            if ($loadFun === void 0) { $loadFun = null; }
            this._itemLoad = $res; //初始化资源内容
            this._bFun = $bfun;
            this.loadFun = $loadFun;
            this.loadBaseConfigCom();
            return $res.length;
        };
        Object.defineProperty(UIData, "mainUIAtlas", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        UIData.loadBaseConfigCom = function () {
            for (var i = 0; i < this._itemLoad.length; i++) {
                this.loadUIdata(this._itemLoad[i].xmlurl, this._itemLoad[i].picurl, this._itemLoad[i].name, Boolean(this._itemLoad[i].isTexture));
            }
        };
        UIData.loadOkNum = function ($num) {
            if (this.loadFun) {
                this.loadFun($num);
            }
        };
        UIData.loadUIdata = function ($xmlUrl, $imgUrl, $key, $isTexture) {
            var _this = this;
            if ($key === void 0) { $key = "default"; }
            if ($isTexture === void 0) { $isTexture = false; }
            if (!$isTexture) {
                var kim = makeImage();
                this._imgDic[$key] = kim;
                kim.onload = function (evt) {
                    _this.loadOkd();
                };
            }
            Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileRoot + $xmlUrl, Pan3d.LoadManager.XML_TYPE, function ($data) {
                var $arr = Array(JSON.parse($data))[0];
                _this._dic[$key] = $arr;
                if ($isTexture) {
                    Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + $imgUrl, function ($texture) {
                        _this._imgDic[$key] = $texture;
                        _this.loadOkd();
                    }, 1, null, 0);
                }
                else {
                    kim.src = Pan3d.Scene_data.fileRoot + $imgUrl;
                }
            });
        };
        UIData.loadOkd = function () {
            this._skipnum++;
            this.loadOkNum(this._skipnum);
            if (this._skipnum >= this._itemLoad.length) {
                UIData.textImg = this._imgDic[UIData.textlist]; //将指定图片给
                this._bFun();
            }
        };
        UIData.getImgByKey = function ($key) {
            if (this._imgDic.containsKey($key)) {
                return this._imgDic[$key];
            }
            //console.log("uiData getImgByKey=>" + $key)
            return null;
        };
        UIData.getUiByName = function ($key, $name) {
            if (this._dic.containsKey($key)) {
                var uiArr = this._dic[$key].uiArr;
                for (var i = 0; i < uiArr.length; i++) {
                    if (uiArr[i].name == $name) {
                        return uiArr[i];
                    }
                }
            }
            //console.log("uiData getUiByName =>" + $name)
            return null;
        };
        UIData.getUiArrByKey = function ($key) {
            if (this._dic.containsKey($key)) {
                return this._dic[$key].uiArr;
            }
            return null;
        };
        //设计宽高
        UIData.designWidth = 960;
        UIData.designHeight = 540;
        UIData.font = "Helvetica"; //Georgia//Helvetica
        UIData._skipnum = 0;
        UIData.textlist = "textlist";
        UIData.publicUi = "publicUi";
        UIData.faceItem = ["/大笑", "/脸2", "/脸3", "/脸4", "/脸5", "/脸6", "/脸7", "/脸8", "/脸9", "/脸a", "/脸b", "/脸c", "/脸d", "/脸e", "/脸f", "/脸g", "/脸h", "/脸i"];
        UIData._dic = new Pan3d.Dictionary([]);
        UIData._imgDic = new Pan3d.Dictionary([]);
        return UIData;
    }());
    Pan3d.UIData = UIData;
    var UiDraw = /** @class */ (function () {
        function UiDraw() {
        }
        UiDraw.drawUseImg = function ($ui, $useImgAtlas, $skinName) {
            var $rec = $ui.uiRender.uiAtlas.getRec($ui.skinName);
            var ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
            var useRec = $useImgAtlas.getRec($skinName);
            ctx.drawImage($useImgAtlas.useImg, useRec.pixelX, useRec.pixelY, useRec.pixelWitdh, useRec.pixelHeight, 0, 0, $rec.pixelWitdh, $rec.pixelHeight);
            $ui.uiRender.uiAtlas.updateCtx(ctx, $rec.pixelX, $rec.pixelY);
        };
        UiDraw.clearUI = function ($ui) {
            var $uiRect = $ui.uiRender.uiAtlas.getRec($ui.skinName);
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            $ui.uiRender.uiAtlas.updateCtx($ctx, $uiRect.pixelX, $uiRect.pixelY);
        };
        UiDraw.drawTxtLab = function ($ui, $str, $fontsize, $align, $tx, $ty) {
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 3; }
            var $rec = $ui.uiRender.uiAtlas.getRec($ui.skinName);
            var ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
            UiDraw.cxtDrawImg(ctx, Pan3d.PuiData.TXTBG, new Pan3d.Rectangle(0, 0, $rec.pixelWitdh, $rec.pixelHeight), UIData.publicUi);
            Pan3d.LabelTextFont.writeSingleLabelToCtx(ctx, $str, $fontsize, $tx, $ty, $align);
            $ui.uiRender.uiAtlas.updateCtx(ctx, $rec.pixelX, $rec.pixelY);
        };
        /**属性 - value */
        UiDraw.drawAttVal = function ($ui, $att, $val, $align, $needadd) {
            if ($align === void 0) { $align = Pan3d.TextAlign.LEFT; }
            if ($needadd === void 0) { $needadd = false; }
            var keyStr = "";
            if (typeof ($att) == "undefined") {
                UiDraw.clearUI($ui);
                return;
            }
            keyStr = Pan3d.ColorType.Orange7a2f21 + getKeyProById($att) + ":  " + Pan3d.ColorType.Orange9a683f + Snum(Math.floor($val / 100));
            if ($needadd) {
                keyStr = Pan3d.ColorType.Orange7a2f21 + getKeyProById($att) + ":  " + Pan3d.ColorType.Orange9a683f + "+" + Snum(Math.floor($val / 100));
            }
            Pan3d.LabelTextFont.writeSingleLabel($ui.uiRender.uiAtlas, $ui.skinName, keyStr, 14, $align);
        };
        /**绘制未获得属性 - value */
        UiDraw.drawAttValAdd = function ($ui, $att, $val) {
            var keyStr = "";
            if (typeof ($att) == "undefined") {
                UiDraw.clearUI($ui);
                return;
            }
            keyStr = Pan3d.ColorType.Orange7a2f21 + getKeyProById($att) + ":    " + Pan3d.ColorType.Green2ca937 + "+" + Snum(Math.floor($val / 100));
            Pan3d.LabelTextFont.writeSingleLabel($ui.uiRender.uiAtlas, $ui.skinName, keyStr, 14, Pan3d.TextAlign.LEFT);
        };
        /**绘制增加属性 向上箭头 */
        UiDraw.drawAddValTop = function ($ui, $val) {
            var addStr = "";
            if ($val > 0) {
                addStr = "+" + Snum(Math.floor($val / 100));
            }
            else {
                addStr = "+0";
            }
            var $rec = $ui.uiRender.uiAtlas.getRec($ui.skinName);
            var ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
            if (addStr != "") {
                UiDraw.cxtDrawImg(ctx, Pan3d.PuiData.ARROW_TOP, new Pan3d.Rectangle(0, 3, 12, 16), UIData.publicUi);
            }
            Pan3d.LabelTextFont.writeSingleLabelToCtx(ctx, addStr, 14, 15, 0, Pan3d.TextAlign.LEFT, Pan3d.ColorType.Green2ca937);
            $ui.uiRender.uiAtlas.updateCtx(ctx, $rec.pixelX, $rec.pixelY);
        };
        /**绘制增加属性 向右箭头 $align只接受左右对齐*/
        UiDraw.drawAddValRight = function ($ui, $val, $needadd, $align) {
            if ($needadd === void 0) { $needadd = false; }
            if ($align === void 0) { $align = Pan3d.TextAlign.RIGHT; }
            // var addStr: string = "";
            if ($val >= 0) {
                // addStr = Snum($val);
                var $rec = $ui.uiRender.uiAtlas.getRec($ui.skinName);
                var ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
                UiDraw.cxtDrawImg(ctx, Pan3d.PuiData.ARROW_RIGHT, new Pan3d.Rectangle(0, 3, 16, 12), UIData.publicUi);
                var addStr = Snum(Math.floor($val / 100));
                if ($needadd) {
                    addStr = "+" + addStr;
                }
                var tx = 0;
                if ($align == Pan3d.TextAlign.LEFT) {
                    tx = 22;
                }
                //console.log("-----addStr----",addStr,tx);
                Pan3d.LabelTextFont.writeSingleLabelToCtx(ctx, addStr, 14, tx, 0, $align, Pan3d.ColorType.Green2ca937);
                $ui.uiRender.uiAtlas.updateCtx(ctx, $rec.pixelX, $rec.pixelY);
            }
            else {
                UiDraw.clearUI($ui);
            }
        };
        /**
         * 绘制需 自身有某id的道具多少个和需要多少数量的道具  a/b
         * @param
         * @param
         * @param
         */
        UiDraw.drawResHasNumAndAllNum = function ($ui, $CostAry, $txt) {
            if ($txt === void 0) { $txt = ""; }
            var costnum;
            var flag;
            return false;
        };
        /**
         * 在ctx上指定位置绘制一个小图标
         * @param
         * @param
         */
        UiDraw.drawCost = function ($cxt, $tx, $ty, $type) {
            UiDraw.cxtDrawImg($cxt, UIuitl.getInstance().costtype($type), new Pan3d.Rectangle($tx, $ty, 35, 35), UIData.publicUi);
        };
        UiDraw.drawCostUI = function ($ui, $tx, $ty, $type) {
            var $goldtxtrec = $ui.uiRender.uiAtlas.getRec($ui.skinName);
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($goldtxtrec.pixelWitdh, $goldtxtrec.pixelHeight, false);
            UiDraw.cxtDrawImg($ctx, UIuitl.getInstance().costtype($type), new Pan3d.Rectangle($tx, $ty, 35, 35), UIData.publicUi);
            $ui.uiRender.uiAtlas.updateCtx($ctx, $goldtxtrec.pixelX, $goldtxtrec.pixelY);
        };
        //将目标的图绘制到CXT对象中，
        UiDraw.cxtDrawImg = function ($cxt, $name, $rect, $key) {
            var obj = UIData.getUiByName($key, $name);
            if (obj) {
                if ($rect.width == 0 || $rect.height == 0) {
                    $rect.width = obj.ow;
                    $rect.height = obj.oh;
                }
                if (obj.type == 0) {
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy, obj.ow, obj.oh, $rect.x, $rect.y, $rect.width, $rect.height);
                }
                else if (obj.type == 1) {
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy, obj.uow, obj.uoh, $rect.x, $rect.y, obj.uow, obj.uoh);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy, obj.ow - obj.uow * 2, obj.uoh, $rect.x + obj.uow, $rect.y, $rect.width - obj.uow * 2, obj.uoh);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy, obj.uow, obj.uoh, $rect.x + $rect.width - obj.uow, $rect.y, obj.uow, obj.uoh);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy + obj.uoh, obj.uow, obj.oh - obj.uoh * 2, $rect.x, $rect.y + obj.uoh, obj.uow, $rect.height - obj.uoh * 2);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy + obj.uoh, obj.ow - obj.uow * 2, obj.oh - obj.uoh * 2, $rect.x + obj.uow, $rect.y + obj.uoh, $rect.width - obj.uow * 2, $rect.height - obj.uoh * 2);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy + obj.uoh, obj.uow, obj.uoh, $rect.x + $rect.width - obj.uow, $rect.y + obj.uoh, obj.uow, $rect.height - obj.uoh * 2);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy + obj.oh - obj.uoh, obj.uow, obj.uoh, $rect.x, $rect.y + $rect.height - obj.uoh, obj.uow, obj.uoh);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy + obj.oh - obj.uoh, obj.ow - obj.uow * 2, obj.uoh, $rect.x + obj.uow, $rect.y + $rect.height - obj.uoh, $rect.width - obj.uow * 2, obj.uoh);
                    $cxt.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy + obj.oh - obj.uoh, obj.uow, obj.uoh, $rect.x + $rect.width - obj.uow, $rect.y + $rect.height - obj.uoh, obj.uow, obj.uoh);
                }
                else {
                    alert("UiDraw没有绘制成功  " + obj.type);
                }
            }
        };
        //将目标的图绘制到$uiAtlas纹理对象中，
        UiDraw.uiAtlasDrawImg = function ($uiAtlas, $skinName, $key, $shareName) {
            var $uiRectangle = $uiAtlas.getRec($skinName);
            $uiAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D($uiRectangle.pixelWitdh, $uiRectangle.pixelHeight, false);
            var obj = UIData.getUiByName($key, $shareName);
            ////console.log("obj", obj)
            if (obj) {
                if (obj.type == 0) {
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy, obj.ow, obj.oh, 0, 0, $uiRectangle.pixelWitdh, $uiRectangle.pixelHeight);
                }
                else if (obj.type == 1) {
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy, obj.uow, obj.uoh, 0, 0, obj.uow, obj.uoh);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy, obj.ow - obj.uow * 2, obj.uoh, obj.uow, 0, $uiRectangle.pixelWitdh - obj.uow * 2, obj.uoh);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy, obj.uow, obj.uoh, $uiRectangle.pixelWitdh - obj.uow, 0, obj.uow, obj.uoh);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy + obj.uoh, obj.uow, obj.oh - obj.uoh * 2, 0, obj.uoh, obj.uow, $uiRectangle.pixelHeight - obj.uoh * 2);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy + obj.uoh, obj.ow - obj.uow * 2, obj.oh - obj.uoh * 2, obj.uow, obj.uoh, $uiRectangle.pixelWitdh - obj.uow * 2, $uiRectangle.pixelHeight - obj.uoh * 2);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy + obj.uoh, obj.uow, obj.uoh, $uiRectangle.pixelWitdh - obj.uow, obj.uoh, obj.uow, $uiRectangle.pixelHeight - obj.uoh * 2);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox, obj.oy + obj.oh - obj.uoh, obj.uow, obj.uoh, 0, $uiRectangle.pixelHeight - obj.uoh, obj.uow, obj.uoh);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.uow, obj.oy + obj.oh - obj.uoh, obj.ow - obj.uow * 2, obj.uoh, obj.uow, $uiRectangle.pixelHeight - obj.uoh, $uiRectangle.pixelWitdh - obj.uow * 2, obj.uoh);
                    $uiAtlas.ctx.drawImage(UIData.getImgByKey($key), obj.ox + obj.ow - obj.uow, obj.oy + obj.oh - obj.uoh, obj.uow, obj.uoh, $uiRectangle.pixelWitdh - obj.uow, $uiRectangle.pixelHeight - obj.uoh, obj.uow, obj.uoh);
                }
                else {
                    //console.log("11");
                }
                Pan3d.TextureManager.getInstance().updateTexture($uiAtlas.texture, $uiRectangle.pixelX, $uiRectangle.pixelY, $uiAtlas.ctx);
            }
            else {
                alert("uiAtlasDrawImg错误");
            }
        };
        /**
         * 将共享资源图绘制到$uiAtlas纹理对象中
         * $touiAtlas：绘制到的uiAtlas对象
         * $fromuiAtlas: 资源来源的uiAtlas对象
         * $skinName: 绘制对象名
         * $shareName：资源名
         * $tx：偏移量x
         * $ty：偏移量y
         * $fillflag：是否填充整个对象，若填充，则考虑偏移量，否则反之
         */
        UiDraw.SharedDrawImg = function ($touiAtlas, $fromuiAtlas, $skinName, $shareName, $tx, $ty, $fillflag) {
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($fillflag === void 0) { $fillflag = true; }
            var $uiRectangle = $touiAtlas.getRec($skinName);
            $touiAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D($uiRectangle.pixelWitdh, $uiRectangle.pixelHeight, false);
            var imgUseRect = $fromuiAtlas.getRec($shareName);
            var posx = $fillflag ? 0 : $tx;
            var posy = $fillflag ? 0 : $ty;
            var pwitdh = $fillflag ? $uiRectangle.pixelWitdh : imgUseRect.pixelWitdh;
            var phight = $fillflag ? $uiRectangle.pixelHeight : imgUseRect.pixelHeight;
            $touiAtlas.ctx.drawImage($fromuiAtlas.useImg, imgUseRect.pixelX, imgUseRect.pixelY, imgUseRect.pixelWitdh, imgUseRect.pixelHeight, posx, posy, pwitdh, phight);
            Pan3d.TextureManager.getInstance().updateTexture($touiAtlas.texture, $uiRectangle.pixelX, $uiRectangle.pixelY, $touiAtlas.ctx);
        };
        UiDraw.drawToUiAtlasToCtx = function ($ctx, $fromuiAtlas, $shareName, $posRect) {
            var imgUseRect = $fromuiAtlas.getRec($shareName);
            if (!$posRect) {
                $posRect = new Pan3d.Rectangle(0, 0, 0, 0);
            }
            if ($posRect.width > 1 && $posRect.height > 1) {
                $ctx.drawImage($fromuiAtlas.useImg, imgUseRect.pixelX, imgUseRect.pixelY, imgUseRect.pixelWitdh, imgUseRect.pixelHeight, $posRect.x, $posRect.y, $posRect.width, $posRect.height);
            }
            else {
                $ctx.drawImage($fromuiAtlas.useImg, imgUseRect.pixelX, imgUseRect.pixelY, imgUseRect.pixelWitdh, imgUseRect.pixelHeight, $posRect.x, $posRect.y, imgUseRect.pixelWitdh, imgUseRect.pixelHeight);
            }
        };
        UiDraw.RepeatLoadImg = function ($url1, $url2, $backFuc) {
            if ($backFuc === void 0) { $backFuc = null; }
            var imgA = makeImage();
            imgA.onload = function () {
                Pan3d.LoadManager.getInstance().load($url2, Pan3d.LoadManager.IMG_TYPE, function ($imgB) {
                    if ($backFuc) {
                        $backFuc(imgA, $imgB);
                    }
                });
            };
            imgA.src = $url1;
        };
        return UiDraw;
    }());
    Pan3d.UiDraw = UiDraw;
    var UIuitl = /** @class */ (function () {
        function UIuitl() {
        }
        UIuitl.getInstance = function () {
            if (!this._instance) {
                this._instance = new UIuitl();
            }
            return this._instance;
        };
        /**
         * 绘制背景图+资源icon+资源数目
         */
        UIuitl.prototype.drawCostUI = function ($uiAtlas, $skinName, $costary, $fontcolor, $bgwidth, $bgheight) {
            if ($fontcolor === void 0) { $fontcolor = "#000000"; }
            if ($bgwidth === void 0) { $bgwidth = 0; }
            if ($bgheight === void 0) { $bgheight = 0; }
            if ($fontcolor.indexOf("[") != -1) { //[00ff00]
                $fontcolor = "#" + $fontcolor.substr(1, 6);
            }
            var $rec = $uiAtlas.getRec($skinName);
            var ctx = Pan3d.UIManager.getInstance().getContext2D($rec.pixelWitdh, $rec.pixelHeight, false);
            if ($bgwidth == 0) {
                $bgwidth = $rec.pixelWitdh;
                $bgheight = $rec.pixelHeight;
            }
            UiDraw.cxtDrawImg(ctx, Pan3d.PuiData.TXTBG, new Pan3d.Rectangle($rec.pixelWitdh - $bgwidth, $rec.pixelHeight - $bgheight - 3, $bgwidth, $bgheight + 3), UIData.publicUi);
            var posx;
            var posy;
            if (Number($costary[0]) > -1) {
                UiDraw.cxtDrawImg(ctx, this.costtype(Number($costary[0])), new Pan3d.Rectangle(0, 0, 35, 35), UIData.publicUi);
                posx = ($bgwidth - 35) / 2 + 35;
                if ($bgheight >= 35) {
                    posy = 2;
                }
                else {
                    posy = 35 - $bgheight;
                }
            }
            else {
                posx = $bgwidth / 2 + ($rec.pixelWitdh - $bgwidth);
                posy = $rec.pixelHeight - $bgheight;
            }
            Pan3d.LabelTextFont.writeSingleLabelToCtxSetAnchor(ctx, String($costary[1]), 16, posx, posy, Pan3d.TextAlign.CENTER, $fontcolor);
            Pan3d.ArtFont.getInstance();
            $uiAtlas.updateCtx(ctx, $rec.pixelX, $rec.pixelY);
        };
        UIuitl.prototype.costtype = function ($costid) {
            switch ($costid) {
                case 1:
                    //元宝
                    return Pan3d.PuiData.A_YUANBAO;
                case 2:
                    //绑定元宝
                    return Pan3d.PuiData.A_BANGYUAN;
                case 3:
                    //身上的银子
                    return Pan3d.PuiData.A_YINBI;
                case 101:
                    //真气
                    return Pan3d.PuiData.A_ZHENQI;
                case 102:
                    //兽灵
                    return Pan3d.PuiData.A_SHOULING;
                case 103:
                    //宝石精华
                    return Pan3d.PuiData.A_JINGHUA;
                case 6:
                    //帮贡
                    return Pan3d.PuiData.A_BANGGONG;
                case 7:
                    //荣誉
                    return Pan3d.PuiData.A_HONOR;
                case 8:
                    //斗魂
                    return Pan3d.PuiData.A_DOUHUN;
                case 9:
                    //历练值
                    return Pan3d.PuiData.A_DOUHUN;
                case 10:
                    //怪物令牌
                    return Pan3d.PuiData.A_CARD_G;
                case 11:
                    //采集令牌
                    return Pan3d.PuiData.A_CARD_C;
                case 12:
                    //押镖令牌
                    return Pan3d.PuiData.A_CARD_B;
                case 104:
                    //经验
                    return Pan3d.PuiData.A_EXP;
                default:
                    break;
            }
        };
        return UIuitl;
    }());
    Pan3d.UIuitl = UIuitl;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIData.js.map
var Pan3d;
(function (Pan3d) {
    var UIRenderComponent = /** @class */ (function () {
        function UIRenderComponent() {
            this._rendering = false;
            this.scale = 1;
            this.sortnum = 0; //排序编号
            this.blenderMode = 0;
            this.renderData = new Float32Array(0);
            this.renderData2 = new Float32Array(0);
            this.num = 0;
            this.visible = true;
            this.initData();
        }
        Object.defineProperty(UIRenderComponent.prototype, "uiListLen", {
            get: function () {
                return this._uiList.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIRenderComponent.prototype, "rendering", {
            get: function () {
                return this._rendering;
            },
            set: function (val) {
                this._rendering = val;
                if (this._uiList) {
                    for (var i = 0; i < this._uiList.length; i++) {
                        this._uiList[i].rendering = val;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIRenderComponent.prototype, "texture", {
            get: function () {
                if (this.textureRes) {
                    return this.textureRes.texture;
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        UIRenderComponent.prototype.initData = function () {
            this._uiList = new Array;
            //   this.container = new UIConatiner();
            this.objData = new Pan3d.ObjData();
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.UIShader.UI_SHADER);
            this.program = this.shader.program;
            this.uiProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui2");
        };
        UIRenderComponent.prototype.resize = function () {
        };
        UIRenderComponent.prototype.setImgUrl = function ($url) {
            var _this = this;
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + $url, function ($texture) {
                _this.textureRes = $texture;
            });
        };
        UIRenderComponent.prototype.setInfo = function (configUrl, imgUrl, $fun) {
            this.uiAtlas = new Pan3d.UIAtlas;
            this.uiAtlas.setInfo(configUrl, imgUrl, function () {
                $fun();
            });
        };
        UIRenderComponent.prototype.setAtlas = function ($atlas) {
            this.uiAtlas = $atlas;
        };
        UIRenderComponent.prototype.creatComponent = function ($tx, $ty, $tw, $th) {
            var ui = new Pan3d.UICompenent();
            ui.tr.sets($tx, $ty, $tw, $th);
            ui.uiRender = this;
            return ui;
        };
        UIRenderComponent.prototype.getComponent = function ($uiName) {
            var obj = this.uiAtlas.getLayoutData($uiName);
            if (obj) {
                var types = obj.type;
                if (types == 0) {
                    var ui = this.creatBaseComponent(obj.dataItem[0]);
                    ui.width = obj.rect.width;
                    ui.height = obj.rect.height;
                    ui.x = obj.rect.x;
                    ui.y = obj.rect.y;
                    ui.baseRec = obj.rect;
                    ui.name = $uiName;
                    return ui;
                }
                else if (types == 1) {
                    var g9ui = this.creatGrid9Component(obj.dataItem[0], obj.rect.width, obj.rect.height);
                    g9ui.x = obj.rect.x;
                    g9ui.y = obj.rect.y;
                    g9ui.baseRec = obj.rect;
                    g9ui.name = $uiName;
                    return g9ui;
                }
                else if (types == 2) {
                    if (obj.selected) {
                        var sbtn = this.createSelectButton(obj.dataItem[0], obj.dataItem[1]);
                        sbtn.width = obj.rect.width;
                        sbtn.height = obj.rect.height;
                        sbtn.x = obj.rect.x;
                        sbtn.y = obj.rect.y;
                        sbtn.baseRec = obj.rect;
                        sbtn.name = $uiName;
                        return sbtn;
                    }
                    else {
                        var btn = this.creatButton(obj.dataItem[0], obj.dataItem[1]);
                        btn.width = obj.rect.width;
                        btn.height = obj.rect.height;
                        btn.x = obj.rect.x;
                        btn.y = obj.rect.y;
                        btn.baseRec = obj.rect;
                        btn.name = $uiName;
                        return btn;
                    }
                }
                else if (types == 4) {
                    var sFrame = this.createFrame(obj.dataItem[0]);
                    sFrame.width = obj.rect.width;
                    sFrame.height = obj.rect.height;
                    sFrame.x = obj.rect.x;
                    sFrame.y = obj.rect.y;
                    sFrame.baseRec = obj.rect;
                    sFrame.name = $uiName;
                    return sFrame;
                }
            }
            return null;
        };
        UIRenderComponent.prototype.createFrame = function ($upskin) {
            var frameMc = new Pan3d.FrameCompenent;
            frameMc.skinName = $upskin;
            var rec = this.uiAtlas.getRec($upskin);
            frameMc.setFrameData(rec);
            frameMc.uiRender = this;
            return frameMc;
        };
        UIRenderComponent.prototype.creatBaseComponent = function ($skinName) {
            var ui = new Pan3d.UICompenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getRec($skinName);
            ui.tr.setRec(rec);
            ui.width = rec.pixelWitdh;
            ui.height = rec.pixelHeight;
            ui.uiRender = this;
            return ui;
        };
        UIRenderComponent.prototype.creatGrid9Component = function ($skinName, $width, $height) {
            var ui = new Pan3d.Grid9Compenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getGridRec($skinName);
            ui.tr.setRec(rec);
            ui.ogw = rec.ogw;
            ui.ogh = rec.ogh;
            ui.gw = ui.ogw / rec.pixelWitdh;
            ui.gh = ui.ogh / rec.pixelHeight;
            ui.width = $width;
            ui.height = $height;
            ui.uiRender = this;
            return ui;
        };
        UIRenderComponent.prototype.creatButton = function ($upskin, $downskin) {
            if (!this.uiAtlas.hasData) {
                return null;
            }
            var btn = new Pan3d.Button;
            var rec = this.uiAtlas.getRec($upskin);
            btn.tr.setRec(rec);
            btn.trDown.setRec(this.uiAtlas.getRec($downskin));
            btn.width = rec.pixelWitdh;
            btn.height = rec.pixelHeight;
            btn.uiRender = this;
            return btn;
        };
        UIRenderComponent.prototype.createSelectButton = function ($upskin, $selectedskin) {
            if (!this.uiAtlas.hasData) {
                return null;
            }
            var btn = new Pan3d.SelectButton;
            var rec = this.uiAtlas.getRec($upskin);
            btn.tr.setRec(rec);
            btn.trDown.setRec(this.uiAtlas.getRec($selectedskin));
            btn.width = rec.pixelWitdh;
            btn.height = rec.pixelHeight;
            btn.uiRender = this;
            return btn;
        };
        UIRenderComponent.prototype.addRenderUI = function (ui) {
            if (this._uiList.length >= 50) {
                //console.log("UIRenderComponent超限制51")
                alert("UIRenderComponent超限制51");
                return;
            }
            this._uiList.push(ui);
            ui.rendering = this.rendering;
            //this._uiList.sort((a: UICompenent, b: UICompenent) => { return a.z > b.z ? -1 : 1 });
            this.applyObjData();
        };
        UIRenderComponent.prototype.removeRenderUI = function (ui) {
            var index = this._uiList.indexOf(ui);
            if (index != -1) {
                this._uiList.splice(index, 1);
            }
            ui.rendering = false;
            this.applyObjData();
        };
        UIRenderComponent.prototype.applyObjData = function () {
            this.objData.vertices.length = 0;
            this.objData.uvs.length = 0;
            this.objData.indexs.length = 0;
            //var wh: number = 20;
            var beginIndex = 0;
            for (var i = 0; i < this._uiList.length; i++) {
                var ui = this._uiList[i];
                if (ui.isVirtual) {
                    continue;
                }
                //this.objData.vertices.push(
                //    0, 0, 0, 
                //    1, 0, 0,
                //    1, -1, 0,
                //    0, -1, 0);
                //this.objData.uvs.push(
                //    0, 0, i,
                //    1, 0, i,
                //    1, 1, i,
                //    0, 1, i);
                //this.objData.indexs.push(i * 4, 1 + i * 4, 2 + i * 4, i * 4, 2 + i * 4, 3 + i * 4);
                beginIndex = ui.pushVaData(this.objData, i, beginIndex);
            }
            this.objData.treNum = this.objData.indexs.length;
            if (this.objData.vertexBuffer) {
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer, this.objData.vertices);
                Pan3d.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer, this.objData.uvs);
                Pan3d.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer, this.objData.indexs);
            }
            else {
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
            if (this.mask) {
                this.mask.scale = this.scale;
                this.mask.applyAbsolutePoint();
            }
            this.makeRenderDataVc(-1);
        };
        //-1为所有都需要更新;
        UIRenderComponent.prototype.makeRenderDataVc = function ($vcId) {
            if (!this.renderData || (this.renderData && this.renderData.length != this._uiList.length * 4)) {
                //if (this.renderData.length != this._uiList.length * 4) {
                //  //console.log(this.renderData.length, this._uiList.length * 4, "$vcId", $vcId)
                //}
                this.renderData = new Float32Array(this._uiList.length * 4);
                this.renderData2 = new Float32Array(this._uiList.length * 4);
            }
            if ($vcId == -1) {
                for (var i = 0; this._uiList && i < this._uiList.length; i++) {
                    this._uiList[i].vcId = i;
                    this.renderData[i * 4 + 0] = this._uiList[i].renderData[0];
                    this.renderData[i * 4 + 1] = this._uiList[i].renderData[1];
                    this.renderData[i * 4 + 2] = this._uiList[i].renderData[2];
                    this.renderData[i * 4 + 3] = this._uiList[i].renderData[3];
                    this.renderData2[i * 4 + 0] = this._uiList[i].renderData2[0];
                    this.renderData2[i * 4 + 1] = this._uiList[i].renderData2[1];
                    this.renderData2[i * 4 + 2] = this._uiList[i].renderData2[2];
                    this.renderData2[i * 4 + 3] = this._uiList[i].renderData2[3];
                }
            }
            else {
                if ($vcId < this._uiList.length) {
                    this.renderData[$vcId * 4 + 0] = this._uiList[$vcId].renderData[0];
                    this.renderData[$vcId * 4 + 1] = this._uiList[$vcId].renderData[1];
                    this.renderData[$vcId * 4 + 2] = this._uiList[$vcId].renderData[2];
                    this.renderData[$vcId * 4 + 3] = this._uiList[$vcId].renderData[3];
                    this.renderData2[$vcId * 4 + 0] = this._uiList[$vcId].renderData2[0];
                    this.renderData2[$vcId * 4 + 1] = this._uiList[$vcId].renderData2[1];
                    this.renderData2[$vcId * 4 + 2] = this._uiList[$vcId].renderData2[2];
                    this.renderData2[$vcId * 4 + 3] = this._uiList[$vcId].renderData2[3];
                }
            }
        };
        UIRenderComponent.prototype.update = function () {
            if (!this.visible || this._uiList.length == 0) {
                if (this.modelRenderList && this.modelRenderList.length) {
                }
                else {
                    return;
                }
            }
            if (this.mask) {
                var gl = Pan3d.Scene_data.context3D.renderContext;
                gl.enable(gl.STENCIL_TEST);
                gl.stencilFunc(gl.NEVER, this.mask.level, 0xFF);
                gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);
                this.mask.update();
                gl.stencilFunc(gl.LESS, this.mask.level - 1, 0xFF);
                /*
                var renderContext: WebGLRenderingContext = Scene_data.context3D.renderContext;
                renderContext.enable(renderContext.STENCIL_TEST);
                renderContext.stencilMask(0xFF);
                renderContext.stencilFunc(renderContext.NEVER, this.mask.level, 0xFF);
                renderContext.stencilOp(renderContext.REPLACE, renderContext.REPLACE, renderContext.REPLACE);
                this.mask.update();
                renderContext.stencilFunc(renderContext.LESS, this.mask.level - 1, 0xFF);
                renderContext.stencilOp(renderContext.KEEP, renderContext.KEEP, renderContext.KEEP);
                */
            }
            Pan3d.Scene_data.context3D.setBlendParticleFactors(this.blenderMode);
            ////console.log(this.shader.name);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            this.setVc();
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            this.setTextureToGpu();
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            if (this.mask) {
                Pan3d.Scene_data.context3D.renderContext.disable(Pan3d.Scene_data.context3D.renderContext.STENCIL_TEST);
            }
            if (this.modelRenderList) {
                for (var i = 0; i < this.modelRenderList.length; i++) {
                    this.modelRenderList[i].update();
                }
            }
        };
        UIRenderComponent.prototype.setTextureToGpu = function () {
            if (this.uiAtlas) {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.uiAtlas.texture, 0);
            }
            else {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
            }
        };
        UIRenderComponent.prototype.setVc = function () {
            // for (var i: number = 0; i < this._uiList.length; i++) {
            //     this._uiList[i].update();
            //     this._uiList[i].setVc(this.program, i);
            // }
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].update();
                if (this._uiList[i].vcId != i) {
                    // //console.log(this._uiList[i].vcId , i)
                }
            }
            Pan3d.Scene_data.context3D.setVc4fvLocation(this.uiProLocation, this.renderData);
            Pan3d.Scene_data.context3D.setVc4fvLocation(this.ui2ProLocation, this.renderData2);
        };
        UIRenderComponent.prototype.addModel = function ($display) {
            if (!this.modelRenderList) {
                this.modelRenderList = new Array;
            }
            var idx = this.modelRenderList.indexOf($display);
            if (idx != -1) {
                return;
            }
            this.modelRenderList.push($display);
        };
        UIRenderComponent.prototype.removeModel = function ($display) {
            var idx = this.modelRenderList.indexOf($display);
            if (idx != -1) {
                this.modelRenderList.splice(idx, 1);
            }
        };
        UIRenderComponent.prototype.insetUi = function ($e) {
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].testPoint($e.x, $e.y)) {
                    return this._uiList[i];
                }
            }
            return null;
        };
        UIRenderComponent.prototype.interactiveEvent = function ($e) {
            if (this.mask) {
                if (!this.mask.testPoint($e.x, $e.y)) {
                    return false;
                }
            }
            var tf = false;
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].interactiveEvent($e) && Pan3d.UIManager.cando) {
                    tf = true;
                    Pan3d.UIManager.cando = false;
                    return true;
                }
            }
            return tf;
        };
        UIRenderComponent.prototype.dispose = function () {
            this.objData.destory();
            this.objData = null;
            if (this.uiAtlas) {
                this.uiAtlas.dispose();
                this.uiAtlas = null;
            }
            if (this.mask) {
                this.mask.dispose();
                this.mask = null;
            }
            this.renderData = null;
            this.renderData2 = null;
        };
        return UIRenderComponent;
    }());
    Pan3d.UIRenderComponent = UIRenderComponent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIRenderComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIListRenderComponent = /** @class */ (function (_super) {
        __extends(UIListRenderComponent, _super);
        function UIListRenderComponent() {
            return _super.call(this) || this;
        }
        UIListRenderComponent.prototype.createList = function () {
            var list = new Pan3d.List;
            list.uiRender = this;
            return list;
        };
        UIListRenderComponent.prototype.createGridList = function () {
            var list = new Pan3d.GridList;
            list.uiRender = this;
            return list;
        };
        return UIListRenderComponent;
    }(Pan3d.UIRenderComponent));
    Pan3d.UIListRenderComponent = UIListRenderComponent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIListRenderComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIBackImg = /** @class */ (function (_super) {
        __extends(UIBackImg, _super);
        function UIBackImg() {
            var _this = _super.call(this) || this;
            _this._scaleData = [1, 1];
            _this._isFBO = false;
            _this.alpha = 1.0;
            return _this;
        }
        UIBackImg.prototype.initData = function () {
            this.objData = new Pan3d.ObjData();
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.UIImageShader.UI_IMG_SHADER);
            this.program = this.shader.program;
            this.objData.vertices.push(-1, 1, 0, 1, 1, 0, 1, -1, 0, -1, -1, 0);
            this.objData.uvs.push(0, 0, 1, 0, 1, 1, 0, 1);
            this.objData.indexs.push(0, 1, 2, 0, 2, 3);
            this.objData.treNum = 6;
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
        };
        UIBackImg.prototype.resize = function () {
            this.appleyPos();
        };
        UIBackImg.prototype.setImgInfo = function ($url, $width, $height) {
            this.setImgUrl($url);
            this._width = $width;
            this._height = $height;
        };
        UIBackImg.prototype.appleyPos = function () {
            var widthScale = this._width / Pan3d.Scene_data.stageWidth;
            var heightScale = this._height / Pan3d.Scene_data.stageHeight;
            if (widthScale < heightScale) {
                this._scaleData[0] = 1;
                this._scaleData[1] = (this._height / Pan3d.Scene_data.stageHeight) / widthScale;
            }
            else {
                this._scaleData[0] = (this._width / Pan3d.Scene_data.stageWidth) / heightScale;
                this._scaleData[1] = 1;
            }
        };
        UIBackImg.prototype.setFbo = function () {
            this._isFBO = true;
        };
        UIBackImg.prototype.update = function () {
            var hasTexture = false;
            if (this._isFBO) {
                if (Pan3d.Scene_data.fbo) {
                    hasTexture = true;
                }
                Pan3d.Scene_data.context3D.clearContext();
                Pan3d.Scene_data.context3D.setDepthTest(false);
            }
            else {
                if (this.texture) {
                    hasTexture = true;
                }
            }
            if (this.objData && hasTexture) {
                Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
                Pan3d.Scene_data.context3D.setProgram(this.program);
                Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Pan3d.Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Pan3d.Scene_data.context3D.setVc2fv(this.shader, "scale", this._scaleData);
                if (this._isFBO) {
                    Pan3d.Scene_data.context3D.setVc2fv(this.shader, "scale", [1, -1]);
                    Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", Pan3d.Scene_data.fbo.texture, 0);
                }
                else {
                    Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
                }
                Pan3d.Scene_data.context3D.setVcFloat(this.shader, "alpha", [this.alpha]);
                Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        UIBackImg.prototype.interactiveEvent = function ($e) {
            return true;
        };
        return UIBackImg;
    }(Pan3d.UIRenderComponent));
    Pan3d.UIBackImg = UIBackImg;
    var UIRenderOnlyPicComponent = /** @class */ (function (_super) {
        __extends(UIRenderOnlyPicComponent, _super);
        function UIRenderOnlyPicComponent() {
            return _super.call(this) || this;
        }
        UIRenderOnlyPicComponent.prototype.makeRenderDataVc = function ($vcId) {
            _super.prototype.makeRenderDataVc.call(this, $vcId);
            for (var i = 0; i < this.renderData2.length / 4; i++) {
                this.renderData2[i * 4 + 0] = 1;
                this.renderData2[i * 4 + 1] = 1;
                this.renderData2[i * 4 + 2] = 0;
                this.renderData2[i * 4 + 3] = 0;
            }
        };
        UIRenderOnlyPicComponent.prototype.update = function () {
            if (this.texture) {
                _super.prototype.update.call(this);
            }
        };
        UIRenderOnlyPicComponent.prototype.setTextureToGpu = function () {
            Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
        };
        /*
           var _bigPic: UIRenderOnlyPicComponent = new UIRenderOnlyPicComponent();
                this.addRender(_bigPic);
                _bigPic.uiAtlas = this._midRender.uiAtlas;
                _bigPic.setImgUrl("ui/uidata/basebg/skillbg.png");
                this.addChild(_bigPic.getComponent("ccav"));
    
        */
        UIRenderOnlyPicComponent.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            if (this.textureRes) {
                this.textureRes.clearUseNum();
            }
        };
        return UIRenderOnlyPicComponent;
    }(Pan3d.UIRenderComponent));
    Pan3d.UIRenderOnlyPicComponent = UIRenderOnlyPicComponent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIBackImg.js.map
var Pan3d;
(function (Pan3d) {
    var UIMask = /** @class */ (function () {
        function UIMask() {
            //设定相对坐标
            this._x = 0;
            this._y = 0;
            this._width = 0;
            this._height = 0;
            //设定绝对坐标
            this.absoluteX = 0;
            this.absoluteY = 0;
            this.absoluteWidth = 0;
            this.absoluteHeight = 0;
            this.scale = 1;
            this.level = 2;
            this._hasDisposed = false;
            this.initData();
            this.renderData = [0, 0, 0, 0];
        }
        UIMask.prototype.initData = function () {
            this.objData = new Pan3d.ObjData();
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.UIMaskShader.UI_MASK_SHADER);
            this.program = this.shader.program;
            this.applyObjData();
        };
        UIMask.prototype.applyAbsolutePoint = function () {
            if (this.parent) {
                this.absoluteX = this._x * this.scale * Pan3d.UIData.Scale + this.parent.x;
                this.absoluteY = this._y * this.scale * Pan3d.UIData.Scale + this.parent.y;
                this.absoluteWidth = this._width * Pan3d.UIData.Scale * this.scale;
                this.absoluteHeight = this._height * Pan3d.UIData.Scale * this.scale;
                this.applyRenderSize();
            }
        };
        UIMask.prototype.testPoint = function ($x, $y) {
            if ($x > this.absoluteX && $x < (this.absoluteX + this.absoluteWidth) && $y > this.absoluteY && $y < (this.absoluteY + this.absoluteHeight)) {
                return true;
            }
            else {
                return false;
            }
        };
        UIMask.prototype.applyRenderSize = function () {
            if (!this.parent) {
                return;
            }
            this.renderData[0] = this.absoluteX / Pan3d.Scene_data.stageWidth;
            this.renderData[1] = this.absoluteY / Pan3d.Scene_data.stageHeight;
            this.renderData[2] = this.absoluteWidth / Pan3d.Scene_data.stageWidth;
            this.renderData[3] = this.absoluteHeight / Pan3d.Scene_data.stageHeight;
        };
        UIMask.prototype.applyObjData = function () {
            this.objData.vertices.length = 0;
            this.objData.uvs.length = 0;
            this.objData.indexs.length = 0;
            this.objData.vertices.push(0, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0);
            this.objData.indexs.push(0, 1, 2, 0, 2, 3);
            this.objData.treNum = this.objData.indexs.length;
            this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
        };
        UIMask.prototype.update = function () {
            Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            //for (var i: number = 0; i < this._uiList.length; i++) {
            //    this._uiList[i].update();
            //    this._uiList[i].setVc(this.program, i);
            //}
            Pan3d.Scene_data.context3D.setVc4fv(this.shader, "ui", this.renderData);
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        Object.defineProperty(UIMask.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIMask.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIMask.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                this._width = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIMask.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                this._height = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        UIMask.prototype.dispose = function () {
            if (this._hasDisposed) {
                return;
            }
            this.objData.destory();
            this.objData = null;
            this.program = null;
            this.shader = null;
            this.renderData = null;
            this.parent = null;
            this._hasDisposed = true;
        };
        return UIMask;
    }());
    Pan3d.UIMask = UIMask;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIMask.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BaseButton = /** @class */ (function (_super) {
        __extends(BaseButton, _super);
        function BaseButton() {
            var _this = _super.call(this) || this;
            _this.trDown = new Pan3d.Rectangle;
            _this._state = 0;
            _this._currentState = 0;
            return _this;
        }
        BaseButton.prototype.update = function () {
            if (this._currentState != this._state) {
                this.applyRenderSize();
                this._currentState = this._state;
            }
        };
        BaseButton.prototype.applyRenderSize = function () {
            _super.prototype.applyRenderSize.call(this);
            if (this._state == 0) {
                this.renderData2[0] = this.tr.width;
                this.renderData2[1] = this.tr.height;
                this.renderData2[2] = this.tr.x;
                this.renderData2[3] = this.tr.y;
            }
            else if (this._state == 1) {
                this.renderData2[0] = this.trDown.width;
                this.renderData2[1] = this.trDown.height;
                this.renderData2[2] = this.trDown.x;
                this.renderData2[3] = this.trDown.y;
            }
            this.uiRender.makeRenderDataVc(this.vcId);
        };
        return BaseButton;
    }(Pan3d.UICompenent));
    Pan3d.BaseButton = BaseButton;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BaseButton.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Button.prototype.interactiveEvent = function (e) {
            //if (e.type == InteractiveEvent.Down) {
            //    if (this.testPoint(e.x, e.y)) {
            //        this._state = 1;
            //    }
            //} else if (e.type == InteractiveEvent.Up){
            //    if (this.testPoint(e.x, e.y)) {
            //        this._state = 0;
            //    }
            //}
            return _super.prototype.interactiveEvent.call(this, e);
        };
        return Button;
    }(Pan3d.BaseButton));
    Pan3d.Button = Button;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Button.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SelectButton = /** @class */ (function (_super) {
        __extends(SelectButton, _super);
        function SelectButton() {
            var _this = _super.call(this) || this;
            _this._selected = false;
            return _this;
        }
        Object.defineProperty(SelectButton.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = value;
                if (this._selected) {
                    this._state = 1;
                }
                else {
                    this._state = 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        SelectButton.prototype.interactiveEvent = function (e) {
            if (!this.enable) {
                return false;
            }
            if (e.type == Pan3d.InteractiveEvent.Down) {
                if (this.testPoint(e.x, e.y)) {
                    this._selected = !this._selected;
                    if (this._selected) {
                        this._state = 1;
                    }
                    else {
                        this._state = 0;
                    }
                }
            }
            return _super.prototype.interactiveEvent.call(this, e);
        };
        return SelectButton;
    }(Pan3d.BaseButton));
    Pan3d.SelectButton = SelectButton;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SelectButton.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Grid9Compenent = /** @class */ (function (_super) {
        __extends(Grid9Compenent, _super);
        function Grid9Compenent() {
            return _super.call(this) || this;
        }
        Grid9Compenent.prototype.pushVaData = function (objData, i, beginIndex) {
            var vers = [
                0, 0, 0,
                this.ogw, 0, 0,
                this.width - this.ogw, 0, 0,
                this.width, 0, 0,
                0, -this.ogh, 0,
                this.ogw, -this.ogh, 0,
                this.width - this.ogw, -this.ogh, 0,
                this.width, -this.ogh, 0,
                0, this.ogh - this.height, 0,
                this.ogw, this.ogh - this.height, 0,
                this.width - this.ogw, this.ogh - this.height, 0,
                this.width, this.ogh - this.height, 0,
                0, -this.height, 0,
                this.ogw, -this.height, 0,
                this.width - this.ogw, -this.height, 0,
                this.width, -this.height, 0
            ];
            for (var j = 0; j < vers.length; j += 3) {
                objData.vertices.push(vers[j] / this.width, vers[j + 1] / this.height, vers[j + 2]);
            }
            //objData.vertices.push(
            //    0, 0, 0,
            //    this.gw, 0, 0,
            //    1 - this.gw, 0, 0,
            //    1, 0, 0,
            //    0, -this.gh, 0,
            //    this.gw, -this.gh, 0,
            //    1 - this.gw, -this.gh, 0,
            //    1, -this.gh, 0,
            //    0, this.gh - 1, 0,
            //    this.gw, this.gh - 1, 0,
            //    1 - this.gw, this.gh - 1, 0,
            //    1, this.gh - 1, 0,
            //    0, -1, 0,
            //    this.gw, -1, 0,
            //    1 - this.gw, -1, 0,
            //    1, -1, 0
            //    );
            objData.uvs.push(0, 0, i, this.gw, 0, i, 1 - this.gw, 0, i, 1, 0, i, 0, this.gh, i, this.gw, this.gh, i, 1 - this.gw, this.gh, i, 1, this.gh, i, 0, 1 - this.gh, i, this.gw, 1 - this.gh, i, 1 - this.gw, 1 - this.gh, i, 1, 1 - this.gh, i, 0, 1, i, this.gw, 1, i, 1 - this.gw, 1, i, 1, 1, i);
            var indexary = [
                0, 1, 5, 0, 5, 4,
                1, 2, 6, 1, 6, 5,
                2, 3, 7, 2, 7, 6,
                4, 5, 9, 4, 9, 8,
                5, 6, 10, 5, 10, 9,
                6, 7, 11, 6, 11, 10,
                8, 9, 13, 8, 13, 12,
                9, 10, 14, 9, 14, 13,
                10, 11, 15, 10, 15, 14
            ];
            for (var j = 0; j < indexary.length; j++) {
                objData.indexs.push(beginIndex + indexary[j]);
            }
            //objData.indexs.push(beginIndex, 1 + beginIndex, 2 + beginIndex, beginIndex, 2 + beginIndex, 3 + beginIndex);
            return beginIndex + 16;
        };
        return Grid9Compenent;
    }(Pan3d.UICompenent));
    Pan3d.Grid9Compenent = Grid9Compenent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Grid9Compenent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var FrameCompenent = /** @class */ (function (_super) {
        __extends(FrameCompenent, _super);
        function FrameCompenent() {
            var _this = _super.call(this) || this;
            _this.isTrue = false;
            _this.current = 0;
            _this.totalcurrent = 0;
            _this.speed = 6;
            _this.endFlag = false;
            _this.stopStatic = 0;
            _this.speedNum = 0;
            return _this;
        }
        FrameCompenent.prototype.setFrameData = function ($rect) {
            this._frameData = $rect;
            this.totalcurrent = this._frameData.cellX * this._frameData.cellY;
        };
        FrameCompenent.prototype.applyRenderSize = function () {
            if (!this.parent) {
                return;
            }
            this.renderX = this.absoluteX / Pan3d.Scene_data.stageWidth;
            this.renderY = this.absoluteY / Pan3d.Scene_data.stageHeight;
            this.renderWidth = this.absoluteWidth / Pan3d.Scene_data.stageWidth;
            this.renderHeight = this.absoluteHeight / Pan3d.Scene_data.stageHeight;
            this.renderData[0] = this.renderX;
            this.renderData[1] = this.renderY;
            this.renderData[2] = this.renderWidth * this._uvScale;
            this.renderData[3] = this.renderHeight;
            var cellX = this._frameData.cellX;
            var cellY = this._frameData.cellY;
            var tw = (this._frameData.width / cellX);
            var th = (this._frameData.height / cellY);
            var rect = new Pan3d.Rectangle(0, 0, tw, th);
            var tempNum = this.current % (cellX * cellY);
            rect.x = (tempNum % cellX * tw);
            rect.y = (float2int(tempNum / cellX) * th);
            this.renderData2[0] = rect.width * this._uvScale;
            this.renderData2[1] = rect.height;
            this.renderData2[2] = rect.x + this._frameData.x;
            this.renderData2[3] = rect.y + this._frameData.y;
            this.uiRender.makeRenderDataVc(this.vcId);
        };
        FrameCompenent.prototype.getSkinCtxRect = function () {
            var $uiRec = this._frameData;
            var $toRect = new Pan3d.Rectangle;
            $toRect.width = $uiRec.pixelWitdh / $uiRec.cellX;
            $toRect.height = $uiRec.pixelHeight / $uiRec.cellY;
            $toRect.x = ((this.current) % $uiRec.cellX) * $toRect.width;
            $toRect.y = Math.floor((this.current) / $uiRec.cellX) * $toRect.height;
            return $toRect;
        };
        FrameCompenent.prototype.drawToCtx = function ($uiAtlas, $ctx) {
            var $uiRec = this._frameData;
            ;
            var $toRect = this.getSkinCtxRect();
            $uiAtlas.updateCtx($ctx, $uiRec.pixelX + $toRect.x, $uiRec.pixelY + $toRect.y);
        };
        FrameCompenent.prototype.update = function () {
            if (!this._frameData) {
                return;
            }
            if (this.stopStatic == 2) {
                return;
            }
            this.applyRenderSize();
            this.speedNum++;
            if (this.speedNum > this.speed) {
                this.current++;
                this.speedNum = 0;
            }
            var cellX = this._frameData.cellX;
            var cellY = this._frameData.cellY;
            if (this.current > (cellX * cellY - 1)) {
                if (this.stopStatic == 1) {
                    this.stopStatic = 2;
                    this.endFlag = true;
                }
                else {
                    this.current = 0;
                }
            }
        };
        FrameCompenent.prototype.goToAndPlay = function ($num) {
            this.stopStatic = 1;
            this.current = $num;
        };
        FrameCompenent.prototype.goToAndStop = function ($num) {
            this.stopEnd();
            this.current = $num;
            this.applyRenderSize();
        };
        FrameCompenent.prototype.Invisible = function () {
            if (this.renderData[2] != 0 && this.renderData[3] != 0) { //这里特殊规避重复设置 高宽不为0
                this.stopEnd();
                this.renderData[0] = 0;
                this.renderData[1] = 0;
                this.renderData[2] = 0;
                this.renderData[3] = 0;
                this.uiRender.makeRenderDataVc(this.vcId);
            }
        };
        FrameCompenent.prototype.play = function () {
            this.stopStatic = 0;
        };
        FrameCompenent.prototype.stopEnd = function () {
            this.stopStatic = 2;
            var cellX = this._frameData.cellX;
            var cellY = this._frameData.cellY;
            this.current = cellX * cellY - 1;
            this.applyRenderSize();
        };
        return FrameCompenent;
    }(Pan3d.UICompenent));
    Pan3d.FrameCompenent = FrameCompenent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=FrameCompenent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var List = /** @class */ (function (_super) {
        __extends(List, _super);
        function List() {
            var _this = _super.call(this) || this;
            _this._contentX = 0;
            _this._contentY = 0;
            _this._needScoller = false;
            _this.lastcontentY = 0;
            _this.addEventListener(Pan3d.InteractiveEvent.Down, _this.onDown, _this);
            _this.addEventListener(Pan3d.InteractiveEvent.Up, _this.onListUp, _this);
            return _this;
        }
        List.prototype.applyAbsolutePoint = function () {
            if (this.parent) {
                this.absoluteX = (this._x * this.scale + this._contentX) * Pan3d.UIData.Scale + this.parent.x;
                this.absoluteY = (this._y * this.scale + this._contentY) * Pan3d.UIData.Scale + this.parent.y;
                this.absoluteWidth = this.width * Pan3d.UIData.Scale;
                this.absoluteHeight = this.height * Pan3d.UIData.Scale;
                this.applyRenderSize();
            }
        };
        Object.defineProperty(List.prototype, "contentX", {
            get: function () {
                return this._contentX;
            },
            set: function (value) {
                this._contentX = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "contentY", {
            get: function () {
                return this._contentY;
            },
            set: function (value) {
                this._contentY = value;
                this.applyAbsolutePoint();
            },
            enumerable: true,
            configurable: true
        });
        List.prototype.testPoint = function ($x, $y) {
            if ($x > this.absoluteX
                && $x < (this.absoluteX + this._showWidth * Pan3d.UIData.Scale)
                && $y > this.absoluteY
                && $y < (this.absoluteY + this._showHeight * Pan3d.UIData.Scale)) {
                return true;
            }
            else {
                return false;
            }
        };
        List.prototype.setData = function ($data, ItemRender, itemWidth, itemHeight, contentWidth, contentHeight, $width, $height) {
            if ($width === void 0) { $width = 256; }
            if ($height === void 0) { $height = 300; }
            if (this.uiRender.uiAtlas) {
                this.uiRender.uiAtlas.dispose();
            }
            this.width = contentWidth;
            this.height = contentHeight;
            this._showWidth = $width;
            this._showHeight = $height;
            this._itemWidth = itemWidth;
            this._itemHeight = itemHeight;
            this.data = $data;
            var atlas = new ListAtlas();
            this.uiRender.setAtlas(atlas);
            atlas.setData(contentWidth, contentHeight, itemWidth, itemHeight, $data.length);
            this._itemRenderAry = new Array;
            for (var i = 0; i < $data.length; i++) {
                var listItemRender = new ItemRender();
                listItemRender.setData($data[i], atlas, atlas.configData[i]);
                this._itemRenderAry.push(listItemRender);
            }
            this._oHeight = itemHeight * $data.length;
            if (this._oHeight > this._showHeight) {
                this._needScoller = true;
            }
            else {
                this._needScoller = false;
            }
            this.uiRender.applyObjData();
        };
        List.prototype.refresh = function () {
            for (var i = 0; this._itemRenderAry && i < this._itemRenderAry.length; i++) {
                this._itemRenderAry[i].draw();
            }
        };
        List.prototype.pushVaData = function (objData, i, beginIndex) {
            if (!this._itemRenderAry) {
                return 0;
            }
            for (var j = 0; j < this._itemRenderAry.length; j++) {
                var rec = this._itemRenderAry[j].uvData;
                objData.vertices.push(0, -rec.y, 0, 1, -rec.y, 0);
                objData.uvs.push(0, rec.y, i, 1, rec.y, i);
            }
            objData.vertices.push(0, -1, 0, 1, -1, 0);
            objData.uvs.push(0, 1, i, 1, 1, i);
            for (var j = 0; j < this._itemRenderAry.length; j++) {
                objData.indexs.push(beginIndex + 2 * j, 1 + beginIndex + 2 * j, 3 + beginIndex + 2 * j, beginIndex + 2 * j, 3 + beginIndex + 2 * j, 2 + beginIndex + 2 * j);
            }
            return beginIndex + (this._itemRenderAry.length + 1) * 2;
        };
        List.prototype.onDown = function (event) {
            this._ypos = event.y;
            ////console.log("down" + this._ypos);
            //FpsMc.tipStr = "mouseDown";
            this.lastcontentY = this.contentY;
            if (this._needScoller) {
                Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
                Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
            }
        };
        List.prototype.onListUp = function (event) {
            if (this.uiRender.mask) {
                if (this.uiRender.mask.testPoint(event.x, event.y)) {
                    this.testItemClick(event.x, event.y);
                }
            }
            else {
                if (Math.abs(this.contentY - this.lastcontentY) < 1) {
                    var ty = (event.y - this.absoluteY + this.contentY) / Pan3d.UIData.Scale;
                    if (ty >= 0 && ty < this._showHeight) {
                        this.testItemClick(event.x, event.y);
                    }
                }
            }
        };
        List.prototype.testItemClick = function ($xPos, $ypos) {
            var xpos = $xPos - this.absoluteX;
            var ypos = $ypos - this.absoluteY;
            var itemH = this._itemHeight * Pan3d.UIData.Scale;
            var index = Math.floor(ypos / itemH);
            if (index >= this._itemRenderAry.length || index < 0) {
                return;
            }
            this._itemRenderAry[index].click(xpos, ypos - (itemH * (index)));
        };
        List.prototype.onMove = function (event) {
            ////console.log("move" + this._ypos + "," + event.y + "," + this._contentY);
            //FpsMc.tipStr = event.x + "," + event.y;
            this.contentY -= this._ypos - event.y;
            if (this.contentY > 0) {
                this.contentY = 0;
            }
            else if (this.contentY < this._showHeight * this.scale - this._oHeight * this.scale) {
                this.contentY = this._showHeight * this.scale - this._oHeight * this.scale;
            }
            ////console.log(this._contentY);
            this._ypos = event.y;
        };
        List.prototype.onUp = function (event) {
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
        };
        return List;
    }(Pan3d.UICompenent));
    Pan3d.List = List;
    var ListAtlas = /** @class */ (function (_super) {
        __extends(ListAtlas, _super);
        function ListAtlas() {
            return _super.call(this) || this;
        }
        ListAtlas.prototype.setData = function ($width, $height, itemWidth, itemHeight, itemNum) {
            this.ctx = Pan3d.UIManager.getInstance().getContext2D($width, $height, false);
            //UIManager.getInstance().showCanvas(0,0);
            //this.ctx.fillStyle = "#6600ff";
            // this.ctx.fillRect(0, 0, $width, $height);
            this.textureRes = Pan3d.TextureManager.getInstance().getCanvasTexture(this.ctx);
            this.configData = new Array;
            for (var i = 0; i < itemNum; i++) {
                var rec = new Object;
                rec.ox = 0;
                rec.oy = i * itemHeight;
                rec.ow = itemWidth;
                rec.oh = itemHeight;
                rec.x = 0;
                rec.y = i * itemHeight / $height;
                rec.width = itemWidth / $width;
                rec.height = itemHeight / $height;
                rec.name = i.toString();
                this.configData.push(rec);
            }
        };
        return ListAtlas;
    }(Pan3d.UIAtlas));
    Pan3d.ListAtlas = ListAtlas;
    var ListItemData = /** @class */ (function () {
        function ListItemData() {
        }
        return ListItemData;
    }());
    Pan3d.ListItemData = ListItemData;
    var ListItemRender = /** @class */ (function () {
        function ListItemRender() {
        }
        ListItemRender.prototype.setData = function ($listItemData, $atlas, $uvData) {
            this._listItemData = $listItemData;
            this._listItemData.itemRender = this;
            this.uvData = $uvData;
            this.atlas = $atlas;
            this.draw();
        };
        Object.defineProperty(ListItemRender.prototype, "listItemData", {
            get: function () {
                return this._listItemData;
            },
            enumerable: true,
            configurable: true
        });
        ListItemRender.prototype.setNewData = function ($data) {
        };
        Object.defineProperty(ListItemRender.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = value;
            },
            enumerable: true,
            configurable: true
        });
        ListItemRender.prototype.draw = function () {
        };
        ListItemRender.prototype.redraw = function () {
        };
        ListItemRender.prototype.click = function (xpos, ypos) {
            if (this._listItemData.clickFun) {
                //判断是否有指定按钮区域
                if (this._listItemData.clickRect) {
                    if (!this._listItemData.clickRect.isHitByPoint(xpos / Pan3d.UIData.Scale, ypos / Pan3d.UIData.Scale)) {
                        return;
                    }
                }
                this._listItemData.clickFun(this._listItemData);
            }
        };
        return ListItemRender;
    }());
    Pan3d.ListItemRender = ListItemRender;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=List.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SList = /** @class */ (function (_super) {
        __extends(SList, _super);
        function SList() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.p_scrollY = 0;
            _this.p_scrollX = 0;
            _this._showItemNum = 0;
            _this._allItemNum = 0;
            _this._topSize = 0;
            _this._bottomSize = 0;
            _this._outSize = 0;
            _this._showDataIndex = 0;
            _this.scrollLock = false;
            _this._minScrollY = 0;
            _this._maskLevel = 2;
            _this._mouseY = 0;
            /**拖动刷新 */
            _this._dragFlag = false;
            _this._dragY = 0;
            _this._dragMaxY = 100;
            return _this;
        }
        /**
         * $data 数据源
         *
         * UItemRender 渲染器
         *
         * $width 显示宽度
         *
         * $height 显示高度
         *
         * $itemWidth 每列宽度
         *
         * $itemHeight 每列高度
         *
         * $showItemNum 显示列数
         *
         * contentWidth 纹理宽
         *
         * contentHeight 纹理高
         *
         * contentX 纹理横向分割数
         *
         * contentY 纹理纵向分割数
         *
         */
        SList.prototype.setData = function ($data, UItemRender, $width, $height, $itemWidth, $itemHeight, $showItemNum, contentWidth, contentHeight, contentX, contentY, customRenderNum) {
            if (customRenderNum === void 0) { customRenderNum = 0; }
            //  //console.log("$data", $data);
            this.width = $width;
            this._height = $height;
            this.p_itemHeight = $itemHeight;
            this.p_itemWidth = $itemWidth;
            this._showIndexList = new Array;
            this._dataAry = $data;
            this._showItemNum = $showItemNum;
            this._allItemNum = contentX * contentY;
            this._contentX = contentX;
            this._contentY = contentY;
            this._outSize = (contentY - this._showItemNum) * $itemHeight;
            this._topSize = 0;
            this._bottomSize = this._outSize;
            this._showDataIndex = 0;
            this._sAtlas = new SListAtlas();
            this._sAtlas.setData(contentWidth, contentHeight, contentX, contentY);
            this.bgMask = new Pan3d.UIMask();
            this.bgMask.x = 0;
            this.bgMask.y = 0;
            this.bgMask.width = $width;
            this.bgMask.height = $height;
            this.bgMask.level = this._maskLevel;
            this.addMask(this.bgMask);
            this._bgRender = new SListBgRender();
            this._bgRender.uiAtlas = this._sAtlas;
            this._bgRender.slist = this;
            this.addRender(this._bgRender);
            this._baseRender = new SlistFrontRender();
            this._baseRender.uiAtlas = this._sAtlas;
            this.addRender(this._baseRender);
            this._bgRender.mask = this.bgMask;
            this._baseRender.mask = this.bgMask;
            if (customRenderNum != 0) {
                this.customRenderAry = new Array;
                for (var i = 0; i < customRenderNum; i++) {
                    var cRender = new SlistFrontRender();
                    cRender.uiAtlas = this._sAtlas;
                    this.addRender(cRender);
                    cRender.mask = this.bgMask;
                    this.customRenderAry.push(cRender);
                }
            }
            this._itemList = new Array;
            for (var i = 0; i < this._allItemNum; i++) {
                var item = new UItemRender();
                //item.itdata = $data[i];
                item.baseY = float2int(i / contentX) * $itemHeight;
                item.baseX = (i % contentX) * $itemWidth;
                item.uiAtlas = this._sAtlas;
                item.index = i;
                item.parentTarget = this;
                item.create(this, this._bgRender, this._baseRender, this.customRenderAry);
                item.render($data[i]);
                this._itemList.push(item);
                this._showIndexList.push(i);
            }
            this._minScrollY = this._height - float2int(this._dataAry.length / this._contentX) * this.p_itemHeight;
            this.scrollY(0);
            if (Math.ceil($data.length / this._contentX) <= this._showItemNum) {
                this.scrollLock = true;
            }
            else {
                this.scrollLock = false;
            }
            this.initComplte();
        };
        SList.prototype.initComplte = function () {
        };
        /**显示层级 */
        SList.prototype.setShowLevel = function ($num) {
            this._maskLevel = $num;
            if (this.bgMask) {
                this.bgMask.level = this._maskLevel;
            }
        };
        SList.prototype.setSelect = function ($item) {
            for (var i = 0; i < this._itemList.length; i++) {
                if (this._itemList[i] == $item) {
                    this._currentSelIdx = this._dataAry.indexOf(this._itemList[i].itdata);
                    //console.log("--选中---", this._currentSelIdx);
                    // if (!this._itemList[i].selected) {
                    //刷新时，需要重复选中
                    this._itemList[i].selected = true;
                    // if (this._itemList[i].itdata && this._itemList[i].itdata.data) {
                    //     this.currentSelIdx = this._itemList[i].itdata.data.id;
                    // }
                    // }
                }
                else {
                    if (this._itemList[i].selected) {
                        this._itemList[i].selected = false;
                    }
                }
            }
        };
        SList.prototype.setSelectIndex = function ($index) {
            //console.log("--选中哪个---", $index);
            this._currentSelIdx = $index;
            for (var i = 0; i < this._itemList.length; i++) {
                if (this._itemList[i].itdata && this._itemList[i].itdata.id == $index) {
                    // if (!this._itemList[i].selected) {
                    this._itemList[i].selected = true;
                    // }
                }
                else {
                    if (this._itemList[i].selected) {
                        this._itemList[i].selected = false;
                    }
                }
            }
        };
        //记录当前选中的位置
        //private _lastSelectIndex: number;
        // public setSelectIndexCopy($index: number): void {
        //     //console.log("--$index-",$index);
        //     this.currentSelIdx = $index;
        //     for (var i: number = 0; i < this._itemList.length; i++) {
        //         if (this._itemList[i].itdata && this._itemList[i].itdata.data.id == $index) {
        //             // if (!this._itemList[i].selected) {
        //             this._itemList[i].selected = true;
        //             //this._lastSelectIndex = $index;
        //             // }
        //         } else {
        //             if (this._itemList[i].selected) {
        //                 this._itemList[i].selected = false;
        //             }
        //         }
        //     }
        // }
        SList.prototype.getCurrentSelectIndex = function () {
            if (!this._currentSelIdx) {
                this._currentSelIdx = 0;
            }
            return this._currentSelIdx;
        };
        SList.prototype.changeMinScrollY = function () {
            this._minScrollY = this._height - Math.ceil(this._dataAry.length / this._contentX) * this.p_itemHeight;
        };
        SList.prototype.refreshData = function ($data) {
            this._dataAry = $data;
            this._showIndexList = new Array;
            for (var i = 0; i < this._itemList.length; i++) {
                this._itemList[i].render($data[i]);
                this._itemList[i].baseY = float2int(i / this._contentX) * this.p_itemHeight;
                this._showIndexList.push(i);
            }
            this._outSize = (this._contentY - this._showItemNum) * this.p_itemHeight;
            this._topSize = 0;
            this._bottomSize = this._outSize;
            this._showDataIndex = 0;
            this._minScrollY = this._height - Math.ceil(this._dataAry.length / this._contentX) * this.p_itemHeight;
            this.scrollY(0);
            if (Math.ceil($data.length / this._contentX) <= this._showItemNum) {
                this.scrollLock = true;
            }
            else {
                this.scrollLock = false;
            }
        };
        SList.prototype.setItemData = function ($data, $idx) {
            this._dataAry[$idx].data = $data;
            // var tf: boolean = this._itemRenderAry[$idx].listItemData.data ? true : false;
            // this._itemRenderAry[$idx].setNewData($data);
            for (var i = 0; i < this._itemList.length; i++) {
                if (this._itemList[i].itdata == this._dataAry[$idx]) {
                    this._itemList[i].refreshDraw();
                    break;
                }
            }
        };
        SList.prototype.clearItemByPos = function ($idx) {
            this._dataAry[$idx].data = null;
            // var tf: boolean = this._itemRenderAry[$idx].listItemData.data ? true : false;
            // this._itemRenderAry[$idx].setNewData($data);
            for (var i = 0; i < this._itemList.length; i++) {
                if (this._itemList[i].itdata == this._dataAry[$idx]) {
                    this._itemList[i].refreshDraw();
                    break;
                }
            }
        };
        SList.prototype.getDataSize = function () {
            return this._dataAry.length;
        };
        SList.prototype.refreshDraw = function () {
            for (var i = 0; i < this._itemList.length; i++) {
                this._itemList[i].refreshDraw();
            }
        };
        SList.prototype.scroll = function () {
        };
        SList.prototype.interactiveEvent = function ($e) {
            if ($e.type == Pan3d.InteractiveEvent.Down) {
                if (this.bgMask.testPoint($e.x, $e.y)) {
                    this._mouseY = $e.y;
                    if (!this.scrollLock || this._dragFlag) {
                        Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
                        Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
                    }
                    return true;
                }
                else {
                    return false;
                }
            }
            else if ($e.type == Pan3d.InteractiveEvent.Up) {
                return this.bgMask.testPoint($e.x, $e.y);
            }
            return false;
        };
        SList.prototype.onMove = function ($e) {
            var delatY = $e.y - this._mouseY;
            this._mouseY = $e.y;
            if (delatY < 0 && this.scrollLock) {
                return;
            }
            this.scrollY(delatY);
        };
        SList.prototype.onUp = function ($e) {
            var _this = this;
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
            if (this._dragFlag) {
                if (this._dragY < 0) {
                    if (this._dragDownFun) {
                        this._dragDownFun();
                    }
                }
                else if (this._dragY > 0) {
                    if (this._dragUpFun) {
                        this._dragUpFun();
                    }
                }
                if (this._dragY != 0) {
                    TweenMoveTo(this, 0.5, { dragY: 0, onUpdate: function () { _this.refreshResultPos(); } });
                }
            }
        };
        /**设置翻页拖动 */
        SList.prototype.setDragFun = function (upFun, downFun) {
            this._dragUpFun = upFun;
            this._dragDownFun = downFun;
            if (upFun || downFun) {
                this._dragFlag = true;
            }
            else {
                this._dragFlag = false;
                this._dragY = 0;
            }
        };
        Object.defineProperty(SList.prototype, "dragY", {
            get: function () {
                return this._dragY;
            },
            set: function (val) {
                this._dragY = val;
            },
            enumerable: true,
            configurable: true
        });
        SList.prototype.scrollIdx = function (idx) {
            //console.log("--滑动几个--", idx);
            var targetY = -this.p_itemHeight * idx;
            var sizeY = targetY - this.p_scrollY;
            var num = Math.ceil(Math.abs(sizeY) / this.p_itemHeight);
            sizeY = sizeY / num;
            for (var i = 0; i < num; i++) {
                this.scrollY(sizeY);
            }
        };
        SList.prototype.getIdxY = function (idx) {
            return this.p_itemHeight * idx;
        };
        SList.prototype.getIdxX = function (idx) {
            return this.p_itemWidth * idx;
        };
        SList.prototype.scrollY = function (val) {
            // //console.log("cur val", val, this.p_scrollY)
            this._topSize -= val;
            this._bottomSize += val;
            if (this._topSize <= 0) { //下拉
                this._bottomflag = true;
                if (this._showDataIndex == 0) {
                    //到最顶了
                    this._topSize = 0;
                    this._bottomSize = this._outSize;
                    this.p_scrollY = 0;
                    this._topflag = false;
                    if (this._dragFlag) {
                        if (Math.abs(this._dragY) < this._dragMaxY) {
                            this._dragY += val;
                        }
                    }
                }
                else {
                    var firstID = this._showIndexList[0];
                    var topY = this._itemList[firstID].baseY - this.p_itemHeight;
                    for (var i = 0; i < this._contentX; i++) {
                        var id = this._showIndexList.pop();
                        this._showIndexList.unshift(id);
                        this._itemList[id].baseY = topY;
                        this._itemList[id].render(this._dataAry[this._showDataIndex - 1]);
                        this._itemList[id].selected = (this.getCurrentSelectIndex() == (this._showDataIndex - 1));
                        this._showDataIndex--;
                    }
                    this._bottomSize -= this.p_itemHeight;
                    this._topSize += this.p_itemHeight;
                    this.p_scrollY += val;
                    this._topflag = true;
                }
            }
            else if (this._bottomSize <= 0) { //上拉
                this._topflag = true;
                if ((this._showDataIndex + this._allItemNum) >= this._dataAry.length) {
                    //到最底了
                    this._bottomSize = 0;
                    this._topSize = this._outSize;
                    this.p_scrollY = -(Math.ceil(this._dataAry.length / this._contentX) - this._showItemNum) * this.p_itemHeight;
                    this._bottomflag = false;
                }
                else {
                    this._bottomflag = true;
                    var lastID = this._showIndexList[this._showIndexList.length - 1];
                    var lastY = this._itemList[lastID].baseY + this.p_itemHeight;
                    for (var i = 0; i < this._contentX; i++) {
                        var id = this._showIndexList.shift();
                        this._showIndexList.push(id);
                        this._itemList[id].baseY = lastY;
                        this._itemList[id].render(this._dataAry[this._showDataIndex + this._allItemNum]);
                        this._itemList[id].selected = (this.getCurrentSelectIndex() == (this._showDataIndex + this._allItemNum));
                        this._showDataIndex++;
                    }
                    this._bottomSize += this.p_itemHeight;
                    this._topSize -= this.p_itemHeight;
                    this.p_scrollY += val;
                }
            }
            else if (this._showItemNum >= this._dataAry.length) {
                this._topflag = false;
                this._bottomflag = false;
                this.p_scrollY = 0;
            }
            else {
                this._topflag = true;
                this._bottomflag = true;
                this.p_scrollY += val;
            }
            //如果到底部无法滚动，则重置状态
            if (this.p_scrollY <= this._minScrollY && this._minScrollY < 0) {
                this.p_scrollY = this._minScrollY;
                this._topSize += val;
                this._bottomSize -= val;
                this._topflag = true;
                this._bottomflag = false;
                if (this._dragFlag) {
                    if (Math.abs(this._dragY) < this._dragMaxY) {
                        this._dragY += val;
                    }
                }
            }
            this.refreshResultPos();
            //回调函数
            if (this.backFun) {
                this.backFun(this._topflag, this._bottomflag, val);
            }
        };
        SList.prototype.refreshResultPos = function () {
            for (var i = 0; i < this._itemList.length; i++) {
                this._itemList[i].setY(this.p_scrollY + this._dragY);
            }
        };
        SList.prototype.dispose = function () {
            this._bgRender.dispose();
            this._baseRender.dispose();
            if (this.customRenderAry) {
                for (var i = 0; i < this.customRenderAry.length; i++) {
                    this.customRenderAry[i].dispose();
                }
            }
            this.bgMask.dispose();
        };
        return SList;
    }(Pan3d.UIVirtualContainer));
    Pan3d.SList = SList;
    var SListItem = /** @class */ (function () {
        function SListItem() {
            this._height = 10;
            this._list = new Array;
            this.index = 0;
            this.baseY = 0;
            this.baseX = 0;
            this._selected = false;
        }
        SListItem.prototype.addUI = function ($ui) {
            this._list.push($ui);
        };
        SListItem.prototype.create = function ($container, $bgRender, $baseRender, $customizeRenderAry) {
            if ($customizeRenderAry === void 0) { $customizeRenderAry = null; }
            this._bgRender = $bgRender;
            this._baseRender = $baseRender;
            this._customRenderAry = $customizeRenderAry;
        };
        SListItem.prototype.render = function ($data) {
        };
        //新加重新绘制
        SListItem.prototype.refreshDraw = function () {
        };
        SListItem.prototype.setSelect = function () {
            this.parentTarget.setSelect(this);
        };
        SListItem.prototype.unSetSelect = function () {
            this.selected = false;
        };
        Object.defineProperty(SListItem.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (val) {
                this._selected = val;
            },
            enumerable: true,
            configurable: true
        });
        SListItem.prototype.creatSUI = function (render, baseAtlas, $name, x, y, width, height) {
            var obj = baseAtlas.getLayoutData($name);
            var key = $name + this.index;
            this.uiAtlas.addConfig(key, this.index, obj.rect);
            var ui = render.creatBaseComponent(key);
            var obj = new Object;
            ui.name = $name;
            ui.x = obj.x = x;
            ui.y = obj.y = y;
            ui.width = obj.width = width;
            ui.height = obj.height = height;
            ui.baseRec = obj;
            this._list.push(ui);
            return ui;
        };
        SListItem.prototype.creatGrid9Component = function (render, $skinName, WW, WH) {
            var ui = new Pan3d.Grid9Compenent();
            var $gridRect = this.uiAtlas.getGridRec($skinName);
            $gridRect.ogw = WW;
            $gridRect.ogh = WH;
            ui.tr.setRec($gridRect);
            ui.ogw = $gridRect.ogw;
            ui.ogh = $gridRect.ogh;
            ui.gw = ui.ogw / $gridRect.pixelWitdh;
            ui.gh = ui.ogh / $gridRect.pixelHeight;
            ui.tr.setRec($gridRect);
            ui.skinName = $skinName;
            ui.uiRender = render;
            return ui;
        };
        //WH为9宫格参数
        SListItem.prototype.creatGrid9SUI = function (render, baseAtlas, $name, x, y, width, height, WW, WH) {
            if (WW === void 0) { WW = 5; }
            if (WH === void 0) { WH = 5; }
            var obj = baseAtlas.getLayoutData($name);
            var key = $name + this.index;
            this.uiAtlas.addConfig(key, this.index, obj.rect);
            var ui = this.creatGrid9Component(render, key, WW, WH);
            var obj = new Object;
            ui.name = $name;
            ui.x = obj.x = x;
            ui.y = obj.y = y;
            ui.width = obj.width = width;
            ui.height = obj.height = height;
            ui.baseRec = obj;
            this._list.push(ui);
            return ui;
        };
        SListItem.prototype.getHeight = function () {
            return this._height;
        };
        SListItem.prototype.setItemUiX = function (ui, xpos) {
            ui.baseRec.x = xpos;
            this.setY(this._sy);
        };
        SListItem.prototype.setY = function ($sy) {
            this._sy = $sy;
            var offset = $sy + this.baseY;
            for (var i = 0; i < this._list.length; i++) {
                this._list[i].y = this._list[i].baseRec.y + offset;
                this._list[i].x = this._list[i].baseRec.x + this.baseX;
            }
        };
        SListItem.prototype.setX = function ($sx) {
            this._sx = $sx;
            var offset = $sx + this.baseX;
            for (var i = 0; i < this._list.length; i++) {
                this._list[i].y = this._list[i].baseRec.y + this.baseY;
                this._list[i].x = this._list[i].baseRec.x + offset;
            }
        };
        return SListItem;
    }());
    Pan3d.SListItem = SListItem;
    var SListItemData = /** @class */ (function () {
        function SListItemData() {
            //是否选中
            this.selected = false;
        }
        return SListItemData;
    }());
    Pan3d.SListItemData = SListItemData;
    var SListBgRender = /** @class */ (function (_super) {
        __extends(SListBgRender, _super);
        function SListBgRender() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SListBgRender.prototype.interactiveEvent = function ($e) {
            _super.prototype.interactiveEvent.call(this, $e);
            var tf = this.slist.interactiveEvent($e);
            return tf;
        };
        return SListBgRender;
    }(Pan3d.UIRenderComponent));
    Pan3d.SListBgRender = SListBgRender;
    var SlistFrontRender = /** @class */ (function (_super) {
        __extends(SlistFrontRender, _super);
        function SlistFrontRender() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // public slist: SList;
        SlistFrontRender.prototype.interactiveEvent = function ($e) {
            return _super.prototype.interactiveEvent.call(this, $e);
            //return false;
        };
        return SlistFrontRender;
    }(Pan3d.UIRenderComponent));
    Pan3d.SlistFrontRender = SlistFrontRender;
    var SListAtlas = /** @class */ (function (_super) {
        __extends(SListAtlas, _super);
        function SListAtlas() {
            return _super.call(this) || this;
        }
        SListAtlas.prototype.setData = function ($width, $height, $xnum, $ynum) {
            this.ctx = Pan3d.UIManager.getInstance().getContext2D($width, $height, false);
            this.width = $width;
            this.height = $height;
            this.textureRes = Pan3d.TextureManager.getInstance().getCanvasTexture(this.ctx);
            this.xNum = $xnum;
            this.yNum = $ynum;
            this.itemWidth = $width / this.xNum;
            this.itemHeight = $height / this.yNum;
            this.configData = new Array;
            // for (var i: number = 0; i < itemNum; i++){
            //     var rec: any = new Object;
            //     rec.ox = 0;
            //     rec.oy = i * itemHeight;
            //     rec.ow = itemWidth;
            //     rec.oh = itemHeight;
            //     rec.x = 0;
            //     rec.y = i * itemHeight / $height;
            //     rec.width = itemWidth / $width;
            //     rec.height = itemHeight / $height;
            //     rec.name = i.toString();
            //     this.configData.push(rec);
            // }
        };
        SListAtlas.prototype.addConfig = function ($name, $index, $baseRec) {
            var rec = new Object;
            var bx = ($index % this.xNum) * this.itemWidth;
            var by = float2int($index / this.xNum) * this.itemHeight;
            rec.ox = bx + $baseRec.x;
            rec.oy = by + $baseRec.y;
            rec.ow = $baseRec.width;
            rec.oh = $baseRec.height;
            rec.x = rec.ox / this.width;
            rec.y = rec.oy / this.height;
            rec.width = rec.ow / this.width;
            rec.height = rec.oh / this.height;
            rec.name = $name;
            this.configData.push(rec);
        };
        return SListAtlas;
    }(Pan3d.UIAtlas));
    Pan3d.SListAtlas = SListAtlas;
    /**
     * 带特效的list
     */
    var EffectSlist = /** @class */ (function (_super) {
        __extends(EffectSlist, _super);
        function EffectSlist() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._effRender = new Pan3d.FrameUIRender();
            return _this;
        }
        EffectSlist.prototype.setEffectUrl = function ($name, $wnum, $hNum, num) {
            var _this = this;
            if (num === void 0) { num = 1; }
            if (this.effList && this.effList.length > 0) {
                this.effectComplte();
            }
            else {
                this._effRender.setImg(getEffectUIUrl($name), $wnum, $hNum, function ($ary) {
                    if (num == 1) {
                        _this.effList = new Array;
                        _this.effList.push($ary);
                    }
                    else {
                        _this.effList = $ary;
                    }
                    _this.effectComplte();
                }, num);
            }
        };
        EffectSlist.prototype.initComplte = function () {
            this.addRender(this._effRender);
            this._effRender.mask = this.bgMask;
        };
        EffectSlist.prototype.effectComplte = function () {
        };
        EffectSlist.prototype.refreshResultPos = function () {
            _super.prototype.refreshResultPos.call(this);
            if (this.effList) {
                for (var i = 0; i < this.effList.length; i++) {
                    this.effList[i].y = this.effList[i].baseRec.y + this.p_scrollY;
                    this.effList[i].x = this.effList[i].baseRec.x + this.p_scrollX;
                }
            }
        };
        EffectSlist.prototype.playEffect = function ($id, $x, $y, $scaleW, $scaleH, $speed) {
            if ($speed === void 0) { $speed = 3; }
            if (this.effList && this.effList.length > 0) {
                this.effList[$id].x = $x;
                this.effList[$id].baseRec.y = $y;
                this.effList[$id].baseRec.x = $x;
                this.effList[$id].y = $y + this.p_scrollY;
                this.effList[$id].width = this.effList[$id].baseRec.width * $scaleW;
                this.effList[$id].height = this.effList[$id].baseRec.height * $scaleH;
                this.effList[$id].speed = $speed;
                this.effList[$id].playOne(this);
            }
        };
        EffectSlist.prototype.effplay = function ($effui) {
            if (!$effui.parent) {
                this.addChild($effui);
                $effui.play();
            }
        };
        EffectSlist.prototype.showEffect = function ($id, $x, $y, $scaleW, $scaleH, $speed) {
            if ($speed === void 0) { $speed = 3; }
            if (this.effList && this.effList.length > 0) {
                this.effList[$id].x = $x;
                this.effList[$id].baseRec.y = $y;
                this.effList[$id].baseRec.x = $x;
                this.effList[$id].y = $y + this.p_scrollY;
                this.effList[$id].width = this.effList[$id].baseRec.width * $scaleW;
                this.effList[$id].height = this.effList[$id].baseRec.height * $scaleH;
                this.effList[$id].speed = $speed;
                this.effplay(this.effList[$id]);
            }
        };
        //0表示全部隐藏
        EffectSlist.prototype.hideEffect = function ($id) {
            if ($id === void 0) { $id = -1; }
            if (this.effList && this.effList.length > 0) {
                if ($id == -1) {
                    for (var i = 0; i < this.effList.length; i++) {
                        if (this.effList[i].parent) {
                            this.effList[i].parent.removeChild(this.effList[i]);
                        }
                    }
                }
                else {
                    if ($id < this.effList.length && $id >= 0) {
                        if (this.effList[$id].parent) {
                            this.effList[$id].parent.removeChild(this.effList[$id]);
                        }
                    }
                }
            }
        };
        EffectSlist.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._effRender.dispose();
        };
        return EffectSlist;
    }(SList));
    Pan3d.EffectSlist = EffectSlist;
    /**
     * 横向单行滑动的Slist
     */
    var TransverseSList = /** @class */ (function (_super) {
        __extends(TransverseSList, _super);
        function TransverseSList() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._minScrollX = 0;
            _this._mouseX = 0;
            return _this;
        }
        /**
         * $data 数据源
         *
         * UItemRender 渲染器
         *
         * $width 显示宽度
         *
         * $height 显示高度
         *
         * $itemWidth 每列宽度
         *
         * $itemHeight 每列高度
         *
         * $showItemNum 显示列数
         *
         * contentWidth 纹理宽
         *
         * contentHeight 纹理高
         *
         * contentX 纹理横向分割数
         *
         * contentY 纹理纵向分割数
         *
         */
        TransverseSList.prototype.setData = function ($data, UItemRender, $width, $height, $itemWidth, $itemHeight, $showItemNum, contentWidth, contentHeight, contentX, contentY, customRenderNum) {
            if (customRenderNum === void 0) { customRenderNum = 0; }
            //  //console.log("$data", $data);
            this.width = $width;
            this._height = $height;
            this.p_itemWidth = $itemWidth;
            this.p_itemHeight = $itemHeight;
            this._showIndexList = new Array;
            this._dataAry = $data;
            this._showItemNum = $showItemNum;
            this._allItemNum = contentX * contentY;
            this._contentX = contentX;
            this._contentY = contentY;
            this._outSize = (contentX - this._showItemNum) * $itemWidth;
            this._topSize = 0;
            this._bottomSize = this._outSize;
            this._showDataIndex = 0;
            this._sAtlas = new SListAtlas();
            this._sAtlas.setData(contentWidth, contentHeight, contentX, contentY);
            this.bgMask = new Pan3d.UIMask();
            this.bgMask.x = 0;
            this.bgMask.y = 0;
            this.bgMask.width = $width;
            this.bgMask.height = $height;
            this.bgMask.level = this._maskLevel;
            this.addMask(this.bgMask);
            this._bgRender = new SListBgRender();
            this._bgRender.uiAtlas = this._sAtlas;
            this._bgRender.slist = this;
            this.addRender(this._bgRender);
            this._baseRender = new SlistFrontRender();
            this._baseRender.uiAtlas = this._sAtlas;
            this.addRender(this._baseRender);
            this._bgRender.mask = this.bgMask;
            this._baseRender.mask = this.bgMask;
            //创建render
            var customRenderAry;
            if (customRenderNum != 0) {
                customRenderAry = new Array;
                for (var i = 0; i < customRenderNum; i++) {
                    var cRender = new SlistFrontRender();
                    cRender.uiAtlas = this._sAtlas;
                    this.addRender(cRender);
                    cRender.mask = this.bgMask;
                    customRenderAry.push(cRender);
                }
            }
            this._itemList = new Array;
            for (var i = 0; i < this._allItemNum; i++) {
                var item = new UItemRender();
                //item.itdata = $data[i];
                //基础位置
                item.baseX = float2int(i / contentY) * $itemWidth;
                item.baseY = (i % contentY) * $itemHeight;
                item.uiAtlas = this._sAtlas;
                item.index = i;
                item.parentTarget = this;
                item.create(this, this._bgRender, this._baseRender, customRenderAry);
                item.render(this._dataAry[i]);
                this._itemList.push(item);
                this._showIndexList.push(i);
            }
            this._minScrollX = this.width - float2int(this._dataAry.length / this._contentY) * this.p_itemWidth;
            this.scrollX(0);
            this.initComplte();
        };
        TransverseSList.prototype.changeMinScrollX = function () {
            this._minScrollX = this.width - float2int(this._dataAry.length / this._contentY) * this.p_itemWidth;
        };
        TransverseSList.prototype.refreshData = function ($data) {
            this._dataAry = $data;
            this._showIndexList = new Array;
            for (var i = 0; i < this._itemList.length; i++) {
                this._itemList[i].render(this._dataAry[i]);
                this._itemList[i].baseX = float2int(i / this._contentY) * this.p_itemWidth;
                this._showIndexList.push(i);
            }
            this._outSize = (this._contentX - this._showItemNum) * this.p_itemWidth;
            this._topSize = 0;
            this._bottomSize = this._outSize;
            this._showDataIndex = 0;
            this._minScrollX = this.width - float2int(this._dataAry.length / this._contentY) * this.p_itemWidth;
            this.scrollX(0);
            if (Math.ceil($data.length / this._contentY) <= this._showItemNum) {
                this.scrollLock = true;
            }
            else {
                this.scrollLock = false;
            }
        };
        TransverseSList.prototype.interactiveEvent = function ($e) {
            if ($e.type == Pan3d.InteractiveEvent.Down) {
                if (this.bgMask.testPoint($e.x, $e.y)) {
                    this._mouseX = $e.x;
                    if (!this.scrollLock) {
                        Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
                        Pan3d.Scene_data.uiStage.addEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
                    }
                    return true;
                }
                else {
                    return false;
                }
            }
            return false;
        };
        TransverseSList.prototype.onMove = function ($e) {
            var delatX = $e.x - this._mouseX;
            this._mouseX = $e.x;
            if (delatX < 0 && this.scrollLock) {
                return;
            }
            this.scrollX(delatX);
        };
        TransverseSList.prototype.onUp = function ($e) {
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Move, this.onMove, this);
            Pan3d.Scene_data.uiStage.removeEventListener(Pan3d.InteractiveEvent.Up, this.onUp, this);
        };
        TransverseSList.prototype.scrollX = function (val) {
            this._topSize -= val;
            this._bottomSize += val;
            if (this._topSize <= 0) { //下拉
                this._bottomflag = true;
                if (this._showDataIndex == 0) {
                    //到最顶了
                    this._topSize = 0;
                    this._bottomSize = this._outSize;
                    this.p_scrollX = 0;
                    this._topflag = false;
                }
                else {
                    var firstID = this._showIndexList[0];
                    var topX = this._itemList[firstID].baseX - this.p_itemWidth;
                    for (var i = 0; i < this._contentY; i++) {
                        var id = this._showIndexList.pop();
                        this._showIndexList.unshift(id);
                        this._itemList[id].baseX = topX;
                        this._itemList[id].render(this._dataAry[this._showDataIndex - 1]);
                        this._itemList[id].selected = (this.getCurrentSelectIndex() == (this._showDataIndex - 1));
                        this._showDataIndex--;
                    }
                    this._bottomSize -= this.p_itemWidth;
                    this._topSize += this.p_itemWidth;
                    this.p_scrollX += val;
                    this._topflag = true;
                }
            }
            else if (this._bottomSize <= 0) { //上拉
                this._topflag = true;
                if ((this._showDataIndex + this._allItemNum) >= this._dataAry.length) {
                    //到最底了
                    this._bottomSize = 0;
                    this._topSize = this._outSize;
                    this.p_scrollX = -(Math.ceil(this._dataAry.length / this._contentY) - this._showItemNum) * this.p_itemWidth;
                    this._bottomflag = false;
                }
                else {
                    this._bottomflag = true;
                    var lastID = this._showIndexList[this._showIndexList.length - 1];
                    var lastX = this._itemList[lastID].baseX + this.p_itemWidth;
                    for (var i = 0; i < this._contentY; i++) {
                        var id = this._showIndexList.shift();
                        this._showIndexList.push(id);
                        this._itemList[id].baseX = lastX;
                        this._itemList[id].render(this._dataAry[this._showDataIndex + this._allItemNum]);
                        this._itemList[id].selected = (this.getCurrentSelectIndex() == (this._showDataIndex + this._allItemNum));
                        this._showDataIndex++;
                    }
                    this._bottomSize += this.p_itemWidth;
                    this._topSize -= this.p_itemWidth;
                    this.p_scrollX += val;
                }
            }
            else if (this._showItemNum >= this._dataAry.length) {
                this._topflag = false;
                this._bottomflag = false;
                this.p_scrollX = 0;
            }
            else {
                this._topflag = true;
                this._bottomflag = true;
                this.p_scrollX += val;
            }
            //如果到底部无法滚动，则重置状态
            if (this.p_scrollX <= this._minScrollX && this._minScrollX < 0) {
                this.p_scrollX = this._minScrollX;
                this._topSize += val;
                this._bottomSize -= val;
                this._topflag = true;
                this._bottomflag = false;
            }
            this.refreshResultPos();
            //回调函数
            if (this.backFun) {
                this.backFun(this._topflag, this._bottomflag, val);
            }
        };
        TransverseSList.prototype.scrollIdx = function (idx) {
            var targetX = -this.p_itemWidth * idx;
            var sizeX = targetX - this.p_scrollX;
            var num = Math.ceil(Math.abs(sizeX) / this.p_itemWidth);
            sizeX = sizeX / num;
            for (var i = 0; i < num; i++) {
                this.scrollX(sizeX);
            }
        };
        TransverseSList.prototype.refreshResultPos = function () {
            for (var i = 0; i < this._itemList.length; i++) {
                this._itemList[i].setX(this.p_scrollX);
            }
            //特效存在的时候，特殊处理位置刷新
            if (this.effList) {
                for (var i = 0; i < this.effList.length; i++) {
                    // this.effList[i].y = this.effList[i].baseRec.y + this.p_scrollY;
                    this.effList[i].x = this.effList[i].baseRec.x + this.p_scrollX;
                }
            }
        };
        return TransverseSList;
    }(EffectSlist));
    Pan3d.TransverseSList = TransverseSList;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SList.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GridList = /** @class */ (function (_super) {
        __extends(GridList, _super);
        function GridList() {
            return _super.call(this) || this;
        }
        GridList.prototype.testPoint = function ($x, $y) {
            if ($x > this.absoluteX
                && $x < (this.absoluteX + this._showWidth * Pan3d.UIData.Scale)
                && $y > this.absoluteY
                && $y < (this.absoluteY + this._oHeight * Pan3d.UIData.Scale)) {
                return true;
            }
            else {
                return false;
            }
        };
        GridList.prototype.setGridData = function ($data, ItemRender, $wNum, itemWidth, itemHeight, contentWidth, contentHeight, $width, $height) {
            if ($width === void 0) { $width = 256; }
            if ($height === void 0) { $height = 300; }
            if (this.uiRender.uiAtlas) {
                this.uiRender.uiAtlas.dispose();
            }
            this.width = contentWidth;
            this.height = contentHeight;
            this._showWidth = $width;
            this._showHeight = $height;
            this.data = $data;
            this.wNum = $wNum;
            this._itemWidth = itemWidth;
            this._itemHeight = itemHeight;
            var atlas = new GridListAtlas();
            this.uiRender.setAtlas(atlas);
            atlas.setGridData(contentWidth, contentHeight, itemWidth, itemHeight, $wNum, $data.length);
            this._itemRenderAry = new Array;
            for (var i = 0; i < $data.length; i++) {
                var listItemRender = new ItemRender();
                listItemRender.setData($data[i], atlas, atlas.configData[i]);
                this._itemRenderAry.push(listItemRender);
            }
            this._oHeight = itemHeight * Math.ceil(this._itemRenderAry.length / this.wNum);
            if (this._oHeight > this._showHeight) {
                this._needScoller = true;
            }
            else {
                this._needScoller = false;
            }
            this.uiRender.applyObjData();
        };
        GridList.prototype.setGridItemData = function ($data, $idx) {
            var tf = this._itemRenderAry[$idx].listItemData.data ? true : false;
            this._itemRenderAry[$idx].setNewData($data);
            return tf;
        };
        GridList.prototype.setGridItemFun = function ($fun, $idx) {
            this._itemRenderAry[$idx].listItemData.clickFun = $fun;
        };
        GridList.prototype.clearItemByIndex = function ($idx) {
            for (var i = 0; i < this._itemRenderAry.length; i++) {
                if (this._itemRenderAry[i].listItemData.data && this._itemRenderAry[i].listItemData.data.dataIndex == $idx) {
                    this._itemRenderAry[i].setNewData(null);
                    this._itemRenderAry[i].listItemData.clickFun = null;
                }
            }
        };
        GridList.prototype.clearItemByPos = function ($pos) {
            this._itemRenderAry[$pos].setNewData(null);
            this._itemRenderAry[$pos].listItemData.clickFun = null;
        };
        GridList.prototype.redraw = function () {
            for (var i = 0; i < this._itemRenderAry.length; i++) {
                this._itemRenderAry[i].redraw();
            }
        };
        GridList.prototype.testItemClick = function ($xPos, $ypos) {
            var xpos = $xPos - this.absoluteX;
            var ypos = $ypos - this.absoluteY;
            var itemH = this._itemHeight * Pan3d.UIData.Scale;
            var itemW = this._itemWidth * Pan3d.UIData.Scale;
            var indexW = float2int(xpos / itemW);
            var indexH = float2int(ypos / itemH);
            var index = indexH * this.wNum + indexW;
            if (index >= this._itemRenderAry.length) {
                return;
            }
            this._itemRenderAry[index].click(xpos - (itemW * (indexW - 1)), ypos - (itemH * (indexH - 1)));
        };
        GridList.prototype.pushVaData = function (objData, i, beginIndex) {
            if (!this._itemRenderAry) {
                return 0;
            }
            var hNum = Math.ceil(this._itemRenderAry.length / this.wNum);
            var xitem = this._itemWidth / this.width;
            var yitem = this._itemHeight / this.height;
            for (var i = 0; i < hNum + 1; i++) {
                for (var j = 0; j < this.wNum + 1; j++) {
                    objData.vertices.push(j * xitem, -i * yitem, 0);
                    objData.uvs.push(j * xitem, i * yitem, 0);
                }
            }
            var allNum = (hNum) * (this.wNum);
            for (var j = 0; j < allNum; j++) {
                var num = j % this.wNum + float2int(j / this.wNum) * (this.wNum + 1);
                var i1 = num + beginIndex;
                var i2 = num + 1 + beginIndex;
                var i3 = num + this.wNum + 1 + beginIndex;
                var i4 = num + 1 + this.wNum + 1 + beginIndex;
                objData.indexs.push(i1, i2, i4, i1, i4, i3);
            }
            return beginIndex + (this._itemRenderAry.length + 1) * 2;
        };
        return GridList;
    }(Pan3d.List));
    Pan3d.GridList = GridList;
    var GridListAtlas = /** @class */ (function (_super) {
        __extends(GridListAtlas, _super);
        function GridListAtlas() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GridListAtlas.prototype.getAlphaImg = function ($width, $height) {
            var $ImageData = this.ctx.createImageData($width, $height);
            for (var i = 0; i < $ImageData.data.length; i++) {
                $ImageData.data[i] = 0;
            }
            return $ImageData;
        };
        GridListAtlas.prototype.setGridData = function ($width, $height, itemWidth, itemHeight, wNum, itemNum) {
            this.ctx = Pan3d.UIManager.getInstance().getContext2D($width, $height, false);
            this.ctx.fillStyle = "rgba(0,0,0,0.0)";
            this.ctx.fillRect(0, 0, $width, $height);
            this.textureRes = Pan3d.TextureManager.getInstance().getCanvasTexture(this.ctx);
            this.configData = new Array;
            var hNum = Math.ceil(itemNum / wNum);
            var flag = 0;
            for (var i = 0; i < hNum; i++) {
                for (var j = 0; j < wNum; j++) {
                    flag = i * wNum + j;
                    var rec = new Object;
                    rec.ox = j * itemWidth;
                    rec.oy = i * itemHeight;
                    rec.ow = itemWidth;
                    rec.oh = itemHeight;
                    rec.x = j * itemWidth / $width;
                    rec.y = i * itemHeight / $height;
                    rec.width = itemWidth / $width;
                    rec.height = itemHeight / $height;
                    rec.name = flag.toString();
                    this.configData.push(rec);
                }
            }
        };
        return GridListAtlas;
    }(Pan3d.ListAtlas));
    Pan3d.GridListAtlas = GridListAtlas;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GridList.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var CdRenderComponent = /** @class */ (function (_super) {
        __extends(CdRenderComponent, _super);
        function CdRenderComponent() {
            var _this = _super.call(this) || this;
            _this.initProgram();
            return _this;
        }
        CdRenderComponent.prototype.setVc = function () {
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].setVc(this.shader, i);
            }
            _super.prototype.setVc.call(this);
        };
        CdRenderComponent.prototype.initProgram = function () {
            Pan3d.ProgrmaManager.getInstance().registe(CdUIShader.CdUIShader, new CdUIShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(CdUIShader.CdUIShader);
            this.program = this.shader.program;
            this.uiProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui2");
            this.dataTProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "dataT");
        };
        CdRenderComponent.prototype.getComponent = function ($uiName) {
            var obj = this.uiAtlas.getLayoutData($uiName);
            var ui = this.creatBaseComponent(obj.dataItem[0]);
            ui.width = obj.rect.width;
            ui.height = obj.rect.height;
            ui.x = obj.rect.x;
            ui.y = obj.rect.y;
            ui.baseRec = obj.rect;
            ui.name = $uiName;
            return ui;
        };
        CdRenderComponent.prototype.creatBaseComponent = function ($skinName) {
            var ui = new CdUICompenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getRec($skinName);
            ui.tr.setRec(rec);
            ui.width = rec.pixelWitdh;
            ui.height = rec.pixelHeight;
            ui.uiRender = this;
            return ui;
        };
        return CdRenderComponent;
    }(Pan3d.UIRenderComponent));
    Pan3d.CdRenderComponent = CdRenderComponent;
    var CdUICompenent = /** @class */ (function (_super) {
        __extends(CdUICompenent, _super);
        function CdUICompenent() {
            var _this = _super.call(this) || this;
            _this.cdTotalnum = 0;
            _this.lastTime = 0;
            _this._skipNum = 0;
            //  public colorVer: Array<number> = [1, 0.5, 0, 0.5]
            _this.isRound = false;
            _this.visible = true;
            _this.clockwise = true;
            _this._skipNum = float2int(Math.random() * 360);
            return _this;
        }
        CdUICompenent.prototype.setCdNum = function (value) {
            this._skipNum = 360 * value;
        };
        Object.defineProperty(CdUICompenent.prototype, "isFinish", {
            get: function () {
                if (this._skipNum >= 360) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        CdUICompenent.prototype.update = function () {
            if (this.cdTotalnum != 0) {
                var n = (Pan3d.TimeUtil.getTimer() - this.lastTime) / this.cdTotalnum;
                if (n < 1) {
                    this.setCdNum(n);
                }
                else {
                    this.setCdNum(1);
                }
            }
            _super.prototype.update.call(this);
        };
        CdUICompenent.prototype.setVc = function (program, index) {
            var nk = ((this._skipNum % 360)) / 180 * Math.PI;
            Pan3d.Scene_data.context3D.setVc4fv(program, "dataTime[" + index + "]", [nk, this.clockwise ? 0 : 1, 0, 1]);
        };
        return CdUICompenent;
    }(Pan3d.UICompenent));
    var CdUIShader = /** @class */ (function (_super) {
        __extends(CdUIShader, _super);
        function CdUIShader() {
            return _super.call(this) || this;
        }
        CdUIShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        CdUIShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[20];" +
                "uniform vec4 ui2[20];" +
                "uniform vec4 dataTime[20];" +
                "varying vec2 v_pos;\n" +
                "varying vec2 u_pos;" +
                "varying vec4 v_dataTime;" +
                "void main(void)" +
                "{" +
                "   vec4 data = ui2[int(v2uv.z)];" +
                "   v_dataTime = dataTime[int(v2uv.z)];" +
                "   v_pos = vec2(v3Pos.x ,v3Pos.y);" +
                "   u_pos = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                "   data = ui[int(v2uv.z)];" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy * data.zw * 2.0;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        CdUIShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 u_pos;\n" +
                "varying vec2 v_pos;" +
                "varying vec4 v_dataTime;\n" +
                "void main(void)\n" +
                "{\n" +
                "float alpha =1.0;\n" +
                "float tx =v_pos.x*2.0 - 1.0;\n" +
                "float ty =v_pos.y*2.0 + 1.0;\n" +
                "float atanNum =atan(tx,ty);\n" +
                "vec4 infoUv = texture2D(s_texture, u_pos.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "if (tx>0.0) {\n" +
                "if (v_dataTime.x<atanNum) {\n" +
                "alpha=0.0;\n" +
                "}; \n" +
                "} else {\n" +
                "atanNum =atanNum+6.283;\n" +
                "if (v_dataTime.x<atanNum) {\n" +
                "alpha=0.0;\n" +
                "}; \n" +
                "}; \n" +
                "if (v_dataTime.y==1.0) {\n" +
                "alpha=1.0-alpha;\n" +
                "}; \n" +
                "gl_FragColor = infoUv*alpha;\n" +
                "}";
            return $str;
        };
        CdUIShader.CdUIShader = "CdUIShader";
        return CdUIShader;
    }(Pan3d.Shader3D));
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CdUICompenent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Disp2DBaseText = /** @class */ (function () {
        function Disp2DBaseText() {
            this.dtime = -1;
            this.time = 0;
            this.oldPos = new Pan3d.Vector2D();
        }
        Disp2DBaseText.prototype.needUpData = function ($pos) {
            if (this.oldPos.x != $pos.x || this.oldPos.y != $pos.y || Pan3d.Scene_data.cam3D.needChange) {
                this.oldPos.x = $pos.x;
                this.oldPos.y = $pos.y;
                return true;
            }
            return false;
        };
        Object.defineProperty(Disp2DBaseText.prototype, "rightTabInfoVo", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.makeData();
                this.time = 0;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Disp2DBaseText.prototype.makeData = function () {
        };
        Disp2DBaseText.prototype.update = function () {
        };
        //这需要优化矩阵不必要每次都更新
        Disp2DBaseText.prototype.Vector3DToVector2D = function ($pos) {
            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
            m.append(Pan3d.Scene_data.viewMatrx3D.clone());
            var p = m.transformVector($pos);
            var v2d = new Pan3d.Vector2D();
            v2d.x = ((p.x / p.w) + 1) * (Pan3d.Scene_data.stageWidth / 2) / Pan3d.UIData.Scale - this.ui.width / 2;
            v2d.y = ((-p.y / p.w) + 1) * (Pan3d.Scene_data.stageHeight / 2) / Pan3d.UIData.Scale - this.ui.height / 2;
            return v2d;
        };
        Disp2DBaseText.prototype.isEqualLastKey = function (value) {
            return false;
        };
        return Disp2DBaseText;
    }());
    Pan3d.Disp2DBaseText = Disp2DBaseText;
    //用于显示同屏2D容器，
    var Dis2DUIContianerPanel = /** @class */ (function (_super) {
        __extends(Dis2DUIContianerPanel, _super);
        function Dis2DUIContianerPanel($classVo, $rect, $num) {
            var _this = _super.call(this) || this;
            _this.width = Pan3d.UIData.designWidth;
            _this.height = Pan3d.UIData.designHeight;
            _this.creatBaseRender();
            _this.addRender(_this._baseRender);
            _this.mathSize($rect, $num);
            _this.initData($classVo, $rect, $num);
            return _this;
        }
        Dis2DUIContianerPanel.prototype.creatBaseRender = function () {
            this._baseRender = new Pan3d.UIRenderComponent;
        };
        //显示单元类, 尺寸，数量
        Dis2DUIContianerPanel.prototype.initData = function ($classVo, $rect, $num) {
            this._voNum = Math.floor($num);
            this._voRect = $rect;
            var kkwA = Math.pow(2, Math.ceil(Math.log($rect.x * $rect.width) / Math.log(2)));
            var kkhB = Math.pow(2, Math.ceil(Math.log($rect.x * $rect.width) / Math.log(2)));
            this._textureRect = new Pan3d.Rectangle(0, 0, kkwA, kkhB);
            this._baseRender.uiAtlas = new Pan3d.UIAtlas();
            var $uiAtlas = this._baseRender.uiAtlas;
            $uiAtlas.configData = new Array();
            $uiAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(this._textureRect.width, this._textureRect.height, false);
            $uiAtlas.textureRes = Pan3d.TextureManager.getInstance().getCanvasTexture($uiAtlas.ctx, 0, 1, 0);
            this.makeBaseUi($classVo);
            ;
        };
        Dis2DUIContianerPanel.prototype.mathSize = function ($rect, $num) {
            $rect.x = 0;
            $rect.y = 0;
            while ($rect.x * $rect.y < $num) {
                if ($rect.x * $rect.width > $rect.y * $rect.height) {
                    $rect.y++;
                }
                else {
                    $rect.x++;
                }
            }
        };
        //根据数量创建单元格UICompenent 并存在数组中，待需要时应用
        Dis2DUIContianerPanel.prototype.makeBaseUi = function ($classVo) {
            var $uiAtlas = this._baseRender.uiAtlas;
            this._uiItem = new Array();
            this._lostItem = new Array();
            for (var i = 0; i < this._voRect.x; i++) {
                for (var j = 0; j < this._voRect.y; j++) {
                    var $disp2DBaseText = new $classVo();
                    this._uiItem.push($disp2DBaseText);
                    $disp2DBaseText.parent = this._baseRender;
                    $disp2DBaseText.voRect = this._voRect;
                    $disp2DBaseText.textureStr = "id_" + i + "_" + j;
                    $uiAtlas.configData.push($uiAtlas.getObject($disp2DBaseText.textureStr, i * this._voRect.width, j * this._voRect.height, this._voRect.width, this._voRect.height, this._textureRect.width, this._textureRect.height));
                    $disp2DBaseText.ui = this._baseRender.creatBaseComponent($disp2DBaseText.textureStr);
                    $disp2DBaseText.ui.baseRec = this._voRect.clone();
                }
            }
        };
        //找到可用的单元 找到后赋值并添加ui到显示队列
        Dis2DUIContianerPanel.prototype.showTemp = function ($data) {
            this.clearLostItem();
            var empty;
            //找到上一个数据和现在是一样的对象.避免重复更新纹理
            for (var j = 0; j < this._uiItem.length; j++) {
                if (this._uiItem[j].rightTabInfoVo == null && this._uiItem[j].isEqualLastKey($data)) {
                    empty = this._uiItem[j];
                    break;
                }
            }
            if (!empty) {
                for (var i = 0; i < this._uiItem.length; i++) {
                    if (this._uiItem[i].rightTabInfoVo == null) {
                        empty = this._uiItem[i];
                        break;
                    }
                }
            }
            if (empty) {
                empty.rightTabInfoVo = $data;
                this.addChild(empty.ui);
            }
            else {
                this._lostItem.push($data);
            }
            return empty;
        };
        Dis2DUIContianerPanel.prototype.clearLostItem = function () {
            for (var i = (this._lostItem.length - 1); i > 0; i--) {
                if (this._lostItem[i].clear) {
                    this._lostItem.splice(i, 1);
                }
            }
        };
        Dis2DUIContianerPanel.prototype.playLost = function () {
            if (this._lostItem.length) {
                this.showTemp(this._lostItem.pop());
            }
        };
        Dis2DUIContianerPanel.prototype.clearOneTemp = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (!this._uiItem[i].rightTabInfoVo) {
                    return;
                }
            }
            this._lostItem.length = 0;
            this.clearTemp(this._uiItem[0].rightTabInfoVo);
        };
        //清理单元内的内容并需要将对象移出显示队例
        Dis2DUIContianerPanel.prototype.clearTemp = function ($data) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo == $data) {
                    this._uiItem[i].rightTabInfoVo = null;
                    this.removeChild(this._uiItem[i].ui);
                    break;
                }
            }
            this.playLost();
        };
        Dis2DUIContianerPanel.prototype.getVoByData = function (value) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo == value) {
                    return this._uiItem[i];
                }
            }
        };
        Dis2DUIContianerPanel.prototype.getVoByUi = function ($ui) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    if (this._uiItem[i].ui == $ui) {
                        return this._uiItem[i];
                    }
                }
            }
        };
        Dis2DUIContianerPanel.prototype.clearAll = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    this.clearTemp(this._uiItem[i].rightTabInfoVo);
                }
            }
        };
        Dis2DUIContianerPanel.prototype.update = function (t) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    this._uiItem[i].update();
                }
            }
            /*
            if (this.getUiItemLen() <( this._uiItem.length-1)) {
                this.playLost()
            }
            */
        };
        Dis2DUIContianerPanel.prototype.getUiItemLen = function () {
            var $num = 0;
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    $num++;
                }
            }
            return $num;
        };
        return Dis2DUIContianerPanel;
    }(Pan3d.Dis2DUIContianerBase));
    Pan3d.Dis2DUIContianerPanel = Dis2DUIContianerPanel;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Dis2DUIContianerPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var AlphaUIShader = /** @class */ (function (_super) {
        __extends(AlphaUIShader, _super);
        function AlphaUIShader() {
            return _super.call(this) || this;
        }
        AlphaUIShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        AlphaUIShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[40];" +
                "uniform vec4 ui2[40];" +
                "uniform float alpha[40];" +
                "varying vec2 v_texCoord;" +
                "varying float v_alpha;" +
                "void main(void)" +
                "{" +
                "   vec4 data = ui2[int(v2uv.z)];" +
                "   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                "   v_alpha = alpha[int(v2uv.z)];" +
                "   data = ui[int(v2uv.z)];" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy * data.zw * 2.0;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        AlphaUIShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "varying float v_alpha;" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "infoUv *=v_alpha;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        AlphaUIShader.AlphaUiShader = "AlphaUiShader";
        return AlphaUIShader;
    }(Pan3d.Shader3D));
    Pan3d.AlphaUIShader = AlphaUIShader;
    var AlphaUIRenderComponent = /** @class */ (function (_super) {
        __extends(AlphaUIRenderComponent, _super);
        function AlphaUIRenderComponent() {
            return _super.call(this) || this;
        }
        AlphaUIRenderComponent.prototype.update = function () {
            if (!this.visible || this._uiList.length == 0) {
                //  FpsMc.tipStr = "显示数:0";
                return;
            }
            Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].update();
                this._uiList[i].setVc(this.shader, i);
            }
            //  FpsMc.tipStr = "显示数:" + (this._uiList.length)
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            if (this.uiAtlas) {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.uiAtlas.texture, 0);
            }
            else {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
            }
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        AlphaUIRenderComponent.prototype.initData = function () {
            this._uiList = new Array;
            this.objData = new Pan3d.ObjData();
            Pan3d.ProgrmaManager.getInstance().registe(AlphaUIShader.AlphaUiShader, new AlphaUIShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(AlphaUIShader.AlphaUiShader);
            this.program = this.shader.program;
            this.uiProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui2");
            this.alphaLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "alpha");
        };
        AlphaUIRenderComponent.prototype.creatBaseComponent = function ($skinName) {
            var ui = new AlphaUICompenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getRec($skinName);
            ui.tr.setRec(rec);
            ui.width = rec.pixelWitdh;
            ui.height = rec.pixelHeight;
            ui.uiRender = this;
            return ui;
        };
        AlphaUIRenderComponent.prototype.creatGrid9Component = function ($skinName, $width, $height) {
            var ui = new AlphaGrid9UICompenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getGridRec($skinName);
            ui.tr.setRec(rec);
            ui.ogw = rec.ogw;
            ui.ogh = rec.ogh;
            ui.gw = ui.ogw / rec.pixelWitdh;
            ui.gh = ui.ogh / rec.pixelHeight;
            ui.width = $width;
            ui.height = $height;
            ui.uiRender = this;
            return ui;
        };
        AlphaUIRenderComponent.prototype.createFrame = function ($upskin) {
            var frameMc = new AlphaFrameCompenent;
            frameMc.skinName = $upskin;
            var rec = this.uiAtlas.getRec($upskin);
            frameMc.setFrameData(rec);
            frameMc.uiRender = this;
            return frameMc;
        };
        return AlphaUIRenderComponent;
    }(Pan3d.UIRenderComponent));
    Pan3d.AlphaUIRenderComponent = AlphaUIRenderComponent;
    var AlphaFrameCompenent = /** @class */ (function (_super) {
        __extends(AlphaFrameCompenent, _super);
        function AlphaFrameCompenent() {
            var _this = _super.call(this) || this;
            _this.alpha = 1;
            return _this;
        }
        AlphaFrameCompenent.prototype.setVc = function (program, index) {
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui[" + index + "]", this.renderData);
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui2[" + index + "]", this.renderData2);
            Pan3d.Scene_data.context3D.setVc1fv(program, "alpha[" + index + "]", [this.alpha]);
        };
        return AlphaFrameCompenent;
    }(Pan3d.FrameCompenent));
    Pan3d.AlphaFrameCompenent = AlphaFrameCompenent;
    var AlphaGrid9UICompenent = /** @class */ (function (_super) {
        __extends(AlphaGrid9UICompenent, _super);
        function AlphaGrid9UICompenent() {
            var _this = _super.call(this) || this;
            _this.alpha = 1;
            return _this;
        }
        AlphaGrid9UICompenent.prototype.setVc = function (program, index) {
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui[" + index + "]", this.renderData);
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui2[" + index + "]", this.renderData2);
            Pan3d.Scene_data.context3D.setVc1fv(program, "alpha[" + index + "]", [this.alpha]);
        };
        return AlphaGrid9UICompenent;
    }(Pan3d.Grid9Compenent));
    Pan3d.AlphaGrid9UICompenent = AlphaGrid9UICompenent;
    var AlphaUICompenent = /** @class */ (function (_super) {
        __extends(AlphaUICompenent, _super);
        function AlphaUICompenent() {
            var _this = _super.call(this) || this;
            _this.alpha = 1;
            return _this;
        }
        AlphaUICompenent.prototype.setVc = function (program, index) {
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui[" + index + "]", this.renderData);
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui2[" + index + "]", this.renderData2);
            Pan3d.Scene_data.context3D.setVc1fv(program, "alpha[" + index + "]", [this.alpha]);
        };
        return AlphaUICompenent;
    }(Pan3d.UICompenent));
    Pan3d.AlphaUICompenent = AlphaUICompenent;
    var AlphaUiContianer = /** @class */ (function (_super) {
        __extends(AlphaUiContianer, _super);
        function AlphaUiContianer($classVo, $rect, $num) {
            return _super.call(this, $classVo, $rect, $num) || this;
        }
        AlphaUiContianer.prototype.creatBaseRender = function () {
            this._baseRender = new AlphaUIRenderComponent;
        };
        return AlphaUiContianer;
    }(Pan3d.Dis2DUIContianerPanel));
    Pan3d.AlphaUiContianer = AlphaUiContianer;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AlphaUiContianer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var RoationUIShader = /** @class */ (function (_super) {
        __extends(RoationUIShader, _super);
        function RoationUIShader() {
            return _super.call(this) || this;
        }
        RoationUIShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        RoationUIShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[40];" +
                "uniform vec4 ui2[40];" +
                "uniform vec2 paix[40];" + //偏移
                "uniform float rotation[40];" +
                "uniform float sc;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   vec4 data = ui2[int(v2uv.z)];" +
                "   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                "   float angle = rotation[int(v2uv.z)];" +
                "   data = ui[int(v2uv.z)];" +
                "vec3 pos = vec3(0.0,0.0,0.0);" +
                /*
                "vec3 ptpos = vec3(v3Pos.x-0.5,v3Pos.y+0.5,0.0);" +
    
                "vec4 np = vec4(sin(angle), cos(angle), 0, 0);\n" +
                "pos.x = np.x * ptpos.y + np.y * ptpos.x;\n" +
                "pos.y = np.y * ptpos.y - np.x * ptpos.x;\n" +
    
                " pos.x = pos.x + 0.5;" +
                " pos.y = pos.y - 0.5;" +
                */
                "pos.x = v3Pos.x;" +
                "pos.y = v3Pos.y ;" +
                "pos.x = pos.x-0.5;" +
                "pos.y = pos.y+0.5 ;" +
                "pos.xy =pos.xy+ paix[int(v2uv.z)].xy;" +
                "pos.xy = pos.xy * data.zw * 2.0;" +
                "pos.y=pos.y/sc;" +
                "vec3 ptpos = pos;" +
                "vec4 np = vec4(sin(angle), cos(angle), 0, 0);\n" +
                "pos.x = np.x * ptpos.y + np.y * ptpos.x;\n" +
                "pos.y = np.y * ptpos.y - np.x * ptpos.x;\n" +
                "pos.y=pos.y*sc;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        RoationUIShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        RoationUIShader.RoationUiShader = "RoationUiShader";
        return RoationUIShader;
    }(Pan3d.Shader3D));
    Pan3d.RoationUIShader = RoationUIShader;
    var RoationUIRenderComponent = /** @class */ (function (_super) {
        __extends(RoationUIRenderComponent, _super);
        function RoationUIRenderComponent() {
            return _super.call(this) || this;
        }
        RoationUIRenderComponent.prototype.update = function () {
            if (!this.visible || this._uiList.length == 0) {
                //  FpsMc.tipStr = "显示数:0";
                return;
            }
            Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].update();
                this._uiList[i].setVc(this.shader, i);
            }
            //  FpsMc.tipStr = "显示数:" + (this._uiList.length)
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            if (this.uiAtlas) {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.uiAtlas.texture, 0);
            }
            else {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.texture, 0);
            }
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
        };
        RoationUIRenderComponent.prototype.initData = function () {
            this._uiList = new Array;
            this.objData = new Pan3d.ObjData();
            Pan3d.ProgrmaManager.getInstance().registe(RoationUIShader.RoationUiShader, new RoationUIShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(RoationUIShader.RoationUiShader);
            this.program = this.shader.program;
            this.uiProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui2");
            this.alphaLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "rotation");
        };
        RoationUIRenderComponent.prototype.creatBaseComponent = function ($skinName) {
            var ui = new RoationUICompenent();
            ui.skinName = $skinName;
            var rec = this.uiAtlas.getRec($skinName);
            ui.tr.setRec(rec);
            ui.width = rec.pixelWitdh;
            ui.height = rec.pixelHeight;
            ui.uiRender = this;
            return ui;
        };
        return RoationUIRenderComponent;
    }(Pan3d.UIRenderComponent));
    var RoationUICompenent = /** @class */ (function (_super) {
        __extends(RoationUICompenent, _super);
        function RoationUICompenent() {
            var _this = _super.call(this) || this;
            _this.rotation = 0.0;
            _this.aotuRotation = 0.0;
            _this.paix = new Pan3d.Vector2D(0, 0);
            return _this;
        }
        RoationUICompenent.prototype.setVc = function (program, index) {
            this.rotation += this.aotuRotation;
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui[" + index + "]", this.renderData);
            Pan3d.Scene_data.context3D.setVc4fv(program, "ui2[" + index + "]", this.renderData2);
            Pan3d.Scene_data.context3D.setVc2fv(program, "paix[" + index + "]", [this.paix.x, this.paix.y]);
            Pan3d.Scene_data.context3D.setVc1fv(program, "rotation[" + index + "]", [this.rotation * Math.PI / 180]);
            Pan3d.Scene_data.context3D.setVc1fv(program, "sc", [Pan3d.Scene_data.stageWidth / Pan3d.Scene_data.stageHeight]);
        };
        return RoationUICompenent;
    }(Pan3d.UICompenent));
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=RoationUiContianer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var FrameUIRender = /** @class */ (function (_super) {
        __extends(FrameUIRender, _super);
        function FrameUIRender() {
            return _super.call(this) || this;
        }
        FrameUIRender.prototype.setImg = function (url, wNum, hNum, fun, num) {
            var _this = this;
            if (num === void 0) { num = 1; }
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + url, function ($texture) {
                var ui = new Pan3d.UIAtlas;
                ui.textureRes = $texture;
                _this.uiAtlas = ui;
                if (num == 1) {
                    fun(_this.getFrameTipComponent(wNum, hNum));
                }
                else {
                    var ary = new Array;
                    for (var i = 0; i < num; i++) {
                        ary.push(_this.getFrameTipComponent(wNum, hNum));
                    }
                    fun(ary);
                }
            });
        };
        FrameUIRender.prototype.update = function () {
            _super.prototype.update.call(this);
            for (var i = this._uiList.length - 1; i >= 0; i--) {
                if (this._uiList[i] instanceof FrameTipCompenent) {
                    this._uiList[i].updateEnd();
                }
            }
        };
        FrameUIRender.prototype.getFrameTipComponent = function (wNum, hNum) {
            var frameTipCom = new FrameTipCompenent;
            var rec = new Pan3d.UIRectangle;
            rec.x = 0;
            rec.y = 0;
            rec.width = 1;
            rec.height = 1;
            rec.pixelWitdh = this.uiAtlas.textureRes.width;
            rec.pixelHeight = this.uiAtlas.textureRes.height;
            rec.pixelX = 0;
            rec.pixelY = 0;
            rec.type = 2;
            rec.cellX = wNum;
            rec.cellY = hNum;
            frameTipCom.setFrameData(rec);
            frameTipCom.uiRender = this;
            var rect = new Object;
            rect.width = this.uiAtlas.textureRes.width / wNum;
            rect.height = this.uiAtlas.textureRes.height / hNum;
            rect.x = 0;
            rect.y = 0;
            frameTipCom.width = rect.width;
            frameTipCom.height = rect.height;
            frameTipCom.x = rect.x;
            frameTipCom.y = rect.y;
            frameTipCom.baseRec = rect;
            return frameTipCom;
        };
        return FrameUIRender;
    }(Pan3d.UIRenderComponent));
    Pan3d.FrameUIRender = FrameUIRender;
    var FrameTipCompenent = /** @class */ (function (_super) {
        __extends(FrameTipCompenent, _super);
        function FrameTipCompenent() {
            return _super.call(this) || this;
        }
        FrameTipCompenent.prototype.playOne = function ($container) {
            if (!this.parent) {
                $container.addChild(this);
            }
            this.endFlag = false;
            this.goToAndPlay(0);
        };
        FrameTipCompenent.prototype.updateEnd = function () {
            if (this.endFlag) {
                this.parent.removeChild(this);
            }
        };
        return FrameTipCompenent;
    }(Pan3d.FrameCompenent));
    Pan3d.FrameTipCompenent = FrameTipCompenent;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=FrameUIRender.js.map
var Pan3d;
(function (Pan3d) {
    var IconManager = /** @class */ (function () {
        function IconManager() {
            this._dic = new Object;
            this._loadDic = new Object;
        }
        IconManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new IconManager();
            }
            return this._instance;
        };
        return IconManager;
    }());
    Pan3d.IconManager = IconManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=IconManager.js.map
var Pan3d;
(function (Pan3d) {
    var UiTweenVo = /** @class */ (function () {
        function UiTweenVo() {
            this._scale = 1;
        }
        Object.defineProperty(UiTweenVo.prototype, "ui", {
            get: function () {
                return this._ui;
            },
            set: function (value) {
                this._ui = value;
                this._baseRect = new Pan3d.Rectangle(this._ui.x, this._ui.y, this._ui.width, this._ui.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UiTweenVo.prototype, "scale", {
            get: function () {
                return this._scale;
            },
            set: function (value) {
                this._scale = value;
                this._ui.width = this._baseRect.width * this._scale;
                this._ui.height = this._baseRect.height * this._scale;
                this._ui.x = this._baseRect.x + (this._baseRect.width - this._ui.width) / 2;
                this._ui.y = this._baseRect.y + (this._baseRect.height - this._ui.height) / 2;
            },
            enumerable: true,
            configurable: true
        });
        UiTweenVo.prototype.destory = function () {
            this._ui = null;
            this._scale = null;
            this._baseRect = null;
        };
        UiTweenVo.getPosByPanel = function ($v2d, $layout, $toUIConatiner) {
            if ($layout === void 0) { $layout = null; }
            if ($toUIConatiner === void 0) { $toUIConatiner = null; }
            if (!this.baseUIConatiner) {
                this.baseUIConatiner = new Pan3d.UIConatiner;
            }
            this.baseUIConatiner.width = Pan3d.UIData.designWidth;
            this.baseUIConatiner.height = Pan3d.UIData.designHeight;
            this.baseUIConatiner.middle = 0;
            this.baseUIConatiner.center = 0;
            if ($layout) {
                for (var $key in $layout) {
                    this.baseUIConatiner[$key] = $layout[$key];
                }
            }
            this.baseUIConatiner.resize();
            var $toPos = new Pan3d.Vector2D;
            $toPos.x = $v2d.x + this.baseUIConatiner.x / Pan3d.UIData.Scale;
            $toPos.y = $v2d.y + this.baseUIConatiner.y / Pan3d.UIData.Scale;
            if ($toUIConatiner) {
                $toPos.x = $toPos.x - ($toUIConatiner.x / Pan3d.UIData.Scale);
                $toPos.y = $toPos.y - ($toUIConatiner.y / Pan3d.UIData.Scale);
            }
            return $toPos;
        };
        return UiTweenVo;
    }());
    Pan3d.UiTweenVo = UiTweenVo;
    var UiTweenScale = /** @class */ (function () {
        function UiTweenScale() {
        }
        UiTweenScale.getInstance = function () {
            if (!this._instance) {
                this._instance = new UiTweenScale();
            }
            return this._instance;
        };
        UiTweenScale.prototype.changeButSize = function ($ui) {
            var _this = this;
            if (this._uiTweenVo) {
                return;
            }
            this._uiTweenVo = new UiTweenVo;
            this._uiTweenVo.ui = $ui;
            this._uiTweenVo.scale = 1;
            TweenMoveTo(this._uiTweenVo, 0.07, { scale: 1.2, onComplete: function () { _this.changeButScale(); } });
        };
        UiTweenScale.prototype.changeButScale = function () {
            var _this = this;
            this._uiTweenVo.scale = 1.2;
            TweenMoveTo(this._uiTweenVo, 0.05, { scale: 1, onComplete: function () { _this.changeButEnd(); } });
        };
        UiTweenScale.prototype.changeButEnd = function () {
            this._uiTweenVo.destory();
            this._uiTweenVo = null;
        };
        return UiTweenScale;
    }());
    Pan3d.UiTweenScale = UiTweenScale;
    var UIManager = /** @class */ (function () {
        function UIManager() {
            this._eventItem = new Array;
            this.lastTime = 0;
            Pan3d.Scene_data.uiStage = new Pan3d.UIStage();
            Pan3d.Scene_data.uiBlankStage = new Pan3d.UIStage();
            this._canvas = document.createElement("canvas");
            this._canvas.style.zIndex = "3";
            this._canvas.width = 200;
            this._canvas.height = 200;
            this._canvas.style.left = 200;
            this._canvas.style.top = 300;
            this._ctx = this._canvas.getContext("2d");
            this._ctx.textBaseline = Pan3d.TextAlign.TOP;
        }
        UIManager.getInstance = function () {
            var _this = this;
            if (!this._instance) {
                this._instance = new UIManager();
                UIManager.popClikNameFun = function ($name, $id) {
                    if ($id === void 0) { $id = 0; }
                    _this.uiClikName($name, $id);
                };
            }
            return this._instance;
        };
        UIManager.uiClikName = function ($name, $id) {
        };
        UIManager.prototype.getContext2D = function ($width, $height, alianDefault) {
            if (alianDefault === void 0) { alianDefault = true; }
            this._canvas.width = $width;
            this._canvas.height = $height;
            this._ctx.clearRect(0, 0, $width, $height);
            alianDefault = true;
            if (alianDefault) {
                this._ctx.textBaseline = Pan3d.TextAlign.TOP;
                this._ctx.textAlign = Pan3d.TextAlign.LEFT;
            }
            return this._ctx;
        };
        UIManager.prototype.getGrayImageDatabyImg = function ($img) {
            var $ctx = UIManager.getInstance().getContext2D($img.width, $img.height, false);
            $ctx.drawImage($img, 0, 0);
            var $imgData = $ctx.getImageData(0, 0, $img.width, $img.height);
            var $gray;
            for (var i = 0; i < $imgData.data.length; i += 4) {
                $gray = Math.floor($imgData.data[i + 0] * 0.3) + Math.floor($imgData.data[i + 1] * 0.59) + Math.floor($imgData.data[i + 2] * 0.11);
                $imgData.data[i + 0] = $gray;
                $imgData.data[i + 1] = $gray;
                $imgData.data[i + 2] = $gray;
            }
            return $imgData;
        };
        UIManager.prototype.makeCtxToGray = function ($ctx, $rect) {
            var $imgData = $ctx.getImageData($rect.x, $rect.y, $rect.width, $rect.height);
            var $gray;
            for (var i = 0; i < $imgData.data.length; i += 4) {
                $gray = Math.floor($imgData.data[i + 0] * 0.3) + Math.floor($imgData.data[i + 1] * 0.59) + Math.floor($imgData.data[i + 2] * 0.11);
                $gray = $gray * 0.5 + 0.5;
                $imgData.data[i + 0] = $gray;
                $imgData.data[i + 1] = $gray;
                $imgData.data[i + 2] = $gray;
            }
            $ctx.putImageData($imgData, $rect.x, $rect.y);
        };
        UIManager.prototype.showCanvas = function ($x, $y) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            this._canvas.style.left = $x;
            this._canvas.style.top = $y;
            document.getElementById("root").appendChild(this._canvas);
        };
        UIManager.prototype.init = function () {
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.UIShader.UI_SHADER, new Pan3d.UIShader());
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.UIImageShader.UI_IMG_SHADER, new Pan3d.UIImageShader());
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.UIMaskShader.UI_MASK_SHADER, new Pan3d.UIMaskShader());
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.Movie2DShader.MOVIE2D_SHADER, new Pan3d.Movie2DShader());
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.Sprite2DShader.SPRITE2D_SHADER, new Pan3d.Sprite2DShader());
            this._uiList = new Array;
            this._containerList = new Array;
            //UIData.setDesignWH(600, 400);
            //UIData.setDesignWH(50 * 16, 50 * 9);
            Pan3d.UIData.setDesignWH(960, 540);
            //  UIData.setDesignWH(1280, 720);
        };
        UIManager.prototype.addUI = function ($ui) {
            var $id = 0;
            for (var i = this._uiList.length - 1; i >= 0; i--) {
                if (this._uiList[i].sortnum <= $ui.sortnum) {
                    $id = i + 1;
                    break;
                }
            }
            this._uiList.splice($id, 0, $ui);
            // this._uiList.push($ui)
            $ui.rendering = true;
        };
        UIManager.prototype.removeUI = function ($ui) {
            var index = this._uiList.indexOf($ui);
            $ui.rendering = false;
            if (index != -1) {
                this._uiList.splice(index, 1);
            }
        };
        UIManager.prototype.addUIContainer = function ($container) {
            if ($container.hasStage) {
                return;
            }
            this._containerList.push($container);
            $container.resize();
            for (var i = 0; i < $container.renderList.length; i++) {
                this.addUI($container.renderList[i]);
            }
            $container.hasStage = true;
        };
        UIManager.prototype.removeAll = function () {
            while (this._containerList.length) {
                ////console.log("this._containerList.length",this._containerList.length)
                this.removeUIContainer(this._containerList[this._containerList.length - 1]);
            }
        };
        UIManager.prototype.removeUIContainer = function ($container) {
            if (!$container.hasStage) {
                return;
            }
            var index = this._containerList.indexOf($container);
            $container.hasStage = false;
            if (index != -1) {
                this._containerList.splice(index, 1);
            }
            for (var i = 0; i < $container.renderList.length; i++) {
                this.removeUI($container.renderList[i]);
            }
        };
        UIManager.prototype.hasWindowUI = function () {
            return false;
        };
        UIManager.prototype.removeNoInterfaceUI = function () {
            for (var i = (this._containerList.length - 1); i >= 0; i--) {
                if (!this._containerList[i].interfaceUI) { //非主界面的时候
                    this.removeUIContainer(this._containerList[i]);
                }
            }
        };
        UIManager.prototype.resize = function () {
            if (!this._uiList) {
                return;
            }
            Pan3d.UIData.resize();
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].resize();
            }
            for (var i = 0; i < this._containerList.length; i++) {
                this._containerList[i].resize();
            }
        };
        UIManager.prototype.upBgGroundZero = function () {
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].container.layer == -1 || this._uiList[i].sortnum == -1) {
                    this._uiList[i].update();
                }
            }
        };
        UIManager.prototype.update = function () {
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].container.layer >= 0 && this._uiList[i].sortnum != -1) {
                    this._uiList[i].update();
                }
            }
        };
        //private _touch: any;
        UIManager.prototype.regEvent = function ($touce) {
            //this._touch = $touce;
            //this._touch.on("panstart panmove panend tap", ($e: any) => { this.onTouch($e) });
            // if (false) {
            //     if (Scene_data.isPc) {
            //         document.addEventListener(MouseType.MouseDown, ($evt: MouseEvent) => { this.onMouse($evt) });
            //         document.addEventListener(MouseType.MouseUp, ($evt: MouseEvent) => { this.onMouse($evt) });
            //         document.addEventListener(MouseType.MouseMove, ($evt: MouseEvent) => { this.onMouse($evt) });
            //     } else {
            //         document.addEventListener(MouseType.TouchStart, ($evt: TouchEvent) => { this.onTouch($evt) });
            //         document.addEventListener(MouseType.TouchEnd, ($evt: TouchEvent) => { this.onTouch($evt) });
            //         document.addEventListener(MouseType.TouchMove, ($evt: TouchEvent) => { this.onTouch($evt) });
            //     }
            // }
        };
        UIManager.prototype.onTouch = function ($e) {
            this.interactiveEvent($e);
        };
        UIManager.prototype.onMouse = function ($e) {
            this.interactiveEvent($e);
        };
        UIManager.prototype.interactiveEvent = function ($e) {
            var evt;
            var point = new Pan3d.Vector2D();
            if ($e instanceof MouseEvent) {
                if ($e.type == Pan3d.MouseType.MouseDown) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
                }
                else if ($e.type == Pan3d.MouseType.MouseUp) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                }
                else if ($e.type == Pan3d.MouseType.MouseMove) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
                }
                else if ($e.type == Pan3d.MouseType.MouseClick) {
                }
                //evt.x = $e.pageX;
                //evt.y = $e.pageY;
                point.x = $e.pageX;
                point.y = $e.pageY;
            }
            else {
                if ($e.type == Pan3d.MouseType.TouchStart) {
                    //$e.preventDefault();
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
                    if ($e.touches.length > 1) {
                        // evt = new InteractiveEvent(InteractiveEvent.PinchStart);
                        // this.lastSwipeDis = MathClass.math_distance($e.touches[0].clientX, $e.touches[0].clientY, $e.touches[1].clientX, $e.touches[1].clientY);
                        // this.lastSwipeRot = Math.atan2($e.touches[1].clientY - $e.touches[0].clientY, $e.touches[1].clientX - $e.touches[0].clientX);
                        point.x = $e.touches[$e.touches.length - 1].pageX;
                        point.y = $e.touches[$e.touches.length - 1].pageY;
                    }
                    else {
                        point.x = $e.pageX;
                        point.y = $e.pageY;
                    }
                }
                else if ($e.type == Pan3d.MouseType.TouchEnd) {
                    //alert("touseend");
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                    point.x = $e.changedTouches[0].pageX;
                    point.y = $e.changedTouches[0].pageY;
                }
                else if ($e.type == Pan3d.MouseType.TouchMove) {
                    //$e.preventDefault();
                    if ($e.touches.length > 1) {
                        evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Pinch);
                        evt.data = Pan3d.MathClass.math_distance($e.touches[0].clientX, $e.touches[0].clientY, $e.touches[1].clientX, $e.touches[1].clientY) / this.lastSwipeDis;
                        evt.roation = (Math.atan2($e.touches[1].clientY - $e.touches[0].clientY, $e.touches[1].clientX - $e.touches[0].clientX) - this.lastSwipeRot) * 180 / Math.PI;
                    }
                    else {
                        evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
                    }
                    point.x = $e.pageX;
                    point.y = $e.pageY;
                }
                if ($e.touches.length) {
                    for (var i = 0; i < $e.touches.length; i++) {
                        point.x = $e.touches[i].clientX;
                        point.y = $e.touches[i].clientY;
                    }
                }
            }
            ////console.log(point.x, point.y);
            this.mouseEvetData(evt, point);
        };
        UIManager.prototype.disMoveNnum = function (v2d, $num) {
            return Pan3d.Vector2D.distance(v2d, this.lastMousePos) < $num;
        };
        UIManager.prototype.mouseEvetData = function (evt, point) {
            UIManager.cando = true;
            if (Pan3d.Scene_data.verticalScene) {
                evt.x = point.y;
                evt.y = Pan3d.Scene_data.stageHeight - point.x;
            }
            else {
                evt.x = point.x;
                evt.y = point.y;
            }
            var tf = false;
            if (!tf) {
                for (var i = this._uiList.length - 1; i >= 0; i--) {
                    if (this._uiList[i]) {
                        if (this._uiList[i].container.interfaceUI == false) { //非主UI
                            if (this._uiList[i] && this._uiList[i].interactiveEvent(evt)) {
                                tf = true;
                                break;
                            }
                        }
                    }
                }
            }
            if (!tf) {
                for (var i = this._uiList.length - 1; i >= 0; i--) {
                    if (this._uiList[i]) {
                        if (this._uiList[i].container.interfaceUI == true) { //是主UI
                            if (this._uiList[i] && this._uiList[i].interactiveEvent(evt)) {
                                tf = true;
                                break;
                            }
                        }
                    }
                }
            }
            if (evt.type == Pan3d.InteractiveEvent.Down) {
                this.lastMousePos = new Pan3d.Vector2D(evt.x, evt.y);
                var dt = Pan3d.TimeUtil.getTimer() - this.lastTime;
                if (dt < 200) { //小于200毫秒就只认为是一次按下事件
                    return true;
                }
                this.lastTime = Pan3d.TimeUtil.getTimer();
            }
            var $uistageTemp = Pan3d.Scene_data.uiStage.interactiveEvent(evt);
            if (!tf) {
                Pan3d.Scene_data.uiBlankStage.interactiveEvent(evt);
                return $uistageTemp;
            }
            else {
                return true;
            }
        };
        UIManager.prototype.setUseMouseEventCon = function ($uiConatiner) {
            this._eventItem.length = 0;
            if ($uiConatiner) {
                this._eventItem.push($uiConatiner);
            }
        };
        UIManager.prototype.getObjectsUnderPoint = function (evt) {
            for (var i = this._uiList.length - 1; i >= 0; i--) {
                if (this._uiList[i]) {
                    if (this._uiList[i] && this._uiList[i].insetUi(evt)) {
                        return this._uiList[i].insetUi(evt);
                    }
                }
            }
            return null;
        };
        UIManager.prototype.getcurrentList = function () {
            var currentList = new Array();
            for (var i = this._uiList.length - 1; i > 0; i--) {
                if (this._eventItem.length) {
                    for (var j = 0; j < this._eventItem.length; j++) {
                        if (this._eventItem[j] == this._uiList[i].container) {
                            currentList.push(this._uiList[i]);
                            j = this._eventItem.length;
                            continue;
                        }
                    }
                }
                else {
                    currentList.push(this._uiList[i]);
                }
            }
            return currentList;
        };
        UIManager.cando = true; //  标记只会选择一次。此循环结束
        return UIManager;
    }());
    Pan3d.UIManager = UIManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UILoading = /** @class */ (function (_super) {
        __extends(UILoading, _super);
        function UILoading() {
            var _this = _super.call(this) || this;
            _this.width = Pan3d.UIData.designWidth;
            _this.height = Pan3d.UIData.designHeight;
            _this.center = 0;
            _this.middle = 0;
            _this.initData();
            return _this;
        }
        UILoading.getInstance = function () {
            if (!this._instance) {
                this._instance = new UILoading();
            }
            return this._instance;
        };
        UILoading.prototype.initData = function () {
            var _this = this;
            //var render:UIRenderComponent = new UIRenderComponent();
            this.atls = new Pan3d.UIAtlas();
            this.atls.configData = new Array;
            this.atls.configData.push(this.atls.getObject("load", 0, 0, 256, 256, 256, 256, 4, 4));
            this.atls.loadImgUrl("ui/load/ui_loding.png", function () { _this.loadCom(); });
        };
        UILoading.prototype.loadCom = function () {
            this._render = new Pan3d.UIRenderComponent();
            this._render.uiAtlas = this.atls;
            var ui = this._render.createFrame("load");
            this.addChild(ui);
            ui.speed = 1;
            ui.width = 100;
            ui.height = 100;
            ui.x = (Pan3d.UIData.designWidth - ui.width) / 2;
            ui.y = (Pan3d.UIData.designHeight - ui.height) / 2;
            // this.addRender(this._render);
        };
        UILoading.prototype.show = function () {
            //  UIManager.getInstance().addUIContainer(this);
        };
        UILoading.prototype.hide = function () {
            //    UIManager.getInstance().removeUIContainer(this);
        };
        return UILoading;
    }(Pan3d.UIConatiner));
    Pan3d.UILoading = UILoading;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UILoading.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var UIStage = /** @class */ (function (_super) {
        __extends(UIStage, _super);
        function UIStage() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UIStage.prototype.interactiveEvent = function (e) {
            var evtType = e.type;
            var eventMap = this._eventsMap;
            if (!eventMap) {
                return false;
            }
            var list = eventMap[evtType];
            if (!list) {
                return false;
            }
            var length = list.length;
            if (length == 0) {
                return false;
            }
            //for (var i: number = 0; i < length; i++) {
            //    var eventBin: any = list[i];
            //    eventBin.listener.call(eventBin.thisObject, e);
            //}
            for (var i = length - 1; i >= 0; i--) {
                var eventBin = list[i];
                eventBin.listener.call(eventBin.thisObject, e);
            }
            return true;
        };
        return UIStage;
    }(Pan3d.EventDispatcher));
    Pan3d.UIStage = UIStage;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UIStage.js.map
var Pan3d;
(function (Pan3d) {
    var PuiData = /** @class */ (function () {
        function PuiData() {
        }
        /** 方形高亮64*64 */
        PuiData.A_HIGHT_F = "A_hight_f";
        /** tab高亮边框10*10 */
        PuiData.TAB_HIGHT = "Tab_hight";
        /** 圆形高亮75*75 */
        PuiData.A_HIGHT_C = "A_hight_c";
        /** 关闭按钮43*41 */
        PuiData.A_DELETEBTN = "A_deletebtn";
        /** 真气图标27*27 */
        PuiData.A_ZHENQI = "A_zhenqi";
        /** 兽灵图标27*27 */
        PuiData.A_SHOULING = "A_SHOULING";
        /** 精华图标27*27 */
        PuiData.A_JINGHUA = "A_JINGHUA";
        /** 箭头36*44 */
        PuiData.A_JIANTOU = "A_jiantou";
        /** 物品框44*44 */
        PuiData.A_WUPINKUANG = "A_wupinkuang";
        /** 圆形黑框69*69 */
        PuiData.A_BLACK_C = "A_black_c";
        /** 方形黑框64*64 */
        PuiData.A_BLACK_F = "A_black_f";
        /** 黑色星星28*28 */
        PuiData.A_BLACK_START = "A_black_start";
        /** 亮色星星28*28 */
        PuiData.A_HIGHT_START = "A_hight_start";
        /** 圆形头像底色71*71 */
        PuiData.A_BLACK_BASE = "A_black_base ";
        /** 红点17*16 */
        PuiData.A_RED_POINT = "A_red_point";
        /** 银币25*23 */
        PuiData.A_YINBI = "A_yinbi";
        /** 元宝25*23 */
        PuiData.A_YUANBAO = "A_yuanbao";
        /** 帮贡25*25 */
        PuiData.A_BANGGONG = "A_banggong";
        /** 斗魂25*25 */
        PuiData.A_DOUHUN = "A_DOUHUN";
        /** 经验25*25 */
        PuiData.A_EXP = "A_EXP";
        /** 荣誉25*25 */
        PuiData.A_HONOR = "A_HONOR";
        /** 绑定元宝25*23 */
        PuiData.A_BANGYUAN = "A_bangyuan";
        /** 右边括号25*19 */
        PuiData.A_RIGHT_XING = "A_RIGHT_XING";
        /** 单独一个星字18*19 */
        PuiData.A_SSTART = "A_SSTART";
        /** 左边括号8*19 */
        PuiData.A_LEFT_XING = "A_LEFT_XING";
        /** 武器紫色62*62 */
        PuiData.A_GOODS_PURPLE = "A_GOODS_PURPLE";
        /** 武器蓝色62*62 */
        PuiData.A_GOODS_BLUE = "A_GOODS_BLUE";
        /** 武器红色62*62 */
        PuiData.A_GOODS_RED = "A_GOODS_RED";
        /** 武器绿色62*62 */
        PuiData.A_GOODS_GREEN = "A_GOODS_GREEN";
        /** 武器白色62*62 */
        PuiData.A_GOODS_WHITE = "A_GOODS_WHITE";
        /** 武器橙色62*62 */
        PuiData.A_GOODS_ORANGE = "A_GOODS_ORANGE";
        /** 金星背景24*23 */
        PuiData.A_START_BG = "A_START_BG";
        /** 金星24*23 */
        PuiData.A_START = "A_START";
        /** 链条65*65 */
        PuiData.A_CHAIN = "A_CHAIN";
        /** 已装备26*56 */
        PuiData.A_OK = "A_OK";
        /** 前往按钮78*46 */
        PuiData.A_QIANWANG = "A_QIANWANG";
        /** T左31*62 */
        PuiData.T_LEFT = "T_LEFT";
        /** T中8*62 */
        PuiData.T_MID = "T_MID";
        /** T右60*62 */
        PuiData.T_RIGHT = "T_RIGHT";
        /** E左31*62 */
        PuiData.E_LEFT = "E_LEFT";
        /** E中8*62 */
        PuiData.E_MID = "E_MID";
        /** E右60*62 */
        PuiData.E_RIGHT = "E_RIGHT";
        /** F左31*62 */
        PuiData.F_LEFT = "F_LEFT";
        /** F中8*62 */
        PuiData.F_MID = "F_MID";
        /** F右60*62 */
        PuiData.F_RIGHT = "F_RIGHT";
        /** 22*22的物品框 */
        PuiData.A_F_22 = "A_F_22";
        /** 66*66的人物头像框 */
        PuiData.A_BLACK_BASE_66 = "A_BLACK_BASE_66 ";
        /** 66*66的人物头像框亮 */
        PuiData.A_HIGHR_C_66 = "A_HIGHR_C_66";
        /** 22*19Vip的V */
        PuiData.A_V = "A_V";
        /** 8*8赠送物品格的背景 */
        PuiData.A_GIVING_BG = "A_GIVING_BG";
        /** 24*24减号 */
        PuiData.B_SUB = "B_SUB";
        /** 90*90家族头像底框 */
        PuiData.A_FACTION_ICON = "A_FACTION_ICON";
        /** 30*30选中勾选框 */
        PuiData.SELECT_1 = "SELECT_1";
        /** 30*30未选中勾选框 */
        PuiData.SELECT_0 = "SELECT_0";
        /** 15*16排行榜用到的阶字 */
        PuiData.A_JIE = "A_JIE";
        /** 15*16排行榜用到的星字 */
        PuiData.A_XING = "A_XING";
        /** 系统提示文字北京 */
        PuiData.T_tips_txt_bg = "T_tips_txt_bg";
        /** Item底51*51 */
        PuiData.ITEMBG = "ITEMBG";
        /** 左边任务背景 */
        PuiData.A_quest_top = "A_quest_top";
        PuiData.A_quest_mid = "A_quest_mid";
        PuiData.A_quest_bottom = "A_quest_bottom";
        /** 左边任务<主> */
        PuiData.A_quest_ion0 = "A_quest_ion0";
        /** 左边任务<支> */
        PuiData.A_quest_ion1 = "A_quest_ion1";
        /** 左边任务<奇> */
        PuiData.A_quest_ion2 = "A_quest_ion2";
        /** 左边任务<活> */
        PuiData.A_quest_ion3 = "A_quest_ion3";
        /** 左边任务<完成> */
        PuiData.A_quest_finish = "A_quest_finish";
        PuiData.S_sys_tip0 = "S_sys_tip0";
        PuiData.S_sys_tip1 = "S_sys_tip1";
        /** 站力文字 */
        PuiData.A_zhanli_label = "A_zhanli_label";
        PuiData.A_gou = "A_gou";
        PuiData.A_cha = "A_cha";
        /** 战斗飘字 50*25 */
        PuiData.TYPE3 = "TYPE3"; //闪避
        PuiData.TYPE5 = "TYPE5"; //晕眩
        PuiData.TYPE9 = "TYPE9"; //经验
        PuiData.TYPE7 = "TYPE7"; //攻击
        PuiData.B_ZHUFUZHI = "B_ZHUFUZHI"; //
        PuiData.B_DABAOJI = "B_DABAOJI"; //攻击
        PuiData.B_XIAOBAOJI = "B_XIAOBAOJI"; //攻击
        PuiData.B_JINGYAN = "B_JINGYAN"; //攻击
        PuiData.NewPicBg = "NewPicBg"; //图片底
        PuiData.Select = "Select"; //选中
        PuiData.CostBg = "CostBg"; //背景3
        PuiData.BG2 = "BG2"; //背景2
        PuiData.PropBg40 = "PropBg40"; //46*46新物品框
        PuiData.PropBg60 = "PropBg60"; //66*66新物品框
        PuiData.PropBg100 = "PropBg100"; //108*108新物品框
        PuiData.REWARD_BG1 = "REWARD_BG1"; //46*46主界面物品背景
        PuiData.SKILL_BG68 = "SKILL_BG68"; //68*68技能背景
        PuiData.SKILL_BG58 = "SKILL_BG58"; //58*58技能背景
        PuiData.BG6 = "BG6"; //通用背景6
        PuiData.Slist_nselect = "Slist_nselect"; //未选中边框
        PuiData.Slist_select = "Slist_select"; //选中边框
        PuiData.TXTBG = "TXTBG"; //文本底框
        PuiData.ARROW_TOP = "ARROW_TOP"; //上箭头
        PuiData.ARROW_RIGHT = "ARROW_RIGHT"; //右箭头
        PuiData.MASK = "MASK"; //遮罩
        PuiData.BTNADD = "BTNADD"; //添加按钮
        PuiData.BOSSBG76 = "BOSSBG76"; //boss头像底框76*76
        PuiData.BOSSBG64 = "BOSSBG64"; //boss头像底框64*64
        PuiData.CIRCL74 = "CIRCL74"; //圆形头像选中框
        PuiData.LISTITEMBG = "LISTITEMBG"; //slist条纹底
        PuiData.ADDITEM = "ADDITEM"; //加号35*35
        PuiData.HASSEL = "HASSEL"; //已放入背景27*27 .9
        PuiData.SKILL_LEV_BG = "SKILL_LEV_BG"; //技能等级背景53*18 
        PuiData.TITLEBG = "TITLEBG"; //称号背景40*35 .9
        PuiData.TITLEHIGHT = "TITLEHIGHT"; //称号选中46*45 .9
        PuiData.NEWLISTITEMBG = "NEWLISTITEMBG"; //新的item背景 随意拉伸
        PuiData.CHATBG = "CHATBG"; //聊天背景底框 .9
        PuiData.ITEMBIGBG = "ITEMBIGBG"; //底框 .9
        PuiData.I1bg_2 = "I1bg_2"; //福利底框 .9
        PuiData.I1bg_1 = "I1bg_1"; //福利底框 .9
        PuiData.ARROWUP = "ARROWUP"; //上箭头
        PuiData.ARROWDOWN = "ARROWDOWN"; //下箭头   
        PuiData.A_EQULEVBG = "A_EQULEVBG"; //品阶底41*17   
        PuiData.DISABLE = "DISABLE"; //不可用23*23  
        PuiData.EQUBG = "EQUBG"; //道具框粉色背景10*10
        PuiData.RESLISTBG = "RESLISTBG"; //资源获取背景10*10
        PuiData.A_CARD_C = "A_CARD_C"; //采集图标
        PuiData.A_CARD_G = "A_CARD_G"; //怪物图标
        PuiData.A_CARD_B = "A_CARD_B"; //押镖图标
        PuiData.RESBG = "RESBG"; //资源获取list背景
        PuiData.STATEUP_LISTBG = "STATEUP_LISTBG"; //境界突破list背景124*53
        PuiData.A_LEAGUELISTBG = "A_LEAGUELISTBG"; //联赛list背景76*33
        PuiData.TEAMLISTBG = "TEAMLISTBG"; //队伍list背景54*51 22*20 
        PuiData.A_JJ0 = "A_JJ0"; //境界提头
        PuiData.A_JJ1 = "A_JJ1"; //境界提头
        PuiData.A_JJ2 = "A_JJ2"; //境界提头
        PuiData.A_JJ3 = "A_JJ3"; //境界提头
        PuiData.A_JJ4 = "A_JJ4"; //境界提头
        PuiData.A_JJ5 = "A_JJ5"; //境界提头
        PuiData.A_JJ6 = "A_JJ6"; //境界提头
        PuiData.A_JJ7 = "A_JJ7"; //境界提头
        PuiData.A_JJ8 = "A_JJ8"; //境界提头
        PuiData.A_JJ9 = "A_JJ9"; //境界提头
        PuiData.A_JJ10 = "A_JJ10"; //境界提头
        return PuiData;
    }());
    Pan3d.PuiData = PuiData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=PuiData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TextureRes = /** @class */ (function (_super) {
        __extends(TextureRes, _super);
        function TextureRes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextureRes.prototype.destory = function () {
            Pan3d.Scene_data.context3D.deleteTexture(this.texture);
        };
        return TextureRes;
    }(Pan3d.ResCount));
    Pan3d.TextureRes = TextureRes;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TextureRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TextureManager = /** @class */ (function (_super) {
        __extends(TextureManager, _super);
        function TextureManager() {
            var _this = _super.call(this) || this;
            _this._loadDic = new Object();
            _this._resDic = new Object();
            _this.initDefaultLightMapTexture();
            return _this;
        }
        TextureManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new TextureManager();
            }
            return this._instance;
        };
        TextureManager.prototype.hasTexture = function ($url) {
            if (this._dic[$url]) {
                return true;
            }
            return false;
        };
        TextureManager.prototype.getTexture = function ($url, $fun, $wrapType, $info, $filteType, $mipmapType) {
            // if ($url.indexOf("zc_deng_00.png") != -1) {
            //    //console.log("22222");
            // }
            var _this = this;
            if ($wrapType === void 0) { $wrapType = 0; }
            if ($info === void 0) { $info = null; }
            if ($filteType === void 0) { $filteType = 0; }
            if ($mipmapType === void 0) { $mipmapType = 0; }
            if (this._dic[$url]) {
                if ($info) {
                    $fun(this._dic[$url], $info);
                }
                else {
                    $fun(this._dic[$url]);
                }
                this._dic[$url].useNum++;
                return;
            }
            var textureLoad = new TextureLoad($fun, $info, $url, $wrapType, $filteType, $mipmapType);
            if (this._loadDic[$url]) {
                var ary = this._loadDic[$url];
                ary.push(textureLoad);
                return;
            }
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push(textureLoad);
            if (this._resDic[$url]) {
                this.loadTextureCom(this._resDic[$url], textureLoad);
                delete this._resDic[$url];
            }
            else {
                Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.IMG_TYPE, function ($img, _info) {
                    _this.loadTextureCom($img, _info);
                }, textureLoad);
            }
        };
        TextureManager.prototype.getImageData = function ($url, $fun) {
            Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.IMG_TYPE, function ($img) {
                var ctx = Pan3d.UIManager.getInstance().getContext2D($img.width, $img.height, false);
                ctx.drawImage($img, 0, 0, $img.width, $img.height);
                var imgData = ctx.getImageData(0, 0, $img.width, $img.height);
                $fun(imgData);
            });
        };
        TextureManager.prototype.getImgResByurl = function ($url) {
            return this._resDic[$url];
        };
        TextureManager.prototype.addRes = function ($url, $img) {
            if (!this._dic[$url] && !this._resDic[$url]) {
                this._resDic[$url] = $img;
            }
        };
        TextureManager.prototype.addImgRes = function ($url, $img) {
            this._resDic[$url] = $img;
            var texture = Pan3d.Scene_data.context3D.getTexture($img);
            var textres = new Pan3d.TextureRes();
            textres.texture = texture;
            textres.width = $img.width;
            textres.height = $img.height;
            textres.useNum++;
            this._dic[$url] = textres;
        };
        TextureManager.prototype.getCanvasTexture = function (ctx, $wrap, $filter, $mipmap) {
            if ($wrap === void 0) { $wrap = 0; }
            if ($filter === void 0) { $filter = 0; }
            if ($mipmap === void 0) { $mipmap = 0; }
            var tres = new Pan3d.TextureRes;
            var texture = Pan3d.Scene_data.context3D.getTexture(ctx.canvas, $wrap, $filter, $mipmap);
            tres.texture = texture;
            return tres;
        };
        TextureManager.prototype.getImageDataTexture = function (imgdata) {
            var texture = Pan3d.Scene_data.context3D.getTexture(imgdata, 0, 0);
            return texture;
        };
        TextureManager.prototype.getTextureRes = function ($img) {
            var tres = new Pan3d.TextureRes;
            var texture = Pan3d.Scene_data.context3D.getTexture($img, 0, 0);
            tres.texture = texture;
            return tres;
        };
        TextureManager.prototype.updateTexture = function ($texture, $offsetx, $offsety, ctx) {
            Pan3d.Scene_data.context3D.updateTexture($texture, $offsetx, $offsety, ctx.canvas);
        };
        TextureManager.prototype.loadCubeTexture = function ($url, $fun) {
            var cubeMapLoad = new CubemapLoad();
            cubeMapLoad.loadCube($url, function ($cubeList) { $fun($cubeList); });
        };
        TextureManager.prototype.loadTextureCom = function ($img, _info) {
            var texture = Pan3d.Scene_data.context3D.getTexture($img, _info.wrap, _info.filter, _info.mipmap);
            var textres = new Pan3d.TextureRes();
            textres.texture = texture;
            textres.width = $img.width;
            textres.height = $img.height;
            var ary = this._loadDic[_info.url];
            for (var i = 0; i < ary.length; i++) {
                if (ary[i].info) {
                    ary[i].fun(textres, ary[i].info);
                }
                else {
                    ary[i].fun(textres);
                }
                textres.useNum++;
            }
            delete this._loadDic[_info.url];
            this._dic[_info.url] = textres;
        };
        TextureManager.prototype.initDefaultLightMapTexture = function () {
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            canvas.width = 32;
            canvas.height = 32;
            ctx.fillStyle = "rgb(" + 255 / 5 + "," + 255 / 5 + "," + 255 / 5 + ")";
            ctx.fillRect(0, 0, 32, 32);
            this.defaultLightMap = Pan3d.Scene_data.context3D.getTexture(canvas);
        };
        TextureManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        return TextureManager;
    }(Pan3d.ResGC));
    Pan3d.TextureManager = TextureManager;
    var TextureLoad = /** @class */ (function () {
        function TextureLoad($fun, $info, $url, $wrap, $filter, $mipmap) {
            this.fun = $fun;
            this.info = $info;
            this.url = $url;
            this.wrap = $wrap;
            this.filter = $filter;
            this.mipmap = $mipmap;
        }
        return TextureLoad;
    }());
    Pan3d.TextureLoad = TextureLoad;
    var CubemapLoad = /** @class */ (function () {
        function CubemapLoad() {
            this.ary = new Array(6);
            this.flagNum = 0;
        }
        CubemapLoad.prototype.loadCube = function ($url, $fun) {
            var _this = this;
            this.fun = $fun;
            for (var i = 0; i < 6; i++) {
                var itemUrl = $url + "0" + (i + 1) + ".jpg";
                console.log(itemUrl);
                Pan3d.LoadManager.getInstance().load(itemUrl, Pan3d.LoadManager.IMG_TYPE, function ($img, $info) { _this.loadCom($img, $info); }, { "id": i });
            }
        };
        CubemapLoad.makeTempCubeTextture = function ($img) {
            var wh = $img.width / 4;
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            canvas.width = wh;
            canvas.height = wh;
            var renderContext = Pan3d.Scene_data.context3D.renderContext;
            var texture = renderContext.createTexture();
            renderContext.bindTexture(renderContext.TEXTURE_CUBE_MAP, texture);
            ctx.drawImage($img, wh * 2, wh, wh, wh, 0, 0, wh, wh); //right
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_POSITIVE_X, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            ctx.drawImage($img, 0, wh, wh, wh, 0, 0, wh, wh); //left
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            ctx.drawImage($img, wh, 0, wh, wh, 0, 0, wh, wh); //top
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            ctx.drawImage($img, wh, wh * 2, wh, wh, 0, 0, wh, wh); //bottom
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            ctx.drawImage($img, wh, wh, wh, wh, 0, 0, wh, wh); //front
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            ctx.drawImage($img, wh * 3, wh, wh, wh, 0, 0, wh, wh); //back
            renderContext.texImage2D(renderContext.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, renderContext.RGBA, renderContext.RGBA, renderContext.UNSIGNED_BYTE, canvas);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MAG_FILTER, renderContext.LINEAR);
            renderContext.texParameteri(renderContext.TEXTURE_CUBE_MAP, renderContext.TEXTURE_MIN_FILTER, renderContext.LINEAR);
            return texture;
        };
        CubemapLoad.prototype.loadCom = function ($img, $info) {
            this.ary[$info.id] = CubemapLoad.makeTempCubeTextture($img);
            this.flagNum++;
            if (this.flagNum == 6) {
                this.fun(this.ary);
            }
        };
        return CubemapLoad;
    }());
    Pan3d.CubemapLoad = CubemapLoad;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TextureManager.js.map
/**
*
*
* pramaType 0 表示无类型 1表示 float 2表示 vec2 3表示vec3
*/
var Pan3d;
(function (Pan3d) {
    var ConstItem = /** @class */ (function () {
        function ConstItem() {
            this.value = new Pan3d.Vector3D;
            this.offset = 0;
        }
        Object.defineProperty(ConstItem.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value;
                this.name = "fc" + value;
                this.offset = value * 4;
            },
            enumerable: true,
            configurable: true
        });
        ConstItem.prototype.creat = function ($vc) {
            this.vecNum = $vc;
            this.vecNum[0 + this.offset] = this.value.x;
            this.vecNum[1 + this.offset] = this.value.y;
            this.vecNum[2 + this.offset] = this.value.z;
            this.vecNum[3 + this.offset] = this.value.w;
        };
        ConstItem.prototype.setData = function (obj) {
            this.id = obj.id;
            this.value = new Pan3d.Vector3D(obj.value.x, obj.value.y, obj.value.z, obj.value.w);
            this.paramName0 = obj.paramName0;
            this.param0Type = obj.param0Type;
            this.param0Index = obj.param0Index;
            this.paramName1 = obj.paramName1;
            this.param1Type = obj.param1Type;
            this.param1Index = obj.param1Index;
            this.paramName2 = obj.paramName2;
            this.param2Type = obj.param2Type;
            this.param2Index = obj.param2Index;
            this.paramName3 = obj.paramName3;
            this.param3Type = obj.param3Type;
            this.param3Index = obj.param3Index;
        };
        ConstItem.prototype.setDynamicOffset = function ($dynamic) {
            if (this.paramName0 == $dynamic.paramName) {
                $dynamic.targetOffset = this.param0Index + this.offset;
            }
            else if (this.paramName1 == $dynamic.paramName) {
                $dynamic.targetOffset = this.param1Index + this.offset;
            }
            else if (this.paramName2 == $dynamic.paramName) {
                $dynamic.targetOffset = this.param2Index + this.offset;
            }
            else if (this.paramName3 == $dynamic.paramName) {
                $dynamic.targetOffset = this.param3Index + this.offset;
            }
        };
        ConstItem.prototype.setDynamicDirect = function ($ary, $offset) {
            this.vecNum.set($ary, $offset);
        };
        ConstItem.prototype.setDynamic = function ($dynamic) {
            try {
                this.vecNum.set($dynamic.currentValue, $dynamic.targetOffset);
            }
            catch (err) {
                //console.log("在此处理错误2");
            }
            /**
            if (this.paramName0 == $dynamic.paramName) {
                if (this.param0Type == 1) {
                    this.vecNum[this.param0Index + this.offset] = $dynamic.currentValue.x;
                } else if (this.param0Type == 2) {
                    this.vecNum[this.param0Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param0Index + 1 + this.offset] = $dynamic.currentValue.y;
                } else if (this.param0Type == 3) {
                    this.vecNum[this.param0Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param0Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param0Index + 2 + this.offset] = $dynamic.currentValue.z;
                } else if (this.param0Type == 4) {
                    this.vecNum[this.param0Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param0Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param0Index + 2 + this.offset] = $dynamic.currentValue.z;
                    this.vecNum[this.param0Index + 3 + this.offset] = $dynamic.currentValue.w;
                }
            } else if (this.paramName1 == $dynamic.paramName) {
                if (this.param1Type == 1) {
                    this.vecNum[this.param1Index + this.offset] = $dynamic.currentValue.x;
                } else if (this.param1Type == 2) {
                    this.vecNum[this.param1Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param1Index + 1 + this.offset] = $dynamic.currentValue.y;
                } else if (this.param1Type == 3) {
                    this.vecNum[this.param1Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param1Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param1Index + 2 + this.offset] = $dynamic.currentValue.z;
                } else if (this.param1Type == 4) {
                    this.vecNum[this.param1Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param1Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param1Index + 2 + this.offset] = $dynamic.currentValue.z;
                    this.vecNum[this.param1Index + 3 + this.offset] = $dynamic.currentValue.w;
                }
            } else if (this.paramName2 == $dynamic.paramName) {
                if (this.param2Type == 1) {
                    this.vecNum[this.param2Index + this.offset] = $dynamic.currentValue.x;
                } else if (this.param2Type == 2) {
                    this.vecNum[this.param2Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param2Index + 1 + this.offset] = $dynamic.currentValue.y;
                } else if (this.param2Type == 3) {
                    this.vecNum[this.param2Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param2Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param2Index + 2 + this.offset] = $dynamic.currentValue.z;
                } else if (this.param2Type == 4) {
                    this.vecNum[this.param2Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param2Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param2Index + 2 + this.offset] = $dynamic.currentValue.z;
                    this.vecNum[this.param2Index + 3 + this.offset] = $dynamic.currentValue.w;
                }
            } else if (this.paramName3 == $dynamic.paramName) {
                if (this.param3Type == 1) {
                    this.vecNum[this.param3Index + this.offset] = $dynamic.currentValue.x;
                } else if (this.param3Type == 2) {
                    this.vecNum[this.param3Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param3Index + 1 + this.offset] = $dynamic.currentValue.y;
                } else if (this.param3Type == 3) {
                    this.vecNum[this.param3Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param3Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param3Index + 2 + this.offset] = $dynamic.currentValue.z;
                } else if (this.param3Type == 4) {
                    this.vecNum[this.param3Index + this.offset] = $dynamic.currentValue.x;
                    this.vecNum[this.param3Index + 1 + this.offset] = $dynamic.currentValue.y;
                    this.vecNum[this.param3Index + 2 + this.offset] = $dynamic.currentValue.z;
                    this.vecNum[this.param3Index + 3 + this.offset] = $dynamic.currentValue.w;
                }
    
            }
             */
        };
        return ConstItem;
    }());
    Pan3d.ConstItem = ConstItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ConstItem.js.map
var Pan3d;
(function (Pan3d) {
    var TexItem = /** @class */ (function () {
        function TexItem() {
        }
        TexItem.prototype.destory = function () {
            if (this.textureRes) {
                this.textureRes.clearUseNum();
            }
        };
        Object.defineProperty(TexItem.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value;
                this.name = "fs" + value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexItem.prototype, "texture", {
            get: function () {
                if (this.textureRes) {
                    return this.textureRes.texture;
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        TexItem.LIGHTMAP = 1;
        TexItem.LTUMAP = 2;
        TexItem.CUBEMAP = 3;
        TexItem.HEIGHTMAP = 4;
        TexItem.REFRACTIONMAP = 5;
        return TexItem;
    }());
    Pan3d.TexItem = TexItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TexItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TextureCube = /** @class */ (function (_super) {
        __extends(TextureCube, _super);
        function TextureCube() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TextureCube;
    }(Pan3d.TexItem));
    Pan3d.TextureCube = TextureCube;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TextureCube.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Material = /** @class */ (function (_super) {
        __extends(Material, _super);
        function Material() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.texList = new Array;
            _this.constList = new Array;
            _this.killNum = 0;
            _this.writeZbuffer = true;
            _this.fogMode = 0;
            _this.fcNum = 0;
            return _this;
        }
        Material.prototype.update = function (t) {
            this.updateTime(t);
            //this.updateCam();
            this.updateScene();
        };
        Material.prototype.updateTime = function (t) {
            if (this.hasTime) {
                this.fcData[1] = t;
            }
        };
        Material.prototype.updateCam = function (x, y, z) {
            if (this.usePbr || this.fogMode == 1) {
                var idx = this.fcIDAry[0] * 4;
                this.fcData[0 + idx] = x;
                this.fcData[1 + idx] = y;
                this.fcData[2 + idx] = z;
            }
        };
        Material.prototype.updateScene = function () {
            if (this.sceneNumId == Pan3d.Scene_data.sceneNumId) {
                return;
            }
            this.sceneNumId = Pan3d.Scene_data.sceneNumId;
            if (this.fogMode != 0) {
                var idx = this.fcIDAry[1] * 4;
                this.fcData[0 + idx] = Pan3d.Scene_data.fogColor[0];
                this.fcData[1 + idx] = Pan3d.Scene_data.fogColor[1];
                this.fcData[2 + idx] = Pan3d.Scene_data.fogColor[2];
            }
            if (this.scaleLightMap) {
                var idx = this.fcIDAry[2] * 4;
                this.fcData[0 + idx] = Pan3d.Scene_data.scaleLight[0];
            }
        };
        Material.prototype.initFcData = function () {
            this.fcData = new Float32Array(this.fcNum * 4);
            if (this.fcNum <= 0) {
                return;
            }
            this.sceneNumId = Pan3d.Scene_data.sceneNumId;
            if (this.hasTime || this.useKill || this.fogMode != 0) { //fc0
                if (this.useKill) {
                    this.fcData[0] = this.killNum;
                }
                if (this.fogMode != 0) {
                    this.fcData[2] = Pan3d.Scene_data.fogData[0];
                    this.fcData[3] = Pan3d.Scene_data.fogData[1];
                }
            }
            if (this.usePbr || this.fogMode == 1) {
                var idx = this.fcIDAry[0] * 4;
                this.fcData[0 + idx] = Pan3d.Scene_data.cam3D.x / 100;
                this.fcData[1 + idx] = Pan3d.Scene_data.cam3D.y / 100;
                this.fcData[2 + idx] = Pan3d.Scene_data.cam3D.z / 100;
            }
            if (this.fogMode != 0) {
                var idx = this.fcIDAry[1] * 4;
                this.fcData[0 + idx] = Pan3d.Scene_data.fogColor[0];
                this.fcData[1 + idx] = Pan3d.Scene_data.fogColor[1];
                this.fcData[2 + idx] = Pan3d.Scene_data.fogColor[2];
            }
            if (this.scaleLightMap) {
                var idx = this.fcIDAry[2] * 4;
                this.fcData[0 + idx] = Pan3d.Scene_data.scaleLight[0];
            }
        };
        Material.prototype.setCompileData = function (_compileData) {
            if (!_compileData) {
                return;
            }
            this.shaderStr = _compileData.shaderStr;
            this.hasTime = _compileData.hasTime;
            this.timeSpeed = _compileData.timeSpeed;
            this.blendMode = _compileData.blendMode;
            this.backCull = _compileData.backCull;
            this.killNum = _compileData.killNum;
            this.hasVertexColor = _compileData.hasVertexColor;
            this.usePbr = _compileData.usePbr;
            this.useNormal = _compileData.useNormal;
            this.roughness = _compileData.roughness;
            this.writeZbuffer = _compileData.writeZbuffer;
            this.hasFresnel = _compileData.hasFresnel;
            this.useDynamicIBL = _compileData.useDynamicIBL;
            this.normalScale = _compileData.normalScale;
            this.lightProbe = _compileData.lightProbe;
            this.useKill = _compileData.useKill;
            this.directLight = _compileData.directLight;
            this.noLight = _compileData.noLight;
            this.scaleLightMap = _compileData.scaleLightMap;
            this.fogMode = _compileData.fogMode;
            this.hasParticleColor = false;
            this.initFcData();
            if (_compileData.texList) {
                var ary = _compileData.texList;
                this.texList = new Array;
                for (var i = 0; i < ary.length; i++) {
                    var texItem = new Pan3d.TexItem;
                    texItem.id = ary[i].id;
                    texItem.url = ary[i].url;
                    texItem.isDynamic = ary[i].isDynamic;
                    texItem.paramName = ary[i].paramName;
                    texItem.isMain = ary[i].isMain;
                    texItem.isParticleColor = ary[i].isParticleColor;
                    texItem.type = ary[i].type;
                    texItem.wrap = ary[i].wrap;
                    texItem.filter = ary[i].filter;
                    texItem.mipmap = ary[i].mipmap;
                    this.texList.push(texItem);
                    if (texItem.isParticleColor) {
                        this.hasParticleColor = true;
                    }
                }
            }
            if (_compileData.constList) {
                ary = _compileData.constList;
                this.constList = new Array;
                for (i = 0; i < ary.length; i++) {
                    var constItem = new Pan3d.ConstItem;
                    constItem.setData(ary[i]);
                    constItem.creat(this.fcData);
                    this.constList.push(constItem);
                }
            }
        };
        Material.prototype.setByteData = function (byte) {
            var fs = byte;
            var vesion = fs.readInt();
            this.shaderStr = fs.readUTF(); //fs.writeUTF(_compileData.shaderStr)
            this.hasTime = fs.readBoolean(); //fs.writeBoolean(_compileData.hasTime);
            this.timeSpeed = fs.readFloat(); //fs.writeFloat(_compileData.timeSpeed);
            this.blendMode = fs.readFloat(); //fs.writeFloat(_compileData.blendMode);
            this.backCull = fs.readBoolean(); //fs.writeBoolean(_compileData.backCull);
            this.killNum = fs.readFloat(); //fs.writeFloat(_compileData.killNum);
            this.hasVertexColor = fs.readBoolean(); //fs.writeBoolean(_compileData.hasVertexColor);
            this.usePbr = fs.readBoolean(); //fs.writeBoolean(_compileData.usePbr);
            this.useNormal = fs.readBoolean(); //fs.writeBoolean(_compileData.useNormal);
            this.roughness = fs.readFloat(); //fs.writeFloat(_compileData.roughness);
            this.writeZbuffer = fs.readBoolean(); //fs.writeBoolean(_compileData.writeZbuffer);
            this.hasFresnel = fs.readBoolean(); //fs.writeBoolean(_compileData.hasFresnel);
            this.useDynamicIBL = fs.readBoolean(); //fs.writeBoolean(_compileData.useDynamicIBL);
            this.normalScale = fs.readFloat(); //fs.writeFloat(_compileData.normalScale);
            this.lightProbe = fs.readBoolean(); //fs.writeBoolean(_compileData.lightProbe);
            this.useKill = fs.readBoolean(); //fs.writeBoolean(_compileData.useKill);
            this.directLight = fs.readBoolean(); //fs.writeBoolean(_compileData.directLight);
            this.noLight = fs.readBoolean(); //fs.writeBoolean(_compileData.noLight);
            this.scaleLightMap = fs.readBoolean(); //fs.writeBoolean(_compileData.scaleLightMap)
            if (vesion > 2) {
                this.fogMode = fs.readInt();
            }
            if (vesion >= 22) {
                this.fcNum = fs.readByte();
                var leg = fs.readByte();
                this.fcIDAry = new Array;
                for (var i = 0; i < leg; i++) {
                    this.fcIDAry.push(fs.readByte());
                }
            }
            else {
                // //console.log("ddddd");
            }
            this.hasParticleColor = false;
            this.initFcData();
            this.readTexList(fs);
            this.readConstLis(fs);
        };
        Material.prototype.readConstLis = function (fs) {
            var constLisLen = fs.readInt();
            this.constList = new Array;
            for (var i = 0; i < constLisLen; i++) {
                var constItem = new Pan3d.ConstItem;
                constItem.id = fs.readFloat();
                constItem.value = new Pan3d.Vector3D(fs.readFloat(), fs.readFloat(), fs.readFloat(), fs.readFloat());
                constItem.paramName0 = fs.readUTF();
                constItem.param0Type = fs.readFloat();
                constItem.param0Index = fs.readFloat();
                constItem.paramName1 = fs.readUTF();
                constItem.param1Type = fs.readFloat();
                constItem.param1Index = fs.readFloat();
                constItem.paramName2 = fs.readUTF();
                constItem.param2Type = fs.readFloat();
                constItem.param2Index = fs.readFloat();
                constItem.paramName3 = fs.readUTF();
                constItem.param3Type = fs.readFloat();
                constItem.param3Index = fs.readFloat();
                constItem.creat(this.fcData);
                this.constList.push(constItem);
            }
        };
        Material.prototype.readTexList = function (fs) {
            var texListLen = fs.readInt();
            this.texList = new Array;
            for (var i = 0; i < texListLen; i++) {
                var texItem = new Pan3d.TexItem;
                texItem.id = fs.readFloat();
                texItem.url = fs.readUTF();
                texItem.isDynamic = fs.readBoolean();
                texItem.paramName = fs.readUTF();
                texItem.isMain = fs.readBoolean();
                texItem.isParticleColor = fs.readBoolean();
                texItem.type = fs.readFloat();
                texItem.wrap = fs.readFloat();
                texItem.filter = fs.readFloat();
                texItem.mipmap = fs.readFloat();
                if (texItem.isParticleColor) {
                    this.hasParticleColor = true;
                }
                this.texList.push(texItem);
            }
        };
        Material.prototype.destory = function () {
            for (var i = 0; i < this.texList.length; i++) {
                this.texList[i].destory();
            }
            this.texList = null;
            this.constList = null;
            if (this.shader) {
                this.shader.clearUseNum();
            }
        };
        return Material;
    }(Pan3d.ResCount));
    Pan3d.Material = Material;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Material.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialManager = /** @class */ (function (_super) {
        __extends(MaterialManager, _super);
        function MaterialManager() {
            var _this = 
            //this._dic = new Object();
            _super.call(this) || this;
            _this._loadDic = new Object();
            _this._resDic = new Object();
            _this._regDic = new Object();
            return _this;
        }
        MaterialManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialManager();
            }
            return this._instance;
        };
        /**
        public getMaterial($url: string, $fun: Function, $info: Object = null, $autoReg: boolean = false, $regName: string = null, $shader3D: Shader3D = null): void {
    
            if (this._dic[$url]) {
                if ($info) {
                    $fun(this._dic[$url], $info);
                } else {
                    $fun(this._dic[$url]);
                }
                return;
            }
    
            var materialLoad: MaterialLoad = new MaterialLoad($fun, $info, $url, $autoReg, $regName, $shader3D);
            if (this._loadDic[$url]) {
                var ary: Array<MaterialLoad> = this._loadDic[$url];
                ary.push(materialLoad);
                return;
            }
    
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push(materialLoad);
    
            if (this._resDic[$url]) {
                this.loadMaterialCom(this._resDic[$url], materialLoad);
            } else {
                LoadManager.getInstance().load($url, LoadManager.XML_TYPE, ($data: string, _info: MaterialLoad) => { this.loadMaterialCom($data, _info) }, materialLoad);
            }
        }
         */
        MaterialManager.prototype.getMaterialByte = function ($url, $fun, $info, $autoReg, $regName, $shader3DCls) {
            var _this = this;
            if ($info === void 0) { $info = null; }
            if ($autoReg === void 0) { $autoReg = false; }
            if ($regName === void 0) { $regName = null; }
            if ($shader3DCls === void 0) { $shader3DCls = null; }
            if (this._dic[$url]) {
                if ($info) {
                    $fun(this._dic[$url], $info);
                }
                else {
                    $fun(this._dic[$url]);
                }
                this._dic[$url].useNum++;
                // if ($url.indexOf("m_ef_ver_byte.txt") != -1) {
                //     //console.log("aaaaaaaaaaaaaaaa", this._dic[$url].useNum)
                // }
                return;
            }
            var materialLoad = new MaterialLoad($fun, $info, $url, $autoReg, $regName, $shader3DCls);
            if (this._loadDic[$url]) {
                var ary = this._loadDic[$url];
                ary.push(materialLoad);
                return;
            }
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push(materialLoad);
            if (this._resDic[$url]) {
                this.meshByteMaterialByt(this._resDic[$url], materialLoad);
                if (this._regDic[$url]) {
                    this._dic[$url].useNum += this._regDic[$url];
                    delete this._regDic[$url];
                }
                delete this._resDic[$url];
            }
            else {
                Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.BYTE_TYPE, function ($data, _info) { _this.loadMaterialByteCom($data, _info); }, materialLoad);
            }
        };
        MaterialManager.prototype.meshByteMaterialByt = function (byte, _info) {
            var material = new Pan3d.Material();
            material.setByteData(byte);
            material.url = _info.url;
            this.loadMaterial(material);
            if (_info.autoReg) {
                material.shader = Pan3d.ProgrmaManager.getInstance().getMaterialProgram(_info.regName, _info.shader3D, material, null, true);
            }
            var ary = this._loadDic[_info.url];
            for (var i = 0; i < ary.length; i++) {
                if (ary[i].info) {
                    ary[i].fun(material, ary[i].info);
                }
                else {
                    ary[i].fun(material);
                }
                material.useNum++;
                // if (_info.url.indexOf("m_ef_ver_byte.txt") != -1) {
                //     //console.log("aaaaaaaaaaaaaaaa", material.useNum)
                // }
            }
            delete this._loadDic[_info.url];
            this._dic[_info.url] = material;
        };
        MaterialManager.prototype.loadMaterialByteCom = function ($data, _info) {
            var byte = new Pan3d.Pan3dByteArray($data);
            this.meshByteMaterialByt(byte, _info);
        };
        MaterialManager.prototype.addResByte = function ($url, $data) {
            if (!this._dic[$url] && !this._resDic[$url]) {
                this._resDic[$url] = $data;
            }
        };
        MaterialManager.prototype.registerUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (this._dic[$url]) {
                this._dic[$url].useNum++;
            }
            else {
                if (this._regDic[$url]) {
                    this._regDic[$url]++;
                }
                else {
                    this._regDic[$url] == 1;
                }
            }
        };
        MaterialManager.prototype.releaseUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (this._dic[$url]) {
                this._dic[$url].clearUseNum();
            }
        };
        /**
        public loadMaterialCom($data: string, _info: MaterialLoad): void {
            var obj = JSON.parse($data);
            
            var material: Material = new Material();
            material.setCompileData(obj);
            material.url = _info.url;
    
            this.loadMaterial(material);
    
            if (_info.autoReg){
                material.program = ProgrmaManager.getInstance().getMaterialProgram(_info.regName, _info.shader3D, material, null, true);
            }
    
            var ary: Array<TextureLoad> = this._loadDic[_info.url];
            for (var i: number = 0; i < ary.length; i++) {
                if (ary[i].info) {
                    ary[i].fun(material, ary[i].info);
                } else {
                    ary[i].fun(material);
                }
            }
            
            delete this._loadDic[_info.url];
    
            this._dic[_info.url] = material;
    
        }
        */
        MaterialManager.prototype.loadMaterial = function ($material) {
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].isParticleColor || texVec[i].isDynamic || texVec[i].type != 0) {
                    continue;
                }
                Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + texVec[i].url, function ($textureVo, $texItem) {
                    $texItem.textureRes = $textureVo;
                }, texVec[i].wrap, texVec[i], texVec[i].filter, texVec[i].mipmap);
            }
        };
        MaterialManager.prototype.loadDynamicTexUtil = function (material) {
            var dynamicTexList = material.dynamicTexList;
            for (var i = 0; i < dynamicTexList.length; i++) {
                if (dynamicTexList[i].isParticleColor) {
                    dynamicTexList[i].creatTextureByCurve();
                }
                else {
                    Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + dynamicTexList[i].url, function ($textureVo, $texItem) {
                        $texItem.textureRes = $textureVo;
                    }, 0, dynamicTexList[i], 0, 1);
                }
            }
        };
        MaterialManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        return MaterialManager;
    }(Pan3d.ResGC));
    Pan3d.MaterialManager = MaterialManager;
    var MaterialLoad = /** @class */ (function () {
        function MaterialLoad($fun, $info, $url, $autoReg, $regName, $shader3D) {
            this.fun = $fun;
            this.info = $info;
            this.url = $url;
            this.autoReg = $autoReg;
            this.regName = $regName;
            this.shader3D = $shader3D;
        }
        return MaterialLoad;
    }());
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialManager.js.map
var Pan3d;
(function (Pan3d) {
    var DynamicBaseConstItem = /** @class */ (function () {
        function DynamicBaseConstItem() {
        }
        DynamicBaseConstItem.prototype.update = function (t) {
            if (t === void 0) { t = 0; }
            if (this.target) {
                this.target.setDynamic(this);
            }
        };
        Object.defineProperty(DynamicBaseConstItem.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value;
            },
            enumerable: true,
            configurable: true
        });
        DynamicBaseConstItem.prototype.setTargetInfo = function ($target, $paramName, $type) {
            this.target = $target;
            this.paramName = $paramName;
            this.type = $type;
            if (this.target) {
                this.target.setDynamicOffset(this);
            }
            this.currentValue = new Array($type);
        };
        DynamicBaseConstItem.prototype.setCurrentVal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            for (var i = 0; i < args.length; i++) {
                this.currentValue[i] = args[i];
                // if (i == 0) {
                //     this.currentValue.x = args[i];
                // } else if (i == 1) {
                //     this.currentValue.y = args[i];
                // } else if (i == 2) {
                //     this.currentValue.z = args[i];
                // }
            }
        };
        return DynamicBaseConstItem;
    }());
    Pan3d.DynamicBaseConstItem = DynamicBaseConstItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=DynamicBaseConstItem.js.map
var Pan3d;
(function (Pan3d) {
    var DynamicBaseTexItem = /** @class */ (function () {
        function DynamicBaseTexItem() {
        }
        DynamicBaseTexItem.prototype.destory = function () {
            if (this.textureRes) {
                this.textureRes.useNum--;
            }
            this.target = null;
        };
        Object.defineProperty(DynamicBaseTexItem.prototype, "texture", {
            get: function () {
                if (this.textureRes) {
                    return this.textureRes.texture;
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return DynamicBaseTexItem;
    }());
    Pan3d.DynamicBaseTexItem = DynamicBaseTexItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=DynamicBaseTexItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialBaseParam = /** @class */ (function (_super) {
        __extends(MaterialBaseParam, _super);
        function MaterialBaseParam() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialBaseParam.prototype.destory = function () {
            for (var i = 0; i < this.dynamicTexList.length; i++) {
                this.dynamicTexList[i].destory();
            }
            this.dynamicTexList = null;
            this.dynamicConstList = null;
        };
        MaterialBaseParam.prototype.update = function () {
            if (this.material && this.dynamicConstList) {
                for (var i = 0; i < this.dynamicConstList.length; i++) {
                    this.dynamicConstList[i].update();
                }
            }
        };
        MaterialBaseParam.prototype.setData = function ($material, $ary) {
            this.material = $material;
            this.dynamicConstList = new Array;
            this.dynamicTexList = new Array;
            var constList = $material.constList;
            var texList = $material.texList;
            for (var i = 0; i < $ary.length; i++) {
                var obj = $ary[i];
                if (obj.type == 0) {
                    var texItem = new Pan3d.DynamicBaseTexItem();
                    texItem.paramName = obj.name;
                    for (var j = 0; j < texList.length; j++) {
                        if (texItem.paramName == texList[j].paramName) {
                            texItem.target = texList[j];
                            break;
                        }
                    }
                    var mipmap = 0;
                    if (texItem.target) {
                        mipmap = texItem.target.mipmap;
                    }
                    mipmap = 0;
                    Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + obj.url, function ($textres) {
                        texItem.textureRes = $textres;
                    }, 0, null, 0, mipmap);
                    this.dynamicTexList.push(texItem);
                }
                else {
                    var targetName = obj.name;
                    var target = null;
                    for (var j = 0; j < constList.length; j++) {
                        if (targetName == constList[j].paramName0
                            || targetName == constList[j].paramName1
                            || targetName == constList[j].paramName2
                            || targetName == constList[j].paramName3) {
                            target = constList[j];
                            break;
                        }
                    }
                    var constItem = new Pan3d.DynamicBaseConstItem();
                    constItem.setTargetInfo(target, targetName, obj.type);
                    if (obj.type == 1) {
                        constItem.setCurrentVal(obj.x);
                    }
                    else if (obj.type == 2) {
                        constItem.setCurrentVal(obj.x, obj.y);
                    }
                    else {
                        constItem.setCurrentVal(obj.x, obj.y, obj.z);
                    }
                    this.dynamicConstList.push(constItem);
                }
            }
        };
        return MaterialBaseParam;
    }(Pan3d.GC));
    Pan3d.MaterialBaseParam = MaterialBaseParam;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialBaseParam.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MaterialParam = /** @class */ (function (_super) {
        __extends(MaterialParam, _super);
        //public dynamicTexList:Array<DynamicTexItem>;
        //public dynamicConstList:Array<DynamicConstItem>;
        function MaterialParam() {
            return _super.call(this) || this;
        }
        MaterialParam.prototype.destory = function () {
            //this.material.useNum--;
            this.material.useNum--;
            this.shader.useNum--;
            // if(this.material.url.indexOf("m_ef_ver_byte.txt") != -1){
            //     //console.log("bbbbbbbbbbbbbbbbbbb",this.material.useNum)
            // }
            //for (var i: number = 0; i < this.dynamicTexList.length; i++){
            //    this.dynamicTexList[i].destory();
            //}
            //this.dynamicTexList = null;
            //this.dynamicConstList = null;
            _super.prototype.destory.call(this);
        };
        MaterialParam.prototype.setMaterial = function ($materialTree) {
            this.material = $materialTree;
            this.materialUrl = $materialTree.url;
            this.dynamicTexList = new Array;
            this.dynamicConstList = new Array;
            this.setTexList();
            this.setConstList();
        };
        MaterialParam.prototype.setLife = function ($life) {
            for (var i = 0; i < this.dynamicTexList.length; i++) {
                if (this.dynamicTexList[i].isParticleColor) {
                    this.dynamicTexList[i].life = $life;
                }
            }
        };
        MaterialParam.prototype.setTexList = function () {
            var texList = this.material.texList;
            for (var i = 0; i < texList.length; i++) {
                var dyTex;
                if (texList[i].isParticleColor) {
                    dyTex = new Pan3d.DynamicTexItem;
                    dyTex.target = texList[i];
                    dyTex.paramName = texList[i].paramName;
                    dyTex.initCurve(4);
                    this.dynamicTexList.push(dyTex);
                    dyTex.isParticleColor = true;
                }
                else if (texList[i].isDynamic) {
                    dyTex = new Pan3d.DynamicTexItem;
                    dyTex.target = texList[i];
                    dyTex.paramName = texList[i].paramName;
                    this.dynamicTexList.push(dyTex);
                }
            }
        };
        MaterialParam.prototype.setConstList = function () {
            var constList = this.material.constList;
            for (var i = 0; i < constList.length; i++) {
                var constItem = constList[i];
                var dyCon;
                if (constItem.param0Type != 0) {
                    dyCon = new Pan3d.DynamicConstItem;
                    // dyCon.target = constItem;
                    // dyCon.paramName = constItem.paramName0;
                    // dyCon.type = constItem.param0Type;
                    dyCon.setTargetInfo(constItem, constItem.paramName0, constItem.param0Type);
                    this.dynamicConstList.push(dyCon);
                }
                if (constItem.param1Type != 0) {
                    dyCon = new Pan3d.DynamicConstItem;
                    // dyCon.target = constItem;
                    // dyCon.paramName = constItem.paramName1;
                    // dyCon.type = constItem.param1Type;
                    dyCon.setTargetInfo(constItem, constItem.paramName1, constItem.param1Type);
                    this.dynamicConstList.push(dyCon);
                }
                if (constItem.param2Type != 0) {
                    dyCon = new Pan3d.DynamicConstItem;
                    // dyCon.target = constItem;
                    // dyCon.paramName = constItem.paramName2;
                    // dyCon.type = constItem.param2Type;
                    dyCon.setTargetInfo(constItem, constItem.paramName2, constItem.param2Type);
                    this.dynamicConstList.push(dyCon);
                }
                if (constItem.param3Type != 0) {
                    dyCon = new Pan3d.DynamicConstItem;
                    // dyCon.target = constItem;
                    // dyCon.paramName = constItem.paramName3;
                    // dyCon.type = constItem.param3Type;
                    dyCon.setTargetInfo(constItem, constItem.paramName3, constItem.param3Type);
                    this.dynamicConstList.push(dyCon);
                }
            }
        };
        MaterialParam.prototype.setTextObj = function (ary) {
            for (var i = 0; i < ary.length; i++) {
                var obj = ary[i];
                for (var j = 0; j < this.dynamicTexList.length; j++) {
                    if (this.dynamicTexList[j].paramName == obj.paramName) {
                        if (this.dynamicTexList[j].isParticleColor) {
                            this.dynamicTexList[j].curve.setData(obj.curve);
                        }
                        else {
                            this.dynamicTexList[j].url = obj.url;
                        }
                        break;
                    }
                }
            }
        };
        MaterialParam.prototype.setConstObj = function (ary) {
            for (var i = 0; i < ary.length; i++) {
                var obj = ary[i];
                for (var j = 0; j < this.dynamicConstList.length; j++) {
                    if (this.dynamicConstList[j].paramName == obj.paramName) {
                        this.dynamicConstList[j].curve.setData(obj.curve);
                        break;
                    }
                }
            }
        };
        return MaterialParam;
    }(Pan3d.MaterialBaseParam));
    Pan3d.MaterialParam = MaterialParam;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MaterialParam.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var DynamicConstItem = /** @class */ (function (_super) {
        __extends(DynamicConstItem, _super);
        function DynamicConstItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DynamicConstItem.prototype.update = function (t) {
            if (t === void 0) { t = 0; }
            this.currentValue = this.curve.getValue(t);
            this.target.setDynamic(this);
            //this.target.setDynamicDirect(this.curve.getValue(t),this.targetOffset);
        };
        Object.defineProperty(DynamicConstItem.prototype, "type", {
            set: function (value) {
                this._type = value;
                this.curve = new Pan3d.Curve;
                this.curve.type = value;
            },
            enumerable: true,
            configurable: true
        });
        return DynamicConstItem;
    }(Pan3d.DynamicBaseConstItem));
    Pan3d.DynamicConstItem = DynamicConstItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=DynamicConstItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var DynamicTexItem = /** @class */ (function (_super) {
        __extends(DynamicTexItem, _super);
        function DynamicTexItem() {
            return _super.call(this) || this;
        }
        DynamicTexItem.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this._textureDynamic) {
                Pan3d.Scene_data.context3D.deleteTexture(this._textureDynamic);
            }
            //if (this.textureRes){
            //    this.textureRes.useNum--;
            //}
            this.target = null;
            //this.curve = null;
        };
        DynamicTexItem.prototype.initCurve = function ($type) {
            this.curve = new Pan3d.Curve;
            this.curve.type = $type;
        };
        Object.defineProperty(DynamicTexItem.prototype, "texture", {
            get: function () {
                if (this._textureDynamic) {
                    return this._textureDynamic;
                }
                else {
                    if (this.textureRes) {
                        return this.textureRes.texture;
                    }
                    else {
                        return null;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        DynamicTexItem.prototype.creatTextureByCurve = function () {
            var i = 0;
            var endVecIndex = this.curve.valueVec.length - 1;
            var imgNumVec = new Array;
            for (var i = 0; i < this.life; i++) {
                if (i < this.curve.begintFrame) {
                    imgNumVec.push(this.curve.valueVec[0][0] * 0xff, this.curve.valueVec[0][1] * 0xff, this.curve.valueVec[0][2] * 0xff, this.curve.valueVec[0][3] * 0xff);
                }
                else if (i > this.curve.maxFrame) {
                    if (this.curve.maxFrame == 0 && this.curve.begintFrame < 0) {
                        imgNumVec.push(0xff, 0xff, 0xff, 0xff);
                    }
                    else {
                        imgNumVec.push(this.curve.valueVec[endVecIndex][0] * 0xff, this.curve.valueVec[endVecIndex][1] * 0xff, this.curve.valueVec[endVecIndex][2] * 0xff, this.curve.valueVec[endVecIndex][3] * 0xff);
                    }
                }
                else {
                    if (this.curve.begintFrame < 0) {
                        imgNumVec.push(0xff, 0xff, 0xff, 0xff);
                    }
                    else {
                        var index = i - this.curve.begintFrame;
                        imgNumVec.push(this.curve.valueVec[index][0] * 0xff, this.curve.valueVec[index][1] * 0xff, this.curve.valueVec[index][2] * 0xff, this.curve.valueVec[index][3] * 0xff);
                    }
                }
            }
            var img = Pan3d.ColorTransition.getInstance().getImageDataByVec(imgNumVec, this.life);
            this._textureDynamic = Pan3d.Scene_data.context3D.getTexture(img);
        };
        Object.defineProperty(DynamicTexItem.prototype, "life", {
            //public argbToHex(r: Number, g: Number, b: Number, a: Number): uint {
            //    var expColor: uint = uint(a * 0xff) << 24 | uint(r * 0xff) << 16 | uint(g * 0xff) << 8 | uint(b * 0xff);
            //    return expColor;
            //}
            get: function () {
                return this._life;
            },
            set: function (value) {
                this._life = value;
            },
            enumerable: true,
            configurable: true
        });
        return DynamicTexItem;
    }(Pan3d.DynamicBaseTexItem));
    Pan3d.DynamicTexItem = DynamicTexItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=DynamicTexItem.js.map
var Pan3d;
(function (Pan3d) {
    var QuadTreeNode = /** @class */ (function () {
        //public pointList: Array<Vector2D>;
        function QuadTreeNode($x, $y, $z, $width, $height, $depth) {
            this.x = $x;
            this.y = $y;
            this.z = $z;
            this.width = $width;
            this.height = $height;
            this.depth = $depth;
            //this.pointList = new Array;
            //this.pointList.push(new Vector2D(this.x, this.y));
            //this.pointList.push(new Vector2D(this.x + this.width, this.y));
            //this.pointList.push(new Vector2D(this.x + this.width, this.y + this.height));
            //this.pointList.push(new Vector2D(this.x, this.y + this.height));
        }
        QuadTreeNode.prototype.testViewFrustum = function (face, ray) {
            if (this.sun && this.sun.length == 1) {
                this.sun[0].testViewFrustum(face, ray);
                return;
            }
            if (this.testViewFrustumResult(face)) {
                if (this.target) {
                    if (this.target.isPerspective) {
                        if (!this.testRay(ray)) {
                            this.target.sceneVisible = true;
                        }
                    }
                    else {
                        this.target.sceneVisible = true;
                    }
                }
                if (this.sun) {
                    for (var i = 0; i < this.sun.length; i++) {
                        this.sun[i].testViewFrustum(face, ray);
                    }
                }
            }
        };
        QuadTreeNode.prototype.testViewFrustumResult = function (face) {
            var pos = new Pan3d.Vector3D(this.x, this.y, this.z);
            var whd = new Pan3d.Vector3D(this.width, this.height, this.depth);
            var bInSide = true;
            for (var j = 0; j < face.length; j++) {
                var vcMin = pos;
                var vcMax = pos.add(whd);
                var _vcMax = new Pan3d.Vector3D();
                // var _vcMin: Vector3D = new Vector3D();
                if (face[j].x > 0) {
                    _vcMax.x = vcMax.x;
                    //_vcMin.x = vcMin.x;
                }
                else {
                    //_vcMin.x = vcMax.x;
                    _vcMax.x = vcMin.x;
                }
                if (face[j].y > 0) {
                    _vcMax.y = vcMax.y;
                    //_vcMin.y = vcMin.y;
                }
                else {
                    //_vcMin.y = vcMax.y;
                    _vcMax.y = vcMin.y;
                }
                if (face[j].z > 0) {
                    _vcMax.z = vcMax.z;
                    //_vcMin.z = vcMin.z;
                }
                else {
                    //_vcMin.z = vcMax.z;
                    _vcMax.z = vcMin.z;
                }
                var num = face[j].dot(_vcMax) + face[j].w;
                if (num < 0) {
                    bInSide = false;
                    break;
                }
            }
            return bInSide;
        };
        QuadTreeNode.prototype.testRay = function (ray) {
            var ox = ray.o.x;
            var oy = ray.o.y;
            var oz = ray.o.z;
            var dx = ray.d.x;
            var dy = ray.d.y;
            var dz = ray.d.z;
            var tx_min, ty_min, tz_min;
            var tx_max, ty_max, tz_max;
            var x0 = this.x;
            var y0 = this.y;
            var z0 = this.z;
            var x1 = this.x + this.width;
            var y1 = this.y + this.height;
            var z1 = this.z + this.depth;
            var a = 1.0 / dx;
            if (a >= 0) {
                tx_min = (x0 - ox) * a;
                tx_max = (x1 - ox) * a;
            }
            else {
                tx_min = (x1 - ox) * a;
                tx_max = (x0 - ox) * a;
            }
            var b = 1.0 / dy;
            if (b >= 0) {
                ty_min = (y0 - oy) * b;
                ty_max = (y1 - oy) * b;
            }
            else {
                ty_min = (y1 - oy) * b;
                ty_max = (y0 - oy) * b;
            }
            var c = 1.0 / dz;
            if (c >= 0) {
                tz_min = (z0 - oz) * c;
                tz_max = (z1 - oz) * c;
            }
            else {
                tz_min = (z1 - oz) * c;
                tz_max = (z0 - oz) * c;
            }
            var t0, t1;
            // find largest entering t value
            if (tx_min > ty_min)
                t0 = tx_min;
            else
                t0 = ty_min;
            if (tz_min > t0)
                t0 = tz_min;
            // find smallest exiting t value
            if (tx_max < ty_max)
                t1 = tx_max;
            else
                t1 = ty_max;
            if (tz_max < t1)
                t1 = tz_max;
            var kEpsilon = 0.0001;
            var tmin = 0;
            if (t0 < t1 && t1 > kEpsilon) { // condition for a hit
                if (t0 > kEpsilon) {
                    tmin = t0; // ray hits outside surface
                }
                else {
                    tmin = t1; // ray hits inside surface
                }
                if (tmin < ray.baseT) {
                    return true;
                }
            }
            else
                return false;
        };
        return QuadTreeNode;
    }());
    Pan3d.QuadTreeNode = QuadTreeNode;
    var Ray = /** @class */ (function () {
        function Ray() {
            this.o = new Pan3d.Vector3D;
            this.d = new Pan3d.Vector3D;
            this.baseT = 500;
        }
        Ray.prototype.setPos = function (x, y, z) {
            this.o.x = x;
            this.o.y = y;
            this.o.z = z;
        };
        Ray.prototype.setTarget = function (x, y, z) {
            this.d.x = x - this.o.x;
            this.d.y = y - this.o.y;
            this.d.z = z - this.o.z;
            this.d.normalize();
        };
        return Ray;
    }());
    Pan3d.Ray = Ray;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=QuadTreeNode.js.map
var Pan3d;
(function (Pan3d) {
    var SceneQuadTree = /** @class */ (function () {
        function SceneQuadTree() {
            this.needUpdata = false;
            this.panleAry = new Array;
        }
        SceneQuadTree.prototype.init = function (obj, $dic) {
            this._circle = new Pan3d.Circle(10000, 10000);
            this._sceneDic = $dic;
            this._rootNode = this.getNode(obj);
            this._ray = new Pan3d.Ray;
        };
        SceneQuadTree.prototype.getNode = function (obj) {
            var quadNode = new Pan3d.QuadTreeNode(obj.x, obj.y, obj.z, obj.width, obj.height, obj.depth);
            if (obj.data) {
                if (!quadNode.sun) {
                    quadNode.sun = new Array;
                }
                for (var i = 0; i < obj.data.length; i++) {
                    var dataNode = new Pan3d.QuadTreeNode(obj.data[i].x, obj.data[i].y, obj.data[i].z, obj.data[i].width, obj.data[i].height, obj.data[i].depth);
                    var key;
                    if (obj.data[i].type == 1) {
                        key = "build" + obj.data[i].id;
                    }
                    else if (obj.data[i].type == 11) {
                        key = "particle" + obj.data[i].id;
                    }
                    else if (obj.data[i].type == 14) {
                        key = "ground" + obj.data[i].id;
                    }
                    dataNode.target = this._sceneDic[key];
                    dataNode.target.aabb = dataNode;
                    quadNode.sun.push(dataNode);
                }
            }
            if (obj.sun) {
                if (!quadNode.sun) {
                    quadNode.sun = new Array;
                }
                for (var i = 0; i < obj.sun.length; i++) {
                    quadNode.sun.push(this.getNode(obj.sun[i]));
                }
            }
            return quadNode;
        };
        SceneQuadTree.prototype.setCircle = function ($x, $z, $radius) {
            var xx = $x - this._circle.x;
            var yy = $z - this._circle.y;
            if (Math.sqrt(xx * xx + yy * yy) < 10) {
                this.needUpdata = false;
            }
            else {
                this._circle.setData($x, $z, $radius);
                this.needUpdata = true;
            }
        };
        SceneQuadTree.prototype.update = function () {
            Pan3d.MathClass.GetViewHitBoxDataCopy(Pan3d.Scene_data.cam3D.distance);
            var cam = new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            var vc = Pan3d.MathClass.viewBoxVecItem;
            this.panleAry.length = 0;
            this.panleAry.push(this.getPanelByVec(cam, vc[0], vc[1]));
            this.panleAry.push(this.getPanelByVec(cam, vc[1], vc[2]));
            this.panleAry.push(this.getPanelByVec(cam, vc[2], vc[3]));
            this.panleAry.push(this.getPanelByVec(cam, vc[3], vc[0]));
            //this.panleAry.push(this.getPanelByVec(vc[0], vc[1], vc[2]));
            //this._rootNode.testCircle(this._circle);
            //this._rootNode.testCam();
            this._ray.setPos(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            this._ray.setTarget(Pan3d.Scene_data.focus3D.x, Pan3d.Scene_data.focus3D.y, Pan3d.Scene_data.focus3D.z);
            this._ray.baseT = Pan3d.Scene_data.cam3D.distance;
            this._rootNode.testViewFrustum(this.panleAry, this._ray);
        };
        SceneQuadTree.prototype.getPanelByVec = function (v1, v2, v3) {
            var a1 = v2.subtract(v1);
            var a2 = v3.subtract(v1);
            a1 = a1.cross(a2);
            a1.normalize();
            a1.w = -a1.dot(v1);
            return a1;
        };
        SceneQuadTree.prototype.updateDraw = function () {
            if (this.capsuleLineSprite) {
                this.capsuleLineSprite.x = Pan3d.Scene_data.focus3D.x;
                this.capsuleLineSprite.y = Pan3d.Scene_data.focus3D.y + 50;
                this.capsuleLineSprite.z = Pan3d.Scene_data.focus3D.z;
                this.capsuleLineSprite.update();
            }
            else {
                this.capsuleLineSprite = new Pan3d.LineDisplaySprite();
                this.capsuleLineSprite.clear();
                this.capsuleLineSprite.baseColor = new Pan3d.Vector3D(1, 0, 0, 1);
                this.drawCylinder(this._circle.radius, 10);
                this.capsuleLineSprite.upToGpu();
            }
        };
        SceneQuadTree.prototype.drawCylinder = function ($w, $h) {
            var w = $w;
            var h = $h;
            var jindu = 12;
            var lastA;
            var lastB;
            var i;
            for (i = 0; i < jindu; i++) {
                var a = new Pan3d.Vector3D(w, 0, 0);
                var b = new Pan3d.Vector3D(w, +h, 0);
                var m = new Pan3d.Matrix3D;
                m.appendRotation(i * (360 / jindu), Pan3d.Vector3D.Y_AXIS);
                var A = m.transformVector(a);
                var B = m.transformVector(b);
                this.capsuleLineSprite.makeLineMode(A, B);
                //this.capsuleLineSprite.makeLineMode(A, new Vector3D(0, 0, 0))
                this.capsuleLineSprite.makeLineMode(B, new Pan3d.Vector3D(0, +h, 0));
                if (i == (jindu - 1)) {
                    this.capsuleLineSprite.makeLineMode(A, a);
                    this.capsuleLineSprite.makeLineMode(B, b);
                }
                if (lastA || lastB) {
                    this.capsuleLineSprite.makeLineMode(A, lastA);
                    this.capsuleLineSprite.makeLineMode(B, lastB);
                }
                lastA = A.clone();
                lastB = B.clone();
            }
        };
        return SceneQuadTree;
    }());
    Pan3d.SceneQuadTree = SceneQuadTree;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SceneQuadTree.js.map
var Pan3d;
(function (Pan3d) {
    var ViewFrustum = /** @class */ (function () {
        function ViewFrustum() {
        }
        ViewFrustum.prototype.init = function () {
            this.capsuleLineSprite = new Pan3d.LineDisplaySprite();
            Pan3d.SceneManager.getInstance().addDisplay(this.capsuleLineSprite);
        };
        ViewFrustum.prototype.setCam = function () {
            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
            m.append(Pan3d.Scene_data.viewMatrx3D);
            var a = m.m;
            var a11 = a[0], a12 = a[1], a13 = a[2], a14 = a[3], a21 = a[4], a22 = a[5], a23 = a[6], a24 = a[7], a31 = a[8], a32 = a[9], a33 = a[10], a34 = a[11], a41 = a[12], a42 = a[13], a43 = a[14], a44 = a[15];
            this.panleAry = new Array;
            var farp = this.getPanle(-a31 + a41, -a32 + a42, -a33 + a43, -a34 + a44);
            var bottom = this.getPanle(a21 + a41, a22 + a42, a23 + a43, a24 + a44);
            var top = this.getPanle(-a21 + a41, -a22 + a42, -a23 + a43, -a24 + a44);
            var left = this.getPanle(a11 + a41, a12 + a42, a13 + a43, a14 + a44);
            var right = this.getPanle(-a11 + a41, -a12 + a42, -a13 + a43, -a14 + a44);
            //this.panleAry.push(top,right,bottom,left);
            ////console.log("------------");
            //for (var i: number = 0; i < this.panleAry.length; i++){
            //    var p: Vector3D = this.panleAry[i];
            //    //p.normalize();
            //    var num: number = p.x * Scene_data.cam3D.x + p.y * Scene_data.cam3D.y + p.z * Scene_data.cam3D.z;
            //    num = num - p.w;
            //    //console.log(num); 
            //}
        };
        ViewFrustum.prototype.getPanle = function (a, b, c, d) {
            var normal = new Pan3d.Vector3D(a, b, c, d);
            normal.normalize();
            return normal;
        };
        ViewFrustum.prototype.getPanelByVec = function (v1, v2, v3) {
            var a1 = v2.subtract(v1);
            var a2 = v3.subtract(v1);
            a1 = a1.cross(a2);
            a1.normalize();
            a1.w = -a1.dot(v1);
            return a1;
        };
        ViewFrustum.prototype.setData = function (obj) {
            this.dataAry = obj;
        };
        ViewFrustum.prototype.setViewFrustum = function () {
            if (!this.capsuleLineSprite) {
                this.init();
            }
            this.setCam();
            this.capsuleLineSprite.clear();
            this.capsuleLineSprite.baseColor = new Pan3d.Vector3D(0, 0, 1, 1);
            Pan3d.MathClass.GetViewHitBoxDataCopy(Pan3d.Scene_data.cam3D.distance);
            var cam = new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            var vc = Pan3d.MathClass.viewBoxVecItem;
            this.panleAry.push(this.getPanelByVec(cam, vc[0], vc[1]));
            this.panleAry.push(this.getPanelByVec(cam, vc[1], vc[2]));
            this.panleAry.push(this.getPanelByVec(cam, vc[2], vc[3]));
            this.panleAry.push(this.getPanelByVec(cam, vc[3], vc[0]));
            /*
            for (var i: number = 0; i < vc.length; i++){
                this.capsuleLineSprite.makeLineMode(cam, vc[i]);
            }
            */
            for (var i = 0; i < this.dataAry.length; i++) {
                var obj = this.dataAry[i];
                var pos = new Pan3d.Vector3D(obj.x, obj.y, obj.z);
                var whd = new Pan3d.Vector3D(obj.width, obj.height, obj.depth);
                var bOutSide = false;
                for (var j = 0; j < this.panleAry.length; j++) {
                    var vcMin = pos;
                    var vcMax = pos.add(whd);
                    var _vcMax = new Pan3d.Vector3D();
                    // var _vcMin: Vector3D = new Vector3D();
                    if (this.panleAry[j].x > 0) {
                        _vcMax.x = vcMax.x;
                        //_vcMin.x = vcMin.x;
                    }
                    else {
                        //_vcMin.x = vcMax.x;
                        _vcMax.x = vcMin.x;
                    }
                    if (this.panleAry[j].y > 0) {
                        _vcMax.y = vcMax.y;
                        //_vcMin.y = vcMin.y;
                    }
                    else {
                        //_vcMin.y = vcMax.y;
                        _vcMax.y = vcMin.y;
                    }
                    if (this.panleAry[j].z > 0) {
                        _vcMax.z = vcMax.z;
                        //_vcMin.z = vcMin.z;
                    }
                    else {
                        //_vcMin.z = vcMax.z;
                        _vcMax.z = vcMin.z;
                    }
                    var num = this.panleAry[j].dot(_vcMax) + this.panleAry[j].w;
                    if (num < 0) {
                        bOutSide = true;
                        break;
                    }
                }
                if (bOutSide) {
                    this.capsuleLineSprite.baseColor = new Pan3d.Vector3D(1, 0, 0, 1);
                }
                else {
                    this.capsuleLineSprite.baseColor = new Pan3d.Vector3D(0, 0, 1, 1);
                }
                this.capsuleLineSprite.makeLineMode(pos, new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z));
                this.capsuleLineSprite.makeLineMode(pos, new Pan3d.Vector3D(pos.x, pos.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y, pos.z + whd.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z), new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z + whd.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y, pos.z), new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x, pos.y, pos.z + whd.z), new Pan3d.Vector3D(pos.x, pos.y + whd.y, pos.z + whd.z));
                this.capsuleLineSprite.makeLineMode(new Pan3d.Vector3D(pos.x + whd.x, pos.y, pos.z + whd.z), new Pan3d.Vector3D(pos.x + whd.x, pos.y + whd.y, pos.z + whd.z));
            }
            this.capsuleLineSprite.upToGpu();
        };
        return ViewFrustum;
    }());
    Pan3d.ViewFrustum = ViewFrustum;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ViewFrustum.js.map
var Pan3d;
(function (Pan3d) {
    var SceneManager = /** @class */ (function () {
        function SceneManager() {
            //private _sceneLoader: SceneRes;
            this._ready = false;
            this.render = true;
            this.test = false;
            this.cam3D = new Pan3d.Camera3D();
            this.focus3D = new Pan3d.Object3D();
            this.viewMatrx3D = new Pan3d.Matrix3D();
            this._displayList = new Array;
            this._displaySpriteList = new Array;
            this._displayRoleList = new Array;
            this._display2DList = new Array;
            this._sceneParticleList = new Array;
            this._time = Pan3d.TimeUtil.getTimer();
            //this.initSceneLoader()
            this._sceneDic = new Object;
            //var buildShader: BuildShader = new BuildShader();
            //ProgrmaManager.getInstance().registe(BuildShader.buildShader, buildShader);
            //var skyShader: SkyShader = new SkyShader();
            //ProgrmaManager.getInstance().registe(SkyShader.Sky_Shader, skyShader);
            //ProgrmaManager.getInstance().registe(LineDisplayShader.LineShader, new LineDisplayShader());
            this.initScene();
            this.viewFrustum = new Pan3d.ViewFrustum();
        }
        SceneManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new SceneManager();
            }
            return this._instance;
        };
        Object.defineProperty(SceneManager.prototype, "displayList", {
            get: function () {
                return this._displayList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneManager.prototype, "displayRoleList", {
            get: function () {
                return this._displayRoleList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneManager.prototype, "displaySpriteList", {
            get: function () {
                return this._displaySpriteList;
            },
            enumerable: true,
            configurable: true
        });
        // private initSceneLoader(): void {
        //     if (!Scene_data.supportBlob) {
        //         //this._sceneLoader = new SceneResLow();
        //     } else {
        //        // this._sceneLoader = new SceneRes();
        //     }
        // }
        SceneManager.prototype.clearScene = function () {
            //this.clearStaticScene();
            this._displayRoleList.length = 0;
        };
        SceneManager.prototype.clearStaticScene = function () {
            //console.log("场景场景所有对象");
            for (var key in this._sceneDic) {
                var obj = this._sceneDic[key];
                if (obj instanceof Pan3d.CombineParticle) {
                    Pan3d.ParticleManager.getInstance().removeParticle(obj);
                    obj.destory();
                }
                else if (obj instanceof Pan3d.Display3DSprite) {
                    obj.removeStage();
                    obj.destory();
                }
            }
            this._ready = false;
            this._sceneDic = null;
            this._sceneQuadTree = null;
            this._displayList.length = 0;
            this._sceneParticleList.length = 0;
            Pan3d.AstarUtil.porcessBak(false);
        };
        SceneManager.prototype.testUrl = function ($url) {
            return this._currentUrl == $url;
        };
        SceneManager.prototype.loadScene = function ($url, $completeFun, $progressFun, $analysisCompleteFun) {
            var _this = this;
            if (this._currentUrl == $url) { //原场景不加载
                Pan3d.AstarUtil.porcessBak(true);
                this._ready = true;
                $completeFun();
                $analysisCompleteFun();
                return;
            }
            this.clearStaticScene();
            this._ready = false;
            Pan3d.ResManager.getInstance().loadSceneRes($url, $completeFun, $progressFun, function ($str) {
                _this.loadSceneConfigCom($str);
                $analysisCompleteFun();
            });
            this._currentUrl = $url;
        };
        SceneManager.prototype.addSceneImgBg = function (info) {
            var displayimg = new Pan3d.Display3dBg();
            displayimg.setImgInfo(info.url, info.width, info.height);
            this.addDisplay(displayimg);
        };
        SceneManager.prototype.getDisplayByID = function ($type, $id) {
            if ($type == 0) {
                return this._sceneDic["build" + $id];
            }
            else if ($type == 1) {
                return this._sceneDic["particle" + $id];
            }
        };
        SceneManager.prototype.fixAstart = function (pos) {
            for (var i = 0; i < this._displayRoleList.length; i++) {
                this._displayRoleList[i].fixAstartData(pos);
            }
        };
        SceneManager.prototype.loadSceneConfigCom = function (obj) {
            this._sceneDic = new Object();
            var groundAry = obj.groundItem;
            var buildAry = obj.buildItem;
            Pan3d.Scene_data.fogColor = [obj.fogColor.x / 255.0, obj.fogColor.y / 255.0, obj.fogColor.z / 255.0];
            //  //console.log(obj.fogDistance)
            var d = obj.fogDistance * 1; //1000
            var s = obj.fogAttenuation; //0.5.
            Pan3d.Scene_data.gameAngle = isNaN(obj.gameAngle) ? 0 : obj.gameAngle;
            Pan3d.Scene_data.focus3D.rotationY = Pan3d.Scene_data.gameAngle;
            Pan3d.Scene_data.fogData = [d * s, 1 / ((1 - s) * d)];
            Pan3d.Scene_data.sceneNumId++;
            for (var j = 0; groundAry && j < groundAry.length; j++) {
                var groundDisplay = this.getGroundSprite(groundAry[j], obj.terrain);
                this.addDisplay(groundDisplay);
            }
            for (var i = 0; i < buildAry.length; i++) {
                var itemObj = buildAry[i];
                if (itemObj.type == Pan3d.BaseRes.PREFAB_TYPE) {
                    var itemDisplay = this.getBuildSprite(itemObj);
                    this.addDisplay(itemDisplay);
                }
                else if (itemObj.type == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                    var particle = this.getParticleSprite(itemObj);
                    Pan3d.ParticleManager.getInstance().addParticle(particle);
                    this._sceneParticleList.push(particle);
                }
            }
            Pan3d.Scene_data.light.setData(obj.SunNrm, obj.SunLigth, obj.AmbientLight);
            Pan3d.LightProbeManager.getInstance().setLightProbeData(obj.lightProbeItem);
            Pan3d.AstarUtil.setData(obj.astar);
            this._ready = true;
            if (obj.quadTreeData) {
                this._sceneQuadTree = new Pan3d.SceneQuadTree();
                this._sceneQuadTree.init(obj.quadTreeData, this._sceneDic);
            }
            else {
                this._sceneQuadTree = null;
            }
            // this.viewFrustum.setData(obj.aabb);
            Pan3d.Scene_data.cam3D.astarRect = Pan3d.AstarUtil.areaRect;
        };
        SceneManager.prototype.getGroundSprite = function (itemObj, terrain) {
            var itemDisplay = new Pan3d.TerrainDisplay3DSprite();
            itemDisplay.setObjUrl(itemObj.objsurl);
            itemDisplay.setMaterialUrl(itemObj.materialurl, itemObj.materialInfoArr);
            itemDisplay.materialInfoArr = itemObj.materialInfoArr;
            itemDisplay.setLightMapUrl(itemObj.lighturl);
            itemDisplay.scaleX = itemObj.scaleX;
            itemDisplay.scaleY = itemObj.scaleY;
            itemDisplay.scaleZ = itemObj.scaleZ;
            itemDisplay.x = itemObj.x;
            itemDisplay.y = itemObj.y;
            itemDisplay.z = itemObj.z;
            itemDisplay.rotationX = itemObj.rotationX;
            itemDisplay.rotationY = itemObj.rotationY;
            itemDisplay.rotationZ = itemObj.rotationZ;
            itemDisplay.objData.lightuvsOffsets = itemDisplay.objData.uvsOffsets;
            if (terrain) {
                itemDisplay.setGrounDataMesh(terrain[itemObj.id]);
            }
            this._sceneDic["ground" + itemObj.id] = itemDisplay;
            return itemDisplay;
        };
        SceneManager.prototype.makeCollisioin = function (arr) {
        };
        Object.defineProperty(SceneManager.prototype, "ready", {
            get: function () {
                return this._ready;
            },
            set: function ($value) {
                //console.log("--setready--", $value);
                this._ready = $value;
            },
            enumerable: true,
            configurable: true
        });
        SceneManager.prototype.getBuildSprite = function (itemObj) {
            var itemDisplay = new Pan3d.Display3DSprite();
            itemDisplay.setObjUrl(itemObj.objsurl);
            itemDisplay.setMaterialUrl(itemObj.materialurl, itemObj.materialInfoArr);
            itemDisplay.materialInfoArr = itemObj.materialInfoArr;
            itemDisplay.setLightMapUrl(itemObj.lighturl);
            itemDisplay.scaleX = itemObj.scaleX;
            itemDisplay.scaleY = itemObj.scaleY;
            itemDisplay.scaleZ = itemObj.scaleZ;
            itemDisplay.x = itemObj.x;
            itemDisplay.y = itemObj.y;
            itemDisplay.z = itemObj.z;
            itemDisplay.rotationX = itemObj.rotationX;
            itemDisplay.rotationY = itemObj.rotationY;
            itemDisplay.rotationZ = itemObj.rotationZ;
            itemDisplay.isPerspective = itemObj.isPerspective;
            itemDisplay.type = 0;
            itemDisplay.id = itemObj.id;
            this._sceneDic["build" + itemObj.id] = itemDisplay;
            return itemDisplay;
        };
        SceneManager.prototype.getParticleSprite = function (itemObj) {
            var particle;
            particle = Pan3d.ParticleManager.getInstance().getParticleByte(Pan3d.Scene_data.fileRoot + itemObj.url);
            particle.scaleX = itemObj.scaleX;
            particle.scaleY = itemObj.scaleY;
            particle.scaleZ = itemObj.scaleZ;
            particle.x = itemObj.x;
            particle.y = itemObj.y;
            particle.z = itemObj.z;
            particle.rotationX = itemObj.rotationX;
            particle.rotationY = itemObj.rotationY;
            particle.rotationZ = itemObj.rotationZ;
            particle.type = 0;
            this._sceneDic["particle" + itemObj.id] = particle;
            return particle;
        };
        SceneManager.prototype.initScene = function () {
            return;
            //this._displayList.push(new GridLineSprite());
        };
        SceneManager.prototype.addDisplay = function ($display, idx) {
            if (idx === void 0) { idx = -1; }
            if (this._displayList.indexOf($display) != -1) {
                return;
            }
            if (idx >= 0) {
                this._displayList.splice(idx, 0, $display);
            }
            else {
                this._displayList.push($display);
            }
            $display._scene = this;
            $display.addStage();
        };
        SceneManager.prototype.removeDisplay = function ($display) {
            var index = this._displayList.indexOf($display);
            if (index != -1) {
                this._displayList.splice(index, 1);
            }
            $display.removeStage();
        };
        /**
         * 动态添加的staticMesh 物件例如武器等
        */
        SceneManager.prototype.addSpriteDisplay = function ($display) {
            if (this._displaySpriteList.indexOf($display) != -1) {
                return;
            }
            $display._scene = this;
            $display.addStage();
            for (var i = 0; i < this._displaySpriteList.length; i++) {
                if (this._displaySpriteList[i].materialUrl == $display.materialUrl) {
                    this._displaySpriteList.splice(i, 0, $display);
                    return;
                }
            }
            this._displaySpriteList.push($display);
        };
        SceneManager.prototype.removeSpriteDisplay = function ($display) {
            var index = this._displaySpriteList.indexOf($display);
            if (index != -1) {
                this._displaySpriteList.splice(index, 1);
            }
            $display.removeStage();
        };
        /**
         * 动态添加的骨骼动画角色
         */
        SceneManager.prototype.addMovieDisplay = function ($display) {
            this._displayRoleList.push($display);
            $display.addStage();
        };
        SceneManager.prototype.addMovieDisplayTop = function ($display) {
            this._displayRoleList.unshift($display);
            $display.addStage();
        };
        SceneManager.prototype.removeMovieDisplay = function ($display) {
            var index = this._displayRoleList.indexOf($display);
            if (index != -1) {
                this._displayRoleList.splice(index, 1);
            }
            $display.removeStage();
        };
        SceneManager.prototype.setParticleVisible = function () {
            var $arr = Pan3d.ParticleManager.getInstance().particleList;
            for (var i = 0; $arr && i < $arr.length; i++) {
                if (!$arr[i].dynamic && $arr[i].bindVecter3d) {
                    var dis = Pan3d.Vector3D.distance(new Pan3d.Vector3D(Pan3d.Scene_data.focus3D.x, Pan3d.Scene_data.focus3D.y, Pan3d.Scene_data.focus3D.z), new Pan3d.Vector3D($arr[i].x, $arr[i].y, $arr[i].z));
                    $arr[i].sceneVisible = (dis < 1000);
                }
            }
        };
        SceneManager.prototype.update = function () {
            if (this.test) {
                return;
            }
            if (this._sceneQuadTree) {
                this._sceneQuadTree.setCircle(Pan3d.Scene_data.focus3D.x, Pan3d.Scene_data.focus3D.z, SceneManager.mapQudaTreeDistance);
                if (this._sceneQuadTree.needUpdata) {
                    for (var i = 0; i < this._displayList.length; i++) {
                        this._displayList[i].sceneVisible = false;
                        this._displayList[i].sceneVisible = true;
                    }
                    this.setParticleVisible();
                    this._sceneQuadTree.update();
                    this.mathCamFar();
                }
            }
            Pan3d.Scene_data.context3D.update();
            Pan3d.Scene_data.context3D.setDepthTest(false);
            Pan3d.UIManager.getInstance().upBgGroundZero();
            Pan3d.Scene_data.context3D.setDepthTest(true);
            this.updateMovieFrame();
            Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D, Pan3d.Scene_data.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            if (this._ready) {
                Pan3d.ParticleManager.getInstance().updateTime();
                Pan3d.SkillManager.getInstance().update();
                if (this.render) {
                    this.updateStaticDiplay();
                    this.updateSpriteDisplay();
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.clearTest();
                    this.updateMovieDisplay();
                    Pan3d.ShadowManager.getInstance().update();
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                    Pan3d.ParticleManager.getInstance().update();
                    Pan3d.BloodManager.getInstance().update();
                }
            }
            Pan3d.Scene_data.context3D.setDepthTest(false);
            Pan3d.UIManager.getInstance().update();
            // msgtip.MsgTipManager.getInstance().update()
            for (var i = 0; i < this._display2DList.length; i++) {
                this._display2DList[i].update();
            }
        };
        SceneManager.prototype.addDisplay2DList = function ($dis) {
            this._display2DList.push($dis);
        };
        SceneManager.prototype.mathCamFar = function () {
            var $p = new Pan3d.Vector3D;
            var $far = 0;
            for (var i = 0; i < this._displayList.length; i++) {
                var $dis = this._displayList[i];
                if ($dis.sceneVisible && $dis.aabb) {
                    var $m = $dis.posMatrix.clone();
                    $m.append(Pan3d.Scene_data.cam3D.cameraMatrix);
                    var $aabbVect = $dis.aabbVect;
                    for (var k = 0; k < $aabbVect.length; k++) {
                        $p = Pan3d.Scene_data.cam3D.cameraMatrix.transformVector($aabbVect[k]);
                        if ($p.z > $far) {
                            $far = $p.z;
                        }
                    }
                    /*
                    if (this._displayList[i].objData) {
                    
                        for (var j: number = 0; j < $dis.objData.vertices.length/3; j++) {
                            $p.x = $dis.objData.vertices[j * 3 + 0]
                            $p.y = $dis.objData.vertices[j * 3 + 1]
                            $p.z = $dis.objData.vertices[j * 3 + 2]
                            $p = $dis.posMatrix.transformVector($p);
                            $p=Scene_data.cam3D.cameraMatrix.transformVector($p)
                            if ($p.z > $far) {
                                $far = $p.z
                            }
                        }
                    }
                    */
                }
            }
            Pan3d.Scene_data.camFar = Math.max(500, $far + 100);
            Pan3d.Engine.resetViewMatrx3D();
        };
        SceneManager.prototype.updateStaticDiplay = function () {
            var num = 0;
            for (var i = 0; i < this._displayList.length; i++) {
                this._displayList[i].update();
                // if (this._displayList[i].sceneVisible) {
                //     num++;
                // }
            }
            // FpsMc.tipStr = "drawNum:" + (num + this._displayRoleList.length) + "/" + this._displayList.length; 
        };
        SceneManager.prototype.updateStaticBind = function () {
            // for (var i: number = 0; i < this._displayList.length; i++) {
            //     this._displayList[i].updateBind();
            // }
        };
        SceneManager.prototype.updateSpriteDisplay = function () {
            for (var i = 0; i < this._displaySpriteList.length; i++) {
                this._displaySpriteList[i].update();
            }
        };
        SceneManager.prototype.updateMovieDisplay = function () {
            for (var i = 0; i < this._displayRoleList.length; i++) {
                this._displayRoleList[i].update();
            }
            if (this._displayRoleList.length) {
                Pan3d.Scene_data.context3D.setVa(1, 3, null); //如果有角色,在这里要将顶点置空  ->$$$ 需要优化。这里临时处理
            }
        };
        SceneManager.prototype.updateMovieFrame = function () {
            var t = Pan3d.TimeUtil.getTimer();
            var delay = t - this._time;
            this._time = t;
            for (var i = 0; i < this._displayRoleList.length; i++) {
                this._displayRoleList[i].updateFrame(delay);
            }
            //  FpsMc.tipStr = "人数:" + (this._displayRoleList.length) 
        };
        SceneManager.mapQudaTreeDistance = 200;
        return SceneManager;
    }());
    Pan3d.SceneManager = SceneManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SceneManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillManager = /** @class */ (function (_super) {
        __extends(SkillManager, _super);
        function SkillManager() {
            var _this = 
            //this._dic = new Object();
            _super.call(this) || this;
            _this._time = 0;
            _this._skillDic = new Object;
            _this._loadDic = new Object;
            _this._skillAry = new Array;
            _this._preLoadDic = new Object;
            return _this;
        }
        SkillManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new SkillManager();
            }
            return this._instance;
        };
        SkillManager.prototype.update = function () {
            var _tempTime = Pan3d.TimeUtil.getTimer();
            var t = _tempTime - this._time;
            for (var i = 0; i < this._skillAry.length; i++) {
                this._skillAry[i].update(t);
            }
            this._time = _tempTime;
        };
        SkillManager.prototype.preLoadSkill = function ($url) {
            var _this = this;
            if (this._dic[$url] || this._preLoadDic[$url]) {
                return;
            }
            Pan3d.ResManager.getInstance().loadSkillRes(Pan3d.Scene_data.fileRoot + $url, function ($skillRes) {
                var skillData = new Pan3d.SkillData();
                skillData.data = $skillRes.data;
                skillData.useNum++;
                _this._dic[$url] = skillData;
                _this.addSrc($url, skillData);
            });
            this._preLoadDic[$url] = true;
        };
        //public fengbaonum:number = 0;
        SkillManager.prototype.getSkill = function ($url, $name, $callback) {
            var _this = this;
            if ($callback === void 0) { $callback = null; }
            var skill;
            var key = $url + $name;
            // if(key == "skill/jichu_1_byte.txtm_skill_04"){
            //     console.log("添加技能风暴");
            //     this.fengbaonum++;
            // }
            var ary = this._skillDic[key];
            if (ary) {
                for (var i = 0; i < ary.length; i++) {
                    skill = ary[i];
                    if (skill.isDeath && skill.useNum == 0) {
                        skill.reset();
                        skill.isDeath = false;
                        return skill;
                    }
                }
            }
            skill = new Pan3d.Skill();
            skill.name = $name;
            skill.isDeath = false;
            if (!this._skillDic[key]) {
                this._skillDic[key] = new Array;
            }
            this._skillDic[key].push(skill);
            if (this._dic[$url]) {
                skill.setData(this._dic[$url].data[skill.name], this._dic[$url]);
                skill.key = key;
                this._dic[$url].useNum++;
                return skill;
            }
            if (this._loadDic[$url]) {
                var obj = new Object;
                obj.name = $name;
                obj.skill = skill;
                obj.callback = $callback;
                this._loadDic[$url].push(obj);
                return skill;
            }
            this._loadDic[$url] = new Array;
            var obj = new Object;
            obj.name = $name;
            obj.skill = skill;
            obj.callback = $callback;
            this._loadDic[$url].push(obj);
            Pan3d.ResManager.getInstance().loadSkillRes(Pan3d.Scene_data.fileRoot + $url, function ($skillRes) {
                _this.loadSkillCom($url, $skillRes);
            });
            return skill;
        };
        SkillManager.prototype.loadSkillCom = function ($url, $skillRes) {
            var skillData = new Pan3d.SkillData();
            skillData.data = $skillRes.data;
            for (var i = 0; i < this._loadDic[$url].length; i++) {
                var obj = this._loadDic[$url][i];
                if (!obj.skill.hasDestory) {
                    obj.skill.setData(skillData.data[obj.name], skillData);
                    obj.skill.key = $url + obj.name;
                    skillData.useNum++;
                }
            }
            this._dic[$url] = skillData;
            this.addSrc($url, skillData);
            for (var i = 0; i < this._loadDic[$url].length; i++) {
                var obj = this._loadDic[$url][i];
                if (obj.callback) {
                    obj.callback();
                }
            }
            this._loadDic[$url].length = 0;
            this._loadDic[$url] = null;
        };
        SkillManager.prototype.addSrc = function ($url, skillData) {
            for (var key in skillData.data) {
                var skill = new Pan3d.Skill();
                skill.name = key;
                skill.isDeath = true;
                skill.src = true;
                skill.setData(skillData.data[key], skillData);
                skillData.addSrcSkill(skill);
                //skillData.useNum++;
                var dkey = $url + key;
                if (!this._skillDic[dkey]) {
                    this._skillDic[dkey] = new Array;
                }
                this._skillDic[dkey].push(skill);
            }
        };
        SkillManager.prototype.playSkill = function ($skill) {
            this._skillAry.push($skill);
            $skill.play();
        };
        SkillManager.prototype.removeSkill = function ($skill) {
            var index = this._skillAry.indexOf($skill);
            if (index != -1) {
                this._skillAry.splice(index, 1);
            }
        };
        SkillManager.prototype.gcSkill = function (skill) {
            for (var key in this._skillDic) {
                var ary = this._skillDic[key];
                var idx = ary.indexOf(skill);
                if (idx != -1) {
                    ary.splice(idx, 1);
                }
            }
        };
        SkillManager.prototype.gc = function () {
            //super.gc();
            for (var key in this._dic) {
                var rc = this._dic[key];
                if (rc.useNum <= 0) {
                    rc.idleTime++;
                    if (rc.idleTime >= Pan3d.ResCount.GCTime && rc.testDestory()) {
                        //console.log("清理 -" + key);
                        rc.destory();
                        delete this._dic[key];
                    }
                }
            }
            for (var key in this._skillDic) {
                var ary = this._skillDic[key];
                for (var i = ary.length - 1; i >= 0; i--) {
                    if (ary[i].isDeath && ary[i].useNum <= 0) {
                        ary[i].idleTime++;
                        if (ary[i].idleTime >= Pan3d.ResCount.GCTime) {
                            if (!ary[i].src) {
                                ary[i].destory();
                                ary.splice(i, 1);
                            }
                        }
                    }
                }
                if (ary.length == 0) {
                    //console.log("清理 -" + key);
                    delete this._skillDic[key];
                }
            }
        };
        return SkillManager;
    }(Pan3d.ResGC));
    Pan3d.SkillManager = SkillManager;
    var ShockUtil = /** @class */ (function () {
        function ShockUtil() {
            var _this = this;
            this.upFun = function ($d) {
                _this.update($d);
            };
        }
        ShockUtil.getInstance = function () {
            if (!this._instance) {
                this._instance = new ShockUtil();
            }
            return this._instance;
        };
        ShockUtil.prototype.update = function ($dtime) {
            this.ctime += $dtime;
            if (this.ctime > this.time) {
                Pan3d.TimeUtil.removeFrameTick(this.upFun);
                Pan3d.Scene_data.cam3D.offset.setTo(0, 0, 0);
                return;
            }
            var ranX = (Math.random() - 0.5) * this.amp;
            var ranY = (Math.random() - 0.5) * this.amp;
            var ranZ = (Math.random() - 0.5) * this.amp;
            Pan3d.Scene_data.cam3D.offset.setTo(ranX, ranY, ranZ);
        };
        ShockUtil.prototype.shock = function (time, amp) {
            this.time = time;
            this.ctime = 0;
            this.amp = amp;
            Pan3d.TimeUtil.addFrameTick(this.upFun);
        };
        return ShockUtil;
    }());
    Pan3d.ShockUtil = ShockUtil;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Skill = /** @class */ (function (_super) {
        __extends(Skill, _super);
        function Skill() {
            var _this = _super.call(this) || this;
            _this.isDeath = true;
            _this.src = false;
            _this.time = 0;
            _this.targetFlag = 0;
            _this.targetShockFlag = 0;
            _this.needSound = false;
            _this.hasDestory = false;
            _this.actionEnd = false;
            return _this;
        }
        Skill.prototype.setData = function ($data, $skillData) {
            if (this.hasDestory) {
                return;
            }
            this.skillVo = new Pan3d.SkillVo();
            this.skillVo.setData($data);
            this.setKeyAry();
            this.trajectoryAry = new Array;
            this._skillData = $skillData;
        };
        Skill.prototype.getBloodTime = function () {
            if (this.skillVo) {
                return this.skillVo.bloodTime;
            }
            else {
                return Pan3d.SkillVo.defaultBloodTime;
            }
        };
        Skill.prototype.play = function () {
            if (!this.skillVo) {
                this.skillComplete();
                return;
            }
            if (this.active && this.active instanceof Pan3d.Display3dMovie) {
                var $movie3d = this.active;
                $movie3d.play(this.skillVo.action, this.actionEnd ? 1 : 2, false);
            }
        };
        Skill.prototype.setKeyAry = function () {
            var _this = this;
            this.keyAry = new Array;
            if (this.skillVo.types == Pan3d.SkillType.FixEffect) {
                for (var i = 0; i < this.skillVo.keyAry.length; i++) {
                    var keySkill = new Pan3d.SkillFixEffect();
                    keySkill.setInfo(this.skillVo.keyAry[i]);
                    keySkill.removeCallFun = function ($key) { _this.removeKey($key); };
                    keySkill.active = this.active;
                    this.keyAry.push(keySkill);
                }
            }
            else if (this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicTarget || this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicPoint) {
                for (var i = 0; i < this.skillVo.keyAry.length; i++) {
                    var trajectory;
                    var tkv = (this.skillVo.keyAry[i]);
                    if (tkv.multype == 1) {
                        trajectory = new Pan3d.SkillMulTrajectory();
                    }
                    else {
                        trajectory = new Pan3d.SkillTrajectory();
                    }
                    trajectory.setInfo(this.skillVo.keyAry[i]);
                    this.keyAry.push(trajectory);
                }
            }
        };
        Skill.prototype.setendParticleRoation = function ($vect3d) {
            for (var i = 0; this.keyAry && i < this.keyAry.length; i++) {
                if (this.keyAry[i] instanceof Pan3d.SkillTrajectory) {
                    if (this.keyAry[i].endParticle) {
                        this.keyAry[i].endParticle.rotationX = $vect3d.x;
                        this.keyAry[i].endParticle.rotationY = $vect3d.y;
                        this.keyAry[i].endParticle.rotationZ = $vect3d.z;
                    }
                }
            }
        };
        Skill.prototype.removeKey = function ($key) {
            this.completeNum++;
            if (this.completeNum == this.keyAry.length) {
                //    //console.log("播放结束");
                this.skillComplete();
            }
        };
        /**强制移除技能 */
        Skill.prototype.removeSkillForce = function () {
            // if(this.key == "skill/jichu_1_byte.txtm_skill_04"){
            //     SkillManager.getInstance().fengbaonum--;
            //     console.log("移除技能风暴 " + SkillManager.getInstance().fengbaonum);
            // }        
            if (this.keyAry) {
                for (var i = 0; i < this.keyAry.length; i++) {
                    this.keyAry[i].reset();
                }
            }
            this.skillComplete();
            this.reset();
        };
        Skill.prototype.skillComplete = function () {
            Pan3d.SkillManager.getInstance().removeSkill(this);
            this.isDeath = true;
            if (this.completeFun) {
                this.completeFun();
            }
            this.idleTime = 0;
        };
        Skill.prototype.reset = function () {
            this.time = 0;
            this.completeNum = 0;
            this.active = null;
            this.completeFun = null;
            this.targetFlag = 0;
            this.targetShockFlag = 0;
            this.soundPlay = false;
            this.needSound = false;
        };
        Skill.prototype.update = function (t) {
            this.time += t;
            if (this.time > Skill.MaxTime) {
                //console.log("超时结束");
                this.skillComplete();
            }
            this.getKeyTarget();
            this.getShockTarget();
            this.updateTrajector(t);
        };
        Skill.prototype.updateTrajector = function (t) {
            for (var i = 0; i < this.trajectoryAry.length; i++) {
                this.trajectoryAry[i].update(t);
            }
        };
        Skill.prototype.getKeyTarget = function () {
            if (!this.keyAry) {
                return;
            }
            for (var i = this.targetFlag; i < this.keyAry.length; i++) {
                if (this.keyAry[i].time < this.time) {
                    this.keyAry[i].addToRender();
                    if (this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicTarget || this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicPoint) {
                        var ss = this.keyAry[i];
                        this.trajectoryAry.push(ss);
                    }
                    i++;
                    this.targetFlag = i;
                }
                else {
                    break;
                }
            }
            this.getSound();
        };
        Skill.prototype.getShockTarget = function () {
            if (!this.skillVo.shockAry || !this.needSound) {
                return;
            }
            for (var i = this.targetShockFlag; i < this.skillVo.shockAry.length; i++) {
                if (this.skillVo.shockAry[i].time < this.time) {
                    //震动
                    Pan3d.ShockUtil.getInstance().shock(this.skillVo.shockAry[i].lasttime, this.skillVo.shockAry[i].amp);
                    i++;
                    this.targetShockFlag = i;
                }
                else {
                    break;
                }
            }
            //this.getSound();
        };
        Skill.prototype.getSound = function () {
            if (!this.skillVo.sound || this.soundPlay || !this.needSound) {
                return;
            }
            if (this.skillVo.sound.frame < this.time) {
                Pan3d.SoundManager.getInstance().playSkillSound(this.skillVo.sound.url);
                this.soundPlay = true;
            }
        };
        Skill.prototype.configFixEffect = function ($active, $completeFun, $posObj) {
            if ($completeFun === void 0) { $completeFun = null; }
            if ($posObj === void 0) { $posObj = null; }
            this.active = $active;
            this.completeFun = $completeFun;
            if (!this.keyAry) {
                return;
            }
            for (var i = 0; i < this.keyAry.length; i++) {
                if (this.skillVo.types != Pan3d.SkillType.FixEffect) {
                    continue;
                }
                var skillFixEffect = this.keyAry[i];
                skillFixEffect.active = $active;
                if ($posObj && $posObj.length) {
                    if (i > ($posObj.length - 1)) {
                        skillFixEffect.outPos = $posObj[$posObj.length - 1];
                    }
                    else {
                        skillFixEffect.outPos = $posObj[i];
                    }
                }
                else {
                    skillFixEffect.outPos = null;
                }
            }
        };
        Skill.prototype.configTrajectory = function ($active, $target, $completeFun, types, $bloodFun) {
            var _this = this;
            if ($completeFun === void 0) { $completeFun = null; }
            if (types === void 0) { types = 0; }
            if ($bloodFun === void 0) { $bloodFun = null; }
            this.active = $active;
            this.completeFun = $completeFun;
            this.completeNum = 0;
            if (!this.keyAry) {
                return;
            }
            for (var i = 0; i < this.keyAry.length; i++) {
                if (!(this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicTarget || this.skillVo.types == Pan3d.SkillType.TrajectoryDynamicPoint)) {
                    continue;
                }
                var skillTrajector = this.keyAry[i];
                skillTrajector.setPlayData($active, $target, function ($skilltra) { _this.removeTrajectory($skilltra); }, types, (i == 0 ? $bloodFun : null));
            }
        };
        Skill.prototype.configMulTrajectory = function ($activeList, $active, $target, $completeFun) {
            var _this = this;
            if ($completeFun === void 0) { $completeFun = null; }
            this.active = $active;
            this.completeFun = $completeFun;
            this.completeNum = 0;
            if (!this.keyAry) {
                return;
            }
            for (var i = 0; i < this.keyAry.length; i++) {
                if (this.skillVo.types != Pan3d.SkillType.TrajectoryDynamicTarget) {
                    continue;
                }
                var skillTrajector = this.keyAry[i];
                skillTrajector.setMulPlayData($activeList, $target, function ($skilltra) { _this.removeTrajectory($skilltra); }, 2);
            }
        };
        Skill.prototype.removeTrajectory = function ($skilltra) {
            var index = this.trajectoryAry.indexOf($skilltra);
            if (index != -1) {
                this.trajectoryAry.splice(index, 1);
            }
            this.completeNum++;
            if (this.completeNum == this.keyAry.length) {
                // //console.log("播放结束");
                this.skillComplete();
            }
        };
        Skill.prototype.destory = function () {
            this.skillVo = null;
            this.name = null;
            if (this.keyAry) {
                for (var i = 0; i < this.keyAry.length; i++) {
                    this.keyAry[i].destory();
                }
                this.keyAry.length = 0;
                this.keyAry = null;
            }
            this.active = null;
            this.completeFun = null;
            if (this.trajectoryAry) {
                for (var i = 0; i < this.trajectoryAry.length; i++) {
                    this.trajectoryAry[i].destory();
                }
                this.trajectoryAry.length = 0;
                this.trajectoryAry = null;
            }
            if (this._skillData) {
                this._skillData.useNum--;
            }
            this._skillData = null;
            this.hasDestory = true;
        };
        Skill.MaxTime = 1000 * 5;
        return Skill;
    }(Pan3d.ResCount));
    Pan3d.Skill = Skill;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Skill.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillData = /** @class */ (function (_super) {
        __extends(SkillData, _super);
        function SkillData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.srcList = new Array();
            return _this;
        }
        SkillData.prototype.addSrcSkill = function ($skill) {
            this.srcList.push($skill);
        };
        SkillData.prototype.destory = function () {
            for (var i = 0; i < this.srcList.length; i++) {
                this.srcList[i].destory();
                Pan3d.SkillManager.getInstance().gcSkill(this.srcList[i]);
            }
        };
        SkillData.prototype.testDestory = function () {
            for (var i = 0; i < this.srcList.length; i++) {
                if (!(this.srcList[i].isDeath && this.srcList[i].idleTime >= Pan3d.ResCount.GCTime)) {
                    return false;
                }
            }
            return true;
        };
        return SkillData;
    }(Pan3d.ResCount));
    Pan3d.SkillData = SkillData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillData.js.map
var Pan3d;
(function (Pan3d) {
    var SkillVo = /** @class */ (function () {
        function SkillVo() {
        }
        SkillVo.prototype.setData = function ($info) {
            this.keyAry = new Array;
            if (!$info) {
                //console.log("技能有错")
            }
            this.action = $info.action;
            this.skillname = $info.skillname;
            this.bloodTime = $info.blood;
            this.types = $info.type;
            if (this.types == SkillType.FixEffect) {
                this.keyAry = this.getFixEffect($info.data);
            }
            else if (this.types == SkillType.TrajectoryDynamicTarget || this.types == SkillType.TrajectoryDynamicPoint) {
                this.keyAry = this.getTrajectoryDynamicTarget($info.data);
            }
            if ($info.sound) {
                this.sound = new Pan3d.SkillKeyVo;
                this.sound.frame = $info.sound.time * Pan3d.Scene_data.frameTime;
                this.sound.url = $info.sound.name;
            }
            if ($info.shock) {
                this.shockAry = this.getShockAry($info.shock);
            }
        };
        SkillVo.prototype.getShockAry = function ($ary) {
            var keyAry = new Array;
            for (var i = 0; i < $ary.length; i++) {
                var key = new Pan3d.SkillShockVo();
                key.setData($ary[i]);
                keyAry.push(key);
            }
            return keyAry;
        };
        SkillVo.prototype.getFixEffect = function ($ary) {
            var keyAry = new Array;
            for (var i = 0; i < $ary.length; i++) {
                var key = new Pan3d.SkillFixEffectKeyVo();
                key.setData($ary[i]);
                keyAry.push(key);
            }
            return keyAry;
        };
        SkillVo.prototype.getTrajectoryDynamicTarget = function ($ary) {
            var keyAry = new Array;
            for (var i = 0; i < $ary.length; i++) {
                var key = new Pan3d.SkillTrajectoryTargetKeyVo();
                key.setData($ary[i]);
                keyAry.push(key);
            }
            return keyAry;
        };
        SkillVo.defaultBloodTime = 250;
        return SkillVo;
    }());
    Pan3d.SkillVo = SkillVo;
    var SkillType = /** @class */ (function () {
        function SkillType() {
        }
        SkillType.TrajectoryDynamicTarget = 1;
        SkillType.FixEffect = 4;
        SkillType.TrajectoryDynamicPoint = 3;
        return SkillType;
    }());
    Pan3d.SkillType = SkillType;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillKeyVo = /** @class */ (function () {
        function SkillKeyVo() {
            this.frame = 0;
        }
        SkillKeyVo.prototype.setData = function ($data) {
            this.frame = $data.frame;
            this.url = $data.url;
        };
        return SkillKeyVo;
    }());
    Pan3d.SkillKeyVo = SkillKeyVo;
    var SkillShockVo = /** @class */ (function () {
        function SkillShockVo() {
        }
        SkillShockVo.prototype.setData = function ($data) {
            this.time = $data.time * Pan3d.Scene_data.frameTime;
            this.lasttime = $data.lasttime * Pan3d.Scene_data.frameTime;
            this.amp = $data.amp;
        };
        return SkillShockVo;
    }());
    Pan3d.SkillShockVo = SkillShockVo;
    var SkillFixEffectKeyVo = /** @class */ (function (_super) {
        __extends(SkillFixEffectKeyVo, _super);
        function SkillFixEffectKeyVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillFixEffectKeyVo.prototype.setData = function ($data) {
            _super.prototype.setData.call(this, $data);
            this.hasSocket = $data.hasSocket;
            if (this.hasSocket) {
                this.socket = $data.socket;
            }
            else {
                this.pos = new Pan3d.Vector3D($data.pos.x, $data.pos.y, $data.pos.z);
                this.rotation = new Pan3d.Vector3D($data.rotation.x, $data.rotation.y, $data.rotation.z);
            }
        };
        return SkillFixEffectKeyVo;
    }(SkillKeyVo));
    Pan3d.SkillFixEffectKeyVo = SkillFixEffectKeyVo;
    var SkillTrajectoryTargetKeyVo = /** @class */ (function (_super) {
        __extends(SkillTrajectoryTargetKeyVo, _super);
        function SkillTrajectoryTargetKeyVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillTrajectoryTargetKeyVo.prototype.setData = function ($data) {
            _super.prototype.setData.call(this, $data);
            this.beginType = $data.beginType;
            if (this.beginType == 0) {
                this.beginPos = new Pan3d.Vector3D($data.beginPos.x, $data.beginPos.y, $data.beginPos.z);
            }
            else if (this.beginType == 1) {
                this.beginSocket = $data.beginSocket;
            }
            this.speed = $data.speed;
            if ($data.hitSocket) {
                this.hitSocket = $data.hitSocket;
            }
            if ($data.endParticle) {
                this.endParticleUrl = $data.endParticle;
            }
            this.multype = $data.multype;
        };
        return SkillTrajectoryTargetKeyVo;
    }(SkillKeyVo));
    Pan3d.SkillTrajectoryTargetKeyVo = SkillTrajectoryTargetKeyVo;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillKeyVo.js.map
var Pan3d;
(function (Pan3d) {
    var SkillKey = /** @class */ (function () {
        function SkillKey() {
            this.time = 0;
        }
        SkillKey.prototype.addToRender = function () {
            if (!this.particle) {
                return;
            }
            this.particle.reset();
            this.particle.sceneVisible = true;
            Pan3d.ParticleManager.getInstance().addParticle(this.particle);
        };
        SkillKey.prototype.setInfo = function (obj) {
            this.time = obj.frame * Pan3d.Scene_data.frameTime;
            this.particle = Pan3d.ParticleManager.getInstance().getParticleByte(Pan3d.Scene_data.fileRoot + obj.url);
        };
        SkillKey.prototype.reset = function () {
            //this.time = 0;
            this.particle.reset();
            Pan3d.ParticleManager.getInstance().removeParticle(this.particle);
        };
        SkillKey.prototype.destory = function () {
            this.particle.destory();
            this.particle = null;
            this.removeCallFun = null;
        };
        return SkillKey;
    }());
    Pan3d.SkillKey = SkillKey;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillKey.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillEffect = /** @class */ (function (_super) {
        __extends(SkillEffect, _super);
        function SkillEffect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillEffect.prototype.addToRender = function () {
            _super.prototype.addToRender.call(this);
            this.particle.addEventListener(Pan3d.BaseEvent.COMPLETE, this.onPlayCom, this);
        };
        SkillEffect.prototype.onPlayCom = function (event) {
            if (event === void 0) { event = null; }
            this.particle.removeEventListener(Pan3d.BaseEvent.COMPLETE, this.onPlayCom, this);
            Pan3d.ParticleManager.getInstance().removeParticle(this.particle);
            this.removeCallFun(this);
        };
        return SkillEffect;
    }(Pan3d.SkillKey));
    Pan3d.SkillEffect = SkillEffect;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillBugBind = /** @class */ (function () {
        function SkillBugBind() {
        }
        SkillBugBind.prototype.getSocket = function (socketName, resultMatrix) {
            this.bindMatrix.clone(resultMatrix);
        };
        SkillBugBind.prototype.getSunType = function () {
            return 1;
        };
        return SkillBugBind;
    }());
    Pan3d.SkillBugBind = SkillBugBind;
    var SkillFixEffect = /** @class */ (function (_super) {
        __extends(SkillFixEffect, _super);
        function SkillFixEffect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillFixEffect.prototype.setInfo = function (obj) {
            _super.prototype.setInfo.call(this, obj);
            var data = obj;
            this.pos = data.pos;
            this.rotation = data.rotation;
            this.hasSocket = data.hasSocket;
            this.socket = data.socket;
        };
        SkillFixEffect.prototype.addToRender = function () {
            _super.prototype.addToRender.call(this);
            if (this.outPos) {
                this.particle.x = this.outPos.x;
                this.particle.y = this.outPos.y;
                this.particle.z = this.outPos.z;
                this.particle.rotationX = this.rotation.x;
                this.particle.rotationY = this.rotation.y + this.active.rotationY;
                this.particle.rotationZ = this.rotation.z;
                this.particle.bindTarget = null;
            }
            else if (this.hasSocket) {
                var targetActive = this.active;
                this.particle.bindTarget = (targetActive);
                this.particle.bindSocket = this.socket;
            }
            else {
                var ma = new Pan3d.Matrix3D;
                ma.appendRotation(this.active.rotationY, Pan3d.Vector3D.Y_AXIS);
                var v3d = ma.transformVector(this.pos);
                v3d.x += this.active.x;
                v3d.y += this.active.y;
                v3d.z += this.active.z;
                /* //原来小刘写的方法，在有编辑器中因为角色角度为0,当游戏场景时就会有错。
                this.particle.x = v3d.x;
                this.particle.y = v3d.y;
                this.particle.z = v3d.z;

                this.particle.rotationX = this.rotation.x;
                this.particle.rotationY = this.rotation.y +this.active.rotationY
                this.particle.rotationZ = this.rotation.z;

                */
                // 当绑定对象有三个轴变化时有异常，需
                var $SkillBugBind = new SkillBugBind();
                $SkillBugBind.bindMatrix = new Pan3d.Matrix3D;
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.x, Pan3d.Vector3D.X_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.y, Pan3d.Vector3D.Y_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.z, Pan3d.Vector3D.Z_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.active.rotationY, Pan3d.Vector3D.Y_AXIS);
                $SkillBugBind.bindMatrix.appendTranslation(v3d.x, v3d.y, v3d.z);
                this.particle.bindTarget = $SkillBugBind;
            }
        };
        return SkillFixEffect;
    }(Pan3d.SkillEffect));
    Pan3d.SkillFixEffect = SkillFixEffect;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillFixEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillTrajectory = /** @class */ (function (_super) {
        __extends(SkillTrajectory, _super);
        function SkillTrajectory() {
            var _this = _super.call(this) || this;
            _this._currentPos = new Pan3d.Vector3D;
            _this.rotationMatrix = new Pan3d.Matrix3D;
            _this._socketMaxrix = new Pan3d.Matrix3D;
            _this._currentTargetPos = new Pan3d.Vector3D;
            return _this;
            //this.path = new SkillSinPath();
            //this.path.setData(this, () => { this.applyArrive() } ,this._currentPos, this.rotationMatrix, this._currentTargetPos);
        }
        SkillTrajectory.prototype.update = function (t) {
            this.path.update(t);
        };
        SkillTrajectory.prototype.reset = function () {
            _super.prototype.reset.call(this);
            //if(false){ 
            if (this.endParticle) {
                Pan3d.ParticleManager.getInstance().addParticle(this.endParticle);
                this.endParticle.reset();
                this.endParticle.setPos(this._currentTargetPos.x, this._currentTargetPos.y, this._currentTargetPos.z);
            }
            if (this.removeCallFun) {
                this.removeCallFun(this);
            }
        };
        SkillTrajectory.prototype.endPlayFun = function (e) {
            if (e === void 0) { e = null; }
            Pan3d.ParticleManager.getInstance().removeParticle(this.endParticle);
            this.endParticle.removeEventListener(Pan3d.BaseEvent.COMPLETE, this.endPlayFun, this);
        };
        SkillTrajectory.prototype.setCurrentPos = function () {
            if (this.data.hitSocket) {
                var targetMovie = (this.target);
                if (targetMovie) {
                    targetMovie.getSocket(this.data.hitSocket, this._socketMaxrix);
                    this._currentTargetPos.setTo(this._socketMaxrix.position.x, this._socketMaxrix.position.y, this._socketMaxrix.position.z);
                }
                else {
                    //console.log("需要处理,特殊没有指定对象")
                }
                return true;
            }
            else {
                if (this._currentTargetPos.x == this.target.x && this._currentTargetPos.y == this.target.y && this._currentTargetPos.z == this.target.z) {
                    return false;
                }
                else {
                    this._currentTargetPos.setTo(this.target.x, this.target.y, this.target.z);
                    return true;
                }
            }
        };
        SkillTrajectory.prototype.addToRender = function () {
            _super.prototype.addToRender.call(this);
            var beginPos;
            if (this.data.beginType == 0) {
                var ma = new Pan3d.Matrix3D;
                ma.appendRotation(this.active.rotationY, Pan3d.Vector3D.Y_AXIS);
                beginPos = ma.transformVector(this.data.beginPos);
                this._currentPos.setTo(this.active.x + beginPos.x, this.active.y + beginPos.y, this.active.z + beginPos.z);
            }
            else if (this.data.beginType == 1) {
                var tempMa = new Pan3d.Matrix3D;
                var bindActive = (this.active);
                bindActive.getSocket(this.data.beginSocket, tempMa);
                beginPos = tempMa.position;
                this._currentPos.setTo(beginPos.x, beginPos.y, beginPos.z);
            }
            this.particle.setPos(this._currentPos.x, this._currentPos.y, this._currentPos.z);
            this.path.add();
        };
        SkillTrajectory.prototype.getSocket = function (socketName, resultMatrix) {
            resultMatrix.identity();
            resultMatrix.append(this.rotationMatrix);
            resultMatrix.appendTranslation(this._currentPos.x, this._currentPos.y, this._currentPos.z);
        };
        SkillTrajectory.prototype.getSunType = function () {
            return 0;
        };
        SkillTrajectory.prototype.setInfo = function (obj) {
            _super.prototype.setInfo.call(this, obj);
            this.particle.bindTarget = this;
            this.data = obj;
            //this.path.speed = this.data.speed;
            if (this.data.endParticleUrl) {
                this.endParticle = Pan3d.ParticleManager.getInstance().getParticleByte(Pan3d.Scene_data.fileRoot + this.data.endParticleUrl);
                this.endParticle.addEventListener(Pan3d.BaseEvent.COMPLETE, this.endPlayFun, this);
            }
        };
        SkillTrajectory.prototype.setPlayData = function ($active, $target, $removeCallFun, types, $bloodFun) {
            var _this = this;
            if (types === void 0) { types = 0; }
            if ($bloodFun === void 0) { $bloodFun = null; }
            this.active = $active;
            this.target = $target;
            this.removeCallFun = $removeCallFun;
            this._currentPos.setTo(0, 0, 0);
            this.rotationMatrix.identity();
            this._socketMaxrix.identity();
            this._currentTargetPos.setTo(0, 0, 0);
            if (!this.path) {
                this.path = Pan3d.PathManager.getNewPath(2);
                this.path.setData(this, function () { _this.reset(); }, this._currentPos, this.rotationMatrix, this._currentTargetPos, $bloodFun);
                this.path.speed = this.data.speed;
            }
            this.path.reset();
        };
        SkillTrajectory.prototype.destory = function () {
            _super.prototype.destory.call(this);
            this.active = null;
            this.target = null;
            this.data = null;
            this._currentPos = null;
            this.rotationMatrix = null;
            this._socketMaxrix = null;
            this._currentTargetPos = null;
            this.path = null;
        };
        return SkillTrajectory;
    }(Pan3d.SkillKey));
    Pan3d.SkillTrajectory = SkillTrajectory;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillTrajectory.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillMulTrajectory = /** @class */ (function (_super) {
        __extends(SkillMulTrajectory, _super);
        function SkillMulTrajectory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillMulTrajectory.prototype.update = function (t) {
            this.pathMul.update(t);
        };
        SkillMulTrajectory.prototype.getSunType = function () {
            return 1;
        };
        SkillMulTrajectory.prototype.addToRender = function () {
            if (!this.particle) {
                return;
            }
            this.particle.reset();
            Pan3d.ParticleManager.getInstance().addParticle(this.particle);
            if (!this.currentPosList) {
                this.currentPosList = new Array;
                for (var i = 0; i < this.activeList.length; i++) {
                    this.currentPosList.push(new Pan3d.Vector3D(this.activeList[i].x, this.activeList[i].y + 10, this.activeList[i].z + 5));
                }
                this.pathMul.setInitCurrentPos(this.currentPosList);
            }
            else {
                for (var i = 0; i < this.activeList.length; i++) {
                    this.currentPosList[i].setTo(this.activeList[i].x, this.activeList[i].y + 10, this.activeList[i].z + 5);
                    this.currentPosList[i].w = 0;
                }
            }
            //this.particle.setMulPos(this.currentPosList);
            this.pathMul.add();
            this.particle.setMulPos(this.pathMul.resultAry);
        };
        SkillMulTrajectory.prototype.setMulPlayData = function ($activeList, $target, $removeCallFun, types) {
            var _this = this;
            if (types === void 0) { types = 0; }
            this.activeList = $activeList;
            this.active = this.activeList[0];
            this.target = $target;
            this.removeCallFun = $removeCallFun;
            this._currentPos.setTo(0, 0, 0);
            this.rotationMatrix.identity();
            this._socketMaxrix.identity();
            this._currentTargetPos.setTo(0, 0, 0);
            if (!this.pathMul) {
                this.pathMul = Pan3d.PathManager.getNewPath(types);
                this.pathMul.setData(this, function () { _this.reset(); }, this._currentPos, this.rotationMatrix, this._currentTargetPos);
                this.pathMul.speed = this.data.speed;
            }
            this.pathMul.reset();
        };
        SkillMulTrajectory.prototype.getMulSocket = function (ary) {
            if (ary) {
                this.pathMul.applyData(ary);
            }
        };
        return SkillMulTrajectory;
    }(Pan3d.SkillTrajectory));
    Pan3d.SkillMulTrajectory = SkillMulTrajectory;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillMulTrajectory.js.map
var Pan3d;
(function (Pan3d) {
    var SkillPath = /** @class */ (function () {
        function SkillPath() {
            /**
            * 当前方向
            */
            this._currentDirect = new Pan3d.Vector3D;
        }
        SkillPath.prototype.update = function (t) {
            this.time = t;
            if (this.hasReached) {
                this.endTime += t;
                if (this.endTime > 200) {
                    this.applyArrive();
                }
                return;
            }
            if (this.skillTrajectory.setCurrentPos()) {
                this._currentDirect.x = this.currentTargetPos.x - this.currentPos.x;
                this._currentDirect.y = this.currentTargetPos.y - this.currentPos.y;
                this._currentDirect.z = this.currentTargetPos.z - this.currentPos.z;
                this._currentDirect.normalize();
                this._currentDirect.scaleBy(this.speed);
                this.setRotationMatrix(this.currentTargetPos.subtract(this.currentPos));
                if (this._currentDirect.length == 0) {
                    this.arrive();
                    return;
                }
            }
            var currentDistance = this._currentDirect.length * this.time;
            if (!this.hasReached) {
                var targetDistance = Pan3d.Vector3D.distance(this.currentPos, this.currentTargetPos);
                this.currentPos.x += this._currentDirect.x * this.time;
                this.currentPos.y += this._currentDirect.y * this.time;
                this.currentPos.z += this._currentDirect.z * this.time;
            }
            if (currentDistance > targetDistance) {
                this.arrive();
            }
            //this.distance += currentDistance;
        };
        SkillPath.prototype.setRotationMatrix = function ($newPos) {
            $newPos.normalize();
            var base = new Pan3d.Vector3D(0, 0, 1);
            var axis = base.cross($newPos);
            axis.normalize();
            var angle = Math.acos($newPos.dot(base));
            var qu = new Pan3d.Quaternion();
            qu.fromAxisAngle(axis, angle);
            qu.toMatrix3D(this.rotationMatrix);
        };
        SkillPath.prototype.arrive = function () {
            this.hasReached = true;
        };
        SkillPath.prototype.applyArrive = function () {
            this.endFun();
            if (this.bloodFun) {
                this.bloodFun();
            }
        };
        SkillPath.prototype.reset = function () {
            this.hasReached = false;
            this._currentDirect.setTo(0, 0, 0);
            this.endTime = 0;
        };
        SkillPath.prototype.add = function () {
        };
        SkillPath.prototype.setData = function ($skillTrajectory, $endFun, $currentPos, $rotationMatrix, $currentTargetPos, $bloodFun) {
            this.skillTrajectory = $skillTrajectory;
            this.currentPos = $currentPos;
            this.rotationMatrix = $rotationMatrix;
            this.currentTargetPos = $currentTargetPos;
            this.endFun = $endFun;
            this.bloodFun = $bloodFun;
        };
        return SkillPath;
    }());
    Pan3d.SkillPath = SkillPath;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillPath.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillSinPath = /** @class */ (function (_super) {
        __extends(SkillSinPath, _super);
        function SkillSinPath() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.basePos = new Pan3d.Vector3D;
            return _this;
        }
        SkillSinPath.prototype.add = function () {
            this.skillTrajectory.setCurrentPos();
            var v3d = new Pan3d.Vector3D();
            v3d.x = this.currentTargetPos.x - this.currentPos.x;
            v3d.y = this.currentTargetPos.y - this.currentPos.y;
            v3d.z = this.currentTargetPos.z - this.currentPos.z;
            this.basePos.setTo(this.currentPos.x, this.currentPos.y, this.currentPos.z);
            this.alltime = v3d.length / this.speed;
        };
        SkillSinPath.prototype.update = function (t) {
            this.time = t;
            this.lastTime += t;
            if (this.hasReached) {
                this.endTime += t;
                if (this.endTime > 200) {
                    this.applyArrive();
                }
                return;
            }
            this.skillTrajectory.setCurrentPos();
            var ypos = (this.lastTime / this.alltime);
            if (ypos > 1) {
                ypos = 1;
            }
            //ypos = ypos - ypos * ypos;   
            //ypos *= 150; 
            var offsetv3d = this.getOffset(ypos);
            this._currentDirect.x = this.currentTargetPos.x - this.basePos.x;
            this._currentDirect.y = this.currentTargetPos.y - this.basePos.y;
            this._currentDirect.z = this.currentTargetPos.z - this.basePos.z;
            this._currentDirect.normalize();
            this._currentDirect.scaleBy(this.speed);
            this.setRotationMatrix(this.currentTargetPos.subtract(this.basePos));
            if (this._currentDirect.length == 0) {
                this.arrive();
                return;
            }
            var currentDistance = this._currentDirect.length * this.time;
            if (!this.hasReached) {
                var targetDistance = Pan3d.Vector3D.distance(this.basePos, this.currentTargetPos);
                this.basePos.x += this._currentDirect.x * this.time;
                this.basePos.y += this._currentDirect.y * this.time;
                this.basePos.z += this._currentDirect.z * this.time;
                // this.currentPos.x = this.basePos.x + ypos;
                // this.currentPos.y = this.basePos.y;
                // this.currentPos.z = this.basePos.z;
                this.setApplyPos(offsetv3d);
            }
            if (currentDistance > targetDistance) {
                this.arrive();
            }
            //this.distance += currentDistance;
        };
        SkillSinPath.prototype.setApplyPos = function ($offset) {
            this.currentPos.x = this.basePos.x + $offset.x;
            this.currentPos.y = this.basePos.y + $offset.y;
            this.currentPos.z = this.basePos.z + $offset.z;
        };
        SkillSinPath.prototype.getOffset = function (ypos) {
            ypos = Math.sin(ypos * Math.PI) * 100;
            var offsetv3d = this._currentDirect.cross(new Pan3d.Vector3D(0, 1, 0));
            offsetv3d.scaleBy(ypos);
            return new Pan3d.Vector3D;
        };
        SkillSinPath.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.lastTime = 0;
        };
        return SkillSinPath;
    }(Pan3d.SkillPath));
    Pan3d.SkillSinPath = SkillSinPath;
    var SkillCosPath = /** @class */ (function (_super) {
        __extends(SkillCosPath, _super);
        function SkillCosPath() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillCosPath.prototype.getOffset = function (ypos) {
            ypos = (ypos - ypos * ypos) * 300; //Math.sin(ypos * Math.PI) * 100;
            var offsetv3d = this._currentDirect.cross(new Pan3d.Vector3D(0, -1, 0));
            offsetv3d.scaleBy(ypos);
            return new Pan3d.Vector3D;
        };
        return SkillCosPath;
    }(SkillSinPath));
    Pan3d.SkillCosPath = SkillCosPath;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillSinPath.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillMulPath = /** @class */ (function (_super) {
        __extends(SkillMulPath, _super);
        function SkillMulPath() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.lastTime = 0;
            return _this;
        }
        SkillMulPath.prototype.setInitCurrentPos = function (ary) {
            this.currentPosAry = ary;
            this.allTimeList = new Array;
            for (var i = 0; i < ary.length; i++) {
                this.allTimeList.push(0);
            }
        };
        SkillMulPath.prototype.add = function () {
            this.skillTrajectory.setCurrentPos();
            this.directAry = new Array;
            var maxLenght = 0;
            for (var i = 0; i < this.currentPosAry.length; i++) {
                var v3d = new Pan3d.Vector3D();
                v3d.x = this.currentTargetPos.x - this.currentPosAry[i].x;
                v3d.y = this.currentTargetPos.y - this.currentPosAry[i].y;
                v3d.z = this.currentTargetPos.z - this.currentPosAry[i].z;
                var le = v3d.length;
                if (le > maxLenght) {
                    maxLenght = le;
                    this.maxV3d = this.currentPosAry[i];
                }
                this.allTimeList[i] = le / this.speed;
                v3d.normalize();
                v3d.scaleBy(this.speed);
                this.directAry.push(v3d);
            }
            this.alltime = maxLenght / this.speed;
            this.setAllData();
        };
        SkillMulPath.prototype.setAllData = function () {
            var frame = float2int(this.alltime / 33) + 8;
            this.resultAry = new Array;
            for (var i = 0; i < this.currentPosAry.length; i++) {
                var itemAry = new Array;
                this.resultAry.push(itemAry);
                var directV3d = this.directAry[i];
                for (var k = 0; k < 6; k++) {
                    itemAry.push([this.currentPosAry[i].x, this.currentPosAry[i].y, this.currentPosAry[i].z]);
                }
                for (var j = 0; j < frame; j++) {
                    this.lastTime = 33 * j;
                    var per = (this.lastTime / this.allTimeList[i]);
                    var ypos = per;
                    var pos;
                    if (per >= 1) {
                        ypos = 0;
                        pos = [this.currentTargetPos.x, this.currentTargetPos.y, this.currentTargetPos.z];
                    }
                    else {
                        ypos = ypos - ypos * ypos;
                        ypos *= 250;
                        pos = [directV3d.x * this.lastTime + this.currentPosAry[i].x, directV3d.y * this.lastTime + ypos + this.currentPosAry[i].y, directV3d.z * this.lastTime + this.currentPosAry[i].z];
                    }
                    var normal;
                    if (j == 0) {
                        normal = [0, 1, 0];
                    }
                    else {
                        var lastpos = itemAry[j * 2 - 2];
                        normal = [pos[0] - lastpos[0], pos[1] - lastpos[1], pos[2] - lastpos[2]];
                        var len = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);
                        normal[0] /= len;
                        normal[1] /= len;
                        normal[2] /= len;
                    }
                    itemAry.push(pos, normal);
                }
            }
        };
        SkillMulPath.prototype.update = function (t) {
            this.time = t;
            this.lastTime += t;
            if (this.hasReached) {
                this.endTime += t;
                if (this.endTime > 200) {
                    this.applyArrive();
                }
                return;
            }
            this.skillTrajectory.setCurrentPos();
            for (var i = 0; i < this.currentPosAry.length; i++) {
                var ypos = (this.lastTime / this.allTimeList[i]);
                ypos = ypos - ypos * ypos;
                ypos *= 250;
                var basePos = this.currentPosAry[i];
                this._currentDirect.x = this.currentTargetPos.x - basePos.x;
                this._currentDirect.y = this.currentTargetPos.y - basePos.y;
                this._currentDirect.z = this.currentTargetPos.z - basePos.z;
                this._currentDirect.normalize();
                this._currentDirect.scaleBy(this.speed);
                if (this.maxV3d == basePos) {
                    this.setRotationMatrix(this.currentTargetPos.subtract(basePos));
                    if (this._currentDirect.length == 0) {
                        this.arrive();
                        return;
                    }
                }
                var currentDistance = this._currentDirect.length * this.time;
                if (!this.hasReached) {
                    var targetDistance = Pan3d.Vector3D.distance(basePos, this.currentTargetPos);
                    basePos.x += this._currentDirect.x * this.time;
                    basePos.y += this._currentDirect.y * this.time;
                    basePos.z += this._currentDirect.z * this.time;
                    basePos.w = ypos;
                }
                if (this.maxV3d == basePos) {
                    if (currentDistance > targetDistance) {
                        this.arrive();
                    }
                }
            }
            this.currentPos.setTo(this.currentPosAry[0].x, this.currentPosAry[0].y + this.currentPosAry[0].w, this.currentPosAry[0].z);
        };
        SkillMulPath.prototype.setData = function ($skillTrajectory, $endFun, $currentPos, $rotationMatrix, $currentTargetPos) {
            _super.prototype.setData.call(this, $skillTrajectory, $endFun, $currentPos, $rotationMatrix, $currentTargetPos, null);
            this.skillMul = $skillTrajectory;
        };
        SkillMulPath.prototype.applyData = function (ary) {
            for (var i = 0; i < ary.length; i++) {
                ary[i].setTo(this.currentPosAry[i].x, this.currentPosAry[i].y + this.currentPosAry[i].w, this.currentPosAry[i].z);
            }
        };
        SkillMulPath.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.lastTime = 0;
        };
        return SkillMulPath;
    }(Pan3d.SkillPath));
    Pan3d.SkillMulPath = SkillMulPath;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillMulPath.js.map
var Pan3d;
(function (Pan3d) {
    var PathManager = /** @class */ (function () {
        function PathManager() {
        }
        PathManager.reg = function (types, cls) {
            this.dic[types] = cls;
        };
        PathManager.getNewPath = function (types) {
            var cls = this.dic[types];
            return new cls();
        };
        PathManager.init = function () {
            this.dic[0] = Pan3d.SkillPath;
            this.dic[1] = Pan3d.SkillSinPath;
            this.dic[2] = Pan3d.SkillCosPath;
        };
        PathManager.dic = new Object;
        return PathManager;
    }());
    Pan3d.PathManager = PathManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=PathManager.js.map
/**
* base64-arraybuffer
*/
var Pan3d;
(function (Pan3d) {
    var Base64 = /** @class */ (function () {
        function Base64() {
        }
        Base64.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        Base64.encode = function (arraybuffer) {
            var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
            for (i = 0; i < len; i += 3) {
                base64 += this.chars[bytes[i] >> 2];
                base64 += this.chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
                base64 += this.chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
                base64 += this.chars[bytes[i + 2] & 63];
            }
            if ((len % 3) === 2) {
                base64 = base64.substring(0, base64.length - 1) + "=";
            }
            else if (len % 3 === 1) {
                base64 = base64.substring(0, base64.length - 2) + "==";
            }
            return base64;
        };
        Base64.decode = function (base64) {
            var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
            if (base64[base64.length - 1] === "=") {
                bufferLength--;
                if (base64[base64.length - 2] === "=") {
                    bufferLength--;
                }
            }
            var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
            for (i = 0; i < len; i += 4) {
                encoded1 = this.chars.indexOf(base64[i]);
                encoded2 = this.chars.indexOf(base64[i + 1]);
                encoded3 = this.chars.indexOf(base64[i + 2]);
                encoded4 = this.chars.indexOf(base64[i + 3]);
                bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
                bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
                bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
            }
            return arraybuffer;
        };
        return Base64;
    }());
    Pan3d.Base64 = Base64;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Base64.js.map
var Pan3d;
(function (Pan3d) {
    var LoadManager = /** @class */ (function () {
        function LoadManager() {
            this._loadThreadList = new Array;
            this._waitLoadList = new Array;
            for (var i = 0; i < 10; i++) {
                this._loadThreadList.push(new LoaderThread());
            }
        }
        LoadManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new LoadManager();
            }
            return this._instance;
        };
        LoadManager.getVersion = function (vkey) {
            return "";
        };
        LoadManager.prototype.load = function ($url, $type, $fun, $info, $progressFun) {
            if ($info === void 0) { $info = null; }
            if ($progressFun === void 0) { $progressFun = null; }
            if (!$url || $url.length < 1 || $url.search("undefined") != -1) {
                //console.log("加载地址不能为空")
                return;
            }
            var version = "0";
            //GameInstance.mapName
            var loadInfo = new LoadInfo($url, $type, $fun, $info, $progressFun);
            loadInfo.version = version;
            for (var i = 0; i < this._loadThreadList.length; i++) {
                if (this._loadThreadList[i].idle) {
                    this._loadThreadList[i].load(loadInfo);
                    return;
                }
            }
            this._waitLoadList.push(loadInfo);
        };
        LoadManager.prototype.loadWaitList = function () {
            if (this._waitLoadList.length <= 0) {
                return;
            }
            for (var i = 0; i < this._loadThreadList.length; i++) {
                if (this._loadThreadList[i].idle) {
                    this._loadThreadList[i].load(this._waitLoadList.shift());
                    return;
                }
            }
        };
        LoadManager.BYTE_TYPE = "BYTE_TYPE";
        LoadManager.IMG_TYPE = "IMG_TYPE";
        LoadManager.XML_TYPE = "XML_TYPE";
        return LoadManager;
    }());
    Pan3d.LoadManager = LoadManager;
    var LoaderThread = /** @class */ (function () {
        function LoaderThread() {
            var _this = this;
            this._xhr = new XMLHttpRequest();
            this._xhr.onreadystatechange = function () {
                if (!_this._xhr || _this._xhr.readyState !== 4) {
                    return;
                }
                if (_this._xhr.status !== 0 && _this._xhr.status !== 200) {
                    _this.loadError();
                    return;
                }
                _this.loadByteXML();
            };
            this._xhr.onprogress = function (e) {
                if (_this._loadInfo.progressFun) {
                    _this._loadInfo.progressFun(e.loaded / e.total);
                }
            };
            this._xhr.onerror = function () {
                _this.loadError();
            };
            this._img = makeImage();
            this._img.onload = function () {
                _this.loadImg();
            };
            this._img.onerror = function () {
                _this.loadError();
            };
            this.idle = true;
        }
        LoaderThread.prototype.load = function (loadInfo) {
            this._loadInfo = loadInfo;
            this.idle = false;
            this._url = loadInfo.url;
            if (this._loadInfo.type == LoadManager.BYTE_TYPE) {
                this._xhr.open("GET", loadInfo.vurl, true);
                this._xhr.responseType = "arraybuffer";
                this._xhr.send();
            }
            else if (this._loadInfo.type == LoadManager.XML_TYPE) {
                this._xhr.open("GET", loadInfo.vurl, true);
                this._xhr.responseType = "text";
                this._xhr.send();
            }
            else if (this._loadInfo.type == LoadManager.IMG_TYPE) {
                if (this._img.url == loadInfo.vurl) { //路径相同
                    this.loadImg();
                }
                else { //执行加载
                    this._img.url = loadInfo.vurl;
                    this._img.src = loadInfo.vurl;
                }
            }
        };
        LoaderThread.prototype.loadError = function () {
            if (this._loadInfo.info && this._loadInfo.info.errorFun) {
                this._loadInfo.info.errorFun();
            }
            this.idle = true;
            this._loadInfo = null;
            LoadManager.getInstance().loadWaitList();
        };
        LoaderThread.prototype.loadByteXML = function () {
            // if(this.idle){
            //     //console.log("加载完成*****************************"+this._url );
            // }
            if (this._loadInfo.info) {
                this._loadInfo.fun(this._xhr.response, this._loadInfo.info);
            }
            else {
                this._loadInfo.fun(this._xhr.response);
            }
            this.idle = true;
            this._loadInfo = null;
            LoadManager.getInstance().loadWaitList();
        };
        LoaderThread.prototype.loadByteImg = function () {
            this._img.src = 'data:image/png;base64,' + Pan3d.Base64.encode(this._xhr.response);
        };
        LoaderThread.prototype.loadImg = function () {
            if (this._loadInfo.info) {
                this._loadInfo.fun(this._img, this._loadInfo.info);
            }
            else {
                this._loadInfo.fun(this._img);
            }
            this.idle = true;
            this._loadInfo = null;
            LoadManager.getInstance().loadWaitList();
        };
        return LoaderThread;
    }());
    Pan3d.LoaderThread = LoaderThread;
    var LoadInfo = /** @class */ (function () {
        function LoadInfo($url, $type, $fun, $info, $progressFun) {
            if ($info === void 0) { $info = null; }
            if ($progressFun === void 0) { $progressFun = null; }
            this.url = $url;
            this.type = $type;
            this.fun = $fun;
            this.info = $info;
            this.progressFun = $progressFun;
        }
        Object.defineProperty(LoadInfo.prototype, "vurl", {
            get: function () {
                return this.url;
            },
            enumerable: true,
            configurable: true
        });
        return LoadInfo;
    }());
    Pan3d.LoadInfo = LoadInfo;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LoadManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ObjDataManager = /** @class */ (function (_super) {
        __extends(ObjDataManager, _super);
        function ObjDataManager() {
            var _this = 
            //this._dic = new Object();
            _super.call(this) || this;
            _this._loadList = new Object();
            return _this;
        }
        ObjDataManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new ObjDataManager();
            }
            return this._instance;
        };
        ObjDataManager.prototype.getObjData = function ($url, $fun) {
            var _this = this;
            if (this._dic[$url]) {
                $fun(this._dic[$url]);
                this._dic[$url].useNum++;
                return;
            }
            var ary;
            if (!this._loadList[$url]) {
                this._loadList[$url] = new Array;
                Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                    _this.loadObjCom($byte, $url);
                });
            }
            ary = this._loadList[$url];
            ary.push($fun);
        };
        ObjDataManager.prototype.registerUrl = function ($url) {
            if (this._dic[$url]) {
                this._dic[$url].useNum++;
            }
        };
        ObjDataManager.prototype.releaseUrl = function ($url) {
            if (this._dic[$url]) {
                this._dic[$url].clearUseNum();
            }
        };
        ObjDataManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        ObjDataManager.prototype.readFloatNrm = function (byte, vertices) {
            var verLength = byte.readInt();
            if (verLength > 0) {
                for (var i = 0; i < verLength; i++) {
                    vertices.push(byte.readFloat());
                }
            }
        };
        ObjDataManager.prototype.readcollisionItem = function (byte, $objData) {
            //将碰撞体都写入对象的OBJ对象中
            var $len = byte.readInt();
            if ($len > 0) {
                $objData.collision = new Pan3d.CollisionItemVo();
                $objData.collision.collisionItem = new Array;
                for (var i = 0; i < $len; i++) {
                    var $xmlcollisionVo = JSON.parse(byte.readUTF());
                    var $collisionVo = new Pan3d.CollisionVo();
                    $collisionVo.scaleX = $xmlcollisionVo.scale_x;
                    $collisionVo.scaleY = $xmlcollisionVo.scale_y;
                    $collisionVo.scaleZ = $xmlcollisionVo.scale_z;
                    $collisionVo.x = $xmlcollisionVo.x;
                    $collisionVo.y = $xmlcollisionVo.y;
                    $collisionVo.z = $xmlcollisionVo.z;
                    $collisionVo.rotationX = $xmlcollisionVo.rotationX;
                    $collisionVo.rotationY = $xmlcollisionVo.rotationY;
                    $collisionVo.rotationZ = $xmlcollisionVo.rotationZ;
                    $collisionVo.scaleX = this.getFloadNum($collisionVo.scaleX);
                    $collisionVo.scaleY = this.getFloadNum($collisionVo.scaleY);
                    $collisionVo.scaleZ = this.getFloadNum($collisionVo.scaleZ);
                    $collisionVo.rotationX = this.getFloadNum($collisionVo.rotationX);
                    $collisionVo.rotationY = this.getFloadNum($collisionVo.rotationY);
                    $collisionVo.rotationZ = this.getFloadNum($collisionVo.rotationZ);
                    $collisionVo.type = $xmlcollisionVo.type;
                    $collisionVo.data = $xmlcollisionVo.data;
                    $objData.collision.collisionItem.push($collisionVo);
                }
            }
        };
        ObjDataManager.prototype.getFloadNum = function (value) {
            return Math.floor(value * 1000) / 1000;
        };
        ObjDataManager.prototype.loadObjCom = function ($byte, $url) {
            if (this._dic[$url]) {
                return;
            }
            ////console.log($objData);
            var $objData = new Pan3d.ObjData();
            var byte = new Pan3d.Pan3dByteArray($byte);
            var version = byte.readInt();
            var str = byte.readUTF();
            if (version >= 20) {
                this.readObj2OneBuffer(byte, $objData);
                if (version >= 37 && byte.position < byte.length) { //加上碰撞体
                    this.readcollisionItem(byte, $objData);
                }
            }
            else {
                Pan3d.BaseRes.readFloatTwoByte(byte, $objData.vertices);
                Pan3d.BaseRes.readFloatTwoByte(byte, $objData.uvs);
                Pan3d.BaseRes.readFloatOneByte(byte, $objData.lightuvs);
                Pan3d.BaseRes.readFloatTwoByte(byte, $objData.normals);
                Pan3d.BaseRes.readIntForTwoByte(byte, $objData.indexs);
                Pan3d.BaseRes.readFloatTwoByte(byte, $objData.tangents);
                Pan3d.BaseRes.readFloatTwoByte(byte, $objData.bitangents);
                $objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.vertices);
                $objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.uvs);
                $objData.lightUvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.lightuvs);
                $objData.normalsBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.normals);
            }
            $objData.treNum = $objData.indexs.length;
            $objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D($objData.indexs);
            this._dic[$url] = $objData;
            var ary = this._loadList[$url];
            if (ary) {
                for (var i = 0; i < ary.length; i++) {
                    ary[i]($objData);
                }
                delete this._loadList[$url];
            }
            return $objData;
        };
        ObjDataManager.prototype.readObj2OneBuffer = function (byte, $objData) {
            var typeItem = new Array;
            var len;
            var typeItem = new Array;
            var dataWidth = 0;
            for (var i = 0; i < 6; i++) {
                var tf = byte.readBoolean();
                typeItem.push(tf);
                if (tf) {
                    switch (i) {
                        case 1: //uv
                            dataWidth += 2;
                            break;
                        case 2: //lightuv
                            dataWidth += 2;
                            break;
                        default:
                            dataWidth += 3;
                            break;
                    }
                }
            }
            len = byte.readFloat();
            var baseLenght = len;
            len *= dataWidth * 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            var uvsOffsets = 3;
            var lightuvsOffsets = uvsOffsets + 2;
            var normalsOffsets = typeItem[2] ? (lightuvsOffsets + 2) : (uvsOffsets + 2);
            var tangentsOffsets = normalsOffsets + 3;
            var bitangentsOffsets = tangentsOffsets + 3;
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, 0, dataWidth); //vertices
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 2, uvsOffsets, dataWidth); //uvs
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 2, lightuvsOffsets, dataWidth, 1); //lightuvs
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, normalsOffsets, dataWidth); //normals
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, tangentsOffsets, dataWidth); //tangents
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, bitangentsOffsets, dataWidth); //bitangents
            $objData.dataView = data;
            // BaseRes.readFloatTwoByte(byte, $objData.vertices);
            // BaseRes.readFloatTwoByte(byte, $objData.uvs);
            // BaseRes.readLightUvForByte(byte, $objData.lightuvs);
            // BaseRes.readFloatTwoByte(byte, $objData.normals);
            // BaseRes.readFloatTwoByte(byte, $objData.tangents);
            // BaseRes.readFloatTwoByte(byte, $objData.bitangents);
            Pan3d.BaseRes.readIntForTwoByte(byte, $objData.indexs);
            // var dataAry: Array<number> = new Array;
            // for (var i: number = 0; i < baseLenght; i++) {
            //     dataAry.push($objData.vertices[i * 3]);
            //     dataAry.push($objData.vertices[i * 3 + 1]);
            //     dataAry.push($objData.vertices[i * 3 + 2]);
            //     dataAry.push($objData.uvs[i * 2]);
            //     dataAry.push($objData.uvs[i * 2 + 1]);
            //     dataAry.push($objData.lightuvs[i * 2]);
            //     dataAry.push($objData.lightuvs[i * 2 + 1]);
            // }
            ////console.log(dataAry);
            // $objData.vertexBuffer = Scene_data.context3D.uploadBuff3D($objData.vertices);
            // $objData.uvBuffer = Scene_data.context3D.uploadBuff3D($objData.uvs);
            // $objData.lightUvBuffer = Scene_data.context3D.uploadBuff3D($objData.lightuvs);
            // $objData.normalsBuffer = Scene_data.context3D.uploadBuff3D($objData.normals);
            $objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            $objData.compressBuffer = true;
            $objData.uvsOffsets = uvsOffsets * 4;
            $objData.lightuvsOffsets = lightuvsOffsets * 4;
            $objData.normalsOffsets = normalsOffsets * 4;
            $objData.tangentsOffsets = tangentsOffsets * 4;
            $objData.bitangentsOffsets = bitangentsOffsets * 4;
            $objData.stride = dataWidth * 4;
            console.log("$objData.stride ", $objData.stride);
        };
        ObjDataManager.prototype.creatTBNBuffer = function ($objData) {
            $objData.tangentBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.tangents);
            $objData.bitangentBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($objData.bitangents);
        };
        return ObjDataManager;
    }(Pan3d.ResGC));
    Pan3d.ObjDataManager = ObjDataManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ObjDataManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MeshDataManager = /** @class */ (function (_super) {
        __extends(MeshDataManager, _super);
        function MeshDataManager() {
            var _this = _super.call(this) || this;
            _this._loadDic = new Object();
            return _this;
        }
        MeshDataManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new MeshDataManager();
            }
            return this._instance;
        };
        MeshDataManager.prototype.getMeshDataByLocalUrl = function ($url) {
            return this._dic[$url];
        };
        MeshDataManager.prototype.getMeshData = function ($url, $fun, $batchNum) {
            var _this = this;
            if ($batchNum === void 0) { $batchNum = 1; }
            if (this._dic[$url] && this._dic[$url].ready) {
                $fun(this._dic[$url]);
                this._dic[$url].useNum++;
                return;
            }
            if (this._loadDic[$url]) {
                this._loadDic[$url].push($fun);
                return;
            }
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push($fun);
            Pan3d.ResManager.getInstance().loadRoleRes(Pan3d.Scene_data.fileRoot + $url, function ($roleRes) {
                _this.roleResCom($roleRes, $fun);
            }, $batchNum);
        };
        MeshDataManager.prototype.roleResCom = function ($roleRes, $fun) {
            var url = $roleRes.roleUrl;
            var skinMesh = this._dic[url];
            skinMesh.loadMaterial();
            //skinMesh.loadParticle();
            skinMesh.setAction($roleRes.actionAry, url);
            skinMesh.url = url;
            if ($roleRes.ambientLightColor) {
                skinMesh.lightData = [[$roleRes.ambientLightColor.x, $roleRes.ambientLightColor.y, $roleRes.ambientLightColor.z],
                    [$roleRes.nrmDircet.x, $roleRes.nrmDircet.y, $roleRes.nrmDircet.z],
                    [$roleRes.sunLigthColor.x, $roleRes.sunLigthColor.y, $roleRes.sunLigthColor.z]];
            }
            for (var i = 0; i < this._loadDic[url].length; i++) {
                this._loadDic[url][i](skinMesh);
                skinMesh.useNum++;
            }
            delete this._loadDic[url];
            skinMesh.ready = true;
            //this._dic[$roleRes.roleUrl] = skinMesh;
            //$fun(skinMesh);
            //var meshUrl: string = $roleRes.roleUrl;
            //MeshDataManager.getInstance().getMeshData(meshUrl, ($skinMesh: SkinMesh) => {
            //    if ($batchNum != 1) {
            //        $roleRes.type = 1;
            //    }
            //    for (var key in this._animDic) {
            //        this.processAnimByMesh(this._animDic[key]);
            //    }
            //    $skinMesh.loadMaterial(($m: Material) => { this.loadMaterialCom($m) });
            //    $skinMesh.loadParticle(this);
            //    this.fileScale = $skinMesh.fileScale;
            //}, $batchNum);
            //var actionAry: Array<string> = this._roleRes.actionAry;
            //for (var i: number = 0; i < actionAry.length; i++) {
            //    this.addAction(actionAry[i], this._roleRes.roleUrl + actionAry[i]);
            //}
        };
        MeshDataManager.prototype.gc = function () {
            _super.prototype.gc.call(this);
        };
        MeshDataManager.prototype.readData = function (byte, $batchNum, $url, $version) {
            var $skinMesh = new Pan3d.SkinMesh();
            $skinMesh.fileScale = byte.readFloat();
            if ($version >= 19) {
                $skinMesh.tittleHeight = byte.readFloat();
            }
            else {
                $skinMesh.tittleHeight = 50;
            }
            $skinMesh.hitBox = new Pan3d.Vector2D(20, 20);
            if ($version >= 23) {
                $skinMesh.hitBox.x = byte.readFloat();
                $skinMesh.hitBox.y = byte.readFloat();
            }
            $skinMesh.makeHitBoxItem();
            var meshNum = byte.readInt();
            var allParticleDic = new Object;
            for (var i = 0; i < meshNum; i++) {
                var meshData = new Pan3d.MeshData;
                if ($version >= 35) {
                    meshData.bindPosAry = this.readBindPosByte(byte);
                    meshData.getBindPosMatrix();
                }
                if ($version >= 21) {
                    this.readMesh2OneBuffer(byte, meshData);
                }
                else {
                    Pan3d.BaseRes.readFloatTwoByte(byte, meshData.vertices);
                    Pan3d.BaseRes.readFloatTwoByte(byte, meshData.tangents);
                    Pan3d.BaseRes.readFloatTwoByte(byte, meshData.bitangents);
                    Pan3d.BaseRes.readFloatTwoByte(byte, meshData.normals);
                    Pan3d.BaseRes.readFloatTwoByte(byte, meshData.uvs);
                    Pan3d.BaseRes.readIntForOneByte(byte, meshData.boneIDAry);
                    Pan3d.BaseRes.readFloatOneByte(byte, meshData.boneWeightAry);
                    Pan3d.BaseRes.readIntForTwoByte(byte, meshData.indexs);
                    Pan3d.BaseRes.readIntForTwoByte(byte, meshData.boneNewIDAry);
                    this.uploadMesh(meshData);
                }
                meshData.treNum = meshData.indexs.length;
                // if ($batchNum != 1) {
                //     this.cloneMeshData(meshData, $batchNum);
                // }
                meshData.materialUrl = byte.readUTF();
                meshData.materialParamData = Pan3d.BaseRes.readMaterialParamData(byte);
                var particleNum = byte.readInt();
                for (var j = 0; j < particleNum; j++) {
                    var bindParticle = new Pan3d.BindParticle(byte.readUTF(), byte.readUTF());
                    meshData.particleAry.push(bindParticle);
                    allParticleDic[bindParticle.url] = true;
                }
                $skinMesh.addMesh(meshData);
            }
            for (var key in allParticleDic) {
                Pan3d.ParticleManager.getInstance().registerUrl(key);
            }
            $skinMesh.allParticleDic = allParticleDic;
            if ($version < 35) { //多个MESH出错后情况
                var bindPosAry = this.readBindPosByte(byte);
                for (var w = 0; w < $skinMesh.meshAry.length; w++) {
                    $skinMesh.meshAry[w].bindPosAry = bindPosAry;
                    $skinMesh.meshAry[w].getBindPosMatrix();
                }
            }
            var sokcetLenght = byte.readInt();
            $skinMesh.boneSocketDic = new Object();
            for (var j = 0; j < sokcetLenght; j++) {
                var boneData = new Pan3d.BoneSocketData();
                boneData.name = byte.readUTF();
                boneData.boneName = byte.readUTF();
                boneData.index = byte.readInt();
                boneData.x = byte.readFloat();
                boneData.y = byte.readFloat();
                boneData.z = byte.readFloat();
                boneData.rotationX = byte.readFloat();
                boneData.rotationY = byte.readFloat();
                boneData.rotationZ = byte.readFloat();
                $skinMesh.boneSocketDic[boneData.name] = boneData;
            }
            this._dic[$url] = $skinMesh;
            return $skinMesh;
        };
        MeshDataManager.prototype.readBindPosByte = function (byte) {
            var bindPosLength = byte.readInt();
            var bindPosAry = new Array;
            for (var j = 0; j < bindPosLength; j++) {
                var ary = new Array(byte.readFloat(), byte.readFloat(), byte.readFloat(), byte.readFloat(), byte.readFloat(), byte.readFloat());
                bindPosAry.push(ary);
            }
            return bindPosAry;
        };
        MeshDataManager.prototype.readMesh2OneBuffer = function (byte, meshData) {
            var len = byte.readInt();
            var typeItem = new Array;
            var dataWidth = 0;
            for (var i = 0; i < 5; i++) {
                var tf = byte.readBoolean();
                typeItem.push(tf);
                if (tf) {
                    if (i == 1) {
                        dataWidth += 2;
                    }
                    else {
                        dataWidth += 3;
                    }
                }
            }
            dataWidth += 8;
            len *= dataWidth * 4;
            var uvsOffsets = 3; // 1
            var normalsOffsets = uvsOffsets + 2; // 2
            var tangentsOffsets = normalsOffsets + 3; //3
            var bitangentsOffsets = tangentsOffsets + 3; //4
            var boneIDOffsets;
            if (typeItem[2]) { //normal
                if (typeItem[4]) {
                    boneIDOffsets = bitangentsOffsets + 3;
                }
                else {
                    boneIDOffsets = normalsOffsets + 3;
                }
            }
            else {
                boneIDOffsets = uvsOffsets + 2;
            }
            var boneWeightOffsets = boneIDOffsets + 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, 0, dataWidth); //vertices
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 2, uvsOffsets, dataWidth); //uvs
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, normalsOffsets, dataWidth); //normals
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, tangentsOffsets, dataWidth); //tangents
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 3, bitangentsOffsets, dataWidth); //bitangents
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 4, boneIDOffsets, dataWidth, 2); //boneIDAry
            Pan3d.BaseRes.readBytes2ArrayBuffer(byte, data, 4, boneWeightOffsets, dataWidth, 1); //boneWeightAry
            // BaseRes.readFloatTwoByte(byte, meshData.vertices);
            // BaseRes.readFloatTwoByte(byte, meshData.uvs);
            // BaseRes.readFloatTwoByte(byte, meshData.normals);
            // BaseRes.readFloatTwoByte(byte, meshData.tangents);
            // BaseRes.readFloatTwoByte(byte, meshData.bitangents);
            // BaseRes.readIntForOneByte(byte, meshData.boneIDAry);
            // BaseRes.readFloatOneByte(byte, meshData.boneWeightAry);
            Pan3d.BaseRes.readIntForTwoByte(byte, meshData.indexs);
            Pan3d.BaseRes.readIntForTwoByte(byte, meshData.boneNewIDAry);
            meshData.compressBuffer = true;
            meshData.uvsOffsets = uvsOffsets * 4;
            meshData.normalsOffsets = normalsOffsets * 4;
            meshData.tangentsOffsets = tangentsOffsets * 4;
            meshData.bitangentsOffsets = bitangentsOffsets * 4;
            meshData.boneIDOffsets = boneIDOffsets * 4;
            meshData.boneWeightOffsets = boneWeightOffsets * 4;
            meshData.stride = dataWidth * 4;
            meshData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            meshData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(meshData.indexs);
        };
        MeshDataManager.prototype.uploadMesh = function ($mesh) {
            $mesh.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.vertices);
            $mesh.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.uvs);
            $mesh.boneIdBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.boneIDAry);
            $mesh.boneWeightBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.boneWeightAry);
            $mesh.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D($mesh.indexs);
        };
        MeshDataManager.prototype.uploadPbrMesh = function ($mesh, $useNormal) {
            $mesh.normalsBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.normals);
            if ($useNormal) {
                $mesh.tangentBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.tangents);
                $mesh.bitangentBuffer = Pan3d.Scene_data.context3D.uploadBuff3D($mesh.bitangents);
            }
        };
        MeshDataManager.prototype.preLoad = function ($url) {
            this.getMeshData($url, function ($skinMesh) {
                $skinMesh.loadMaterial();
            });
        };
        return MeshDataManager;
    }(Pan3d.ResGC));
    Pan3d.MeshDataManager = MeshDataManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MeshDataManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var AnimManager = /** @class */ (function () {
        function AnimManager() {
            this._dic = new Object();
        }
        AnimManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new AnimManager();
            }
            return this._instance;
        };
        AnimManager.prototype.getAnimData = function ($url, $fun) {
            var _this = this;
            if (this._dic[$url]) {
                $fun(this._dic[$url]);
                return;
            }
            Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.BYTE_TYPE, function ($byte, _fun) {
                //this.loadObjCom($byte, _fun, $url);
                var animData = _this.readData(new Pan3d.Pan3dByteArray($byte), $url);
                _fun(animData);
            }, $fun);
        };
        AnimManager.prototype.getAnimDataImmediate = function ($url) {
            return this._dic[$url];
        };
        AnimManager.prototype.clearAnim = function ($url) {
            delete this._dic[$url];
        };
        AnimManager.prototype.readData = function (byte, $url) {
            var hierarchyList = new Array;
            var frameAry = new Array;
            var animData = new Pan3d.AnimData();
            animData.inLoop = byte.readInt();
            var numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                animData.inter.push(byte.readInt());
            }
            numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                animData.bounds.push(byte.readVector3D());
            }
            animData.nameHeight = byte.readInt();
            numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                var objBone = new ObjectBone();
                objBone.father = byte.readInt();
                objBone.changtype = byte.readInt();
                objBone.startIndex = byte.readInt();
                objBone.tx = byte.readFloat();
                objBone.ty = byte.readFloat();
                objBone.tz = byte.readFloat();
                objBone.qx = byte.readFloat();
                objBone.qy = byte.readFloat();
                objBone.qz = byte.readFloat();
                hierarchyList.push(objBone);
            }
            this.readFrameData(byte, frameAry);
            numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                animData.posAry.push(byte.readVector3D());
            }
            animData.matrixAry = this.processFrame(frameAry, hierarchyList);
            this._dic[$url] = animData;
            return animData;
        };
        AnimManager.prototype.readFrameData = function (byte, frameAry) {
            var $frameTyeArr = this.readFrameTypeData(byte);
            var $isStand = byte.readBoolean(); //是否为站立，这里特殊给站立的旋转设置其权重值不压缩
            var $scaleNum = byte.readFloat();
            var numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                var frameItemAryLength = byte.readInt();
                var frameItemAry = new Array;
                frameAry.push(frameItemAry);
                for (var j = 0; j < frameItemAryLength; j++) {
                    if ($frameTyeArr[j]) {
                        frameItemAry.push(byte.readFloatTwoByte($scaleNum));
                    }
                    else {
                        if ($isStand) { //注意这里的特殊，针对站立时的旋转精度用浮点
                            frameItemAry.push(byte.readFloat());
                        }
                        else {
                            frameItemAry.push(byte.readShort() / 32767);
                        }
                    }
                }
            }
        };
        AnimManager.prototype.readFrameTypeData = function (byte) {
            var $arr = new Array;
            var numLength = byte.readInt();
            for (var i = 0; i < numLength; i++) {
                $arr.push(byte.readBoolean());
            }
            return $arr;
        };
        AnimManager.prototype.processFrame = function (frameAry, hierarchyList) {
            var newFrameAry = new Array;
            for (var i = 0; i < frameAry.length; i++) {
                newFrameAry.push(this.frameToBone(frameAry[i], hierarchyList));
            }
            return this.setFrameToMatrix(newFrameAry);
        };
        AnimManager.prototype.frameToBone = function (frameData, hierarchyList) {
            var _arr = new Array;
            for (var i = 0; i < hierarchyList.length; i++) {
                var _temp = new ObjectBaseBone();
                _temp.father = hierarchyList[i].father;
                var k = 0;
                if (hierarchyList[i].changtype & 1) {
                    _temp.tx = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.tx = hierarchyList[i].tx;
                }
                if (hierarchyList[i].changtype & 2) {
                    _temp.ty = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.ty = hierarchyList[i].ty;
                }
                if (hierarchyList[i].changtype & 4) {
                    _temp.tz = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.tz = hierarchyList[i].tz;
                }
                if (hierarchyList[i].changtype & 8) {
                    _temp.qx = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.qx = hierarchyList[i].qx;
                }
                if (hierarchyList[i].changtype & 16) {
                    _temp.qy = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.qy = hierarchyList[i].qy;
                }
                if (hierarchyList[i].changtype & 32) {
                    _temp.qz = frameData[hierarchyList[i].startIndex + k];
                    ++k;
                }
                else {
                    _temp.qz = hierarchyList[i].qz;
                }
                _arr.push(_temp);
            }
            return _arr;
        };
        AnimManager.prototype.setFrameToMatrix = function (frameAry) {
            var matrixAry = new Array;
            for (var j = 0; j < frameAry.length; j++) {
                var boneAry = frameAry[j];
                var Q0 = new Pan3d.Quaternion();
                var newM = new Pan3d.Matrix3D();
                var frameMatrixAry = new Array;
                matrixAry.push(frameMatrixAry);
                for (var i = 0; i < boneAry.length; i++) {
                    var xyzfarme0 = boneAry[i];
                    Q0 = new Pan3d.Quaternion(xyzfarme0.qx, xyzfarme0.qy, xyzfarme0.qz);
                    Q0.w = this.getW(Q0.x, Q0.y, Q0.z);
                    if (xyzfarme0.father == -1) {
                        newM = Q0.toMatrix3D();
                        newM.appendTranslation(xyzfarme0.tx, xyzfarme0.ty, xyzfarme0.tz);
                        newM.appendRotation(-90, Pan3d.Vector3D.X_AXIS);
                        //xyzfarme0.matrix = newM;
                        frameMatrixAry.push(newM);
                    }
                    else {
                        var fatherBone = boneAry[xyzfarme0.father];
                        newM = Q0.toMatrix3D();
                        newM.appendTranslation(xyzfarme0.tx, xyzfarme0.ty, xyzfarme0.tz);
                        //newM.append(fatherBone.matrix);
                        newM.append(frameMatrixAry[xyzfarme0.father]);
                        frameMatrixAry.push(newM);
                        //xyzfarme0.matrix = newM;
                    }
                }
                for (i = 0; i < frameMatrixAry.length; i++) {
                    frameMatrixAry[i].appendScale(-1, 1, 1); //特别标记，因为四元数和矩阵运算结果不一  先存正确的矩阵
                    //xyzfarme0.matrix.appendScale(-1, 1, 1);
                }
            }
            return matrixAry;
        };
        AnimManager.prototype.getW = function (x, y, z) {
            var t = 1 - (x * x + y * y + z * z);
            if (t < 0) {
                t = 0;
            }
            else {
                t = -Math.sqrt(t);
            }
            return t;
        };
        return AnimManager;
    }());
    Pan3d.AnimManager = AnimManager;
    var ObjectBaseBone = /** @class */ (function () {
        function ObjectBaseBone() {
        }
        return ObjectBaseBone;
    }());
    Pan3d.ObjectBaseBone = ObjectBaseBone;
    var ObjectBone = /** @class */ (function (_super) {
        __extends(ObjectBone, _super);
        function ObjectBone() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ObjectBone.prototype.clone = function () {
            var newBone = new ObjectBone;
            newBone.tx = this.tx;
            newBone.ty = this.ty;
            newBone.tz = this.tz;
            newBone.tw = this.tw;
            newBone.qx = this.qx;
            newBone.qy = this.qy;
            newBone.qz = this.qz;
            newBone.qw = this.qw;
            newBone.changtype = this.changtype;
            newBone.name = this.name;
            newBone.father = this.father;
            newBone.startIndex = this.startIndex;
            newBone.matrix = this.matrix;
            return newBone;
        };
        return ObjectBone;
    }(ObjectBaseBone));
    Pan3d.ObjectBone = ObjectBone;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AnimManager.js.map
var Pan3d;
(function (Pan3d) {
    var LightProbeManager = /** @class */ (function () {
        function LightProbeManager() {
            this._defaultVec = new Array;
            var ary = [0.4444730390920146, -0.3834955622240026, -0.33124467509627725, 0.09365654209093091,
                -0.05673310882817577, 0.2120523322966496, 0.02945768486978205, -0.04965996229802928, -0.1136529129285836];
            for (var i = 0; i < 9; i++) {
                this._defaultVec.push(new Pan3d.Vector3D(ary[i], ary[i], ary[i]));
            }
        }
        LightProbeManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new LightProbeManager();
            }
            return this._instance;
        };
        LightProbeManager.prototype.setLightProbeData = function ($arr) {
            this._dataAry = $arr;
        };
        LightProbeManager.prototype.clear = function () {
            this._dataAry = null;
        };
        LightProbeManager.prototype.getData = function ($pos) {
            if (!this._dataAry) {
                return this._defaultVec;
            }
            for (var i = 0; i < this._dataAry.length; i++) {
                var lightArea = this._dataAry[i];
                if (this.testPoint(lightArea, $pos)) {
                    var baseV3d = lightArea.postion;
                    var bp = $pos.subtract(baseV3d);
                    return this.getResultData(lightArea.posItem, float2int(bp.x / lightArea.betweenNum), float2int(bp.z / lightArea.betweenNum), float2int(bp.y / lightArea.betweenNum), lightArea.betweenNum, bp);
                }
            }
            return this._defaultVec;
        };
        LightProbeManager.prototype.testPoint = function (lightArea, $pos) {
            var xNum = (lightArea.cubeVec.x - 1) * lightArea.betweenNum;
            var yNum = (lightArea.cubeVec.y - 1) * lightArea.betweenNum;
            var zNum = (lightArea.cubeVec.z - 1) * lightArea.betweenNum;
            var cx = $pos.x - lightArea.postion.x;
            var cy = $pos.y - lightArea.postion.y;
            var cz = $pos.z - lightArea.postion.z;
            if (cx >= 0 && cx < xNum && cy >= 0 && cy < yNum && cz >= 0 && cz < zNum) {
                return true;
            }
            else {
                return false;
            }
        };
        LightProbeManager.prototype.getResultData = function (ary, x, z, y, bNum, $pos) {
            var posAry = new Array;
            posAry.push(new PosItem(ary[x][z][y], $pos));
            posAry.push(new PosItem(ary[x + 1][z][y], $pos));
            posAry.push(new PosItem(ary[x][z + 1][y], $pos));
            posAry.push(new PosItem(ary[x + 1][z + 1][y], $pos));
            posAry.push(new PosItem(ary[x][z][y + 1], $pos));
            posAry.push(new PosItem(ary[x + 1][z][y + 1], $pos));
            posAry.push(new PosItem(ary[x][z + 1][y + 1], $pos));
            posAry.push(new PosItem(ary[x + 1][z + 1][y + 1], $pos));
            var allDis = 0;
            for (var i = 0; i < posAry.length; i++) {
                allDis += posAry[i].dis;
            }
            for (i = 0; i < posAry.length; i++) {
                posAry[i].setBais(allDis);
            }
            var allBais = 0;
            for (i = 0; i < posAry.length; i++) {
                allBais += posAry[i].bais;
            }
            for (i = 0; i < posAry.length; i++) {
                posAry[i].bais = posAry[i].bais / allBais;
            }
            var arr = new Array;
            for (i = 0; i < 9; i++) {
                var v3d = new Pan3d.Vector3D;
                for (var j = 0; j < posAry.length; j++) {
                    var tempV3d = new Pan3d.Vector3D(posAry[j].vecNum[i].x, posAry[j].vecNum[i].y, posAry[j].vecNum[i].z);
                    tempV3d.scaleBy(posAry[j].bais);
                    v3d = v3d.add(tempV3d);
                }
                arr.push(v3d);
            }
            return arr;
        };
        return LightProbeManager;
    }());
    Pan3d.LightProbeManager = LightProbeManager;
    var PosItem = /** @class */ (function () {
        function PosItem(basePos, centerPos) {
            this.pos = new Pan3d.Vector3D(basePos.x, basePos.y, basePos.z);
            this.vecNum = basePos.resultSHVec;
            this.dis = Pan3d.Vector3D.distance(this.pos, centerPos);
        }
        PosItem.prototype.setBais = function (allDis) {
            this.bais = (this.dis / allDis) * (this.dis / allDis);
            this.bais = 1 / this.bais;
        };
        return PosItem;
    }());
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LightProbeManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GroupDataManager = /** @class */ (function (_super) {
        __extends(GroupDataManager, _super);
        function GroupDataManager() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._loadDic = new Object;
            return _this;
        }
        GroupDataManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new GroupDataManager();
            }
            return this._instance;
        };
        GroupDataManager.prototype.getGroupData = function ($url, $fun) {
            var _this = this;
            if (this._dic[$url]) {
                var gr = this._dic[$url];
                gr.useNum++;
                $fun(gr);
                return;
            }
            if (this._loadDic[$url]) {
                this._loadDic[$url].push($fun);
                return;
            }
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push($fun);
            var group = new Pan3d.GroupRes();
            group.load($url, function () {
                var ary = _this._loadDic[$url];
                for (var i = 0; i < ary.length; i++) {
                    var fun = ary[i];
                    fun(group);
                }
                _this._dic[$url] = group;
                delete _this._loadDic[$url];
                group.initReg();
            });
        };
        return GroupDataManager;
    }(Pan3d.ResGC));
    Pan3d.GroupDataManager = GroupDataManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GroupDataManager.js.map
var Pan3d;
(function (Pan3d) {
    var AstarUtil = /** @class */ (function () {
        function AstarUtil() {
        }
        AstarUtil.setData = function ($tempNavMesh) {
            this.navmeshData = $tempNavMesh;
            this.heightItem = this.navmeshData.heightItem;
            this.jumpItem = this.navmeshData.jumpItem;
            this.midu = this.navmeshData.midu;
            this.aPos = new Pan3d.Vector3D(this.navmeshData.aPos.x, this.navmeshData.aPos.y, this.navmeshData.aPos.z);
            this.makeStarGraph(this.navmeshData.astarItem);
            this.astarWidth = this.heightItem[0].length;
            this.astarHeight = this.heightItem.length;
            Pan3d.SceneManager.getInstance().fixAstart(new Pan3d.Vector2D(this.aPos.x, this.midu * this.astarHeight + this.aPos.z));
            this.mathAreaRect();
            this.mathMinMapRect();
        };
        Object.defineProperty(AstarUtil, "sceneVectList", {
            set: function (value) {
                this._sceneVectList = value;
                this._frist = true; //标记新进入场景时
            },
            enumerable: true,
            configurable: true
        });
        /*
        public static sceneRotationInfo(): void {
            
            if (!this.navmeshData) {
                return;
            }
            if (this._sceneVectList) {
                var $focus2D: Vector2D = AstarUtil.getGrapIndexByPos(new Vector3D(Scene_data.focus3D.x, Scene_data.focus3D.y, Scene_data.focus3D.z))
                for (var i: number = 0; i < this._sceneVectList.length; i++) {
                    var $pos: Vector2D = new Vector2D(this._sceneVectList[i].x, this._sceneVectList[i].y)
                    var $dis: number = Vector2D.distance($pos, $focus2D);
                    this._sceneVectList[i].z = $dis;
                }
                this._sceneVectList.sort(
                    function (a: Vector3D, b: Vector3D): number {
                        return a.z - b.z;
                    }
                )
                var disA: number = Vector2D.distance(new Vector2D(this._sceneVectList[0].x, this._sceneVectList[0].y), $focus2D);
                var disB: number = Vector2D.distance(new Vector2D(this._sceneVectList[1].x, this._sceneVectList[1].y), $focus2D);
                var $kangly: number = disA / (disA + disB) * this._sceneVectList[1].w + disB / (disA + disB) * this._sceneVectList[0].w
                if (this._frist) {
                    this._frist = false
                    Scene_data.focus3D.rotationY = Scene_data.gameAngle + $kangly;
                } else {
                    Scene_data.focus3D.rotationY += ((Scene_data.gameAngle + $kangly) - Scene_data.focus3D.rotationY) / 100;
                }
            } else {
                Scene_data.focus3D.rotationY = Scene_data.gameAngle;
            }
    
        }
        */
        AstarUtil.getJumpDataByV2d = function ($tx, $ty) {
            if (this.jumpItem && this.jumpItem.length) {
                if (this.jumpItem[$ty] && this.jumpItem[$ty][$tx] == 1) {
                    return true;
                }
            }
            return false;
        };
        AstarUtil.mathMinMapRect = function () {
            var midu = AstarUtil.navmeshData.midu;
            var mapW = AstarUtil.navmeshData.astarItem[0].length;
            var mapH = AstarUtil.navmeshData.astarItem.length;
            var tw = AstarUtil.navmeshData.aPos.x + mapW * AstarUtil.navmeshData.midu;
            var th = AstarUtil.navmeshData.aPos.z + mapH * AstarUtil.navmeshData.midu;
            tw = Math.max(Math.abs(AstarUtil.navmeshData.aPos.x), Math.abs(tw));
            th = Math.max(Math.abs(AstarUtil.navmeshData.aPos.z), Math.abs(th));
            var bsew = Math.max(tw, th);
            bsew += 100;
            bsew = Math.round(bsew);
            var $infoRect = new Pan3d.Rectangle();
            $infoRect.x = -bsew;
            $infoRect.y = -bsew;
            $infoRect.width = bsew * 2;
            $infoRect.height = bsew * 2;
            $infoRect.x -= 1;
            $infoRect.y -= 1;
            $infoRect.width += 2;
            $infoRect.height += 2;
            $infoRect.width /= 2;
            $infoRect.height /= 2;
            this.minMapRect = $infoRect;
        };
        AstarUtil.mathAreaRect = function () {
            /*
            var $minx: number = this.astarWidth;
            var $miny: number = this.astarHeight;
            var $maxx: number =0;
            var $maxy: number = 0;
            for (var i: number = 0; i < this.astarHeight; i++) {
                for (var j: number = 0; j < this.astarWidth; j++) {
                    if (this.graphData.grid[i][j].weight==1) {
                        if ($minx > j) {
                            $minx = j
                        }
                        if ($miny > i) {
                            $miny = i
                        }
    
                        if ($maxx <j) {
                            $maxx = j
                        }
                        if ($maxy < i) {
                            $maxy = i
                        }
                    }
                   
    
                }
            }
            //console.log("$minx", $minx);
            //console.log("$miny", $miny);
            //console.log("$maxx", $maxx);
            //console.log("$maxy", $maxy);
    
            var tx: number = this.aPos.x + $minx * this.midu;
            var tz: number = this.aPos.z + $miny * this.midu;
            var tw: number = this.aPos.x + $maxx * this.midu;
            var th: number = this.aPos.z + $maxy * this.midu;
    
            */
            this.areaRect = new Pan3d.Rectangle;
            this.areaRect.x = this.aPos.x;
            this.areaRect.y = this.aPos.z;
            this.areaRect.width = this.astarWidth * this.midu;
            this.areaRect.height = this.astarHeight * this.midu;
        };
        AstarUtil.clear = function () {
            if (this.navmeshData) {
                this._bakData = this.navmeshData;
                this.aPos.setTo(0, 0, 0);
                this.navmeshData = null;
            }
        };
        AstarUtil.porcessBak = function (tf) {
            if (tf) {
                this.setData(this._bakData);
            }
            //this._bakData = null;
        };
        AstarUtil.getHeightByPos = function ($pos) {
            if (this.heightItem) {
                var $movePos = $pos.subtract(this.aPos).add(new Pan3d.Vector3D(this.midu / 2, 0, this.midu / 2));
                var w = (this.astarWidth - 1) * this.midu;
                var h = (this.astarHeight - 1) * this.midu;
                if ($movePos.x > 0 && $movePos.x <= w && $movePos.z > 0 && $movePos.z <= h) {
                    return this.getBaseHeightByBitmapdata($movePos.x / this.midu, $movePos.z / this.midu);
                }
            }
            return -500;
        };
        AstarUtil.getBaseHeightByBitmapdata = function ($xpos, $ypos) {
            var perX = $xpos - float2int($xpos);
            var perY = $ypos - float2int($ypos);
            var zero_zero = this.getBitmapDataHight(float2int($xpos), float2int($ypos));
            var zero_one = this.getBitmapDataHight(float2int($xpos), Math.ceil($ypos));
            var one_zero = this.getBitmapDataHight(Math.ceil($xpos), float2int($ypos));
            var one_one = this.getBitmapDataHight(Math.ceil($xpos), Math.ceil($ypos));
            var dis1 = (1 - perX) * (1 - perY);
            var dis2 = (1 - perX) * perY;
            var dis3 = perX * (1 - perY);
            var dis4 = perX * perY;
            var num = (dis1 * zero_zero + dis2 * zero_one + dis3 * one_zero + dis4 * one_one);
            return num;
        };
        AstarUtil.getBitmapDataHight = function ($tx, $ty) {
            return this.heightItem[this.heightItem.length - 1 - $ty][$tx];
        };
        AstarUtil.findPath = function ($a, $b) {
            return null;
        };
        AstarUtil.Path2dTo3d = function (result) {
            var astarPosItem = new Array;
            for (var i = 0; i < result.length; i++) {
                astarPosItem.push(this.getWorldPosByStart2D(result[i]));
            }
            return astarPosItem;
        };
        AstarUtil.getWorldPosByStart2D = function (a) {
            if (this.navmeshData) {
                var Apos = new Pan3d.Vector3D(a.x * this.midu, 3, a.y * this.midu);
                Apos.x = Apos.x + this.aPos.x + this.midu / 2;
                Apos.z = (this.aPos.z + this.midu * this.astarHeight) - Apos.z - this.midu / 2;
                return Apos;
            }
            else {
                return new Pan3d.Vector3D(a.x * 10 + this.midu / 2, 0, a.y * 10 - this.midu / 2);
            }
        };
        AstarUtil.findPath3D = function ($a, $b) {
            if (this.navmeshData) {
                if (!AstarUtil.getPosIsCanMove($b)) {
                    $b = this.findNearLinePoint($a, $b);
                }
                var gridVec2DA = this.getGrapIndexByPos($a);
                var gridVec2DB = this.getGrapIndexByPos($b);
                if (this.getJumpDataByV2d(gridVec2DB.x, gridVec2DB.y)) {
                    //console.log("是跳跃区域不可寻路", gridVec2DB.x, gridVec2DB.y)
                    return null;
                }
                if (!this.isGridCanWalk(gridVec2DB)) {
                    return null;
                }
                if (!gridVec2DA) { //特殊处理如果出去了将直接跳到目的地
                    //console.log("逻辑格位置有错")
                    return null;
                }
                if (this.findStraightLine(gridVec2DA, gridVec2DB)) {
                    ////console.log("直线走走走")
                    return [gridVec2DA, gridVec2DB];
                }
                return this.findPath2D(gridVec2DA, gridVec2DB);
            }
            else {
                return [this.getGrapIndexByPos($a), this.getGrapIndexByPos($b)];
            }
        };
        //是否可以直线走
        AstarUtil.findStraightLine = function ($a, $b) {
            var $nrm = new Pan3d.Vector2D($b.x - $a.x, $b.y - $a.y);
            $nrm.normalize();
            var d = Math.round(Pan3d.Vector2D.distance($a, $b));
            var p = new Pan3d.Vector2D;
            for (var i = 0; i < d; i++) {
                p.x = Math.floor($a.x + i * $nrm.x);
                p.y = Math.floor($a.y + i * $nrm.y);
                if (!this.isGridCanWalk(p)) {
                    return false;
                }
                p.x = Math.ceil($a.x + i * $nrm.x);
                p.y = Math.ceil($a.y + i * $nrm.y);
                if (!this.isGridCanWalk(p)) {
                    return false;
                }
                p.x = Math.round($a.x + i * $nrm.x);
                p.y = Math.round($a.y + i * $nrm.y);
                if (!this.isGridCanWalk(p)) {
                    return false;
                }
            }
            return true;
        };
        AstarUtil.isGridCanWalk = function (p) {
            if (p) {
                if (!this.graphData.grid[p.y]) {
                    return false;
                }
                if (!this.graphData.grid[p.y][p.x]) {
                    return false;
                }
                if (this.graphData.grid[p.y][p.x].weight == 0) {
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                //console.log("没有这个点", p);
                return false;
            }
        };
        AstarUtil.findPath2D = function (gridVec2DA, gridVec2DB) {
            return null;
        };
        //优化直接
        AstarUtil.turnLineAstar = function ($arr) {
            if ($arr.length < 2) {
                return $arr;
            }
            var $tempArr = [$arr[0]];
            for (var i = 2; i < $arr.length; i++) {
                if (!this.findStraightLine($tempArr[$tempArr.length - 1], $arr[i])) {
                    $tempArr.push($arr[i - 1]);
                }
            }
            $tempArr.push($arr[$arr.length - 1]);
            if ($arr.length != $tempArr.length) {
                return this.turnLineAstar($tempArr);
            }
            return $tempArr;
        };
        //简化寻路结果
        AstarUtil.simplifyAstar = function ($arr) {
            var $num = 0;
            if ($arr.length > 1) {
                //   $arr.splice(0, 1);
            }
            if ($arr.length > 2) {
                var $back = new Array;
                $back.push($arr[0]); //加上首个
                for (var i = 2; i < $arr.length; i++) {
                    var a = $back[$back.length - 1];
                    var b = $arr[i - 1];
                    var c = $arr[i];
                    if (Math.atan2(b.y - a.y, b.x - a.x) != Math.atan2(c.y - a.y, c.x - a.x) || $num > 126) {
                        $back.push(b);
                    }
                    else {
                        $num++;
                    }
                }
                $back.push($arr[$arr.length - 1]); //加上最后一个
                return $back;
            }
            else {
                return $arr;
            }
        };
        AstarUtil.findNearLinePoint = function ($a, $b) {
            while (Pan3d.Vector3D.distance($a, $b) > 5) {
                $b = this.moveA2B($b, $a, 1);
                if (AstarUtil.getPosIsCanMove($b)) {
                    return $b;
                    //break
                }
            }
            return $b;
        };
        AstarUtil.moveA2B = function (a, b, speed) {
            var c = b.subtract(a);
            c.normalize();
            c.scaleBy(speed);
            c = c.add(a);
            return c;
        };
        AstarUtil.getPosIsCanMove = function ($pos) {
            if (!this.graphData || !this.graphData.grid) {
                //console.log("寻路这时是不可的a")
                return false;
            }
            var $kt = this.getGrapIndexByPos($pos);
            return this.isGridCanWalk($kt);
            //if (!$kt||!this.graphData.grid[$kt.y] || !this.graphData.grid[$kt.y][$kt.x]) {
            //    //console.log("寻路这时是不可的b")
            //    return false
            //}
            //if ($kt && this.graphData.grid[$kt.y][$kt.x].weight) {
            //    return true;
            //} else {
            //    return false;
            //}
        };
        AstarUtil.makeStarGraph = function ($arr) {
        };
        AstarUtil.blockAry = function (ary) {
            var list = new Array;
            for (var i = 0; i < ary.length; i++) {
                list.push([new Pan3d.Vector2D(ary[i][0], ary[i][1]), new Pan3d.Vector2D(ary[i][2], ary[i][3])]);
            }
            this.blockList(list);
        };
        AstarUtil.blockList = function (ary) {
            if (this.blockBakData) {
                this.unblock();
            }
            this.blockBakData = new Array;
            for (var i = 0; i < ary.length; i++) {
                this.blockPoint(ary[i][0], ary[i][1]);
            }
        };
        AstarUtil.blockPoint = function (p1, p2) {
            var rec = new Pan3d.Rectangle();
            rec.y = Math.min(p1.x, p2.x);
            rec.x = Math.min(p1.y, p2.y);
            rec.height = Math.abs(p1.x - p2.x);
            rec.width = Math.abs(p1.y - p2.y);
            this.blockRec(rec);
        };
        AstarUtil.blockRec = function ($rec) {
            for (var i = 0; i < $rec.width; i++) {
                var ary = new Array;
                for (var j = 0; j < $rec.height; j++) {
                    var idx = i + $rec.x;
                    var idy = j + $rec.y;
                    var g = this.graphData.grid[idx][idy];
                    ary.push({ i: idx, j: idy, w: g.weight });
                    g.weight = 0;
                }
                this.blockBakData.push(ary);
            }
        };
        AstarUtil.unblock = function () {
            if (!this.blockBakData) {
                return;
            }
            for (var i = 0; i < this.blockBakData.length; i++) {
                for (var j = 0; j < this.blockBakData[i].length; j++) {
                    var g = this.blockBakData[i][j];
                    this.graphData.grid[g.i][g.j].weight = g.w;
                }
            }
            this.blockBakData = null;
        };
        AstarUtil.getGrapIndexByPos = function ($pos) {
            if (this.navmeshData) {
                var $movePos = $pos.subtract(this.aPos).add(new Pan3d.Vector3D(0, 0, this.midu / 2));
                var w = this.astarWidth * this.midu;
                var h = this.astarHeight * this.midu;
                if ($movePos.x > 0 && $movePos.x < w && $movePos.z > 0 && $movePos.z < h) {
                    return new Pan3d.Vector2D(float2int($movePos.x / this.midu), float2int(this.astarHeight - $movePos.z / this.midu));
                }
            }
            else {
                return new Pan3d.Vector2D(float2int($pos.x / this.midu), float2int($pos.z / this.midu));
            }
            return null;
        };
        AstarUtil.getScenePos = function ($x, $y) {
            var $temp = Pan3d.Groundposition.getGroundPos($x, $y);
            return this.getLookAtPos($temp);
        };
        AstarUtil.getLookAtPos = function ($hit3D) {
            var $cam3D = new Pan3d.Vector3D(Pan3d.Scene_data.cam3D.x, Pan3d.Scene_data.cam3D.y, Pan3d.Scene_data.cam3D.z);
            var nrm = $hit3D.subtract($cam3D);
            nrm.normalize();
            var $dis = 0;
            var backB;
            while (true) {
                $dis += 2;
                var $n = nrm.clone();
                $n.scaleBy($dis);
                var $XZ = $cam3D.add($n);
                var $y = AstarUtil.getHeightByPos($XZ);
                if ($y > $XZ.y) {
                    backB = $XZ;
                    break;
                }
                if ($dis > 1000) //当向前1000都还没找到。就退出
                 {
                    backB = null;
                    break;
                }
            }
            return backB;
        };
        AstarUtil.aPos = new Pan3d.Vector3D;
        AstarUtil.midu = 10;
        AstarUtil.astarWidth = 0;
        AstarUtil.astarHeight = 0;
        AstarUtil._frist = false;
        AstarUtil.canwalkItem = [];
        return AstarUtil;
    }());
    Pan3d.AstarUtil = AstarUtil;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AstarUtil.js.map
var Pan3d;
(function (Pan3d) {
    var KeyboardType = /** @class */ (function () {
        function KeyboardType() {
        }
        KeyboardType.A = 65;
        KeyboardType.B = 66;
        KeyboardType.C = 67;
        KeyboardType.D = 68;
        KeyboardType.E = 69;
        KeyboardType.F = 70;
        KeyboardType.G = 71;
        KeyboardType.H = 72;
        KeyboardType.I = 73;
        KeyboardType.J = 74;
        KeyboardType.K = 75;
        KeyboardType.L = 76;
        KeyboardType.M = 77;
        KeyboardType.N = 78;
        KeyboardType.O = 79;
        KeyboardType.P = 80;
        KeyboardType.Q = 81;
        KeyboardType.R = 82;
        KeyboardType.S = 83;
        KeyboardType.T = 84;
        KeyboardType.U = 85;
        KeyboardType.V = 86;
        KeyboardType.W = 87;
        KeyboardType.X = 88;
        KeyboardType.Y = 89;
        KeyboardType.Z = 90;
        KeyboardType.Left = 37;
        KeyboardType.Up = 38;
        KeyboardType.Right = 39;
        KeyboardType.Down = 40;
        KeyboardType.Delete = 46;
        KeyboardType.F1 = 112;
        KeyboardType.F2 = 113;
        return KeyboardType;
    }());
    Pan3d.KeyboardType = KeyboardType;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=KeyboardType.js.map
var Pan3d;
(function (Pan3d) {
    var MouseType = /** @class */ (function () {
        function MouseType() {
        }
        MouseType.MouseDown = "mousedown";
        MouseType.MouseUp = "mouseup";
        MouseType.MouseMove = "mousemove";
        MouseType.MouseClick = "mouseclick";
        MouseType.KeyDown = "keydown";
        MouseType.KeyUp = "keyup";
        MouseType.MouseWheel = "mousewheel";
        //public static TouchMown = "panstart";   
        //public static TouchMove = "panmove";
        //public static TouchUp = "panend";
        //public static TouchClick = "tap";
        MouseType.TouchStart = "touchstart";
        MouseType.TouchMove = "touchmove";
        MouseType.TouchEnd = "touchend";
        MouseType.TouchClick = "touchstart";
        return MouseType;
    }());
    Pan3d.MouseType = MouseType;
    var KeyControl = /** @class */ (function () {
        function KeyControl() {
            var _this = this;
            this._isUpData = true;
            this.speedNum = 10;
            this._keyDic = new Object;
            this._lostMousePos = new Pan3d.Object3D;
            this._lastFousce = new Pan3d.Object3D;
            this._isMouseDown = false;
            setInterval(function () { _this.upData(); }, 1000 / 60);
        }
        Object.defineProperty(KeyControl, "instance", {
            get: function () {
                if (!this._instance) {
                    this._instance = new KeyControl();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        KeyControl.getInstance = function () {
            if (!this._instance) {
                this._instance = new KeyControl();
            }
            return this._instance;
        };
        KeyControl.prototype.init = function () {
            document.addEventListener(MouseType.MouseDown, this.onMouseDown);
            document.addEventListener(MouseType.MouseUp, this.onMouseUp);
            document.addEventListener(MouseType.MouseMove, this.onMouseMove);
            document.addEventListener(MouseType.KeyDown, this.onKeyDown);
            document.addEventListener(MouseType.KeyUp, this.onKeyUp);
        };
        KeyControl.prototype.clearAllEvet = function () {
            document.removeEventListener(MouseType.MouseDown, this.onMouseDown);
            document.removeEventListener(MouseType.MouseUp, this.onMouseUp);
            document.removeEventListener(MouseType.MouseMove, this.onMouseMove);
            document.removeEventListener(MouseType.KeyDown, this.onKeyDown);
            document.removeEventListener(MouseType.KeyUp, this.onKeyUp);
        };
        KeyControl.prototype.clearMouseEvent = function () {
            document.removeEventListener(MouseType.MouseDown, this.onMouseDown);
            document.removeEventListener(MouseType.MouseUp, this.onMouseUp);
            document.removeEventListener(MouseType.MouseMove, this.onMouseMove);
            this._isUpData = false;
        };
        KeyControl.prototype.onMouseMove = function ($evt) {
            var $keyControl = KeyControl.instance;
            var $nowPos = new Pan3d.Object3D;
            $nowPos.x = $evt.pageX;
            $nowPos.y = $evt.pageY;
            if ($keyControl._isMouseDown) {
                Pan3d.Scene_data.cam3D.rotationY = $keyControl._lastFousce.rotationY - ($nowPos.x - $keyControl._lostMousePos.x) / 10;
                Pan3d.Scene_data.cam3D.rotationX = $keyControl._lastFousce.rotationX - ($nowPos.y - $keyControl._lostMousePos.y) / 10;
            }
        };
        KeyControl.prototype.onMouseDown = function ($evt) {
            var $keyControl = KeyControl.instance;
            $keyControl._isMouseDown = true;
            $keyControl._lostMousePos.x = $evt.pageX;
            $keyControl._lostMousePos.y = $evt.pageY;
            $keyControl._lastFousce.rotationX = Pan3d.Scene_data.cam3D.rotationX;
            $keyControl._lastFousce.rotationY = Pan3d.Scene_data.cam3D.rotationY;
        };
        KeyControl.prototype.onMouseUp = function ($evt) {
            var $keyControl = KeyControl.instance;
            $keyControl._isMouseDown = false;
            // FpsMc.tipStr = $evt.layerX + ":" + $evt.layerY;
        };
        KeyControl.prototype.upData = function () {
            if (!this._isUpData) {
                return;
            }
            var _keyDic = this._keyDic;
            if (_keyDic[65]) { //A
                this.tureLeft();
            }
            if (_keyDic[83]) { //S
                // FpsMc.tipStr = "S"
                this.tureDown();
            }
            if (_keyDic[68]) { //D
                this.tureRight();
            }
            if (_keyDic[87]) { //W
                this.tureUp();
            }
            if (_keyDic[81]) { //Q
                Pan3d.Scene_data.cam3D.y -= this.speedNum;
            }
            if (_keyDic[69]) { //E
                Pan3d.Scene_data.cam3D.y += this.speedNum;
            }
            Pan3d.MathClass.MathCam(Pan3d.Scene_data.cam3D);
        };
        KeyControl.prototype.tureLeft = function () {
            var $p = new Pan3d.Vector3D(-this.speedNum, 0, 0, 1); //dis
            var $m = new Pan3d.Matrix3D;
            this.mathFocus3D($p);
        };
        KeyControl.prototype.tureRight = function () {
            var $p = new Pan3d.Vector3D(this.speedNum, 0, 0, 1); //dis
            this.mathFocus3D($p);
        };
        KeyControl.prototype.tureUp = function () {
            var $p = new Pan3d.Vector3D(0, 0, this.speedNum, 1); //dis
            this.mathFocus3D($p);
        };
        KeyControl.prototype.tureDown = function () {
            var $p = new Pan3d.Vector3D(0, 0, -this.speedNum, 1); //dis
            this.mathFocus3D($p);
        };
        KeyControl.prototype.mathFocus3D = function ($p) {
            var $m = new Pan3d.Matrix3D;
            $m.prependRotation(-Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            $m.prependRotation(-Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            $p = $m.transformVector($p);
            Pan3d.Scene_data.cam3D.x += $p.x;
            Pan3d.Scene_data.cam3D.y += $p.y;
            Pan3d.Scene_data.cam3D.z += $p.z;
        };
        KeyControl.prototype.onKeyDown = function ($evt) {
            var _keyDic = KeyControl.instance._keyDic;
            _keyDic[$evt.keyCode] = true;
            if ($evt.keyCode == 0) {
            }
        };
        KeyControl.prototype.onKeyUp = function ($evt) {
            var _keyDic = KeyControl.instance._keyDic;
            _keyDic[$evt.keyCode] = false;
        };
        return KeyControl;
    }());
    Pan3d.KeyControl = KeyControl;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=KeyControl.js.map
var Pan3d;
(function (Pan3d) {
    var TimeUtil = /** @class */ (function () {
        function TimeUtil() {
        }
        TimeUtil.getTimer = function () {
            return (Date.now() - TimeUtil.START_TIME);
        };
        TimeUtil.getTimerSecond = function () {
            return TimeUtil.getTimer() / 1000;
        };
        //标记现在时间
        TimeUtil.saveNowTime = function () {
            this.lastTime = this.getTimer();
        };
        //得到使用的时间
        TimeUtil.getUseTime = function () {
            return this.getTimer() - this.lastTime;
        };
        TimeUtil.getZeroTime = function (nS) {
            var timestamp4 = new Date(nS * 1000);
            timestamp4.setHours(0);
            timestamp4.setMinutes(0);
            timestamp4.setSeconds(0);
            return timestamp4.getTime() / 1000;
        };
        /**
        * YYYY-mm-DD HH:MM
        **/
        TimeUtil.getLocalTime = function (nS) {
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            return timestamp4.toLocaleDateString().replace(/\//g, "-") + " " + timestamp4.toTimeString().substr(0, 5);
        };
        /**
        * YYYY-mm-DD
        **/
        TimeUtil.getLocalTime0 = function (nS) {
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            return timestamp4.toLocaleDateString().replace(/\//g, "-");
        };
        /**
        * YYYY-mm-DD HH:MM:SS
        **/
        TimeUtil.getLocalTime1 = function (nS) {
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            return timestamp4.toLocaleDateString().replace(/\//g, "-") + " " + timestamp4.toTimeString().substr(0, 8);
        };
        /**
         * HH:MM:SS
        **/
        TimeUtil.getLocalTime2 = function (nS) {
            // var timestamp4 = new Date(nS * 1000 - 8 * 60 * 60 * 1000);//直接用 new Date(时间戳) 格式转化获得当前时间1-00
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            ////console.log("--time=",timestamp4.toTimeString());
            return timestamp4.toTimeString().substr(0, 8);
        };
        /**
         * HH:MM
        **/
        TimeUtil.getLocalTime6 = function (nS) {
            // var timestamp4 = new Date(nS * 1000 - 8 * 60 * 60 * 1000);//直接用 new Date(时间戳) 格式转化获得当前时间1-00
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            //console.log("--time=",timestamp4.toTimeString());
            return timestamp4.toTimeString().substr(0, 5);
        };
        /**
         * MM:SS
        **/
        TimeUtil.getLocalTime3 = function (nS) {
            var timestamp4 = new Date(nS * 1000); //直接用 new Date(时间戳) 格式转化获得当前时间1-00
            return timestamp4.toTimeString().substr(3, 5);
        };
        /**
         * MM分SS秒
         */
        TimeUtil.getLocalTime4 = function (nS) {
            return float2int(nS / 60) + "分" + (nS % 60) + "秒";
        };
        /**
         * HH时MM分SS秒
         */
        TimeUtil.getLocalTime5 = function (nS) {
            var timestamp4 = new Date(nS * 1000);
            var str = timestamp4.toTimeString().substr(0, 8);
            var strAry = str.split(":");
            return strAry[0] + "时" + strAry[1] + "分" + strAry[2] + "秒";
        };
        /**
         * 时间差转换
         * DD天HH时MM分SS秒
         */
        TimeUtil.getDiffTime1 = function (nS) {
            var day = float2int(nS / this.dayTime);
            nS -= day * this.dayTime;
            var hour = float2int(nS / this.HourTime);
            nS -= hour * this.HourTime;
            var minus = float2int(nS / this.MinuteTime);
            nS -= minus * this.MinuteTime;
            return day + "天" + hour + "时" + minus + "分" + nS + "秒";
        };
        /**
         * HH:MM:SS
        **/
        TimeUtil.getDiffTime2 = function (nS) {
            var hour = float2int(nS / this.HourTime);
            nS -= hour * this.HourTime;
            var minus = float2int(nS / this.MinuteTime);
            nS -= minus * this.MinuteTime;
            return this.zeroStr(hour) + ":" + this.zeroStr(minus) + ":" + this.zeroStr(nS);
        };
        TimeUtil.zeroStr = function (num) {
            if (num > 9) {
                return String(num);
            }
            else {
                return "0" + num;
            }
        };
        TimeUtil.getDelayTimeStr = function ($hourtime) {
            var hourtime = Math.floor($hourtime / 3600);
            var timeStr = "";
            if (hourtime > 24) {
                timeStr = Math.floor(hourtime / 24) + "天前";
            }
            else {
                if (hourtime >= 1) {
                    timeStr = hourtime + "小时前";
                }
                else {
                    timeStr = "刚刚";
                }
            }
            return timeStr;
        };
        TimeUtil.compareTime = function ($hour, $min) {
            //服务器当前标准时间
            return false;
        };
        TimeUtil.init = function () {
            TimeUtil.START_TIME = Date.now();
        };
        TimeUtil.addTimeTick = function ($time, $fun, $beginTime) {
            if ($beginTime === void 0) { $beginTime = 0; }
            var timeFunTick = new TimeFunTick();
            timeFunTick.alltime = $time;
            timeFunTick.fun = $fun;
            timeFunTick.time = $time - $beginTime;
            TimeUtil.timefunAry.push(timeFunTick);
        };
        TimeUtil.removeTimeTick = function ($fun) {
            for (var i = 0; i < TimeUtil.timefunAry.length; i++) {
                if (TimeUtil.timefunAry[i]) {
                    if (TimeUtil.timefunAry[i].fun == $fun) {
                        //TimeUtil.timefunAry.splice(i, 1);
                        TimeUtil.timefunAry[i] = null;
                        break;
                    }
                }
                else {
                    // throw Error("有重复移除嫌疑");	
                }
            }
        };
        TimeUtil.addTimeOut = function ($time, $fun) {
            if (this.hasTimeOut($fun)) {
                return;
            }
            var timeFunTick = new TimeFunOut();
            timeFunTick.alltime = $time;
            timeFunTick.fun = $fun;
            timeFunTick.time = 0;
            TimeUtil.outTimeFunAry.push(timeFunTick);
        };
        TimeUtil.removeTimeOut = function ($fun) {
            for (var i = 0; i < TimeUtil.outTimeFunAry.length; i++) {
                if (TimeUtil.outTimeFunAry[i] && TimeUtil.outTimeFunAry[i].fun == $fun) {
                    //TimeUtil.outTimeFunAry.splice(i, 1);
                    TimeUtil.outTimeFunAry[i] = null;
                    break;
                }
            }
        };
        TimeUtil.hasTimeOut = function ($fun) {
            for (var i = 0; i < TimeUtil.outTimeFunAry.length; i++) {
                if (TimeUtil.outTimeFunAry[i] && TimeUtil.outTimeFunAry[i].fun == $fun) {
                    return true;
                }
            }
            return false;
        };
        TimeUtil.addFrameTick = function ($fun) {
            if (TimeUtil.funAry.indexOf($fun) == -1) {
                TimeUtil.funAry.push($fun);
            }
        };
        TimeUtil.hasFrameTick = function ($fun) {
            var index = TimeUtil.funAry.indexOf($fun);
            if (index != -1) {
                return true;
            }
            return false;
        };
        TimeUtil.removeFrameTick = function ($fun) {
            var index = TimeUtil.funAry.indexOf($fun);
            if (index != -1) {
                TimeUtil.funAry[index] = null;
                //TimeUtil.funAry.splice(index, 1);
            }
        };
        TimeUtil.update = function () {
            var dtime = TimeUtil.getTimer() - TimeUtil.time;
            for (var i = 0; i < TimeUtil.funAry.length; i++) {
                if (TimeUtil.funAry[i]) {
                    TimeUtil.funAry[i](dtime);
                }
            }
            for (var i = 0; i < TimeUtil.timefunAry.length; i++) {
                if (TimeUtil.timefunAry[i]) {
                    TimeUtil.timefunAry[i].update(dtime);
                }
            }
            for (var i = TimeUtil.outTimeFunAry.length - 1; i >= 0; i--) {
                if (TimeUtil.outTimeFunAry[i] && TimeUtil.outTimeFunAry[i].update(dtime)) {
                    TimeUtil.outTimeFunAry[i] = null;
                }
            }
            for (var i = TimeUtil.funAry.length - 1; i >= 0; i--) {
                if (!TimeUtil.funAry[i]) {
                    TimeUtil.funAry.splice(i, 1);
                }
            }
            for (var i = TimeUtil.timefunAry.length - 1; i >= 0; i--) {
                if (!TimeUtil.timefunAry[i]) {
                    TimeUtil.timefunAry.splice(i, 1);
                }
            }
            for (var i = TimeUtil.outTimeFunAry.length - 1; i >= 0; i--) {
                if (!TimeUtil.outTimeFunAry[i]) {
                    TimeUtil.outTimeFunAry.splice(i, 1);
                }
            }
            TimeUtil.time = TimeUtil.getTimer();
        };
        TimeUtil.funAry = new Array;
        TimeUtil.timefunAry = new Array;
        TimeUtil.outTimeFunAry = new Array;
        TimeUtil.time = 0;
        TimeUtil.lastTime = 0;
        TimeUtil.dayTime = 24 * 60 * 60;
        TimeUtil.HourTime = 60 * 60;
        TimeUtil.MinuteTime = 60;
        return TimeUtil;
    }());
    Pan3d.TimeUtil = TimeUtil;
    var TimeFunTick = /** @class */ (function () {
        function TimeFunTick() {
            this.alltime = 0;
            this.time = 0;
        }
        TimeFunTick.prototype.update = function (t) {
            this.time += t;
            if (this.time >= this.alltime) {
                this.fun();
                this.time = 0;
            }
        };
        return TimeFunTick;
    }());
    var TimeFunOut = /** @class */ (function () {
        function TimeFunOut() {
            this.alltime = 0;
            this.time = 0;
        }
        TimeFunOut.prototype.update = function (t) {
            this.time += t;
            if (this.time >= this.alltime) {
                this.fun();
                return true;
            }
            return false;
        };
        return TimeFunOut;
    }());
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=TimeUtil.js.map
function float2int(value) {
    return value | 0;
}
function radian2angle(value) {
    return value / Math.PI * 180;
}
function angle2radian(value) {
    return value / 180 * Math.PI;
}
function makeImage() {
    var _img = new Image();
    _img.setAttribute("crossOrigin", "anonymous");
    return _img;
}
var keyChi = [
    "零", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二", "十三", "十四", "十五"
];
/**阿拉伯数字转换成中文数字 */
function getChiNum($id) {
    return keyChi[$id];
}
function hexToArgb(expColor, is32, color) {
    if (is32 === void 0) { is32 = true; }
    if (color === void 0) { color = null; }
    if (!color) {
        color = new Pan3d.Vector3D();
    }
    color.w = is32 ? (expColor >> 24) & 0xFF : 0;
    color.x = (expColor >> 16) & 0xFF;
    color.y = (expColor >> 8) & 0xFF;
    color.z = (expColor) & 0xFF;
    return color;
}
function hexToArgbNum(expColor, is32, color) {
    if (is32 === void 0) { is32 = true; }
    if (color === void 0) { color = null; }
    color = hexToArgb(expColor, is32, color);
    color.scaleBy(1 / 0xFF);
    return color;
}
function getBaseUrl() {
    if (Pan3d.Scene_data.supportBlob) {
        return "";
    }
    else {
        return "_base";
    }
}
/**描边路径 */
function strokeFilter(ctx, width, height, color) {
    var colorVec = hexToArgb(color);
    var imgData = ctx.getImageData(0, 0, width, height);
    var data = imgData.data;
    var targetAry = new Array;
    for (var i = 1; i < width - 1; i++) {
        for (var j = 0; j < height - 1; j++) {
            var idx = getPiexIdx(i, j);
            if (data[idx + 3] == 0) {
                if (getAround(i, j)) {
                    targetAry.push(idx);
                }
            }
        }
    }
    for (var i = 0; i < targetAry.length; i++) {
        data[targetAry[i]] = colorVec.x;
        data[targetAry[i] + 1] = colorVec.y;
        data[targetAry[i] + 2] = colorVec.z;
        data[targetAry[i] + 3] = colorVec.w;
    }
    ctx.putImageData(imgData, 0, 0);
    function getPiexIdx(x, y) {
        return ((y * width) + x) * 4;
    }
    function getAround(x, y) {
        var idx;
        idx = getPiexIdx(x - 1, y);
        if (data[idx + 3] > 0) {
            return true;
        }
        idx = getPiexIdx(x + 1, y);
        if (data[idx + 3] > 0) {
            return true;
        }
        idx = getPiexIdx(x, y + 1);
        if (data[idx + 3] > 0) {
            return true;
        }
        idx = getPiexIdx(x, y - 1);
        if (data[idx + 3] > 0) {
            return true;
        }
        // idx = getPiexIdx(x - 1, y+1);
        // if (data[idx + 3] > 0) {
        //     return true;
        // }
        // idx = getPiexIdx(x + 1, y+1);
        // if (data[idx + 3] > 0) {
        //     return true;
        // }
        // idx = getPiexIdx(x - 1, y-1);
        // if (data[idx + 3] > 0) {
        //     return true;
        // }
        // idx = getPiexIdx(x + 1, y-1);
        // if (data[idx + 3] > 0) {
        //     return true;
        // }
        return false;
    }
}
function trim(s) {
    return trimRight(trimLeft(s));
}
//去掉左边的空白  
function trimLeft(s) {
    if (s == null) {
        return "";
    }
    var whitespace = new String(" \t\n\r");
    var str = new String(s);
    if (whitespace.indexOf(str.charAt(0)) != -1) {
        var j = 0, i = str.length;
        while (j < i && whitespace.indexOf(str.charAt(j)) != -1) {
            j++;
        }
        str = str.substring(j, i);
    }
    return str;
}
//去掉右边的空白 www.2cto.com   
function trimRight(s) {
    if (s == null)
        return "";
    var whitespace = new String(" \t\n\r");
    var str = new String(s);
    if (whitespace.indexOf(str.charAt(str.length - 1)) != -1) {
        var i = str.length - 1;
        while (i >= 0 && whitespace.indexOf(str.charAt(i)) != -1) {
            i--;
        }
        str = str.substring(0, i + 1);
    }
    return str;
}
function TweenMoveTo(taget, t, vars) {
}
function getScencdStr(timeNum) {
    var m = Math.floor((timeNum / 60 % 60));
    var s = Math.floor(timeNum % 60);
    return String(m < 10 ? "0" : "") + String(m) + ":" + String(s < 10 ? "0" : "") + String(s);
}
//function trace(message?: any, ...optionalParams: any[]): void {
//    //console.log(message, ...optionalParams);
//}
function random($num) {
    return Math.floor(Math.random() * $num);
}
function randomByItem(arr) {
    return arr[random(arr.length)];
}
function makeArray(a, b) {
    if (!a) {
        //console.log("有错")
    }
    for (var i = 0; i < a.length; i++) {
        b.push(a[i]);
    }
}
function unZip($aryBuf) {
    var compressed = new Uint8Array($aryBuf);
    //var t = Date.now();
    var inflate = new Zlib.Inflate(compressed);
    var plain = inflate.decompress();
    ////console.log("解压obj",Date.now()-t);
    return plain.buffer;
}
function getZipByte($byte) {
    var zipLen = $byte.readInt();
    var aryBuf = $byte.buffer.slice($byte.position, $byte.position + zipLen);
    $byte.position += zipLen;
    var zipedBuf = unZip(aryBuf);
    return new Pan3d.Pan3dByteArray(zipedBuf);
}
function getUrlParam(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = window.location.search.substr(1).match(reg);
    if (r != null) {
        return decodeURI(r[2]);
    }
    else {
        return null;
    }
}
function copy2clipboard(val) {
    var inputui = document.createElement("textarea");
    //inputui.type = "text";
    inputui.style.fontSize = '12pt';
    inputui.style.position = "absolute";
    inputui.style["z-index"] = -1;
    inputui.style.background = "transparent";
    inputui.style.border = "transparent";
    inputui.style.color = "white";
    inputui.setAttribute('readonly', '');
    document.body.appendChild(inputui);
    inputui.value = val;
    inputui.select();
    inputui.setSelectionRange(0, inputui.value.length);
    try {
        document.execCommand('copy');
    }
    catch (error) {
        alert("不支持复制");
    }
    setTimeout(function () {
        document.body.removeChild(inputui);
    }, 1000);
}
function getBit($num, offset) {
    return (Boolean)($num >> (offset & 31) & 1);
}
//# sourceMappingURL=Util.js.map
var Pan3d;
(function (Pan3d) {
    var ColorTransition = /** @class */ (function () {
        function ColorTransition() {
            this._canvas = document.createElement("canvas");
            this._cxt = this._canvas.getContext("2d");
            this._gnt = this._cxt.createLinearGradient(0, 0, 128, 0);
            this._canvas.style.zIndex = "1";
            //document.body.appendChild(this._canvas);
        }
        ColorTransition.getInstance = function () {
            if (!this._instance) {
                this._instance = new ColorTransition();
            }
            return this._instance;
        };
        ColorTransition.prototype.getImageData = function ($data) {
            var length = $data.pos.length;
            var color = new Pan3d.Vector3D();
            for (var i = 0; i < length; i++) {
                hexToArgb($data.color[i], false, color);
                this._gnt.addColorStop($data.pos[i] / 255, 'rgba(' + color.x + ',' + color.y + ',' + color.z + ',' + $data.alpha[i] + ')');
            }
            this._cxt.fillStyle = this._gnt;
            this._cxt.fillRect(0, 0, 128, 2);
            return this._cxt.getImageData(0, 0, 128, 2);
        };
        ColorTransition.prototype.getImageDataByVec = function ($data, $lenght) {
            var imgData = this._cxt.createImageData(64, 1);
            var index;
            var baseindex;
            for (var i = 0; i < 64; i++) {
                index = i * 4;
                baseindex = float2int(i / 64 * $lenght) * 4;
                imgData.data[index] = $data[baseindex];
                imgData.data[index + 1] = $data[baseindex + 1];
                imgData.data[index + 2] = $data[baseindex + 2];
                imgData.data[index + 3] = $data[baseindex + 3];
            }
            return imgData;
            //Scene_data.context3D.getTexture(imgData);
        };
        ColorTransition.prototype.setData = function () {
        };
        return ColorTransition;
    }());
    Pan3d.ColorTransition = ColorTransition;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ColorTransition.js.map
var Pan3d;
(function (Pan3d) {
    var ArtFont = /** @class */ (function () {
        function ArtFont() {
            this.fontData = new Pan3d.Dictionary([]);
            this.fontData_Unit = new Pan3d.Dictionary([]);
            this.makeFontRect();
        }
        ArtFont.getInstance = function () {
            if (!this._instance) {
                this._instance = new ArtFont();
            }
            return this._instance;
        };
        ArtFont.prototype.makeFontRect = function () {
            this.fontData["Red"] = this.makeBase12pxNum(new Pan3d.Vector2D(0, 0));
            this.fontData["Green"] = this.makeBase12pxNum(new Pan3d.Vector2D(0, 15));
            this.fontData["Blue"] = this.makeBase12pxNum(new Pan3d.Vector2D(0, 30));
            this.fontData["White"] = this.makeBase12pxNum(new Pan3d.Vector2D(0, 45));
            this.fontData["Yellow"] = this.makeBase12pxNum(new Pan3d.Vector2D(0, 75));
            this.getXmlData();
        };
        ArtFont.prototype.getXmlData = function () {
            // var obj: any = UIData.getUiByName(UIData.textlist, "A_txt1");
            var $uiList = Pan3d.UIData.getUiArrByKey(Pan3d.UIData.textlist);
            for (var i = 0; i < $uiList.length; i++) {
                var $skinName = String($uiList[i].name);
                if ($skinName.search("A_") != -1) {
                    var $id = Number($skinName.substring(5, $skinName.length));
                    var $uiRect = new Pan3d.UIRectangle();
                    $uiRect.pixelX = Number($uiList[i].ox);
                    $uiRect.pixelY = Number($uiList[i].oy);
                    $uiRect.pixelWitdh = Number($uiList[i].ow);
                    $uiRect.pixelHeight = Number($uiList[i].oh);
                    $uiRect.cellX = Number($uiList[i].cellX);
                    $uiRect.cellY = Number($uiList[i].cellY);
                    var $rectFont = new Pan3d.Rectangle(0, 0, $uiRect.pixelWitdh / $uiRect.cellX, $uiRect.pixelHeight);
                    var $arr = new Array;
                    for (var j = 0; j < $uiRect.cellX; j++) {
                        $arr.push(new Pan3d.Rectangle($uiRect.pixelX + j * $rectFont.width, $uiRect.pixelY, $rectFont.width, $rectFont.height));
                    }
                    this.fontData["NUM" + $id] = $arr;
                    //  //console.log("NUM" + $id, $arr)
                }
                //万、亿
                if ($skinName.search("B_") != -1) {
                    var $id = Number($skinName.substring(5, $skinName.length));
                    var $uiRect = new Pan3d.UIRectangle();
                    $uiRect.pixelX = Number($uiList[i].ox);
                    $uiRect.pixelY = Number($uiList[i].oy);
                    $uiRect.pixelWitdh = Number($uiList[i].ow);
                    $uiRect.pixelHeight = Number($uiList[i].oh);
                    $uiRect.cellX = Number($uiList[i].cellX);
                    $uiRect.cellY = Number($uiList[i].cellY);
                    var $rectFont = new Pan3d.Rectangle(0, 0, $uiRect.pixelWitdh / $uiRect.cellX, $uiRect.pixelHeight);
                    var $arr = new Array;
                    for (var j = 0; j < $uiRect.cellX; j++) {
                        $arr.push(new Pan3d.Rectangle($uiRect.pixelX + j * $rectFont.width, $uiRect.pixelY, $rectFont.width, $rectFont.height));
                    }
                    this.fontData_Unit["BNUM" + $id] = $arr;
                    //  //console.log("NUM" + $id, $arr)
                }
            }
        };
        ArtFont.prototype.makeBase12pxNum = function ($pos) {
            var $arr = new Array;
            $arr.push(new Pan3d.Rectangle(3, 0, 9, 14)); //0
            $arr.push(new Pan3d.Rectangle(14, 0, 9, 14)); //1
            $arr.push(new Pan3d.Rectangle(25, 0, 9, 14)); //2
            $arr.push(new Pan3d.Rectangle(36, 0, 9, 14)); //3
            $arr.push(new Pan3d.Rectangle(47, 0, 9, 14)); //4
            $arr.push(new Pan3d.Rectangle(59, 0, 9, 14)); //5
            $arr.push(new Pan3d.Rectangle(70, 0, 9, 14)); //6
            $arr.push(new Pan3d.Rectangle(81, 0, 9, 14)); //7
            $arr.push(new Pan3d.Rectangle(92.5, 0, 9, 14)); //8
            $arr.push(new Pan3d.Rectangle(104, 0, 9, 14)); //9
            $arr.push(new Pan3d.Rectangle(116, 0, 9, 14)); //<+>
            $arr.push(new Pan3d.Rectangle(126, 0, 9, 14)); //<->
            $arr.push(new Pan3d.Rectangle(136, 0, 9, 14)); //</>
            $arr.push(new Pan3d.Rectangle(144, 0, 9, 13)); //<:>
            $arr.push(new Pan3d.Rectangle(154, 0, 9, 13)); //<.>
            for (var i = 0; i < $arr.length; i++) {
                $arr[i].x = $arr[i].x + $pos.x;
                $arr[i].y = $arr[i].y + $pos.y;
            }
            return $arr;
        };
        // public txtInterval: number = 0;
        //将美术字写到ctx上 左对齐的
        ArtFont.prototype.writeFontToCtxLeft = function ($ctx, $str, $color, $tx, $ty, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.num1; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var $textItem = this.fontData[$color];
            var totalW = 0;
            var numId;
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = this.getRect(numId, $color, $textItem);
                if (!txtNumRect) {
                    //console.log("writeFontToCtxLeft有错")
                    return;
                }
                $ctx.drawImage(Pan3d.UIData.textImg, txtNumRect.x, txtNumRect.y, txtNumRect.width, txtNumRect.height, totalW + $tx, $ty, txtNumRect.width, txtNumRect.height);
                totalW = totalW + (txtNumRect.width - $txtInterval);
            }
            return totalW;
        };
        /**
         * 将美术字写到ctx上 右对齐的
         * $tx:绘制的终点x
         * $ty:绘制的起点Y
         */
        ArtFont.prototype.writeFontToCtxRight = function ($ctx, $str, $color, $tx, $ty, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.White; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var $textItem = this.fontData[$color];
            var totalW = 0;
            var $txtWidth = this.getAirFontWidth($ctx, $str, $color, $txtInterval);
            var numId;
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = this.getRect(numId, $color, $textItem);
                $ctx.drawImage(Pan3d.UIData.textImg, txtNumRect.x, txtNumRect.y, txtNumRect.width, txtNumRect.height, totalW + $tx - $txtWidth, $ty, txtNumRect.width, txtNumRect.height);
                totalW = totalW + (txtNumRect.width - $txtInterval);
            }
            return $txtWidth;
        };
        //将美术字写到ctx上 中对齐的center
        ArtFont.prototype.writeFontToCtxCenten = function ($ctx, $str, $color, $tx, $ty, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.White; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var $textItem = this.fontData[$color];
            var totalW = 0;
            var $txtWidth = this.getAirFontWidth($ctx, $str, $color, $txtInterval) / 2;
            var numId;
            if ($str == undefined) {
                //console.log("有错的")
            }
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = this.getRect(numId, $color, $textItem);
                $ctx.drawImage(Pan3d.UIData.textImg, txtNumRect.x, txtNumRect.y, txtNumRect.width, txtNumRect.height, totalW + $tx - $txtWidth, $ty, txtNumRect.width, txtNumRect.height);
                totalW = totalW + (txtNumRect.width - $txtInterval);
            }
            return $txtWidth;
        };
        ArtFont.prototype.writeFontToSkinName = function ($UIAtlas, $iconName, $str, $color, $textAlign, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.ORANGE_TXT; }
            if ($textAlign === void 0) { $textAlign = Pan3d.TextAlign.LEFT; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var rec = $UIAtlas.getRec($iconName);
            $UIAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $txtnum;
            if ($textAlign == Pan3d.TextAlign.LEFT) {
                $txtnum = this.writeFontToCtxLeft($UIAtlas.ctx, $str, $color, 0, 0, $txtInterval);
            }
            else if ($textAlign == Pan3d.TextAlign.RIGHT) {
                $txtnum = this.writeFontToCtxRight($UIAtlas.ctx, $str, $color, rec.pixelWitdh, 0, $txtInterval);
            }
            else if ($textAlign == Pan3d.TextAlign.CENTER) {
                $txtnum = this.writeFontToCtxCenten($UIAtlas.ctx, $str, $color, rec.pixelWitdh / 2, 0, $txtInterval);
            }
            Pan3d.TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, $UIAtlas.ctx);
            return $txtnum;
        };
        ArtFont.prototype.writeFontToSkinNameCenter = function ($UIAtlas, $iconName, $str, $color, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.ORANGE_TXT; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var rec = $UIAtlas.getRec($iconName);
            $UIAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $tx = rec.pixelWitdh / 2;
            var $ty = rec.pixelHeight / 2;
            var $textItem = this.fontData[$color];
            var totalW = 0;
            var $txtWidth = this.getAirFontWidth($UIAtlas.ctx, $str, $color, $txtInterval) / 2;
            var numId;
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = this.getRect(numId, $color, $textItem);
                $UIAtlas.ctx.drawImage(Pan3d.UIData.textImg, txtNumRect.x, txtNumRect.y, txtNumRect.width, txtNumRect.height, totalW + $tx - $txtWidth, $ty - (txtNumRect.height / 2), txtNumRect.width, txtNumRect.height);
                totalW = totalW + (txtNumRect.width - $txtInterval);
            }
            Pan3d.TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, $UIAtlas.ctx);
        };
        //统计美术字文本的宽度
        ArtFont.prototype.getAirFontWidth = function ($ctx, $str, $color, $txtInterval) {
            if ($color === void 0) { $color = ArtFont.White; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            if ($str == undefined) {
                return 0;
            }
            var $textItem = this.fontData[$color];
            var totalW = 0;
            var numId;
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = this.getRect(numId, $color, $textItem);
                if (!txtNumRect) {
                    //console.log("---$str---",$str);
                }
                totalW = totalW + (txtNumRect.width - $txtInterval);
            }
            return totalW;
        };
        ArtFont.prototype.getRect = function (numId, $color, $textItem) {
            var txtNumRect;
            if (numId > 15) {
                //亿万处理
                txtNumRect = this.fontData_Unit["B" + $color][numId - 16];
            }
            else {
                txtNumRect = $textItem[numId];
            }
            return txtNumRect;
        };
        ArtFont.prototype.upArtFont = function ($UIAtlas, $iconName, $str, $size, $color, $textAlign) {
            if ($size === void 0) { $size = 12; }
            if ($color === void 0) { $color = ArtFont.White; }
            if ($textAlign === void 0) { $textAlign = Pan3d.TextAlign.LEFT; }
            //var $str:string="5689556"
            var scale = $size / 12;
            var textItem = this.fontData[$color];
            var rec = $UIAtlas.getRec($iconName);
            $UIAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            //计算totalW
            var totalW = this.getTotalWandDraw(rec, $str, textItem, scale, $UIAtlas.ctx, false);
            //选择左中右排布
            var xpos = this.getXpos($textAlign, totalW, new Pan3d.Rectangle(0, 0, rec.pixelWitdh, rec.pixelHeight));
            //绘制
            this.getTotalWandDraw(rec, $str, textItem, scale, $UIAtlas.ctx, true, xpos);
            Pan3d.TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, $UIAtlas.ctx);
        };
        ArtFont.prototype.upArtBase = function ($UIAtlas, $iconName, $str, $color, $textAlign) {
            if ($color === void 0) { $color = ArtFont.White; }
            if ($textAlign === void 0) { $textAlign = Pan3d.TextAlign.LEFT; }
            //var $str:string="5689556"
            var scale = 1;
            var textItem = this.fontData[$color];
            var rec = $UIAtlas.getRec($iconName);
            $UIAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            //计算totalW
            var totalW = this.getTotalWandDraw(rec, $str, textItem, scale, $UIAtlas.ctx, false);
            //选择左中右排布
            var xpos = this.getXpos($textAlign, totalW, new Pan3d.Rectangle(0, 0, rec.pixelWitdh, rec.pixelHeight));
            //绘制
            this.getTotalWandDraw(rec, $str, textItem, scale, $UIAtlas.ctx, true, xpos);
            Pan3d.TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, $UIAtlas.ctx);
        };
        ArtFont.prototype.getXpos = function ($textAlign, $totalW, $rect) {
            var xpos = 0;
            var ypos = 0;
            if ($textAlign == Pan3d.TextAlign.LEFT) {
                xpos = 0;
            }
            else if ($textAlign == Pan3d.TextAlign.RIGHT) {
                xpos = $totalW - $rect.width;
            }
            else if ($textAlign == Pan3d.TextAlign.CENTER) {
                xpos = ($rect.width - $totalW) / 2;
            }
            return xpos;
        };
        /**
         *计算总宽度和是否绘制
         */
        ArtFont.prototype.getTotalWandDraw = function ($rect, $str, $textItem, $scale, $ctx, $isCtx, $xpos, $txtInterval) {
            if ($xpos === void 0) { $xpos = 0; }
            if ($txtInterval === void 0) { $txtInterval = 0; }
            var totalW = 0;
            var numId;
            for (var i = 0; i < $str.length; i++) {
                numId = this.getCharId($str[i]);
                var txtNumRect = $textItem[numId];
                if (!txtNumRect) {
                    //console.log("没有这个字")
                }
                if ($isCtx) {
                    $ctx.drawImage(Pan3d.UIData.textImg, txtNumRect.x, txtNumRect.y, txtNumRect.width, txtNumRect.height, $rect.x + totalW + $xpos, $rect.y, txtNumRect.width * $scale, txtNumRect.height * $scale);
                }
                totalW = totalW + (txtNumRect.width - $txtInterval) * $scale;
            }
            return totalW;
        };
        ArtFont.prototype.getCharId = function (str) {
            if (str == "+" || str == "x" || str == "X") {
                return 10;
            }
            if (str == "-") {
                return 11;
            }
            if (str == "/") {
                return 12;
            }
            if (str == ":") {
                return 13;
            }
            if (str == ".") {
                return 14;
            }
            if (str == "%") {
                return 15;
            }
            if (str == "万") {
                return 16;
            }
            if (str == "亿") {
                return 17;
            }
            if (str == "[") {
                return 18;
            }
            if (str == "]") {
                return 19;
            }
            if ((Number(str) == NaN)) {
                alert("MeshVo,GetCharId error:" + str);
            }
            return Number(str);
        };
        ArtFont.Red = "Red";
        ArtFont.Green = "Green";
        ArtFont.Blue = "Blue";
        ArtFont.White = "White";
        ArtFont.Yellow = "Yellow";
        ArtFont.BOSSBIGTXT = "NUM99";
        ArtFont.CN1 = "NUM100";
        ArtFont.num101 = "NUM101";
        ArtFont.num102 = "NUM102";
        ArtFont.BigYellow = "NUM12";
        ArtFont.num99 = "NUM99";
        ArtFont.GARY_TXT = "NUM1"; //NUM1.PNG
        ArtFont.ORANGE_TXT = "NUM19"; //NUM2
        ArtFont.num1 = "NUM1"; //NUM1
        ArtFont.num2 = "NUM2"; //NUM2
        ArtFont.num3 = "NUM3"; //NUM3
        ArtFont.num4 = "NUM4"; //NUM4
        ArtFont.num5 = "NUM5"; //NUM5
        ArtFont.num6 = "NUM6"; //NUM6
        ArtFont.num7 = "NUM7"; //NUM7
        ArtFont.num10 = "NUM10"; //NUM10
        ArtFont.num8 = "NUM8"; //NUM8
        ArtFont.num9 = "NUM9"; //NUM9
        ArtFont.num11 = "NUM11"; //NUM11
        ArtFont.num12 = "NUM12"; //NUM
        ArtFont.num13 = "NUM13"; //NUM13
        ArtFont.num14 = "NUM14"; //NUM
        ArtFont.num15 = "NUM15"; //NUM
        ArtFont.num16 = "NUM16"; //NUM
        ArtFont.num17 = "NUM17"; //NUM
        ArtFont.num18 = "NUM18"; //NUM
        ArtFont.num19 = "NUM19"; //NUM
        ArtFont.num20 = "NUM20"; //NUM
        ArtFont.num21 = "NUM21"; //NUM
        ArtFont.num22 = "NUM22"; //NUM
        ArtFont.num23 = "NUM23"; //NUM
        ArtFont.num24 = "NUM24"; //NUM
        ArtFont.num25 = "NUM24"; //NUM
        ArtFont.num26 = "NUM26"; //NUM
        ArtFont.num27 = "NUM27"; //NUM
        ArtFont.num28 = "NUM28"; //NUM
        ArtFont.num30 = "NUM30"; //NUM
        ArtFont.num51 = "NUM51"; //NUM
        ArtFont.num52 = "NUM52"; //NUM
        ArtFont.num53 = "NUM53"; //NUM
        ArtFont.num54 = "NUM54"; //NUM
        ArtFont.num55 = "NUM55"; //NUM
        ArtFont.num56 = "NUM56"; //NUM
        ArtFont.num57 = "NUM57"; //NUM
        ArtFont.num58 = "NUM58"; //NUM
        ArtFont.num59 = "NUM59"; //NUM
        ArtFont.num60 = "NUM60"; //NUM
        ArtFont.num61 = "NUM61"; //NUM
        ArtFont.numVip = "NUM62"; //NUM
        ArtFont.num63 = "NUM63"; //NUM
        ArtFont.num64 = "NUM64"; //NUM
        ArtFont.num65 = "NUM65"; //NUM
        ArtFont.num66 = "NUM66"; //NUM
        return ArtFont;
    }());
    Pan3d.ArtFont = ArtFont;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ArtFont.js.map
var Pan3d;
(function (Pan3d) {
    var TextRegVo = /** @class */ (function () {
        function TextRegVo() {
        }
        return TextRegVo;
    }());
    Pan3d.TextRegVo = TextRegVo;
    var TextRegExp = /** @class */ (function () {
        function TextRegExp() {
        }
        TextRegExp.pushStr = function ($str) {
            this.item = new Array();
            var patt1 = /\[\]|\[[A-Za-z0-9]{6}\]/g;
            var arr;
            while ((arr = patt1.exec($str)) != null) {
                // //console.log(arr.index + "-" + patt1.lastIndex + ":" + arr);
                var $vo = new TextRegVo;
                $vo.begin = arr.index;
                $vo.end = patt1.lastIndex;
                $vo.color = arr.toString();
                $vo.color = $vo.color.replace("[", "");
                $vo.color = $vo.color.replace("]", "");
                //    //console.log($baseColor)
                if ($vo.color.length < 5) {
                    $vo.color = TextRegExp.defaultColor;
                }
                else {
                    $vo.color = "#" + $vo.color;
                }
                this.item.push($vo);
            }
        };
        /**
         * 将字符串中所有颜色替换为#号 并返回新的字符串
         * @param
         */
        TextRegExp.pushStrCopy = function ($str) {
            this.item = new Array();
            var patt1 = /\[\]|\[[A-Za-z0-9]{6}\]/g;
            var arr;
            var newstr = $str;
            while ((arr = patt1.exec($str)) != null) {
                // //console.log(arr.index + "-" + patt1.lastIndex + ":" + arr);
                var $vo = new TextRegVo;
                $vo.begin = arr.index;
                $vo.end = patt1.lastIndex;
                $vo.color = arr.toString();
                newstr = newstr.replace($vo.color, "#");
                $vo.color = $vo.color.replace("[", "");
                $vo.color = $vo.color.replace("]", "");
                //    //console.log($baseColor)
                if ($vo.color.length < 5) {
                    $vo.color = TextRegExp.defaultColor;
                }
                else {
                    $str.replace("[" + $vo.color + "]", "#");
                    $vo.color = "#" + $vo.color;
                }
                this.item.push($vo);
            }
            return newstr;
        };
        TextRegExp.isColor = function ($index, $ctx) {
            for (var i = 0; i < this.item.length; i++) {
                if ($index >= this.item[i].begin && $index < this.item[i].end) {
                    if ($ctx) {
                        $ctx.fillStyle = this.item[i].color;
                    }
                    return true;
                }
            }
            return false;
        };
        TextRegExp.getTextMetrics = function ($ctx, text) {
            if (!text) {
                text = "";
            }
            this.pushStr(text);
            var words = text;
            var line = "";
            var ty = 0;
            for (var n = 0; n < words.length; n++) {
                if (this.isColor(n, $ctx)) {
                    continue;
                }
                line += words[n];
            }
            var metrics = $ctx.measureText(line);
            return metrics;
        };
        TextRegExp.getTextOnlyTxt = function ($ctx, text) {
            if (!text) {
                text = "";
            }
            this.pushStr(text);
            var words = text;
            var line = "";
            var ty = 0;
            for (var n = 0; n < words.length; n++) {
                if (this.isColor(n, $ctx)) {
                    continue;
                }
                line += words[n];
            }
            return line;
        };
        TextRegExp.getNextWords = function ($str, indx) {
            var $iconId = -1;
            if ($str[indx] == "/" && $str.length > (indx + 2)) {
                var tempA = $str[indx + 0] + $str[indx + 1] + $str[indx + 2];
                for (var i = 0; i < Pan3d.UIData.faceItem.length; i++) {
                    if (Pan3d.UIData.faceItem[i] == tempA) {
                        return i + 1;
                    }
                }
            }
            return $iconId;
        };
        /**
         * 逐字符写入文本。兼容表情。返回行数
         * @param
         * @param text
         * @param baseColor
         * @param x
         * @param y
         * @param maxWidth
         * @param lineHeight
         * @param fontsize
         * @param
         * @param
         * @param
         */
        TextRegExp.wrapText = function ($ctx, text, baseColor, x, y, maxWidth, lineHeight, fontsize, $filterColor, $filterWidth, $gapScale) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (maxWidth === void 0) { maxWidth = 500; }
            if (lineHeight === void 0) { lineHeight = 10; }
            if (fontsize === void 0) { fontsize = 12; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($filterWidth === void 0) { $filterWidth = 4; }
            if ($gapScale === void 0) { $gapScale = 1.0; }
            TextRegExp.defaultColor = baseColor;
            if (maxWidth > 300) {
            }
            maxWidth = maxWidth * 0.98; //特殊缩小
            if ($filterColor != "") {
                if ($filterColor.indexOf("[") != -1) { //[00ff00]
                    $filterColor = "#" + $filterColor.substr(1, 6);
                }
                $ctx.strokeStyle = $filterColor;
                $ctx.lineWidth = $filterWidth;
            }
            this.pushStr(text);
            var words = text;
            var line = "";
            var ty = 0; //特殊加上偏移， 还待测试调整
            var $lineNum = 1; //行数
            for (var n = 0; words && n < words.length; n++) {
                if (this.isColor(n, $ctx)) {
                    continue;
                }
                var metrics = $ctx.measureText(line.replace("\n", ""));
                var $faceId = this.getNextWords(words, n);
                if ($faceId == -1) {
                    //绘制文本
                    if (metrics.width > maxWidth || words[n] == "\n") {
                        //换行
                        ty += lineHeight;
                        line = "";
                        $lineNum++;
                        if (words[n] != "\n") {
                            if ($filterColor != "") {
                                $ctx.strokeText(words[n], x, y + ty);
                            }
                            $ctx.fillText(words[n], x, y + ty);
                        }
                    }
                    else {
                        //当前行
                        if ($filterColor != "") {
                            $ctx.strokeText(words[n], x + metrics.width * $gapScale, y + ty);
                        }
                        $ctx.fillText(words[n], x + metrics.width * $gapScale, y + ty);
                    }
                    if (words[n] != "\n") {
                        line += words[n];
                    }
                }
                else {
                    //绘制表情
                    var faceSize = fontsize * 1.4;
                    var $rect = new Pan3d.Rectangle(x + metrics.width * 1.0 + 0, y + ty - faceSize / 10, faceSize, faceSize);
                    if (metrics.width > maxWidth) {
                        ty += lineHeight;
                        line = "";
                        $lineNum++;
                        $rect = new Pan3d.Rectangle(x + 0, y + ty - faceSize / 10, faceSize, faceSize);
                    }
                    this.drawFaceIcon($ctx, $rect, $faceId);
                    n = n + 2;
                    line += "脸1";
                }
            }
            return $lineNum;
        };
        /**
         * 逐字符写入文本。兼容表情。返回行数 竖着写
         * @param
         * @param text
         * @param baseColor
         * @param x
         * @param y
         * @param maxWidth
         * @param lineHeight
         * @param fontsize
         * @param
         * @param
         * @param
         */
        TextRegExp.wrapTextVertical = function ($ctx, text, baseColor, x, y, maxWidth, lineWidth, fontsize, $filterColor, $filterWidth, $gapScale) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (maxWidth === void 0) { maxWidth = 500; }
            if (lineWidth === void 0) { lineWidth = 10; }
            if (fontsize === void 0) { fontsize = 12; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($filterWidth === void 0) { $filterWidth = 4; }
            if ($gapScale === void 0) { $gapScale = 1.0; }
            TextRegExp.defaultColor = baseColor;
            if ($filterColor != "") {
                if ($filterColor.indexOf("[") != -1) { //[00ff00]
                    $filterColor = "#" + $filterColor.substr(1, 6);
                }
                $ctx.strokeStyle = $filterColor;
                $ctx.lineWidth = $filterWidth;
            }
            this.pushStr(text);
            var words = text;
            var line = "";
            var tx = 2; //特殊加上偏移， 还待测试调整
            var $lineNum = 1; //行数
            var ty = 0;
            for (var n = 0; words && n < words.length; n++) {
                if (this.isColor(n, $ctx)) {
                    continue;
                }
                // var metrics: TextMetrics = $ctx.measureText(line.replace("\n", ""));
                var $faceId = this.getNextWords(words, n);
                if ($faceId == -1) {
                    //绘制文本
                    if (ty > maxWidth || words[n] == "\n") {
                        //换行
                        tx += lineWidth;
                        line = "";
                        ty = 0;
                        if (words[n] != "\n") {
                            if ($filterColor != "") {
                                $ctx.strokeText(words[n], x + tx, ty);
                            }
                            $ctx.fillText(words[n], x + tx, ty);
                        }
                        $lineNum++;
                    }
                    else {
                        //当前行
                        ty += fontsize + 5;
                        if ($filterColor != "") {
                            $ctx.strokeText(words[n], x + tx, ty);
                        }
                        $ctx.fillText(words[n], x + tx, ty);
                    }
                    line += words[n];
                    // } else {
                    //     //绘制表情
                    //     var faceSize: number = fontsize * 1.4
                    //     var $rect: Rectangle = new Rectangle(x + metrics.width * 1.0 + 0, y + ty - faceSize / 10, faceSize, faceSize);
                    //     if (metrics.width > maxWidth) {
                    //         ty += lineHeight;
                    //         line = "";
                    //         $lineNum++
                    //         $rect = new Rectangle(x + 0, y + ty - faceSize / 10, faceSize, faceSize);
                    //     }
                    //     this.drawFaceIcon($ctx, $rect, $faceId)
                    //     n = n + 2;
                    //     line += "脸1"
                }
            }
            return $lineNum;
        };
        /**
         * 按行写入字符。暂不兼容表情。返回数组行宽行高
         * @param
         * @param text
         * @param baseColor
         * @param
         * @param
         * @param
         * @param lineHeight
         * @param fontsize
         * @param
         * @param
         * @param
         */
        TextRegExp.drawText = function ($ctx, text, baseColor, $maxWidth, lineHeight, fontsize) {
            if ($maxWidth === void 0) { $maxWidth = 500; }
            if (lineHeight === void 0) { lineHeight = 10; }
            if (fontsize === void 0) { fontsize = 12; }
            TextRegExp.defaultColor = baseColor;
            var newtext = this.pushStrCopy(text);
            var totalWidth = 0;
            var totalHeight = 0;
            var words = text;
            var line = "";
            var lastposx = 0;
            var textcellAry = new Array;
            var art = newtext.split("#");
            for (var i = 0; i < art.length; i++) {
                var nstr = art[i];
                if (nstr != "") {
                    $ctx.fillStyle = i > 0 ? this.item[i - 1].color : baseColor;
                    for (var n = 0; n < nstr.length; n++) {
                        if (nstr[n] == "\n") {
                            var aaa = new TextCell(line, totalHeight, $ctx.measureText(line).width, $ctx.fillStyle, $maxWidth);
                            textcellAry.push(aaa);
                            lastposx = 0;
                            line = "";
                            totalHeight += lineHeight;
                        }
                        else {
                            var testLine = line + nstr[n];
                            var metrics = $ctx.measureText(testLine);
                            var testWidth = metrics.width + lastposx;
                            totalWidth = Math.min($maxWidth, testWidth);
                            if (testWidth > $maxWidth) {
                                var aaa = new TextCell(line, totalHeight, $ctx.measureText(line).width, $ctx.fillStyle, $maxWidth);
                                textcellAry.push(aaa);
                                line = nstr[n] + "";
                                totalHeight += lineHeight;
                                lastposx = 0;
                            }
                            else {
                                line = testLine;
                            }
                        }
                    }
                    var cwidth = $ctx.measureText(line).width;
                    lastposx += cwidth;
                    var aaa = new TextCell(line, totalHeight, $ctx.measureText(line).width, $ctx.fillStyle, $maxWidth);
                    textcellAry.push(aaa);
                    line = "";
                }
            }
            var lastposy = -10000;
            var start_point;
            for (var k = 0; k < textcellAry.length; k++) {
                if (lastposy != textcellAry[k].posy) {
                    lastposy = textcellAry[k].posy;
                    start_point = this.getStartPoint(textcellAry[k], textcellAry);
                    start_point = Math.max(start_point, 0);
                }
                $ctx.fillStyle = textcellAry[k].color;
                $ctx.fillText(textcellAry[k].str, start_point, lastposy);
                start_point += textcellAry[k].width;
            }
            //计算高度
            totalHeight = totalHeight + lineHeight;
            return [totalWidth, totalHeight];
        };
        TextRegExp.getStartPoint = function (vo, $textcellary) {
            var ary = new Array;
            for (var k = 0; k < $textcellary.length; k++) {
                var element = $textcellary[k];
                if (vo.posy == element.posy) {
                    ary.push(element);
                }
            }
            var totalwidth = 0;
            for (var x = 0; x < ary.length; x++) {
                totalwidth += ary[x].width;
            }
            return (vo.maxwidth - totalwidth) / 2;
        };
        TextRegExp.drawFaceIcon = function (ctx, $rect, $faceId) {
            Pan3d.UiDraw.cxtDrawImg(ctx, "F_FACE_" + $faceId, $rect, Pan3d.UIData.publicUi);
        };
        TextRegExp.defaultColor = "#000000";
        return TextRegExp;
    }());
    Pan3d.TextRegExp = TextRegExp;
    var TextCell = /** @class */ (function () {
        function TextCell($str, $posy, $width, $color, $maxWidth) {
            this.str = $str;
            this.posy = $posy;
            this.width = $width;
            this.color = $color;
            this.maxwidth = $maxWidth;
        }
        return TextCell;
    }());
    Pan3d.TextCell = TextCell;
    var LabelTextFont = /** @class */ (function () {
        function LabelTextFont() {
        }
        /*
        *写入单行颜色字体，字号,对齐，基础颜色 并上传显卡
        */
        LabelTextFont.writeSingleLabelCopy = function ($uiAtlas, $key, $str, fontsize, $align, $baseColor, $filterColor, $ty, $filterWidth, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($ty === void 0) { $ty = 0; }
            if ($filterWidth === void 0) { $filterWidth = 4; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            var $uiRect = $uiAtlas.getRec($key);
            var ctx = Pan3d.UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            ctx.font = fontsize + "px Georgia";
            ctx.fillStyle = $baseColor;
            ctx.lineWidth = 0;
            ctx.fillText($str, 0, 2);
            $uiAtlas.updateCtx(ctx, $uiRect.pixelX, $uiRect.pixelY);
            return 0;
        };
        LabelTextFont.writeSingleLabel = function ($uiAtlas, $key, $str, fontsize, $align, $baseColor, $filterColor, $ty, $filterWidth, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($ty === void 0) { $ty = 0; }
            if ($filterWidth === void 0) { $filterWidth = 4; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            var $uiRect = $uiAtlas.getRec($key);
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            $ctx.fillStyle = $baseColor;
            $ctx.font = ($bolder ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            var $textMetrics = TextRegExp.getTextMetrics($ctx, $str);
            var $tx = 0;
            if ($align == Pan3d.TextAlign.CENTER) {
                $tx = ($uiRect.pixelWitdh - $textMetrics.width) / 2;
            }
            else if ($align == Pan3d.TextAlign.RIGHT) {
                $tx = ($uiRect.pixelWitdh - $textMetrics.width);
            }
            TextRegExp.wrapText($ctx, $str, $baseColor, $tx, $ty, $uiRect.pixelWitdh - (fontsize / 2), 20, fontsize, $filterColor, $filterWidth);
            $uiAtlas.updateCtx($ctx, $uiRect.pixelX, $uiRect.pixelY);
            return $textMetrics.width;
        };
        /*
        *写入多行颜色字体，字号,对齐，基础颜色 并上传显卡
        */
        LabelTextFont.writeTextLabel = function ($uiAtlas, $key, $str, fontsize, $align, $maxWidth, $baseColor, $filterColor, $ty, $filterWidth, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($maxWidth === void 0) { $maxWidth = 500; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($ty === void 0) { $ty = 0; }
            if ($filterWidth === void 0) { $filterWidth = 4; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            var hight = fontsize + 4;
            var $uiRect = $uiAtlas.getRec($key);
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            $ctx.fillStyle = $baseColor;
            $ctx.textAlign = $align;
            $ctx.font = ($bolder ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            var $textMetrics = TextRegExp.getTextMetrics($ctx, $str);
            // var $tx: number = 0
            // if ($align == TextAlign.CENTER) {
            //     $tx = ($uiRect.pixelWitdh - $textMetrics.width) / 2;
            // } else if ($align == TextAlign.RIGHT) {
            //     $tx = ($uiRect.pixelWitdh - $textMetrics.width);
            // }
            var linenum = TextRegExp.wrapText($ctx, $str, $baseColor, 0, $ty, $maxWidth, hight, fontsize, $filterColor, $filterWidth);
            $uiAtlas.updateCtx($ctx, $uiRect.pixelX, $uiRect.pixelY);
            return [$textMetrics.width, linenum * hight];
        };
        /*
         *将单行颜色字写到CTX中
         *
         */
        LabelTextFont.writeSingleLabelToCtx = function ($ctx, $str, fontsize, $tx, $ty, $align, $baseColor, $filterColor, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            $ctx.fillStyle = $baseColor;
            $ctx.font = ($bolder ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            var $textMetrics = TextRegExp.getTextMetrics($ctx, $str);
            if ($align == Pan3d.TextAlign.CENTER) {
                // $tx -= $textMetrics.width / 2;
                $tx += ($ctx.canvas.width - $textMetrics.width) / 2;
            }
            else if ($align == Pan3d.TextAlign.RIGHT) {
                // $tx -= $textMetrics.width;
                $tx += ($ctx.canvas.width - $textMetrics.width);
            }
            TextRegExp.wrapText($ctx, $str, $baseColor, $tx, $ty, 9999, 20, fontsize, $filterColor);
            return $textMetrics.width;
        };
        /*
         *将单行颜色字写到CTX中
         *
         */
        LabelTextFont.writeSingleLabelToCtxByVertical = function ($ctx, $str, fontsize, $tx, $ty, $baseColor, $filterColor, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            $ctx.fillStyle = $baseColor;
            $ctx.font = ($bolder ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            TextRegExp.wrapTextVertical($ctx, $str, $baseColor, $tx, $ty, 9999, 20, fontsize, $filterColor);
        };
        /*
         *将单行颜色字写到CTX中
         * $tx 为对齐点的坐标
         */
        LabelTextFont.writeSingleLabelToCtxSetAnchor = function ($ctx, $str, fontsize, $tx, $ty, $align, $baseColor, $filterColor, $bolder) {
            if (fontsize === void 0) { fontsize = 12; }
            if ($tx === void 0) { $tx = 0; }
            if ($ty === void 0) { $ty = 0; }
            if ($align === void 0) { $align = Pan3d.TextAlign.CENTER; }
            if ($baseColor === void 0) { $baseColor = "#ffffff"; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if ($bolder === void 0) { $bolder = true; }
            if ($baseColor.indexOf("[") != -1) { //[00ff00]
                $baseColor = "#" + $baseColor.substr(1, 6);
            }
            $ctx.fillStyle = $baseColor;
            $ctx.font = ($bolder ? "bolder " : "") + " " + fontsize + "px " + Pan3d.UIData.font;
            var $textMetrics = TextRegExp.getTextMetrics($ctx, $str);
            if ($align == Pan3d.TextAlign.CENTER) {
                $tx -= $textMetrics.width / 2;
            }
            else if ($align == Pan3d.TextAlign.RIGHT) {
                $tx -= $textMetrics.width;
            }
            TextRegExp.wrapText($ctx, $str, $baseColor, $tx, $ty, 9999, 20, fontsize, $filterColor);
            return $textMetrics.width;
        };
        /**
         * 整行写入文本 不兼容处理颜色
         * @param $x 文本写入时光标所在x位置
         * @param $y 文本写入时光标所在y位置
         * @param fontsize
         * @param fontColor
         * @param bolder
         * @param  $textAlign 对齐方式
         * @readme 如果需要居中对齐显示，则光标所在位置需要传入中心点坐标，对齐方式也需要传入center
         */
        LabelTextFont.writeText = function ($uiAtlas, $key, $x, $y, $str, fontsize, fontColor, $maxWidth, bolder, $textAlign) {
            if ($maxWidth === void 0) { $maxWidth = 0; }
            if (bolder === void 0) { bolder = false; }
            if ($textAlign === void 0) { $textAlign = Pan3d.TextAlign.LEFT; }
            if (fontColor.indexOf("[") != -1) { //[00ff00]
                fontColor = "#" + fontColor.substr(1, 6);
            }
            var totalwidthAndheight = [10, 10];
            var uiRect = $uiAtlas.getRec($key);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(uiRect.pixelWitdh, uiRect.pixelHeight, false);
            ctx.fillStyle = fontColor;
            ctx.font = (bolder ? "bolder " : "") + fontsize + "px " + Pan3d.UIData.font;
            ctx.textAlign = $textAlign;
            var $xpos = this.getTextxpos($textAlign, ctx);
            totalwidthAndheight = this.wrapText(ctx, $str, $x, $y, $maxWidth, fontsize + 5);
            $uiAtlas.updateCtx(ctx, uiRect.pixelX, uiRect.pixelY);
            return totalwidthAndheight;
        };
        /**
         * 按行写入文本 带解析颜色。但只能居中对齐
         */
        LabelTextFont.writeTextAutoCenterByAnchor = function ($uiAtlas, $key, $str, fontsize, fontColor, $maxWidth, bolder, $filterColor) {
            if (bolder === void 0) { bolder = true; }
            if ($filterColor === void 0) { $filterColor = ""; }
            if (fontColor.indexOf("[") != -1) { //[00ff00]
                fontColor = "#" + fontColor.substr(1, 6);
            }
            var uiRect = $uiAtlas.getRec($key);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(uiRect.pixelWitdh, uiRect.pixelHeight, false);
            ctx.fillStyle = fontColor;
            ctx.font = (bolder ? "bolder " : "") + fontsize + "px " + Pan3d.UIData.font;
            ctx.textAlign = Pan3d.TextAlign.LEFT;
            var totalwidthAndheight = TextRegExp.drawText(ctx, $str, fontColor, $maxWidth, fontsize + 5, fontsize);
            $uiAtlas.updateCtx(ctx, uiRect.pixelX, uiRect.pixelY);
            return totalwidthAndheight;
        };
        /*
        *写入普通文字,字数不满足换行时，自动纵向居中。
        */
        LabelTextFont.writeTextAutoVerticalCenter = function ($uiAtlas, $key, $str, fontsize, fontColor, $maxWidth, $filterColor, bolder) {
            if ($filterColor === void 0) { $filterColor = ""; }
            if (bolder === void 0) { bolder = false; }
            if (fontColor.indexOf("[") != -1) { //[00ff00]
                fontColor = "#" + fontColor.substr(1, 6);
            }
            var uiRect = $uiAtlas.getRec($key);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(uiRect.pixelWitdh, uiRect.pixelHeight, false);
            ctx.fillStyle = fontColor;
            ctx.font = (bolder ? "bolder " : "") + fontsize + "px " + Pan3d.UIData.font;
            var $x = 0;
            var $y = 0;
            var $xpos = this.getTextxpos(Pan3d.TextAlign.LEFT, ctx);
            if ($maxWidth > 0) {
                if (!this.isNewline(ctx, $str, $maxWidth)) {
                    $y = (uiRect.pixelHeight / 2) - (fontsize / 2);
                }
                // this.wrapText(ctx, $str, $x, $y, $maxWidth, fontsize + 3);
                TextRegExp.wrapText(ctx, $str, fontColor, $x, $y, $maxWidth, fontsize + 3, fontsize, $filterColor);
            }
            $uiAtlas.updateCtx(ctx, uiRect.pixelX, uiRect.pixelY);
        };
        /*
        *写入普通文字,字数不满足换行时，自动居中。
        */
        LabelTextFont.writeTextAutoCenter = function ($uiAtlas, $key, $str, fontsize, fontColor, $maxWidth, bolder) {
            if (bolder === void 0) { bolder = false; }
            if (fontColor.indexOf("[") != -1) { //[00ff00]
                fontColor = "#" + fontColor.substr(1, 6);
            }
            var uiRect = $uiAtlas.getRec($key);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(uiRect.pixelWitdh, uiRect.pixelHeight, false);
            ctx.fillStyle = fontColor;
            ctx.font = (bolder ? "bolder " : "") + fontsize + "px " + Pan3d.UIData.font;
            var $x = 0;
            var $y = 0;
            var $xpos = this.getTextxpos(Pan3d.TextAlign.LEFT, ctx);
            if ($maxWidth > 0) {
                if (!this.isNewline(ctx, $str, $maxWidth)) {
                    var metrics = ctx.measureText($str);
                    $y = (uiRect.pixelHeight / 2) - (fontsize / 2);
                    $x = (uiRect.pixelWitdh / 2) - (metrics.width / 2);
                }
                // this.wrapText(ctx, $str, $x, $y, $maxWidth, fontsize + 3);
                TextRegExp.wrapText(ctx, $str, fontColor, $x, $y, $maxWidth, fontsize + 3);
            }
            $uiAtlas.updateCtx(ctx, uiRect.pixelX, uiRect.pixelY);
        };
        LabelTextFont.isNewline = function (ctx, $text, $maxWidth) {
            var words = $text;
            var metrics = ctx.measureText(words);
            var testWidth = metrics.width;
            if (testWidth > $maxWidth) {
                return true;
            }
            return false;
        };
        // public static writeTextToCtx(ctx: CanvasRenderingContext2D,
        //     $x: number, $y: number,
        //     $str: string, fontsize: number, fontColor: string, bolder: boolean = false, $maxWidth: number = 0): void {
        //     ctx.textBaseline = TextAlign.MIDDLE;
        //     ctx.textAlign = TextAlign.CENTER;
        //     ctx.fillStyle = fontColor;
        //     ctx.font = "bolder " + fontsize + "px " + UIData.font;
        //     var $xpos: number = this.getTextxpos(TextAlign.CENTER, ctx);
        //     if ($maxWidth > 0) {
        //         this.wrapText(ctx, $str, $x, $y, $maxWidth, fontsize + 3);
        //     } else {
        //         ctx.fillText($str, $x + $xpos, $y);
        //     }
        // }
        LabelTextFont.getTextxpos = function ($textAlign, $ctx) {
            var $xpos = 0;
            if ($textAlign == Pan3d.TextAlign.LEFT) {
                $xpos = 0;
            }
            else if ($textAlign == Pan3d.TextAlign.RIGHT) {
                $xpos = $ctx.canvas.width;
            }
            else if ($textAlign == Pan3d.TextAlign.CENTER) {
                $xpos = $ctx.canvas.width / 2;
            }
            return $xpos;
        };
        LabelTextFont.wrapText = function ($ctx, text, $tx, $ty, maxWidth, $th) {
            var totalWidth = 0;
            var totalHeight = $ty;
            var words = text;
            var line = "";
            for (var n = 0; n < words.length; n++) {
                if (words[n] == "\n") {
                    $ctx.fillText(line, $tx, totalHeight);
                    line = "";
                    totalHeight += $th;
                }
                else {
                    var testLine = line + words[n];
                    var metrics = $ctx.measureText(testLine);
                    var testWidth = metrics.width;
                    totalWidth = Math.max(totalWidth, testWidth);
                    if (testWidth > maxWidth) {
                        $ctx.fillText(line, $tx, totalHeight);
                        line = words[n] + "";
                        totalHeight += $th;
                    }
                    else {
                        line = testLine;
                    }
                }
            }
            $ctx.fillText(line, $tx, totalHeight);
            //计算高度
            totalHeight = totalHeight - $ty + $th;
            return [totalWidth, totalHeight];
        };
        /**已弃用 请使用clearUI */
        LabelTextFont.clearLabel = function ($uiAtlas, $key) {
            var $uiRect = $uiAtlas.getRec($key);
            var $ctx = Pan3d.UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            $uiAtlas.updateCtx($ctx, $uiRect.pixelX, $uiRect.pixelY);
        };
        return LabelTextFont;
    }());
    Pan3d.LabelTextFont = LabelTextFont;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LabelTextFont.js.map
var Pan3d;
(function (Pan3d) {
    var SoundManager = /** @class */ (function () {
        function SoundManager() {
            this.init = false;
            this._volume = 1.0;
            this._skillSoundDic = new Object;
            this._skillVolume = 1.0;
        }
        SoundManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new SoundManager();
            }
            return this._instance;
        };
        SoundManager.prototype.playSound = function () {
            this.initSound();
            this.audio.play();
        };
        SoundManager.prototype.initSound = function () {
            if (this.init) {
                return;
            }
            this.audio = new Audio(Pan3d.Scene_data.fileRoot + "sound/sound_3521.mp3");
            this.audio.loop = true;
            this.audio.volume = this._volume;
            this.audio.play();
            this.init = true;
        };
        SoundManager.prototype.stopSound = function () {
            if (this.audio) {
                this.audio.pause();
            }
        };
        SoundManager.prototype.setVolume = function (val) {
            this._volume = val;
            if (this._volume > 0) {
                this.playSound();
            }
            else {
                this.stopSound();
            }
            if (this.audio) {
                this.audio.volume = this._volume;
            }
        };
        SoundManager.prototype.setSkillVolume = function (val) {
            this._skillVolume = val;
            for (var key in this._skillSoundDic) {
                this._skillSoundDic[key].volume = this._skillVolume;
            }
        };
        SoundManager.prototype.playSkillSound = function ($name) {
            ////console.log($name);
            if (this._skillVolume <= 0) {
                return;
            }
            if (this._skillSoundDic[$name]) {
                this._skillSoundDic[$name].play();
            }
            else {
                var audio = new Audio(Pan3d.Scene_data.fileRoot + "skill/sound/" + $name);
                audio.loop = false;
                audio.volume = this._skillVolume;
                audio.play();
                this._skillSoundDic[$name] = audio;
            }
        };
        return SoundManager;
    }());
    Pan3d.SoundManager = SoundManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SoundManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var TextJumpType = /** @class */ (function () {
        function TextJumpType() {
        }
        TextJumpType.NORMALDAMAGE = 1; //普通伤害
        TextJumpType.CRIT = 2; //暴击
        TextJumpType.DODGE = 3; //闪避
        TextJumpType.TREATMENT = 4; //治疗
        TextJumpType.VERTIGO = 5; //眩晕
        TextJumpType.FREEZE = 6; //定身
        TextJumpType.ATTACKADD = 7; //攻击增加
        TextJumpType.ATTACKREDUCE = 8; //攻击减少
        TextJumpType.EXPERIENCE = 9; //经验
        TextJumpType.NORMALDAMAGEUP = 11; //普通伤害上
        TextJumpType.CRITUP = 12; //暴击上
        TextJumpType.MYNORMALDAMAGE = 13; //自己受伤普通伤害
        TextJumpType.MYNORMALDAMAGEUP = 14; //自己受伤普通伤害上
        TextJumpType.MISS = 15; //未命中，对敌方
        return TextJumpType;
    }());
    Pan3d.TextJumpType = TextJumpType;
    var TextJumpUiVo = /** @class */ (function () {
        function TextJumpUiVo() {
        }
        return TextJumpUiVo;
    }());
    Pan3d.TextJumpUiVo = TextJumpUiVo;
    var ExpTextJumpUiDrawAndRefreash = /** @class */ (function (_super) {
        __extends(ExpTextJumpUiDrawAndRefreash, _super);
        function ExpTextJumpUiDrawAndRefreash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExpTextJumpUiDrawAndRefreash.prototype.makeData = function () {
            if (this._data) {
                var vo = this._data;
                this.dtime = vo.endtime;
                // this.dtime = 60;
                this.pos = vo.pos;
                switch (vo.type) {
                    case TextJumpType.EXPERIENCE:
                        //文字 + 数字类（最多显示4位数字）
                        this._width = this.drawTxtBydigitalAndtext(vo);
                        break;
                    default:
                        break;
                }
            }
        };
        ExpTextJumpUiDrawAndRefreash.prototype.drawTxtBydigitalAndtext = function ($vo) {
            var rec = this.parent.uiAtlas.getRec(this.textureStr);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var picid = $vo.type;
            var $width = 50;
            var $height = 25;
            var txtcolor;
            if ($vo.type == TextJumpType.EXPERIENCE) {
                txtcolor = Pan3d.ArtFont.num54;
            }
            var distion = Pan3d.ArtFont.getInstance().getAirFontWidth(ctx, String(this._data.str), txtcolor);
            distion += $width;
            Pan3d.UiDraw.cxtDrawImg(ctx, "TYPE" + picid, new Pan3d.Rectangle(rec.pixelWitdh - distion, rec.pixelHeight - $height, $width, $height), Pan3d.UIData.publicUi);
            Pan3d.ArtFont.getInstance().writeFontToCtxLeft(ctx, String(this._data.str), txtcolor, rec.pixelWitdh - distion + $width + 2, rec.pixelHeight - $height);
            Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            return distion;
        };
        ExpTextJumpUiDrawAndRefreash.prototype.update = function () {
            if (this._data) {
                this.time = Pan3d.TimeUtil.getTimer();
                if (this.time >= this.dtime) {
                    if (this.ui && this.ui.parent) {
                        this.ui.parent.removeChild(this.ui);
                    }
                    this._data = null;
                    return;
                }
                var vo = this._data;
                //变化
                var $ary = this.changerules(this.time);
                this.ui.width = 256 * $ary[2];
                this.ui.height = 50 * $ary[3];
                this.ui.y = $ary[1] - this.ui.height;
                this.ui.x = $ary[0] - this.ui.width / 2 + 25;
                this.ui.alpha = $ary[4];
            }
        };
        ExpTextJumpUiDrawAndRefreash.prototype.changerules = function (t) {
            var changevo = new Array();
            var vo = this._data;
            t = (t - vo.starttime) / 1000 * 60;
            // console.log("---t---",t);
            var posx = 0;
            var posy = 0;
            var scalex = 0;
            var scaley = 0;
            var alpha = 0;
            //当前处于哪一帧
            if (vo.type == Pan3d.TextJumpType.EXPERIENCE) {
                var v2d = new Pan3d.Vector2D;
                if (t < 0) {
                    v2d.x = -9999;
                }
                else {
                    v2d.x = 300 / Pan3d.UIData.Scale;
                    v2d.y = Pan3d.Scene_data.stageHeight / Pan3d.UIData.Scale - 50;
                }
                //玩家名
                posy = v2d.y -= 15;
                posy = posy - (t * 0.5);
                if (t < 40) {
                    posx = v2d.x;
                    scalex = 1.8;
                    scaley = 1.8;
                    alpha = 1;
                }
                else if (t < 60) {
                    posx = v2d.x;
                    scalex = 1.8;
                    scaley = 1.8;
                    alpha = 1 - ((t - 39) / 20);
                }
            }
            changevo.push(posx);
            changevo.push(posy);
            changevo.push(scalex);
            changevo.push(scaley);
            changevo.push(alpha);
            changevo.push(v2d.x);
            changevo.push(v2d.y);
            //保存上一次变化
            this._lastchange = changevo;
            return changevo;
        };
        return ExpTextJumpUiDrawAndRefreash;
    }(Pan3d.Disp2DBaseText));
    Pan3d.ExpTextJumpUiDrawAndRefreash = ExpTextJumpUiDrawAndRefreash;
    var TextJumpUiDrawAndRefreash = /** @class */ (function (_super) {
        __extends(TextJumpUiDrawAndRefreash, _super);
        function TextJumpUiDrawAndRefreash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextJumpUiDrawAndRefreash.prototype.makeData = function () {
            if (this._data) {
                var vo = this._data;
                this.dtime = vo.endtime;
                // this.dtime = 60;
                this.pos = vo.pos;
                switch (vo.type) {
                    case TextJumpType.NORMALDAMAGE:
                    case TextJumpType.TREATMENT:
                        //数字类
                        Pan3d.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas, this.textureStr, String(vo.str), "NUM" + (vo.type + 50), Pan3d.TextAlign.RIGHT);
                        break;
                    case TextJumpType.MYNORMALDAMAGEUP:
                    case TextJumpType.MYNORMALDAMAGE:
                        Pan3d.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas, this.textureStr, String(vo.str), Pan3d.ArtFont.num53, Pan3d.TextAlign.RIGHT);
                        break;
                    case TextJumpType.NORMALDAMAGEUP:
                        Pan3d.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas, this.textureStr, String(vo.str), "NUM" + (vo.type + 40), Pan3d.TextAlign.RIGHT);
                        break;
                    case TextJumpType.DODGE:
                    case TextJumpType.VERTIGO:
                    case TextJumpType.FREEZE:
                    case TextJumpType.MISS:
                        //文字类
                        this.drawTxtBytext(vo);
                        break;
                    case TextJumpType.ATTACKADD:
                    case TextJumpType.ATTACKREDUCE:
                    case TextJumpType.EXPERIENCE:
                    case TextJumpType.CRIT:
                    case TextJumpType.CRITUP:
                        //文字 + 数字类（最多显示4位数字）
                        this._width = this.drawTxtBydigitalAndtext(vo);
                        break;
                    default:
                        break;
                }
            }
        };
        TextJumpUiDrawAndRefreash.prototype.drawTxtBytext = function ($vo) {
            var rec = this.parent.uiAtlas.getRec(this.textureStr);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $length = 50;
            if ($vo.type == TextJumpType.MISS) {
                $length = 67;
            }
            Pan3d.UiDraw.cxtDrawImg(ctx, "TYPE" + $vo.type, new Pan3d.Rectangle(rec.pixelWitdh - $length, rec.pixelHeight - 25, $length, 25), Pan3d.UIData.publicUi);
            Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            return 50;
        };
        TextJumpUiDrawAndRefreash.prototype.drawTxtBydigitalAndtext = function ($vo) {
            var rec = this.parent.uiAtlas.getRec(this.textureStr);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var picid = $vo.type;
            var $width = 50;
            var $height = 25;
            var txtcolor;
            if ($vo.type == TextJumpType.ATTACKREDUCE) {
                picid = TextJumpType.ATTACKADD;
                txtcolor = Pan3d.ArtFont.num53;
            }
            else if ($vo.type == TextJumpType.ATTACKADD) {
                txtcolor = Pan3d.ArtFont.num54;
            }
            else if ($vo.type == TextJumpType.EXPERIENCE) {
                txtcolor = Pan3d.ArtFont.num54;
            }
            else if ($vo.type == TextJumpType.CRIT) {
                txtcolor = Pan3d.ArtFont.num55;
                $width = 78;
                $height = 50;
            }
            else if ($vo.type == TextJumpType.CRITUP) {
                picid -= 10;
                $width = 78;
                $height = 50;
                txtcolor = Pan3d.ArtFont.num55;
            }
            var distion = Pan3d.ArtFont.getInstance().getAirFontWidth(ctx, String(this._data.str), txtcolor);
            distion += $width;
            Pan3d.UiDraw.cxtDrawImg(ctx, "TYPE" + picid, new Pan3d.Rectangle(rec.pixelWitdh - distion, rec.pixelHeight - $height, $width, $height), Pan3d.UIData.publicUi);
            Pan3d.ArtFont.getInstance().writeFontToCtxLeft(ctx, String(this._data.str), txtcolor, rec.pixelWitdh - distion + $width + 2, rec.pixelHeight - $height);
            Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            return distion;
        };
        TextJumpUiDrawAndRefreash.prototype.update = function () {
            if (this._data) {
                this.time = Pan3d.TimeUtil.getTimer();
                if (this.time >= this.dtime) {
                    if (this.ui && this.ui.parent) {
                        this.ui.parent.removeChild(this.ui);
                    }
                    this._data = null;
                    return;
                }
                // if (this.time > this.dtime) {
                //     this.ui.parent.removeChild(this.ui);
                //     this._data = null;
                //     return;
                // }
                // this.time++;
                var vo = this._data;
                // var $ty: number = MathClass.easeInOut(this.time / this.dtime, 0, 20, 1)
                //变化
                var $ary = this.changerules(this.time);
                this.ui.width = 256 * $ary[2];
                this.ui.height = 50 * $ary[3];
                this.ui.y = $ary[1] - this.ui.height;
                this.ui.x = $ary[0] - this.ui.width / 2 + 25;
                this.ui.alpha = $ary[4];
            }
        };
        TextJumpUiDrawAndRefreash.prototype.changerules = function (t) {
            var vo = this._data;
            //当前处于哪一帧
            t = (t - vo.starttime) / 1000 * 60;
            var changevo = new Array();
            var v2d = this.Vector3DToVector2D(new Pan3d.Vector3D(this.pos.x, this.pos.y, this.pos.z));
            if (t < 0) {
                v2d.x = -9999;
            }
            if (vo.type == Pan3d.TextJumpType.EXPERIENCE) {
                v2d.x = 300 / Pan3d.UIData.Scale;
                v2d.y = Pan3d.Scene_data.stageHeight / Pan3d.UIData.Scale - 50;
            }
            var posx;
            var posy;
            var scalex;
            var scaley;
            var alpha;
            //选定初始化飘字位置 
            switch (vo.type) {
                case Pan3d.TextJumpType.NORMALDAMAGE:
                case Pan3d.TextJumpType.MYNORMALDAMAGE:
                    //头顶
                    posx = v2d.x;
                    if (t < 4) {
                        posy = v2d.y - (t * 4);
                        scalex = (t / 4) * 1.3 + 0.2;
                        if (scalex > 1.5) {
                            scalex = 1.5;
                        }
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 8) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 6;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 15) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] + 1 / 6;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 30) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 20;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 72) {
                        if (t < 50) {
                            posy = this._lastchange[1] - 2;
                        }
                        else {
                            posy = this._lastchange[1] + 2;
                        }
                        posx = this._lastchange[0] - 1.5;
                        scalex = this._lastchange[2];
                        scaley = scalex;
                        alpha = this._lastchange[4] - 1 / 100;
                        if (alpha < 0) {
                            alpha = 0;
                        }
                    }
                    break;
                case Pan3d.TextJumpType.CRIT:
                    //暴击
                    posx = v2d.x;
                    if (t < 4) {
                        posy = v2d.y - (t * 4);
                        scalex = (t / 4) * 1.3 + 0.2;
                        if (scalex > 1.5) {
                            scalex = 1.5;
                        }
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 8) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 6;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 15) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] + 1 / 4;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 30) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 20;
                        scaley = scalex;
                        alpha = (t / 3) * 0.8 + 0.2;
                        if (alpha > 1) {
                            alpha = 1;
                        }
                    }
                    else if (t < 100) {
                        if (t < 50) {
                            posy = this._lastchange[1] - 2;
                        }
                        else {
                            posy = this._lastchange[1] + 2;
                        }
                        posx = this._lastchange[0] - 1.5;
                        scalex = this._lastchange[2];
                        scaley = scalex;
                        alpha = this._lastchange[4] - 1 / 100;
                        if (alpha < 0) {
                            alpha = 0;
                        }
                    }
                    break;
                case Pan3d.TextJumpType.NORMALDAMAGEUP:
                case Pan3d.TextJumpType.CRITUP:
                case Pan3d.TextJumpType.MYNORMALDAMAGEUP:
                    //头顶
                    posx = v2d.x;
                    if (t < 4) {
                        posy = v2d.y - (t * 4);
                        scalex = (t / 4) * 1.5 + 0.2;
                        if (scalex > 1.7) {
                            scalex = 1.7;
                        }
                        scaley = scalex;
                        alpha = (t / 3) * 0.3 + 0.2;
                        if (alpha > 0.5) {
                            alpha = 0.5;
                        }
                    }
                    else if (t < 8) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 4;
                        scaley = scalex;
                        alpha = (t / 3) * 0.3 + 0.2;
                        if (alpha > 0.5) {
                            alpha = 0.5;
                        }
                    }
                    else if (t < 15) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] + 1 / 4;
                        scaley = scalex;
                        alpha = (t / 3) * 0.3 + 0.2;
                        if (alpha > 0.5) {
                            alpha = 0.5;
                        }
                    }
                    else if (t < 30) {
                        posy = this._lastchange[1] - 2;
                        scalex = this._lastchange[2] - 1 / 15;
                        scaley = scalex;
                        alpha = this._lastchange[4] - 1 / 80;
                        if (alpha < 0) {
                            alpha = 0;
                        }
                    }
                    break;
                case Pan3d.TextJumpType.TREATMENT:
                    //头顶
                    posx = v2d.x;
                    posy = v2d.y - (t * 1.5);
                    if (t < 12) {
                        scalex = (Math.ceil(t) / 12) * 0.8 + 0.2;
                        scaley = scalex;
                        alpha = (Math.ceil(t) / 12) * 0.8 + 0.2;
                    }
                    else if (t < 60) {
                        scalex = 1;
                        scaley = scalex;
                        alpha = 1 - ((t - 11) / 48);
                    }
                    break;
                case Pan3d.TextJumpType.EXPERIENCE:
                    //玩家名
                    posy = v2d.y -= 15;
                    posy = posy - (t * 0.5);
                    if (t < 40) {
                        // posx = v2d.x - (t * 0.9);
                        // scalex = (Math.ceil(t) / 40) * 0.3 + 0.5;
                        // scaley = scalex;
                        posx = v2d.x;
                        scalex = 1.3;
                        scaley = 1.3;
                        alpha = 1;
                    }
                    else if (t < 60) {
                        // posx = v2d.x - (40 * 0.9);
                        // scalex = this._lastchange[2];
                        // scaley = scalex;
                        posx = v2d.x;
                        scalex = 1.3;
                        scaley = 1.3;
                        alpha = 1 - ((t - 39) / 20);
                    }
                    break;
                case Pan3d.TextJumpType.ATTACKADD:
                case Pan3d.TextJumpType.ATTACKREDUCE:
                    //右边
                    posx = v2d.x += 110;
                    posy = v2d.y - (t * 1.8);
                    if (t < 12) {
                        scalex = (Math.ceil(t) / 12) * 1.3 + 0.1;
                        scaley = scalex;
                        alpha = (Math.ceil(t) / 12) * 0.8 + 0.2;
                    }
                    else if (t < 24) {
                        scalex = 1.4 - ((t - 11) / 12) * 0.4;
                        scaley = scalex;
                        alpha = 1;
                    }
                    else if (t < 60) {
                        scalex = 1;
                        scaley = scalex;
                        alpha = 1 - ((t - 23) / 36);
                    }
                    break;
                case Pan3d.TextJumpType.DODGE:
                case Pan3d.TextJumpType.MISS:
                case Pan3d.TextJumpType.VERTIGO:
                case Pan3d.TextJumpType.FREEZE:
                    //左边
                    posx = v2d.x -= 50;
                    if (t < 12) {
                        posy = v2d.y - (t * 3);
                        scalex = 1;
                        scaley = scalex;
                        alpha = (Math.ceil(t) / 12);
                    }
                    else if (t < 36) {
                        posy = v2d.y - (33);
                        scalex = 1;
                        scaley = scalex;
                        alpha = 1;
                    }
                    else if (t < 72) {
                        posy = v2d.y - 33 - ((t - 36) * 1.5);
                        scalex = 1;
                        scaley = scalex;
                        alpha = 1 - ((t - 35) / 36);
                    }
                    break;
                default:
                    break;
            }
            // scalex = scalex * 1.005
            // scaley = scaley * 1.005
            changevo.push(posx);
            changevo.push(posy);
            changevo.push(scalex);
            changevo.push(scaley);
            changevo.push(alpha);
            changevo.push(v2d.x);
            changevo.push(v2d.y);
            //保存上一次变化
            this._lastchange = changevo;
            return changevo;
        };
        return TextJumpUiDrawAndRefreash;
    }(Pan3d.Disp2DBaseText));
    Pan3d.TextJumpUiDrawAndRefreash = TextJumpUiDrawAndRefreash;
    var CharNameUiVo = /** @class */ (function (_super) {
        __extends(CharNameUiVo, _super);
        function CharNameUiVo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tempMatrix = new Pan3d.Matrix3D;
            return _this;
        }
        CharNameUiVo.prototype.makeData = function () {
            if (this._data) {
                this.charNameMeshVo = this.rightTabInfoVo;
                if (this.lastKey != this.charNameMeshVo.name) {
                    this.ui.width = 256 * 0.7;
                    this.ui.height = 22 * 0.7;
                    this.lastKey = this.charNameMeshVo.name;
                    Pan3d.LabelTextFont.writeSingleLabel(this.parent.uiAtlas, this.textureStr, this.charNameMeshVo.name, 20, Pan3d.TextAlign.CENTER, "#ffffff", "#27262e");
                }
                this.charNameMeshVo.needDraw = false;
            }
        };
        CharNameUiVo.prototype.update = function () {
            if (this.charNameMeshVo) {
                if (this.charNameMeshVo.needDraw) {
                    this.makeData();
                }
                if (this.charNameMeshVo.pos) {
                    if (this.charNameMeshVo.visible) {
                        if (this.needUpData(this.charNameMeshVo.pos) || this.charNameMeshVo.visibleChange) {
                            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);
                            m.append(Pan3d.Scene_data.viewMatrx3D);
                            var p = m.transformVector(this.charNameMeshVo.pos);
                            this.ui.x = ((p.x / p.w) + 1) * (Pan3d.Scene_data.stageWidth / 2) / Pan3d.UIData.Scale - this.ui.width / 2;
                            this.ui.y = ((-p.y / p.w) + 1) * (Pan3d.Scene_data.stageHeight / 2) / Pan3d.UIData.Scale - this.ui.height / 2;
                            this.oldPos.x = this.charNameMeshVo.pos.x;
                            this.oldPos.y = this.charNameMeshVo.pos.y;
                            this.charNameMeshVo.visibleChange = false;
                        }
                    }
                    else {
                        this.ui.x = 10000;
                    }
                }
                if (this.charNameMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return CharNameUiVo;
    }(Pan3d.Disp2DBaseText));
    Pan3d.CharNameUiVo = CharNameUiVo;
    var CharTitleUiVo = /** @class */ (function (_super) {
        __extends(CharTitleUiVo, _super);
        function CharTitleUiVo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tempMatrix = new Pan3d.Matrix3D;
            return _this;
        }
        CharTitleUiVo.prototype.makeData = function () {
            var _this = this;
            if (this._data) {
                this._charTitleMeshVo = this.rightTabInfoVo;
                //LabelTextFont.writeSingleLabel(this.parent.uiAtlas, this.textureStr, "ccav", 22, TextAlign.CENTER, "#ffffff");
                // this.parent.uiAtlas.upDataPicToTexture(getUItittleUrl(String(this._charTitleMeshVo.num)), this.textureStr)
                Pan3d.LoadManager.getInstance().load(Pan3d.Scene_data.fileRoot + getUItittleUrl(String(this._charTitleMeshVo.num)), Pan3d.LoadManager.IMG_TYPE, function ($img) {
                    var $uiRec = _this.parent.uiAtlas.getRec(_this.textureStr);
                    _this.parent.uiAtlas.ctx = Pan3d.UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                    var $minScale = Math.min($uiRec.pixelWitdh / $img.width, $uiRec.pixelHeight / $img.height);
                    $minScale = Math.min($minScale, 1);
                    var $tw = $img.width * $minScale;
                    var $th = $img.height * $minScale;
                    _this.parent.uiAtlas.ctx.drawImage($img, ($uiRec.pixelWitdh - $tw) / 2, ($uiRec.pixelHeight - $th) / 2, $tw, $th);
                    Pan3d.TextureManager.getInstance().updateTexture(_this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, _this.parent.uiAtlas.ctx);
                });
            }
        };
        CharTitleUiVo.prototype.update = function () {
            if (this._charTitleMeshVo) {
                if (this._charTitleMeshVo.needDraw) {
                    this.makeData();
                    this._charTitleMeshVo.needDraw = false;
                }
                if (this._charTitleMeshVo.pos) {
                    if (this._charTitleMeshVo.visible) {
                        if (this.needUpData(this._charTitleMeshVo.pos)) {
                            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);
                            m.append(Pan3d.Scene_data.viewMatrx3D);
                            var p = m.transformVector(this._charTitleMeshVo.pos);
                            this.ui.x = ((p.x / p.w) + 1) * (Pan3d.Scene_data.stageWidth / 2) / Pan3d.UIData.Scale - this.ui.width / 2;
                            this.ui.y = ((-p.y / p.w) + 1) * (Pan3d.Scene_data.stageHeight / 2) / Pan3d.UIData.Scale - this.ui.height / 2;
                            this.oldPos.x = this._charTitleMeshVo.pos.x;
                            this.oldPos.y = this._charTitleMeshVo.pos.y;
                        }
                    }
                    else {
                        this.ui.x = 10000;
                    }
                }
                if (this._charTitleMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return CharTitleUiVo;
    }(Pan3d.Disp2DBaseText));
    Pan3d.CharTitleUiVo = CharTitleUiVo;
    var baseMeshVo = /** @class */ (function () {
        function baseMeshVo() {
            this._visible = true;
            this.visibleChange = false;
            this.clear = false;
            this.uiScale = 1;
        }
        Object.defineProperty(baseMeshVo.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.visibleChange = true;
            },
            enumerable: true,
            configurable: true
        });
        return baseMeshVo;
    }());
    Pan3d.baseMeshVo = baseMeshVo;
})(Pan3d || (Pan3d = {}));
(function (Pan3d) {
    var BloodUIShader = /** @class */ (function (_super) {
        __extends(BloodUIShader, _super);
        function BloodUIShader() {
            return _super.call(this) || this;
        }
        BloodUIShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        BloodUIShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[30];" +
                "uniform vec4 lifenum[30];" +
                "varying vec2 v_texCoord;\n" +
                "varying vec4 v_lifenum;\n" +
                "void main(void)" +
                "{" +
                " v_lifenum = lifenum[int(v2uv.z)];" +
                " v_texCoord = vec2(v2uv.x , v2uv.y );" +
                " vec4  data = ui[int(v2uv.z)];" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy *data.zw * 2.0;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        BloodUIShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "varying vec4 v_lifenum;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec2  v_uv = v_texCoord;" +
                "if(v_texCoord.x<v_lifenum.x){;\n" +
                "v_uv.y = v_uv.y+v_lifenum.y;" +
                "};\n" +
                "vec4 infoUv = texture2D(s_texture, v_uv.xy);\n" +
                "infoUv.xyz *= infoUv.w;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        BloodUIShader.BloodUIShader = "BloodUIShader";
        return BloodUIShader;
    }(Pan3d.Shader3D));
    Pan3d.BloodUIShader = BloodUIShader;
    var BloodUICompenent = /** @class */ (function (_super) {
        __extends(BloodUICompenent, _super);
        function BloodUICompenent() {
            var _this = _super.call(this) || this;
            _this.lifeNum = 100;
            _this.colortype = 0; //0,1,2;
            return _this;
        }
        BloodUICompenent.prototype.pushVaData = function (objData, i, beginIndex) {
            objData.vertices.push(0, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0);
            objData.uvs.push(0, 0, i, 1, 0, i, 1, 8 / 32, i, 0, 8 / 32, i);
            objData.indexs.push(beginIndex, 1 + beginIndex, 2 + beginIndex, beginIndex, 2 + beginIndex, 3 + beginIndex);
            return beginIndex + 4;
        };
        return BloodUICompenent;
    }(Pan3d.UICompenent));
    Pan3d.BloodUICompenent = BloodUICompenent;
    var BloodDisp2DBaseText = /** @class */ (function (_super) {
        __extends(BloodDisp2DBaseText, _super);
        function BloodDisp2DBaseText() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tempMatrix = new Pan3d.Matrix3D;
            return _this;
        }
        BloodDisp2DBaseText.prototype.makeData = function () {
            if (this._data) {
                this.bloodLineMeshVo = this.rightTabInfoVo;
            }
        };
        BloodDisp2DBaseText.prototype.update = function () {
            if (this.bloodLineMeshVo) {
                if (this.bloodLineMeshVo.pos) {
                    if (this.bloodLineMeshVo.visible) {
                        if (this.needUpData(this.bloodLineMeshVo.pos) || this.bloodLineMeshVo.visibleChange) {
                            var m = Pan3d.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);
                            m.append(Pan3d.Scene_data.viewMatrx3D);
                            var p = m.transformVector(new Pan3d.Vector3D(this.bloodLineMeshVo.pos.x, this.bloodLineMeshVo.pos.y, this.bloodLineMeshVo.pos.z));
                            this.ui.x = ((p.x / p.w) + 1) * (Pan3d.Scene_data.stageWidth / 2) / Pan3d.UIData.Scale - this.ui.width / 2;
                            this.ui.y = ((-p.y / p.w) + 1) * (Pan3d.Scene_data.stageHeight / 2) / Pan3d.UIData.Scale - this.ui.height / 2;
                            this.bloodLineMeshVo.visibleChange = false;
                        }
                        this.ui.lifeNum = this.bloodLineMeshVo.num;
                        this.ui.colortype = this.bloodLineMeshVo.colortype;
                    }
                    else {
                        this.ui.x = 10000;
                    }
                }
                if (this.bloodLineMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return BloodDisp2DBaseText;
    }(Pan3d.Disp2DBaseText));
    Pan3d.BloodDisp2DBaseText = BloodDisp2DBaseText;
    var BloodUIRenderComponent = /** @class */ (function (_super) {
        __extends(BloodUIRenderComponent, _super);
        function BloodUIRenderComponent() {
            var _this = _super.call(this) || this;
            _this.nextTime = 0;
            return _this;
        }
        BloodUIRenderComponent.prototype.initData = function () {
            this._uiList = new Array;
            this.objData = new Pan3d.ObjData();
            Pan3d.ProgrmaManager.getInstance().registe(BloodUIShader.BloodUIShader, new BloodUIShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(BloodUIShader.BloodUIShader);
            this.program = this.shader.program;
            this.uiProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Pan3d.Scene_data.context3D.getLocation(this.program, "lifenum");
        };
        BloodUIRenderComponent.prototype.update = function () {
            if (!this.visible || this._uiList.length == 0) {
                return;
            }
            // //console.log(this._uiList.length);
            Pan3d.Scene_data.context3D.setBlendParticleFactors(this.blenderMode);
            Pan3d.Scene_data.context3D.setProgram(this.program);
            if (this.nextTime < Pan3d.TimeUtil.getTimer() || this.renderData2.length != this._uiList.length * 4) {
                if (this.renderData2.length != this._uiList.length * 4) {
                    this.renderData2 = new Float32Array(this._uiList.length * 4);
                }
                for (var i = 0; i < this._uiList.length; i++) {
                    var $bloodUICompenent = this._uiList[i];
                    var a = $bloodUICompenent.lifeNum / 100;
                    var b = ($bloodUICompenent.colortype + 1) * 8 / 32;
                    this.renderData2[i * 4 + 0] = a;
                    this.renderData2[i * 4 + 1] = b;
                }
                this.nextTime = Pan3d.TimeUtil.getTimer() + 300;
            }
            Pan3d.Scene_data.context3D.setVc4fvLocation(this.uiProLocation, this.renderData);
            Pan3d.Scene_data.context3D.setVc4fvLocation(this.ui2ProLocation, this.renderData2);
            Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
            if (this.uiAtlas) {
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this.uiAtlas.texture, 0);
            }
            Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            if (this.modelRenderList) {
                for (var i = 0; i < this.modelRenderList.length; i++) {
                    this.modelRenderList[i].update();
                }
            }
        };
        BloodUIRenderComponent.prototype.creatBaseComponent = function ($skinName) {
            var ui = new BloodUICompenent();
            ui.tr.setRec(new Pan3d.UIRectangle(0, 0, 1, 1));
            ui.width = 64;
            ui.height = 8;
            ui.uiRender = this;
            ui.lifeNum = 100;
            return ui;
        };
        BloodUIRenderComponent.prototype.makeRenderDataVc = function ($vcId) {
            if (!this.renderData || (this.renderData && this.renderData.length != this._uiList.length * 4)) {
                this.renderData = new Float32Array(this._uiList.length * 4);
            }
            if ($vcId == -1) {
                for (var i = 0; this._uiList && i < this._uiList.length; i++) {
                    this._uiList[i].vcId = i;
                    this.renderData[i * 4 + 0] = this._uiList[i].renderData[0];
                    this.renderData[i * 4 + 1] = this._uiList[i].renderData[1];
                    this.renderData[i * 4 + 2] = this._uiList[i].renderData[2];
                    this.renderData[i * 4 + 3] = this._uiList[i].renderData[3];
                }
            }
            else {
                if ($vcId < this._uiList.length) {
                    this.renderData[$vcId * 4 + 0] = this._uiList[$vcId].renderData[0];
                    this.renderData[$vcId * 4 + 1] = this._uiList[$vcId].renderData[1];
                    this.renderData[$vcId * 4 + 2] = this._uiList[$vcId].renderData[2];
                    this.renderData[$vcId * 4 + 3] = this._uiList[$vcId].renderData[3];
                }
            }
        };
        return BloodUIRenderComponent;
    }(Pan3d.UIRenderComponent));
    Pan3d.BloodUIRenderComponent = BloodUIRenderComponent;
    var BloodLineUIConatiner = /** @class */ (function (_super) {
        __extends(BloodLineUIConatiner, _super);
        function BloodLineUIConatiner() {
            var _this = _super.call(this) || this;
            _this.width = Pan3d.UIData.designWidth;
            _this.height = Pan3d.UIData.designHeight;
            _this._baseRender = new BloodUIRenderComponent();
            _this.addRender(_this._baseRender);
            _this._baseRender.uiAtlas = new Pan3d.UIAtlas;
            _this._baseRender.uiAtlas.configData = new Array;
            _this._uiItem = new Array();
            return _this;
            //   this.loadBloodTexture()
        }
        BloodLineUIConatiner.prototype.loadBloodTexture = function () {
            //TextureManager.getInstance().getTexture(Scene_data.fileRoot + "ui/load/blood.png", ($textureRes: TextureRes) => {
            //    this._baseRender.uiAtlas.textureRes = $textureRes
            //});
        };
        BloodLineUIConatiner.prototype.update = function (t) {
            if (this._baseRender.uiAtlas.textureRes) {
                for (var i = 0; i < this._uiItem.length; i++) {
                    if (this._uiItem[i].rightTabInfoVo) {
                        this._uiItem[i].update();
                    }
                }
            }
        };
        BloodLineUIConatiner.prototype.removeChild = function ($ui) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].ui == $ui) {
                    this._uiItem.splice(i, 1);
                    break;
                }
            }
            _super.prototype.removeChild.call(this, $ui);
        };
        BloodLineUIConatiner.prototype.clearOneTemp = function () {
            while (this._uiItem.length > 25) {
                this.removeChild(this._uiItem[0].ui);
            }
        };
        BloodLineUIConatiner.prototype.showTemp = function ($data) {
            if (this._uiItem.length >= 40) {
                //console.log("超过50。暂时设置不可再添加");
                return;
            }
            var $BloodDisp2DBaseText = new BloodDisp2DBaseText;
            $BloodDisp2DBaseText.parent = this._baseRender;
            $BloodDisp2DBaseText.ui = this._baseRender.creatBaseComponent("test");
            $BloodDisp2DBaseText.rightTabInfoVo = $data;
            this.addChild($BloodDisp2DBaseText.ui);
            this._uiItem.push($BloodDisp2DBaseText);
        };
        return BloodLineUIConatiner;
    }(Pan3d.UIConatiner));
    Pan3d.BloodLineUIConatiner = BloodLineUIConatiner;
})(Pan3d || (Pan3d = {}));
(function (Pan3d) {
    var CharTitleMeshVo = /** @class */ (function (_super) {
        __extends(CharTitleMeshVo, _super);
        function CharTitleMeshVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CharTitleMeshVo.prototype.destory = function () {
            this.pos = null;
            this._num = null;
            this.clear = true;
        };
        Object.defineProperty(CharTitleMeshVo.prototype, "num", {
            get: function () {
                return this._num;
            },
            set: function (value) {
                this._num = value;
                this.needDraw = true;
            },
            enumerable: true,
            configurable: true
        });
        return CharTitleMeshVo;
    }(Pan3d.baseMeshVo));
    Pan3d.CharTitleMeshVo = CharTitleMeshVo;
    var CharNameMeshVo = /** @class */ (function (_super) {
        __extends(CharNameMeshVo, _super);
        function CharNameMeshVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CharNameMeshVo.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
                this.needDraw = true;
            },
            enumerable: true,
            configurable: true
        });
        CharNameMeshVo.prototype.destory = function () {
            this.pos = null;
            this._name = null;
            this.needDraw = null;
            this.clear = true;
        };
        return CharNameMeshVo;
    }(Pan3d.baseMeshVo));
    Pan3d.CharNameMeshVo = CharNameMeshVo;
    var BloodLineMeshVo = /** @class */ (function (_super) {
        __extends(BloodLineMeshVo, _super);
        function BloodLineMeshVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BloodLineMeshVo.prototype.destory = function () {
            this.pos = null;
            this.num = null;
            this.colortype = null;
            this.clear = true;
        };
        return BloodLineMeshVo;
    }(Pan3d.baseMeshVo));
    Pan3d.BloodLineMeshVo = BloodLineMeshVo;
    var JumpTextMeshVo = /** @class */ (function (_super) {
        __extends(JumpTextMeshVo, _super);
        function JumpTextMeshVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JumpTextMeshVo.prototype.destory = function () {
            this.pos = null;
            this.clear = true;
        };
        return JumpTextMeshVo;
    }(Pan3d.baseMeshVo));
    Pan3d.JumpTextMeshVo = JumpTextMeshVo;
    var JumpTxtContianerPanel = /** @class */ (function (_super) {
        __extends(JumpTxtContianerPanel, _super);
        function JumpTxtContianerPanel($classVo, $rect, $num) {
            return _super.call(this, $classVo, $rect, $num) || this;
        }
        return JumpTxtContianerPanel;
    }(Pan3d.Dis2DUIContianerPanel));
    Pan3d.JumpTxtContianerPanel = JumpTxtContianerPanel;
    var BloodManager = /** @class */ (function () {
        function BloodManager() {
            this.uiContianerItem = new Array();
            this._charTitleContianerPanel = new Pan3d.Dis2DUIContianerPanel(Pan3d.CharTitleUiVo, new Pan3d.Rectangle(0, 0, 131, 69), 10);
            this._charNameContianerPanel = new Pan3d.Dis2DUIContianerPanel(Pan3d.CharNameUiVo, new Pan3d.Rectangle(0, 0, 256, 24), 50);
            this._jumpTxtContianerPanel = new Pan3d.AlphaUiContianer(Pan3d.TextJumpUiDrawAndRefreash, new Pan3d.Rectangle(0, 0, 256, 50), 10);
            this._expjumpTxtContianerPanel = new Pan3d.AlphaUiContianer(Pan3d.ExpTextJumpUiDrawAndRefreash, new Pan3d.Rectangle(0, 0, 512, 100), 5);
            this._bloodLineUIConatiner = new Pan3d.BloodLineUIConatiner();
            this.uiContianerItem.push(this._charTitleContianerPanel);
            this.uiContianerItem.push(this._charNameContianerPanel);
            this.uiContianerItem.push(this._jumpTxtContianerPanel);
            this.uiContianerItem.push(this._expjumpTxtContianerPanel);
            this.uiContianerItem.push(this._bloodLineUIConatiner);
        }
        BloodManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new BloodManager();
            }
            return this._instance;
        };
        BloodManager.prototype.clearOneTemp = function () {
            for (var i = 0; i < this.uiContianerItem.length; i++) {
                this.uiContianerItem[i].clearOneTemp();
            }
        };
        BloodManager.prototype.getCharTitleMeshVo = function (value) {
            if (value === void 0) { value = 0; }
            var $vo = new CharTitleMeshVo;
            $vo.num = value;
            $vo.pos = new Pan3d.Vector3D(0, 50, 0);
            this._charTitleContianerPanel.showTemp($vo);
            return $vo;
        };
        BloodManager.prototype.getCharNameMeshVo = function (value) {
            if (value === void 0) { value = "测试名"; }
            var $vo = new CharNameMeshVo;
            $vo.name = value;
            $vo.pos = new Pan3d.Vector3D(0, 50, 0);
            this._charNameContianerPanel.showTemp($vo);
            return $vo;
        };
        BloodManager.prototype.getBloodLineMeshVo = function () {
            var $vo = new BloodLineMeshVo;
            $vo.num = 100;
            $vo.colortype = 0;
            $vo.pos = new Pan3d.Vector3D(0, 50, 0);
            this._bloodLineUIConatiner.showTemp($vo);
            return $vo;
        };
        BloodManager.prototype.setJumpNum = function ($textJumpUiVo) {
            // if (!$color) {
            //     $color = $num > 0 ? ArtFont.Green : ArtFont.Red
            // }
            // var $str: string = String($num)
            // if ($num > 0) {
            //     $str = "+" + $str
            // }
            // //console.log("---111");
            this._jumpTxtContianerPanel.showTemp($textJumpUiVo);
        };
        BloodManager.prototype.setExpJumpNum = function ($textJumpUiVo) {
            this._expjumpTxtContianerPanel.showTemp($textJumpUiVo);
        };
        BloodManager.prototype.update = function () {
            for (var i = 0; i < this.uiContianerItem.length; i++) {
                this.uiContianerItem[i].update(0);
                for (var j = 0; j < this._bloodLineUIConatiner.renderList.length; j++) {
                    this.uiContianerItem[i].renderList[j].update();
                }
            }
        };
        BloodManager.prototype.resize = function () {
            this._jumpTxtContianerPanel.resize();
            for (var j = 0; j < this.uiContianerItem.length; j++) {
                this.uiContianerItem[j].resize();
            }
            Pan3d.Scene_data.cam3D.needChange = true;
            //this.update();
        };
        return BloodManager;
    }());
    Pan3d.BloodManager = BloodManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BloodManager.js.map
var Pan3d;
(function (Pan3d) {
    var Curve = /** @class */ (function () {
        function Curve() {
            this.valueV3d = [1, 1, 1, 1];
        }
        Curve.prototype.getValue = function ($t) {
            if (!this.valueVec || this.begintFrame == -1) {
                return this.valueV3d;
            }
            var flag = float2int($t / Pan3d.Scene_data.frameTime - this.begintFrame);
            if (flag < 0) {
                flag = 0;
            }
            else if (flag > this.maxFrame - this.begintFrame) {
                flag = this.maxFrame - this.begintFrame;
            }
            return this.valueVec[flag];
            /**
    
            if (this.type == 1) {
                this.valueV3d.x = this.valueVec[0][flag];
            } else if (this.type == 2) {
                this.valueV3d.x = this.valueVec[0][flag];
                this.valueV3d.y = this.valueVec[1][flag];
            } else if (this.type == 3) {
                this.valueV3d.x = this.valueVec[0][flag];
                this.valueV3d.y = this.valueVec[1][flag];
                this.valueV3d.z = this.valueVec[2][flag];
            } else if (this.type == 4) {
                this.valueV3d.x = this.valueVec[0][flag];
                this.valueV3d.y = this.valueVec[1][flag];
                this.valueV3d.z = this.valueVec[2][flag];
                this.valueV3d.w = this.valueVec[3][flag];
    
                this.valueV3d.scaleBy(this.valueV3d.w);
    
            }
            return this.valueV3d;
    
             */
        };
        Curve.prototype.setData = function (obj) {
            this.type = obj.type;
            this.maxFrame = obj.maxFrame;
            if (obj.items.length) {
                this.begintFrame = obj.items[0].frame;
            }
            else {
                this.begintFrame = -1;
            }
            var len = obj.values[0].length;
            var ary = new Array;
            for (var i = 0; i < len; i++) {
                var itemAry = new Array;
                if (this.type == 1) {
                    itemAry.push(obj.values[0][i]);
                }
                else if (this.type == 2) {
                    itemAry.push(obj.values[0][i], obj.values[1][i]);
                }
                else if (this.type == 3) {
                    itemAry.push(obj.values[0][i], obj.values[1][i], obj.values[2][i]);
                }
                else if (this.type == 4) {
                    var w = obj.values[3][i];
                    itemAry.push(obj.values[0][i] * w, obj.values[1][i] * w, obj.values[2][i] * w, w);
                }
                ary.push(itemAry);
            }
            this.valueVec = ary;
        };
        return Curve;
    }());
    Pan3d.Curve = Curve;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Curve.js.map
var Pan3d;
(function (Pan3d) {
    var Shadow = /** @class */ (function () {
        function Shadow() {
            this._visible = false;
            this.data = [0, 0, 0, 5];
        }
        Object.defineProperty(Shadow.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.display.stateChage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "x", {
            get: function () {
                return this.data[0];
            },
            set: function (value) {
                this.data[0] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "y", {
            get: function () {
                return this.data[1];
            },
            set: function (value) {
                this.data[1] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "z", {
            get: function () {
                return this.data[2];
            },
            set: function (value) {
                this.data[2] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "size", {
            get: function () {
                return this.data[3];
            },
            set: function (value) {
                this.data[3] = value;
            },
            enumerable: true,
            configurable: true
        });
        return Shadow;
    }());
    Pan3d.Shadow = Shadow;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Shadow.js.map
var Pan3d;
(function (Pan3d) {
    var ShadowManager = /** @class */ (function () {
        function ShadowManager() {
            this._displayList = new Array;
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.Display3DShadowShader.Display3DShadowShader, new Pan3d.Display3DShadowShader());
        }
        ShadowManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new ShadowManager();
            }
            return this._instance;
        };
        ShadowManager.prototype.addShadow = function () {
            var display = this.getIdleShadow();
            var sd = new Pan3d.Shadow();
            display.addShadow(sd);
            return sd;
        };
        ShadowManager.prototype.removeShadow = function (sd) {
            sd.display.removeShadow(sd);
        };
        ShadowManager.prototype.update = function () {
            if (this._displayList.length) {
                Pan3d.Scene_data.context3D.setWriteDepth(false);
                for (var i = 0; i < this._displayList.length; i++) {
                    this._displayList[i].update();
                }
                Pan3d.Scene_data.context3D.setWriteDepth(true);
            }
        };
        ShadowManager.prototype.getIdleShadow = function () {
            for (var i = 0; i < this._displayList.length; i++) {
                if (this._displayList[i].hasIdle()) {
                    return this._displayList[i];
                }
            }
            var display = new Pan3d.Display3dShadow();
            this._displayList.push(display);
            return display;
        };
        return ShadowManager;
    }());
    Pan3d.ShadowManager = ShadowManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ShadowManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BaseRes = /** @class */ (function (_super) {
        __extends(BaseRes, _super);
        function BaseRes() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.allImgBytes = 10000000;
            return _this;
        }
        //constructor() {
        //this.useNum = 0;
        //}
        BaseRes.prototype.read = function ($imgFun) {
            if ($imgFun === void 0) { $imgFun = null; }
            this._imgFun = $imgFun;
            var fileType = this._byte.readInt();
            if (fileType == BaseRes.IMG_TYPE) {
                if (Pan3d.Scene_data.supportBlob) {
                    this.readImg();
                }
                else {
                    this.readImgLow();
                }
            }
            else if (fileType == BaseRes.OBJS_TYPE) {
                this.readObj(this._byte);
            }
            else if (fileType == BaseRes.MATERIAL_TYPE) {
                this.readMaterial();
            }
            else if (fileType == BaseRes.PARTICLE_TYPE) {
                this.readParticle();
            }
            else if (fileType == BaseRes.ZIP_OBJS_TYPE) {
                this.readZipObj();
            }
        };
        BaseRes.prototype.readZipObj = function () {
            var zipLen = this._byte.readInt();
            var aryBuf = this._byte.buffer.slice(this._byte.position, this._byte.position + zipLen);
            this._byte.position += zipLen;
            var zipedBuf = unZip(aryBuf);
            var newByte = new Pan3d.Pan3dByteArray(zipedBuf);
            this.readObj(newByte);
        };
        BaseRes.prototype.readImg = function () {
            var _this = this;
            this.imgNum = this._byte.readInt();
            this.imgLoadNum = 0;
            //this.imgAry = new Array;
            var time = Pan3d.TimeUtil.getTimer();
            var ary = new Array;
            var urlAry = new Array;
            for (var i = 0; i < this.imgNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + this._byte.readUTF();
                var imgSize = this._byte.readInt();
                if (url.search(".jpng") != -1) {
                    this.readJpngImg(url);
                    continue;
                }
                //this.imgAry.push(url);
                var imgAryBuffer = this._byte.buffer.slice(this._byte.position, this._byte.position + imgSize);
                this._byte.position += imgSize;
                var blob = new Blob([imgAryBuffer], { type: "application/octet-binary" });
                ary.push(blob);
                urlAry.push(url);
            }
            for (var i = 0; i < ary.length; i++) {
                var img = new Image();
                img.url = urlAry[i];
                img.onload = function (evt) {
                    _this.loadImg(evt.target);
                    var etimg = evt.target;
                    URL.revokeObjectURL(etimg.src);
                };
                img.src = URL.createObjectURL(ary[i]);
            }
        };
        BaseRes.prototype.readJpngImg = function ($url) {
            var _this = this;
            var rgbSize = this._byte.readInt();
            var imgAryBuffer = this._byte.buffer.slice(this._byte.position, this._byte.position + rgbSize);
            this._byte.position += rgbSize;
            var alphaSize = this._byte.readInt();
            var alphaImgAryBuffer = this._byte.buffer.slice(this._byte.position, this._byte.position + alphaSize);
            this._byte.position += alphaSize;
            var img = makeImage();
            var alphaImg = makeImage();
            var loadNum = 0;
            var comFun = function (evt) {
                loadNum++;
                if (loadNum < 2) {
                    return;
                }
                var ctx = Pan3d.UIManager.getInstance().getContext2D(img.width, img.height);
                ctx.drawImage(img, 0, 0);
                var imgData = ctx.getImageData(0, 0, img.width, img.height);
                ctx.clearRect(0, 0, img.width, img.height);
                ctx.drawImage(alphaImg, 0, 0);
                var alphaImgdata = ctx.getImageData(0, 0, img.width, img.height);
                for (var i = 0; i < imgData.data.length; i += 4) {
                    var per = alphaImgdata.data[i] / 255;
                    // imgData.data[i] *= per;
                    // imgData.data[i + 1] *= per;
                    // imgData.data[i + 2] *= per;
                    imgData.data[i + 3] = alphaImgdata.data[i];
                }
                _this.addImg($url.replace(".jpng", ".png"), imgData);
            };
            img.onload = comFun;
            alphaImg.onload = comFun;
            //img.src = 'data:image/png;base64,' + Base64.encode(imgAryBuffer);
            //alphaImg.src = 'data:image/png;base64,' + Base64.encode(alphaImgAryBuffer);
        };
        BaseRes.prototype.readImgLow = function () {
            var _this = this;
            this.imgNum = this._byte.readInt();
            this.imgLoadNum = 0;
            // this.imgAry = new Array;
            var time = Pan3d.TimeUtil.getTimer();
            var bytes = 0;
            for (var i = 0; i < this.imgNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + this._byte.readUTF();
                var imgSize = this._byte.readInt();
                bytes += imgSize;
                var img = makeImage();
                img.url = url;
                //this.imgAry.push(url);
                img.onload = function (evt) {
                    _this.loadImg(evt.target);
                };
                img.src = url;
            }
            this.allImgBytes = bytes;
        };
        BaseRes.prototype.loadImg = function (img) {
            Pan3d.TextureManager.getInstance().addRes(img.url, img);
            this.countImg();
        };
        BaseRes.prototype.addImg = function ($url, img) {
            Pan3d.TextureManager.getInstance().addRes($url, img);
            this.countImg();
        };
        BaseRes.prototype.countImg = function () {
            this.imgLoadNum++;
            if (this.imgLoadNum == this.imgNum) {
                this._imgComplete = true;
                this.allResCom();
            }
        };
        BaseRes.prototype.readObj = function ($srcByte) {
            var objNum = $srcByte.readInt();
            for (var i = 0; i < objNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + $srcByte.readUTF();
                var size = $srcByte.readInt();
                var newByte = new Pan3d.Pan3dByteArray();
                newByte.length = size;
                $srcByte.readBytes(newByte, 0, size);
                var objData = Pan3d.ObjDataManager.getInstance().loadObjCom(newByte.buffer, url);
            }
            if (this._imgFun) {
                this._imgFun();
            }
        };
        BaseRes.prototype.readMaterial = function () {
            var objNum = this._byte.readInt();
            //this.materialAry = new Array;
            var time = Pan3d.TimeUtil.getTimer();
            for (var i = 0; i < objNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + this._byte.readUTF();
                var size = this._byte.readInt();
                var dataByte = new Pan3d.Pan3dByteArray;
                dataByte.length = size;
                this._byte.readBytes(dataByte, 0, size);
                Pan3d.MaterialManager.getInstance().addResByte(url, dataByte);
                //this.materialAry.push(url);
            }
            ////console.log("material time", (TimeUtil.getTimer() - time));
            //this.read();
        };
        BaseRes.prototype.readParticle = function () {
            var objNum = this._byte.readInt();
            //this.particleAry = new Array;
            var time = Pan3d.TimeUtil.getTimer();
            for (var i = 0; i < objNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + this._byte.readUTF();
                var size = this._byte.readInt();
                var dataByte = new Pan3d.Pan3dByteArray;
                dataByte.length = size;
                this._byte.readBytes(dataByte, 0, size);
                Pan3d.ParticleManager.getInstance().addResByte(url, dataByte);
                //this.particleAry.push(url);
                //SceneRes.particleDic[url] = str;
            }
            ////console.log("particle time", (TimeUtil.getTimer() - time));
            //this.read();
        };
        //读材质参数
        BaseRes.prototype.readMaterialInfo = function () {
            var len = this._byte.readInt();
            if (len > 0) {
                var $arr = new Array;
                for (var i = 0; i < len; i++) {
                    var $temp = new Object();
                    $temp.type = this._byte.readInt();
                    $temp.name = this._byte.readUTF();
                    if ($temp.type == 0) {
                        $temp.url = this._byte.readUTF();
                    }
                    if ($temp.type == 1) {
                        $temp.x = this._byte.readFloat();
                    }
                    if ($temp.type == 2) {
                        $temp.x = this._byte.readFloat();
                        $temp.y = this._byte.readFloat();
                    }
                    if ($temp.type == 3) {
                        $temp.x = this._byte.readFloat();
                        $temp.y = this._byte.readFloat();
                        $temp.z = this._byte.readFloat();
                    }
                    $arr.push($temp);
                }
                return $arr;
            }
            else {
                return null;
            }
        };
        //读取浮点数据，两个字节
        BaseRes.readFloatTwoByte = function (byte, vertices) {
            var verLength = byte.readInt();
            if (verLength > 0) {
                var $scaleNum = byte.readFloat();
                vertices.length = 0;
                for (var i = 0; i < verLength; i++) {
                    vertices.push(byte.readFloatTwoByte($scaleNum));
                }
            }
        };
        //读取一个字节的LightMap
        BaseRes.readFloatOneByte = function (byte, vertices) {
            var verLength = byte.readInt();
            if (verLength > 0) {
                for (var i = 0; i < verLength; i++) {
                    vertices.push((byte.readByte() + 128) / 256);
                }
            }
        };
        BaseRes.readIntForTwoByte = function (byte, indexs) {
            var iLen = byte.readInt();
            for (var i = 0; i < iLen; i++) {
                indexs.push(byte.readShort());
            }
        };
        BaseRes.readIntForOneByte = function (byte, indexs) {
            var iLen = byte.readInt();
            for (var i = 0; i < iLen; i++) {
                indexs.push(byte.readByte());
            }
        };
        /**
         * $readType
         * 0 readFloatTwoByte
         * 1 readFloatOneByte
         * 2 readIntForOneByte
         *  */
        BaseRes.readBytes2ArrayBuffer = function ($byte, $data, $dataWidth, $offset, $stride, $readType) {
            if ($readType === void 0) { $readType = 0; }
            var verLength = $byte.readInt();
            if (verLength <= 0) {
                return;
            }
            var scaleNum;
            if ($readType == 0) {
                scaleNum = $byte.readFloat();
            }
            var readNum = verLength / $dataWidth;
            for (var i = 0; i < readNum; i++) {
                var pos = $stride * i + $offset;
                for (var j = 0; j < $dataWidth; j++) {
                    if ($readType == 0) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloatTwoByte(scaleNum), true);
                    }
                    else if ($readType == 1) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloatOneByte(), true);
                    }
                    else if ($readType == 2) {
                        $data.setFloat32((pos + j) * 4, $byte.readByte(), true);
                    }
                    else if ($readType == 3) {
                        $data.setFloat32((pos + j) * 4, ($byte.readByte() + 128) / 255, true);
                    }
                    else if ($readType == 4) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloat(), true);
                    }
                }
            }
        };
        //读取材质参数
        BaseRes.readMaterialParamData = function (byte) {
            var mpNum = byte.readInt();
            if (mpNum > 0) {
                var mpAry = new Array;
                for (var j = 0; j < mpNum; j++) {
                    var obj = new Object;
                    obj.name = byte.readUTF();
                    obj.type = byte.readByte();
                    if (obj.type == 0) {
                        obj.url = byte.readUTF();
                    }
                    else if (obj.type == 1) {
                        obj.x = byte.readFloat();
                    }
                    else if (obj.type == 2) {
                        obj.x = byte.readFloat();
                        obj.y = byte.readFloat();
                    }
                    else if (obj.type == 3) {
                        obj.x = byte.readFloat();
                        obj.y = byte.readFloat();
                        obj.z = byte.readFloat();
                    }
                    mpAry.push(obj);
                }
                return mpAry;
            }
            return null;
        };
        BaseRes.prototype.allResCom = function () {
            if (this._imgFun) {
                this._imgFun();
            }
        };
        BaseRes.IMG_TYPE = 1;
        BaseRes.OBJS_TYPE = 2;
        BaseRes.MATERIAL_TYPE = 3;
        BaseRes.PARTICLE_TYPE = 4;
        BaseRes.SCENE_TYPE = 5;
        BaseRes.ZIP_OBJS_TYPE = 6;
        BaseRes.PREFAB_TYPE = 1;
        BaseRes.SCENE_PARTICLE_TYPE = 11;
        return BaseRes;
    }(Pan3d.ResCount));
    Pan3d.BaseRes = BaseRes;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BaseRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ResManager = /** @class */ (function (_super) {
        __extends(ResManager, _super);
        function ResManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ResManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new ResManager();
            }
            return this._instance;
        };
        ResManager.prototype.loadRoleRes = function (url, $fun, $meshBatchNum) {
            //if (this._resDic[url]){
            //    $fun(this._resDic[url]);
            //    return;
            //}
            // if (this._loadDic[url]){
            //     this._loadDic[url].push($fun);
            //     return;
            // }
            // this._loadDic[url] = new Array;
            // this._loadDic[url].push($fun);
            var roleRes = new Pan3d.RoleRes();
            roleRes.meshBatchNum = $meshBatchNum;
            roleRes.load(url, function () {
                $fun(roleRes);
                // for (var i: number = 0; i < this._loadDic[url].length; i++){
                //     this._loadDic[url][i](roleRes);
                // }
                // delete this._loadDic[url];
                //this._resDic[url] = roleRes;
            });
        };
        ResManager.prototype.loadSkillRes = function (url, $fun) {
            //if (this._resDic[url]) {
            //    $fun(this._resDic[url]);
            //    return;
            //}
            // if (this._loadDic[url]) {
            //     this._loadDic[url].push($fun);
            //     return;
            // }
            // this._loadDic[url] = new Array;
            // this._loadDic[url].push($fun);
            var skillRes = new Pan3d.SkillRes();
            skillRes.load(url, function () {
                $fun(skillRes);
                // for (var i: number = 0; i < this._loadDic[url].length; i++) {
                //     this._loadDic[url][i](skillRes);
                // }
                // delete this._loadDic[url];
                //this._resDic[url] = skillRes;
            });
        };
        ResManager.prototype.loadSceneRes = function ($url, $completeFun, $progressFun, $readDataFun) {
            var sceneRes;
            //if (this._resDic[$url]) {
            //    sceneRes = this._resDic[$url];
            //} else {
            //    this._resDic[$url] = sceneRes;
            //}
            if (this._dic[$url]) {
                sceneRes = this._dic[$url];
            }
            else {
                sceneRes = new Pan3d.SceneRes();
                this._dic[$url] = sceneRes;
            }
            sceneRes.load($url, $completeFun, $progressFun, $readDataFun);
            this.clearSceneUse(sceneRes);
            return sceneRes;
        };
        ResManager.prototype.clearSceneUse = function (curRes) {
            for (var key in this._dic) {
                var rc = this._dic[key];
                if (rc.useNum > 0 && rc != curRes) {
                    rc.useNum = 0;
                }
            }
            curRes.useNum = 1;
        };
        ResManager.prototype.gc = function () {
            for (var key in this._dic) {
                var rc = this._dic[key];
                if (rc.useNum <= 0) {
                    rc.idleTime++;
                    if (rc.idleTime >= Pan3d.ResCount.GCTime) {
                        //console.log("清理 -" + key);
                        rc.destory();
                        delete this._dic[key];
                    }
                }
            }
        };
        return ResManager;
    }(Pan3d.ResGC));
    Pan3d.ResManager = ResManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ResManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var RoleRes = /** @class */ (function (_super) {
        __extends(RoleRes, _super);
        function RoleRes() {
            var _this = _super.call(this) || this;
            _this.meshBatchNum = 1;
            return _this;
        }
        RoleRes.prototype.load = function (url, $fun) {
            var _this = this;
            this._fun = $fun;
            Pan3d.LoadManager.getInstance().load(url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                _this.loadComplete($byte);
            });
        };
        RoleRes.prototype.loadComplete = function ($byte) {
            this._byte = new Pan3d.Pan3dByteArray($byte);
            this._byte.position = 0;
            this.version = this._byte.readInt();
            this.readMesh();
        };
        RoleRes.prototype.readMesh = function () {
            this.roleUrl = this._byte.readUTF();
            if (this.version >= 16) { //环境参数
                this.ambientLightColor = new Pan3d.Vector3D;
                this.sunLigthColor = new Pan3d.Vector3D;
                this.nrmDircet = new Pan3d.Vector3D;
                this.ambientLightColor.x = this._byte.readFloat();
                this.ambientLightColor.y = this._byte.readFloat();
                this.ambientLightColor.z = this._byte.readFloat();
                this.ambientLightIntensity = this._byte.readFloat();
                this.ambientLightColor.scaleBy(this.ambientLightIntensity);
                this.sunLigthColor.x = this._byte.readFloat();
                this.sunLigthColor.y = this._byte.readFloat();
                this.sunLigthColor.z = this._byte.readFloat();
                this.sunLigthIntensity = this._byte.readFloat();
                this.sunLigthColor.scaleBy(this.sunLigthIntensity);
                this.nrmDircet.x = this._byte.readFloat();
                this.nrmDircet.y = this._byte.readFloat();
                this.nrmDircet.z = this._byte.readFloat();
            }
            Pan3d.MeshDataManager.getInstance().readData(this._byte, this.meshBatchNum, this.roleUrl, this.version);
            this.readAction();
        };
        RoleRes.prototype.readAction = function () {
            var _this = this;
            var $actionByte;
            if (this.version >= 30) {
                $actionByte = getZipByte(this._byte);
            }
            else {
                $actionByte = this._byte;
            }
            this.actionAry = new Array;
            var actionNum = $actionByte.readInt();
            for (var i = 0; i < actionNum; i++) {
                var actionName = $actionByte.readUTF();
                Pan3d.AnimManager.getInstance().readData($actionByte, this.roleUrl + actionName);
                this.actionAry.push(actionName);
            }
            this.read(function () { _this.readNext(); }); //readimg 
        };
        RoleRes.prototype.readNext = function () {
            this.read(); //readmaterial
            this.read(); //readparticle;
            this._fun();
        };
        return RoleRes;
    }(Pan3d.BaseRes));
    Pan3d.RoleRes = RoleRes;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=RoleRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkillRes = /** @class */ (function (_super) {
        __extends(SkillRes, _super);
        function SkillRes() {
            var _this = _super.call(this) || this;
            _this.meshBatchNum = 1;
            return _this;
        }
        SkillRes.prototype.load = function (url, $fun) {
            var _this = this;
            this._fun = $fun;
            Pan3d.LoadManager.getInstance().load(url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                _this.loadComplete($byte);
            });
        };
        SkillRes.prototype.loadComplete = function ($byte) {
            var _this = this;
            this._byte = new Pan3d.Pan3dByteArray($byte);
            this._byte.position = 0;
            this.version = this._byte.readInt();
            this.skillUrl = this._byte.readUTF();
            ////console.log("aaaaaaaaaaaaaa " + $byte.byteLength + "," + this._byte.length);
            this.read(function () { _this.readNext(); }); //readimg 
        };
        SkillRes.prototype.readNext = function () {
            this.read(); //readmaterial
            this.read(); //readparticle;
            if (this.version < 27) {
                var str = this._byte.readUTF();
            }
            this.data = this.readData(this._byte);
            this._fun();
        };
        SkillRes.prototype.readData = function ($byte) {
            var len = $byte.readInt();
            var byteData = new Object;
            for (var i = 0; i < len; i++) {
                var $obj = new Object;
                var $name = $byte.readUTF();
                var $action = $byte.readUTF();
                $obj.skillname = $name;
                $obj.action = $action;
                $obj.type = $byte.readFloat();
                if (this.version >= 26) {
                    $obj.blood = $byte.readInt();
                    if ($obj.blood == 0) {
                        $obj.blood = Pan3d.SkillVo.defaultBloodTime;
                    }
                }
                else {
                    $obj.blood = Pan3d.SkillVo.defaultBloodTime;
                }
                if (this.version >= 32) {
                    var soundTime = $byte.readInt();
                    if (soundTime > 0) {
                        var soundName = $byte.readUTF();
                        $obj.sound = { time: soundTime, name: soundName };
                    }
                }
                if (this.version >= 33) {
                    var shockLen = $byte.readInt();
                    if (shockLen) {
                        var shockAry = new Array;
                        for (var k = 0; k < shockLen; k++) {
                            var shobj = new Object;
                            shobj.time = $byte.readInt();
                            shobj.lasttime = $byte.readInt();
                            shobj.amp = $byte.readFloat();
                            shockAry.push(shobj);
                        }
                        $obj.shock = shockAry;
                    }
                }
                // $obj.data=JSON.parse($byte.readUTF())
                $obj.data = new Array;
                var dLen = $byte.readInt();
                for (var j = 0; j < dLen; j++) {
                    var dataObj = new Object;
                    dataObj.url = $byte.readUTF();
                    dataObj.frame = $byte.readFloat();
                    switch ($obj.type) {
                        case 1:
                            dataObj.beginType = $byte.readInt();
                            if (dataObj.beginType == 0) {
                                dataObj.beginPos = new Pan3d.Vector3D();
                                dataObj.beginPos.x = $byte.readFloat();
                                dataObj.beginPos.y = $byte.readFloat();
                                dataObj.beginPos.z = $byte.readFloat();
                            }
                            else if (dataObj.beginType == 1) {
                                dataObj.beginSocket = $byte.readUTF();
                            }
                            dataObj.hitSocket = $byte.readUTF();
                            dataObj.endParticle = $byte.readUTF();
                            dataObj.multype = $byte.readInt();
                            dataObj.speed = $byte.readFloat();
                            break;
                        case 3:
                            dataObj.beginSocket = $byte.readUTF();
                            dataObj.beginType = $byte.readFloat();
                            dataObj.multype = $byte.readFloat();
                            dataObj.speed = $byte.readFloat();
                            break;
                        case 4:
                            if (this.version >= 27) {
                                var hasSocket = $byte.readBoolean();
                                dataObj.hasSocket = hasSocket;
                                if (hasSocket) {
                                    dataObj.socket = $byte.readUTF();
                                }
                                else {
                                    dataObj.pos = this.readV3d($byte);
                                    dataObj.rotation = this.readV3d($byte);
                                }
                            }
                            else {
                                dataObj.hasSocket = false;
                                dataObj.pos = this.readV3d($byte);
                                dataObj.rotation = this.readV3d($byte);
                            }
                            break;
                        default:
                            alert("没有类型readData");
                            break;
                    }
                    $obj.data.push(dataObj);
                }
                byteData[$name] = $obj;
            }
            return byteData;
        };
        SkillRes.prototype.readV3d = function ($byte) {
            var v3d = new Pan3d.Vector3D;
            v3d.x = $byte.readFloat();
            v3d.y = $byte.readFloat();
            v3d.z = $byte.readFloat();
            v3d.w = $byte.readFloat();
            return v3d;
        };
        return SkillRes;
    }(Pan3d.BaseRes));
    Pan3d.SkillRes = SkillRes;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkillRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var ModelRes = /** @class */ (function (_super) {
        __extends(ModelRes, _super);
        function ModelRes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelRes.prototype.load = function (url, $fun) {
            var _this = this;
            this._fun = $fun;
            Pan3d.LoadManager.getInstance().load(url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                _this.loadComplete($byte);
            });
        };
        ModelRes.prototype.loadComplete = function ($byte) {
            var _this = this;
            this._byte = new Pan3d.Pan3dByteArray($byte);
            this._byte.position = 0;
            this.read(function () { _this.readNexte(); }); //img
        };
        ModelRes.prototype.readNexte = function () {
            this.read(); //obj
            this.read(); //material
            this.objUrl = this._byte.readUTF();
            this.materialUrl = this._byte.readUTF();
            if (this._byte.readBoolean()) {
                this.light = new Pan3d.LightVo();
                this.light.ambientColor[0] = this._byte.readFloat();
                this.light.ambientColor[1] = this._byte.readFloat();
                this.light.ambientColor[2] = this._byte.readFloat();
                this.light.sunColor[0] = this._byte.readFloat();
                this.light.sunColor[1] = this._byte.readFloat();
                this.light.sunColor[2] = this._byte.readFloat();
                this.light.sunDirect[0] = this._byte.readFloat();
                this.light.sunDirect[1] = this._byte.readFloat();
                this.light.sunDirect[2] = this._byte.readFloat();
            }
            this._fun();
        };
        return ModelRes;
    }(Pan3d.BaseRes));
    Pan3d.ModelRes = ModelRes;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ModelRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GroupRes = /** @class */ (function (_super) {
        __extends(GroupRes, _super);
        function GroupRes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupRes.prototype.load = function (url, $fun) {
            var _this = this;
            this._fun = $fun;
            Pan3d.LoadManager.getInstance().load(url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                _this.loadComplete($byte);
            });
        };
        GroupRes.prototype.loadComplete = function ($byte) {
            var _this = this;
            this.dataAry = new Array;
            this._byte = new Pan3d.Pan3dByteArray($byte);
            this._byte.position = 0;
            this.version = this._byte.readInt();
            this.read(function () { _this.readNext(); }); //img
        };
        GroupRes.prototype.readNext = function () {
            this.read(); //obj
            this.read(); //material
            this.read(); //particle;
            var isGroup = this._byte.readBoolean();
            if (isGroup) {
                var length = this._byte.readInt();
                for (var i = 0; i < length; i++) {
                    this.readItem(true);
                }
            }
            else {
                this.readItem(false);
            }
            this._fun();
            this._fun = null;
            this._byte = null;
        };
        GroupRes.prototype.readItem = function (isG) {
            var types = this._byte.readInt();
            var item = new GroupItem();
            item.isGroup = isG;
            if (isG) {
                item.x = this._byte.readFloat();
                item.y = this._byte.readFloat();
                item.z = this._byte.readFloat();
                item.scaleX = this._byte.readFloat();
                item.scaleY = this._byte.readFloat();
                item.scaleZ = this._byte.readFloat();
                item.rotationX = this._byte.readFloat();
                item.rotationY = this._byte.readFloat();
                item.rotationZ = this._byte.readFloat();
            }
            if (types == Pan3d.BaseRes.PREFAB_TYPE) {
                item.objUrl = this._byte.readUTF();
                item.materialUrl = this._byte.readUTF();
                if (this.version >= 4) {
                    item.materialInfoArr = this.readMaterialInfo();
                }
                item.types = Pan3d.BaseRes.PREFAB_TYPE;
            }
            else if (types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                item.particleUrl = this._byte.readUTF();
                item.types = Pan3d.BaseRes.SCENE_PARTICLE_TYPE;
            }
            this.dataAry.push(item);
        };
        GroupRes.prototype.initReg = function () {
            this._objDic = new Object;
            this._materialDic = new Object;
            this._particleDic = new Object;
            for (var i = 0; i < this.dataAry.length; i++) {
                var item = this.dataAry[i];
                if (item.objUrl) {
                    this._objDic[Pan3d.Scene_data.fileRoot + item.objUrl] = true;
                }
                if (item.materialUrl) {
                    this._materialDic[Pan3d.Scene_data.fileRoot + item.materialUrl] = true;
                }
                if (item.particleUrl) {
                    this._particleDic[Pan3d.Scene_data.fileRoot + item.particleUrl] = true;
                }
            }
            for (var key in this._objDic) {
                Pan3d.ObjDataManager.getInstance().registerUrl(key);
            }
            for (var key in this._materialDic) {
                Pan3d.MaterialManager.getInstance().registerUrl(key);
            }
            for (var key in this._particleDic) {
                Pan3d.ParticleManager.getInstance().registerUrl(key);
            }
        };
        GroupRes.prototype.destory = function () {
            _super.prototype.destory.call(this);
            for (var key in this._objDic) {
                Pan3d.ObjDataManager.getInstance().releaseUrl(key);
            }
            for (var key in this._materialDic) {
                Pan3d.MaterialManager.getInstance().releaseUrl(key);
            }
            for (var key in this._particleDic) {
                Pan3d.ParticleManager.getInstance().releaseUrl(key);
            }
            this.dataAry = null;
            this._objDic = null;
            this._particleDic = null;
            this._materialDic = null;
        };
        return GroupRes;
    }(Pan3d.BaseRes));
    Pan3d.GroupRes = GroupRes;
    var GroupItem = /** @class */ (function (_super) {
        __extends(GroupItem, _super);
        function GroupItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GroupItem;
    }(Pan3d.Object3D));
    Pan3d.GroupItem = GroupItem;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GroupRes.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SceneRes = /** @class */ (function (_super) {
        __extends(SceneRes, _super);
        function SceneRes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SceneRes.prototype.load = function ($url, $completeFun, $progressFun, $readDataFun) {
            var _this = this;
            if (this.sceneData) {
                if (this.isNeedReload()) {
                    $completeFun();
                    $progressFun(1);
                    this.applyByteArray();
                }
                else {
                    $completeFun();
                    $progressFun(1);
                    $readDataFun(this.sceneData);
                }
                return;
            }
            this._completeFun = $completeFun;
            this._readDataFun = $readDataFun;
            this._progressFun = $progressFun;
            var config = SceneRes.sceneConfigData;
            //config[$url] = null;
            if (config && config[$url]) {
                ////console.log($url)
                this.loadZipMap($url, config[$url].len);
            }
            else {
                $url = Pan3d.Scene_data.fileRoot + getMapUrl($url);
                Pan3d.LoadManager.getInstance().load($url, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                    _this.loadComplete($byte);
                    //this.unZip($byte);
                }, null, $progressFun);
            }
        };
        SceneRes.prototype.loadZipMap = function (name, size) {
            var _this = this;
            var xhrList = new Array;
            var aryBufList = new Array;
            var comNum = 0;
            var proList = new Array;
            for (var i = 0; i < size; i++) {
                proList[i] = 0;
            }
            var comFun = function ($curxhr) {
                var arybuf = $curxhr.response;
                var idx = xhrList.indexOf($curxhr);
                aryBufList[idx] = arybuf;
                comNum++;
                if (comNum == xhrList.length) { //加载完成
                    var bufSize = 0;
                    for (var i = 0; i < aryBufList.length; i++) {
                        bufSize += aryBufList[i].byteLength;
                    }
                    var newBuf = new Uint8Array(bufSize);
                    var flag = 0;
                    for (var i = 0; i < aryBufList.length; i++) {
                        newBuf.set(new Uint8Array(aryBufList[i]), flag);
                        flag += aryBufList[i].byteLength;
                    }
                    _this.loadComplete(newBuf.buffer);
                    //this.unZip(newBuf.buffer);
                }
            };
            var proFun = function ($curxhr, num) {
                var idx = xhrList.indexOf($curxhr);
                proList[idx] = num;
                var allPre = 0;
                for (var i = 0; i < size; i++) {
                    allPre += proList[i];
                }
                allPre = allPre / size;
                ////console.log("--------地图加载@：",idx,num,allPre);
                _this._progressFun(allPre);
            };
            for (var i = 0; i < size; i++) {
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function (e) {
                    var curXhr = e.target;
                    if (curXhr.status == 200 && curXhr.readyState == 4) {
                        comFun(curXhr);
                    }
                };
                xhr.onprogress = function (e) {
                    var curXhr = e.target;
                    ////console.log("++++++++地图加载@：",e,e.loaded,e.total);
                    proFun(curXhr, e.loaded / e.total);
                };
                var url = Pan3d.Scene_data.fileRoot + getZipMapUrl(name) + i + ".txt";
                xhrList.push(xhr);
                xhr.open("GET", url, true);
                xhr.responseType = "arraybuffer";
                xhr.send();
            }
        };
        //private curTime:number = 0;
        SceneRes.prototype.isNeedReload = function () {
            var ary = this.sceneData.buildItem;
            for (var i = 0; i < ary.length; i++) {
                if (ary[i].type == Pan3d.BaseRes.PREFAB_TYPE && ary[i].lighturl) {
                    var url = Pan3d.Scene_data.fileRoot + ary[i].lighturl;
                    if (Pan3d.TextureManager.getInstance().hasTexture(url)) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
            }
            return ((Pan3d.ResCount.GCTime - this.idleTime) < 10);
        };
        SceneRes.prototype.loadComplete = function ($byte) {
            //alert(TimeUtil.getTimer()-this.curTime);
            this._byte = new Pan3d.Pan3dByteArray($byte);
            this._completeFun && this._completeFun();
            this.applyByteArray();
        };
        SceneRes.prototype.applyByteArray = function () {
            var _this = this;
            this._byte.position = 0;
            this.version = this._byte.readInt();
            this.read(function () { _this.readNext(); }); //img
        };
        // public readZipNext():void{
        //     this.read(() => { this.readNext() });//zipobj
        // }
        SceneRes.prototype.readNext = function () {
            this.read(); //obj
            this.read(); //material
            this.read(); //particle;
            this.readScene();
            this._readDataFun && this._readDataFun(this.sceneData);
        };
        SceneRes.prototype.readScene = function () {
            var types = this._byte.readInt();
            this.readAstat();
            if (this.version >= 28) {
                this.readTerrainIdInfoBitmapData(this._byte);
            }
            var size = this._byte.readInt();
            this.sceneData = JSON.parse(this._byte.readUTFBytes(size));
            this.sceneData.astar = this._astarDataMesh;
            this.sceneData.terrain = this._terrainDataItem;
        };
        SceneRes.prototype.readTerrainIdInfoBitmapData = function ($byte) {
            var $len = $byte.readInt();
            if ($len) {
                //var newByte: ByteArray = new ByteArray();
                //newByte.length = $len;
                //$byte.readBytes(newByte, 0, $len);
                var zipLen = $len;
                var aryBuf = $byte.buffer.slice($byte.position, $byte.position + zipLen);
                $byte.position += zipLen;
                var zipedBuf = unZip(aryBuf);
                var newByte = new Pan3d.Pan3dByteArray(zipedBuf);
                this._terrainDataItem = Pan3d.GroundDataMesh.meshAllgroundData(newByte);
            }
        };
        SceneRes.prototype.readAstat = function () {
            var hasAstat = this._byte.readBoolean();
            if (hasAstat) {
                this._astarDataMesh = new AstarDataMesh;
                this._astarDataMesh.aPos = new Pan3d.Vector3D;
                this._astarDataMesh.astarItem = new Array;
                this._astarDataMesh.heightItem = new Array;
                this._astarDataMesh.jumpItem = new Array;
                this._astarDataMesh.midu = this._byte.readFloat();
                this._astarDataMesh.aPos.x = this._byte.readFloat();
                this._astarDataMesh.aPos.y = this._byte.readFloat();
                this._astarDataMesh.aPos.z = this._byte.readFloat();
                var i;
                var j;
                var tw = this._byte.readInt();
                var th = this._byte.readInt();
                this._astarDataMesh.width = tw;
                this._astarDataMesh.height = th;
                if (this.version < 25) {
                    for (i = 0; i < th; i++) {
                        var tempAstar = new Array;
                        for (j = 0; j < tw; j++) {
                            tempAstar.push(this._byte.readFloat());
                        }
                        this._astarDataMesh.astarItem.push(tempAstar);
                    }
                    for (i = 0; i < th; i++) {
                        var tempHeightArr = new Array;
                        for (j = 0; j < tw; j++) {
                            tempHeightArr.push(this._byte.readFloat());
                        }
                        this._astarDataMesh.heightItem.push(tempHeightArr);
                    }
                }
                else {
                    var $heightScaleNum = this._byte.readFloat();
                    var $astrBase = this.readAstarFromByte(this._byte);
                    var $jumpBase = this.readAstarFromByte(this._byte);
                    var $astrBaseId = 0;
                    var $jumpBaseId = 0;
                    for (i = 0; i < th; i++) {
                        var tempAstar = new Array;
                        var tempJump = new Array;
                        for (j = 0; j < tw; j++) {
                            var astarNum = $astrBase[$astrBaseId++];
                            tempAstar.push(astarNum);
                            if (astarNum == 1) {
                                var ssss = $jumpBase[$jumpBaseId++];
                                tempJump.push(ssss);
                            }
                            else {
                                tempJump.push(0);
                            }
                        }
                        this._astarDataMesh.astarItem.push(tempAstar);
                        this._astarDataMesh.jumpItem.push(tempJump);
                    }
                    this._astarDataMesh.jumpItem;
                    for (i = 0; i < th; i++) {
                        var tempHeightArr = new Array;
                        for (j = 0; j < tw; j++) {
                            tempHeightArr.push(this._byte.readShort() / $heightScaleNum);
                        }
                        this._astarDataMesh.heightItem.push(tempHeightArr);
                    }
                }
            }
        };
        SceneRes.prototype.readAstarFromByte = function ($byte) {
            var $len = $byte.readUnsignedInt();
            var $intLen = Math.ceil($len / 32);
            var $astrBase = new Array;
            for (var i = 0; i < $intLen; i++) {
                var $num = $byte.readUnsignedInt();
                for (var j = 0; j < 32; j++) {
                    var $ast = $num & 1;
                    if ($astrBase.length < $len) {
                        $astrBase.push($ast);
                    }
                    $num >>= 1;
                }
            }
            return $astrBase;
        };
        return SceneRes;
    }(Pan3d.BaseRes));
    Pan3d.SceneRes = SceneRes;
    var AstarDataMesh = /** @class */ (function () {
        function AstarDataMesh() {
        }
        return AstarDataMesh;
    }());
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SceneRes.js.map
//# sourceMappingURL=SceneResLow.js.map
/**
* 事件分发器,由于本身事件数量肯定不会多
* 所以没有必要使用二分查找算法,直接遍历
* 事件ID与事件回调处于不同的数组，通过相同的数组下标关联
* @author linbc
*/
var Pan3d;
(function (Pan3d) {
    var NetEventDispatcher = /** @class */ (function () {
        function NetEventDispatcher(type) {
            if (type === void 0) { type = 0; }
            this._callback_index = 0;
            this._event_key_type = type;
            //如果是事件句柄为字符串，初始化不同的数组
            if (type == NetEventDispatcher.KEY_TYPE_STRING)
                this._event_id_str = new Array;
            else if (type == NetEventDispatcher.KEY_TYPE_INT)
                this._event_id_int = new Array;
            else if (type == NetEventDispatcher.KEY_TYPE_INT_MASK)
                this._event_id_int_mask = new Array;
            this._event_callback = new Array;
            this._event_index = new Array;
        }
        /**
         * 触发该事件的参数
         * @param param
         */
        NetEventDispatcher.prototype.DispatchIndex = function (param) {
            var i;
            if (this._event_key_type == NetEventDispatcher.KEY_TYPE_STRING) {
                for (i in this._event_index) {
                    this._event_callback[this._event_index[i]](param);
                }
            }
            else if (this._event_key_type == NetEventDispatcher.KEY_TYPE_INT) {
                for (i in this._event_index) {
                    this._event_callback[this._event_index[i]](param);
                }
            }
            else if (this._event_key_type == NetEventDispatcher.KEY_TYPE_INT_MASK) {
                for (i in this._event_index) {
                    this._event_callback[this._event_index[i]](param);
                }
            }
        };
        NetEventDispatcher.prototype.DispatchString = function (key, param) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)
                throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING");
            //先清空
            this._event_index.length = 0;
            var len = this._event_callback.length;
            for (var i = 0; i < len; i++) {
                //插入最开头部分,便于等下循环删除
                if (key == this._event_id_str[i])
                    this._event_index.unshift(i);
            }
            //大部分是不触发的
            if (this._event_index.length) {
                this.DispatchIndex(param);
            }
        };
        NetEventDispatcher.prototype.DispatchInt = function (key, param) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)
                throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_INT");
            //先触发			
            this._event_index.length = 0;
            var len = this._event_callback.length;
            for (var i = 0; i < len; i++) {
                //插入最开头部分,便于等下循环删除
                if (key == this._event_id_int[i])
                    this._event_index.unshift(i);
            }
            //大部分是不触发的
            if (this._event_index.length)
                this.DispatchIndex(param);
        };
        NetEventDispatcher.prototype.DispatchIntMask = function (key, param) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK)
                throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK");
            this._event_index.length = 0;
            var len = this._event_callback.length;
            for (var i = 0; i < len; i++) {
                if (this._event_id_int_mask[i].test(key))
                    this._event_index.unshift(i);
            }
            //大部分是不触发的
            if (this._event_index.length)
                this.DispatchIndex(param);
        };
        /**
         * 根据规则触发整数回调
         *
         * @param param
         * @param pred 回调格式 pred(index,binlog)->bool
         */
        NetEventDispatcher.prototype.Dispatch = function (param, pred) {
            this._event_index.length = 0;
            var len = this._event_callback.length;
            for (var i = 0; i < len; i++) {
                //传入事件ID/事件参数，由函数指针
                if (pred(this._event_id_int[i], param))
                    this._event_index.unshift(i);
            }
            //大部分是不触发的
            if (this._event_index.length)
                this.DispatchIndex(param);
        };
        /**
         * 添加回调监听,监听ID手工指定
         * @param key	事件ID
         * @param f		回调函数闭包,可以支持一个参数(Object)
         */
        NetEventDispatcher.prototype.AddListenInt = function (key, f) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)
                throw new Error("AddListenInt but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)");
            for (var i = 0; i < this._event_id_int.length; i++) {
                if (this._event_id_int[i] == key && this._event_callback[i] == f) {
                    return;
                }
            }
            this._event_id_int.push(key);
            this._event_callback.push(f);
        };
        NetEventDispatcher.prototype.AddListenString = function (key, f) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)
                throw new Error("AddListenString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)");
            for (var i = 0; i < this._event_id_str.length; i++) {
                if (this._event_id_str[i] == key && this._event_callback[i] == f) {
                    return;
                }
            }
            this._event_id_str.push(key);
            this._event_callback.push(f);
        };
        NetEventDispatcher.prototype.AddListenIntMask = function (key, f) {
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK)
                throw new Error("AddListenString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK)");
            for (var i = 0; i < this._event_id_int_mask.length; i++) {
                if (this._event_id_int_mask[i].equals(key) && this._event_callback[i] == f) {
                    return;
                }
            }
            this._event_id_int_mask.push(key.clone());
            this._event_callback.push(f);
        };
        /**
         * 移除整型类的回调监听
         * @param key 	事件ID
         * @param f		回调函数闭包,可以支持一个参数(Object)，如果f为空，则移除所有
         */
        NetEventDispatcher.prototype.removeListenerInt = function (key, f) {
            if (f === void 0) { f = null; }
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)
                throw new Error("removeListenerInt but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)");
            for (var i = 0; i < this._event_id_int.length;) {
                if (this._event_id_int[i] == key && (f == null || this._event_callback[i] == f)) {
                    this._event_id_int.splice(i, 1);
                    this._event_callback.splice(i, 1);
                }
                else
                    i++;
            }
        };
        /**
         * 移除字符串类型的回调监听
         * @param key 	事件ID
         * @param f 回调函数闭包,可以支持一个参数(Object)，如果f为空，则移除所有
         */
        NetEventDispatcher.prototype.removeListenerString = function (key, f) {
            if (f === void 0) { f = null; }
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)
                throw new Error("removeListenerString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)");
            for (var i = 0; i < this._event_id_str.length;) {
                if (this._event_id_str[i] == key && (f == null || this._event_callback[i] == f)) {
                    this._event_id_str.splice(i, 1);
                    this._event_callback.splice(i, 1);
                }
                else
                    i++;
            }
        };
        /**
         * 移除多下标监听
         * @param key
         * @param f
         */
        NetEventDispatcher.prototype.removeListenerUpdateMask = function (key, f) {
            if (f === void 0) { f = null; }
            if (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK)
                throw new Error("removeListenerUpdateMask but ()");
            for (var i = 0; i < this._event_id_int_mask.length;) {
                if (this._event_id_int_mask[i].equals(key) && (f == null || this._event_callback[i] == f)) {
                    this._event_id_int_mask.splice(i, 1);
                    this._event_callback.splice(i, 1);
                }
                else
                    i++;
            }
        };
        /**
         *  添加回调监听,事件ID自增后并返回
         * @param f	事件支持一个参数,Object
         */
        NetEventDispatcher.prototype.AddCallback = function (f) {
            if (this._event_key_type == NetEventDispatcher.KEY_TYPE_STRING)
                throw new Error("AddCallback but (this._event_key_type == NetEventDispatcher.KEY_TYPE_STRING)");
            var new_ev = this._callback_index + 1;
            do {
                new_ev = this._callback_index + 1;
                //如果回调编号已经存在或者等于0重新来
                for (var i in this._event_id_int) {
                    if (new_ev == 0 || new_ev == Number(i))
                        continue;
                }
                //回调跳号赋值
                this._callback_index = new_ev;
            } while (false);
            this.AddListenInt(new_ev, f);
            return new_ev;
        };
        /**
         * 清空所有已经注册的事件监听
         */
        NetEventDispatcher.prototype.Clear = function () {
            if (this._event_callback)
                this._event_callback.length = 0;
            if (this._event_id_int)
                this._event_id_int.length = 0;
            if (this._event_id_str)
                this._event_id_str.length = 0;
            if (this._event_index)
                this._event_index.length = 0;
            if (this._event_id_int_mask)
                this._event_id_int_mask.length = 0;
        };
        //事件分发器,事件句柄为整形
        NetEventDispatcher.KEY_TYPE_INT = 0;
        //事件分发器的事件句柄为字符串
        NetEventDispatcher.KEY_TYPE_STRING = 1;
        //事件分发类型使用的是
        NetEventDispatcher.KEY_TYPE_INT_MASK = 2;
        return NetEventDispatcher;
    }());
    Pan3d.NetEventDispatcher = NetEventDispatcher;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=NetEventDispatcher.js.map
var Pan3d;
(function (Pan3d) {
    var UpdateMask = /** @class */ (function () {
        function UpdateMask() {
            this._bytes = new Pan3d.Pan3dByteArray();
            this._bytes.endian = Pan3d.Endian.LITTLE_ENDIAN;
        }
        Object.defineProperty(UpdateMask.prototype, "baseByteArray", {
            get: function () {
                return this._bytes;
            },
            enumerable: true,
            configurable: true
        });
        UpdateMask.prototype.Clear = function () {
            this._bytes.clear();
        };
        /**
        * 获取掩码数据列表，是否发生更新
        * @param pos 索引位置
        * @param len 长度
        * @return
        */
        UpdateMask.prototype.GetBits = function (pos, len) {
            if (len === void 0) { len = 1; }
            for (var i = 0; i < len; i++) {
                if (this.GetBit(pos + i))
                    return true;
            }
            return false;
        };
        UpdateMask.prototype.GetBit = function (i) {
            if ((i >> 3) < this._bytes.length)
                return (this._bytes.getByte(i >> 3) & (1 << (i & 0x7))) != 0;
            return false;
        };
        UpdateMask.prototype.SetBit = function (i) {
            if (i >> 3 >= this._bytes.length)
                this._bytes.length = (i >> 3) + 1;
            //this._bytes[i >> 3] |= (1 << (i & 0x7));
            this._bytes.setByte(i >> 3, this._bytes.getByte(i >> 3) | (1 << (i & 0x7)));
        };
        UpdateMask.prototype.WriteTo = function (bytes) {
            this._bytes.position = 0;
            bytes.writeShort(this._bytes.length);
            if (this._bytes.length)
                bytes.writeBytes(this._bytes);
            return true;
        };
        UpdateMask.prototype.ReadFrom = function (bytes) {
            //要先清空
            this._bytes.clear();
            //先读取uint8的字节数量
            var count = bytes.readUnsignedShort();
            this._bytes.length = count;
            if (count) {
                bytes.readBytes(this._bytes, 0, count);
            }
            //var str: string = "";
            //for (var i: number = 0; i < count; i++){
            //    str += this._bytes.getByte(i) + ",";
            //}
            ////console.log("掩码数据：" + str);
            return true;
        };
        UpdateMask.prototype.GetCount = function () {
            return this._bytes.length << 3;
        };
        UpdateMask.prototype.SetCount = function (val) {
            this._bytes.length = (val + 7) >> 3;
        };
        UpdateMask.prototype.empty = function () {
            for (var i = 0; i < this._bytes.length; i++)
                if (this._bytes.getByte(i) != 0)
                    return false;
            return true;
        };
        /**
            * updateMask的或者掩码操作
            * @param other
            */
        UpdateMask.prototype.or = function (other) {
            //取丙个掩码字节数组的最大值
            //如果本身长度不够就拉成大的
            var len = other._bytes.length;
            if (this._bytes.length < len)
                this._bytes.length = len;
            for (var i = 0; i < len; i++) {
                this._bytes[i] |= other._bytes[i];
            }
        };
        /**
            * 两个updatemask并且成功
            * @param other
            * @return
            */
        UpdateMask.prototype.test = function (other) {
            var len = this._bytes.length > other._bytes.length ? other._bytes.length : this._bytes.length;
            for (var i = 0; i < len; i++) {
                if (this._bytes[i] & other._bytes[i])
                    return true;
            }
            return false;
        };
        /**
            * 收缩,把byteArray的长度调整到最合理的位置
            */
        UpdateMask.prototype.condense = function () {
            var len = this._bytes.length;
            while (len > 0) {
                len--;
                if (this._bytes[len] == 0)
                    this._bytes.length--;
                else
                    break;
            }
        };
        /**
            * 判断两个掩码是否相等
            * @param other
            * @return
            */
        UpdateMask.prototype.equals = function (other) {
            this.condense();
            other.condense();
            if (this._bytes.length != other._bytes.length)
                return false;
            for (var i = 0; i < this._bytes.length; i++) {
                ////console.log(this._bytes[i],":",other.this._bytes[i]);
                if (this._bytes[i] != other._bytes[i])
                    return false;
            }
            return true;
        };
        /**
            * 掩码克隆函数
            * @return
            */
        UpdateMask.prototype.clone = function () {
            var o = new UpdateMask;
            for (var i = 0; i < this._bytes.length; i++)
                o._bytes[i] = this._bytes[i];
            return o;
        };
        return UpdateMask;
    }());
    Pan3d.UpdateMask = UpdateMask;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=UpdateMask.js.map
var Pan3d;
(function (Pan3d) {
    var StringIndexer = /** @class */ (function () {
        function StringIndexer() {
            this._indexerExp = new Array();
            this._objs = new Array();
            this._evFilter = new Array();
        }
        /**
         * 根据正则表达式返回加入的索引，并返回索引编号 如: create("^i\d+") 代表所有的物品
         * @param exp
         * @return
         */
        StringIndexer.prototype.createIndex = function (exp) {
            var index = this.getIndex(exp);
            if (index == -1) {
                index = this._indexerExp.length;
                this._indexerExp[index] = new RegExp(exp, "g");
                this._objs[index] = new Array();
                this._evFilter[index] = null;
            }
            return index;
        };
        /**
         * 根据正则表达式返回索引
         * @param exp 正则表达式
         * @return 返回索引,如果返回-1就是没找到
         */
        StringIndexer.prototype.getIndex = function (exp) {
            var idx = -1;
            for (var key in this._indexerExp) {
                idx++;
                var reg = this._indexerExp[key];
                if (reg.source == exp)
                    return idx;
            }
            return -1;
        };
        /**
         * 释放正则表达式的索引的内容
         * 暂时不支持运行过程中增加和删除索引
         * @param exp
         */
        StringIndexer.prototype.releaseIndex = function (exp) {
            var index = this.getIndex(exp);
            if (index != -1) {
                this._indexerExp.splice(index, 1);
                this._objs.splice(index, 1);
                this._evFilter.splice(index, 1);
            }
        };
        /**
         * 根据传入的字符串，验证符合哪个索引
         * @param obj
         * @return
         */
        StringIndexer.prototype.test = function (k) {
            for (var i = 0; i < this._indexerExp.length; i++) {
                this._indexerExp[i].lastIndex = 0;
                if (this._indexerExp[i].test(k))
                    return i;
            }
            return -1;
        };
        /**
         * 插入对象，遍历所有的正则表达式，如果符合则会插入
         * @param obj
         */
        StringIndexer.prototype.insert = function (obj) {
            var i = this.test(obj.guid);
            if (i >= 0 && this._objs[i] && this._objs[i].indexOf(obj) == -1) {
                //对象符合索引，插入到相应的数组中
                this._objs[i][this._objs[i].length] = obj;
            }
        };
        /**
         * 根据对象的GUID移除所在的索引
         * @param guid
         */
        StringIndexer.prototype.remove = function (guid) {
            var i = this.test(guid);
            if (i == -1)
                return;
            for (var j = 0; j < this._objs[i].length; j++) {
                if (this._objs[i][j].guid == guid) {
                    this._objs[i].splice(j, 1);
                    return;
                }
            }
        };
        /**
         * 根据正则表达式查询对象集合
         * @param exp
         * @return
         */
        StringIndexer.prototype.query = function (exp) {
            var index = this.getIndex(exp);
            if (index == -1)
                return null;
            return this._objs[index];
        };
        /**
         * 根据索引编号返回所有的对象集合
         * @param indexTyp
         * @return
         */
        StringIndexer.prototype.get = function (indexTyp) {
            if (indexTyp < 0 || indexTyp >= this._objs.length)
                return null;
            return this._objs[indexTyp];
        };
        /**
         * 传入对象去匹索引器
         * @param obj
         * @return
         */
        StringIndexer.prototype.matchObject = function (obj) {
            if (!obj)
                return null;
            var i = this.test(obj.guid);
            if (i >= 0) {
                return this._evFilter[i];
            }
            return null;
        };
        /**
         * 根据对象筛选的集合触发相应的事件
         * @param exp
         * @param f
         */
        StringIndexer.prototype.filter = function (exp, f) {
            var indexTyp = this.getIndex(exp);
            if (indexTyp < 0 || indexTyp >= this._objs.length)
                throw new Error("indexTyp < 0 || indexTyp >= this._objs.length");
            if (indexTyp >= this._evFilter.length)
                throw new Error("indexTyp >= this._evFilter.length");
            this._evFilter[indexTyp] = f;
        };
        StringIndexer.prototype.Clear = function () {
            if (this._indexerExp) {
                this._indexerExp.length = 0;
                this._indexerExp = null;
            }
            if (this._objs) {
                this._objs.length = 0;
                this._objs = null;
            }
            if (this._evFilter) {
                while (this._evFilter.length) {
                    var syncEventFilter = this._evFilter.shift();
                    if (syncEventFilter)
                        syncEventFilter.Clear();
                }
            }
        };
        return StringIndexer;
    }());
    Pan3d.StringIndexer = StringIndexer;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=StringIndexer.js.map
var Pan3d;
(function (Pan3d) {
    var SyncEvent = /** @class */ (function () {
        function SyncEvent() {
        }
        SyncEvent.init = function () {
            SyncEvent.tmpValueBytes = new Pan3d.Pan3dByteArray;
            SyncEvent.tmpValueBytes.endian = Pan3d.Endian.LITTLE_ENDIAN;
        };
        //为了防止对象更新标识与下标更新标识冲突,所以让对象更新标识占用第2位
        SyncEvent.OBJ_OPT_NEW = 0x01; //新对象
        SyncEvent.OBJ_OPT_DELETE = 0x02; //删除对象
        SyncEvent.OBJ_OPT_UPDATE = 0x04; //对象更新
        SyncEvent.OBJ_OPT_BINLOG = 0x08; //BINLOG方式
        SyncEvent.OBJ_OPT_U_GUID = 0x10; //打包方式ID为整形
        SyncEvent.OPT_SET = 0x01;
        SyncEvent.OPT_UNSET = 0x02;
        SyncEvent.OPT_ADD = 0x04;
        SyncEvent.OPT_SUB = 0x08;
        SyncEvent.TYPE_UINT32 = 0;
        SyncEvent.TYPE_UINT16 = 1;
        SyncEvent.TYPE_UINT8 = 2;
        SyncEvent.TYPE_BIT = 3;
        SyncEvent.TYPE_UINT64 = 4;
        SyncEvent.TYPE_INT32 = 5;
        SyncEvent.TYPE_STRING = 6;
        SyncEvent.TYPE_INT16 = 7;
        //		public static TYPE_INT8 :number = 8;
        SyncEvent.TYPE_FLOAT = 9;
        SyncEvent.TYPE_DOUBLE = 10;
        SyncEvent.ATOMIC_OPT_RESULT_NO = 0; //不是原子操作
        SyncEvent.ATOMIC_OPT_RESULT_TRY = 1; //尝试原子操作
        SyncEvent.ATOMIC_OPT_RESULT_OK = 2; //原子操作成功
        SyncEvent.ATOMIC_OPT_RESULT_FAILED = -1; //原子操作失败
        return SyncEvent;
    }());
    Pan3d.SyncEvent = SyncEvent;
    SyncEvent.init();
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SyncEvent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BinLogStru = /** @class */ (function (_super) {
        __extends(BinLogStru, _super);
        function BinLogStru() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            //public _value_u32:number;
            _this._value_u32_buffer = new DataView(new ArrayBuffer(4));
            //public _old_value_u32:number;
            _this._old_value_u32_buffer = new DataView(new ArrayBuffer(4));
            return _this;
        }
        /*获得一个可以使用的对象*/
        BinLogStru.malloc = function () {
            if (BinLogStru._pool.length == 0) {
                return new BinLogStru();
            }
            return BinLogStru._pool.pop();
        };
        BinLogStru.free = function (ptr) {
            ptr.Clear();
            BinLogStru._pool[BinLogStru._pool.length] = ptr;
        };
        BinLogStru.prototype.BinLogStru = function () {
            this.Clear();
        };
        Object.defineProperty(BinLogStru.prototype, "opt", {
            get: function () {
                return this._opt;
            },
            set: function (o) {
                this._opt = o;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "index", {
            get: function () {
                return this._index;
            },
            set: function (i) {
                this._index = i;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "offset", {
            get: function () {
                //return SyncEvent.GetByteValue(this._value_u32, 0);
                return this._value_u32_buffer.getUint8(0);
            },
            set: function (val) {
                //this._value_u32 = SyncEvent.SetByteValue(this._value_u32, val, 0);
                this._value_u32_buffer.setUint8(0, val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "typ", {
            get: function () {
                return this._typ;
            },
            set: function (t) {
                this._typ = t;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "atomic_opt", {
            get: function () {
                return this._atomic_opt;
            },
            set: function (val) {
                this._atomic_opt = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "callback_idx", {
            get: function () {
                return this._callback_index;
            },
            set: function (val) {
                this._callback_index = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "uint32", {
            get: function () {
                //return this._value_u32;
                return this._value_u32_buffer.getUint32(0, true);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_UINT32;
                //this._value_u32 = val;
                this._value_u32_buffer.setUint32(0, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "int32", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_INT32)
                    throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");
                //return (this._value_u32 - 0xFFFFFFFF) - 1;	
                return this._value_u32_buffer.getInt32(0, true);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_INT32;
                //this._value_u32 = (0xFFFFFFFF+val)+1;
                this._value_u32_buffer.setInt32(0, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "bit", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_BIT)
                    throw new Error("get bit but _typ != SyncEvent.TYPE_BIT");
                //return this._value_u32;
                return this._value_u32_buffer.getUint32(0, true);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_BIT;
                //this._value_u32 = val;
                this._value_u32_buffer.setUint32(0, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "old_int32", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_INT32)
                    throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");
                //return (this._old_value_u32 - 0xFFFFFFFF) - 1;	
                return this._old_value_u32_buffer.getInt32(0, true);
            },
            set: function (val) {
                if (this._typ != Pan3d.SyncEvent.TYPE_INT32)
                    throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");
                //this._old_value_u32 = (0xFFFFFFFF+val)+1;
                this._old_value_u32_buffer.setInt32(0, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "uint16", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_UINT16)
                    throw new Error("get uint16 but _typ != SyncEvent.TYPE_UINT16!");
                //return SyncEvent.GetUInt16Value(this._value_u32,1);
                return this._value_u32_buffer.getUint16(2, true);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_UINT16;
                //this._value_u32 = SyncEvent.SetUInt16Value(this._value_u32,val,1);
                this._value_u32_buffer.setUint16(2, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "int16", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_INT16)
                    throw new Error("get int16 but _typ != SyncEvent.TYPE_INT16!");
                //return SyncEvent.GetInt16Value(this._value_u32,1);	
                return this._value_u32_buffer.getInt16(2, true);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_INT16;
                //this._value_u32 = SyncEvent.SetInt16Value(this._value_u32,val,1);
                this._value_u32_buffer.setInt16(2, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "byte", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_UINT8)
                    throw new Error("get uint8 but _typ != SyncEvent.TYPE_UINT8!");
                //return SyncEvent.GetByteValue(this._value_u32,2);
                return this._value_u32_buffer.getInt8(2);
            },
            set: function (val) {
                this._typ = Pan3d.SyncEvent.TYPE_UINT8;
                //this._value_u32 = SyncEvent.SetByteValue(this._value_u32, val, 2);	
                this._value_u32_buffer.setInt8(2, val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "double", {
            get: function () {
                return this._value_dbe;
            },
            set: function (val) {
                this._value_dbe = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "float", {
            get: function () {
                //return SyncEvent.GetFloatValue(this._value_u32);	
                return this._value_u32_buffer.getFloat32(0, true);
            },
            set: function (val) {
                //this._value_u32 = SyncEvent.SetFloatValue(val);
                this._value_u32_buffer.setFloat32(0, val, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "str", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_STRING)
                    throw new Error("get str but _typ != SyncEvent.TYPE_STRING!");
                return this._value_str;
            },
            set: function (v) {
                this._typ = Pan3d.SyncEvent.TYPE_STRING;
                this._value_str = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "old_str", {
            get: function () {
                if (this._typ != Pan3d.SyncEvent.TYPE_STRING)
                    throw new Error("get old_str but _typ != SyncEvent.TYPE_STRING!");
                return this._old_value_str;
            },
            set: function (v) {
                if (this._typ != Pan3d.SyncEvent.TYPE_STRING)
                    throw new Error("set old_str but _typ != SyncEvent.TYPE_STRING!");
                this._old_value_str = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "value", {
            get: function () {
                //return this._value_u32;
                return this._value_u32_buffer.getUint32(0, true);
            },
            set: function (v) {
                //this._value_u32 = v;
                this._value_u32_buffer.setUint32(0, v, true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinLogStru.prototype, "old_value", {
            get: function () {
                //return this._old_value_u32;
                return this._old_value_u32_buffer.getUint32(0, true);
            },
            set: function (v) {
                //this._old_value_u32 = v;
                this._old_value_u32_buffer.setUint32(0, v, true);
            },
            enumerable: true,
            configurable: true
        });
        BinLogStru.prototype.Clear = function () {
            this._opt = 0;
            this._typ = 0;
            this._index = 0;
            this._atomic_opt = Pan3d.SyncEvent.ATOMIC_OPT_RESULT_NO;
            //this._value_u32 = 0;
            this._value_u32_buffer.setUint32(0, 0, true);
            this._value_dbe = 0;
            this._value_str = "";
            this._callback_index = 0;
            //this._old_value_u32 = 0;
            this._old_value_u32_buffer.setUint32(0, 0, true);
            this._old_value_dbe = 0;
            this._old_value_str = "";
        };
        BinLogStru.prototype.ReadFrom = function (bytes) {
            this._opt = bytes.readUnsignedByte();
            this._typ = bytes.readUnsignedByte();
            this._index = bytes.readShort();
            this._atomic_opt = bytes.readByte();
            //除了字符串，其他的都通过无符号整形进行转换
            if (this._typ == Pan3d.SyncEvent.TYPE_STRING) {
                this._value_str = bytes.readUTF();
            }
            else if (this._typ == Pan3d.SyncEvent.TYPE_DOUBLE) {
                this._value_dbe = bytes.readDouble();
            }
            else {
                //this._value_u32 = bytes.readUnsignedInt();
                this.value = bytes.readUnsignedInt();
            }
            if (this._atomic_opt) {
                this._callback_index = bytes.readUnsignedInt();
                if (this._typ == Pan3d.SyncEvent.TYPE_STRING) {
                    this._old_value_str = bytes.readUTF();
                }
                else if (this._typ == Pan3d.SyncEvent.TYPE_DOUBLE) {
                    this._old_value_dbe = bytes.readDouble();
                }
                else {
                    //this._old_value_u32 = bytes.readUnsignedInt();
                    this.old_value = bytes.readUnsignedInt();
                }
            }
            return true;
        };
        BinLogStru.prototype.WriteTo = function (bytes) {
            bytes.writeByte(this._opt);
            bytes.writeByte(this._typ);
            bytes.writeShort(this._index);
            bytes.writeByte(this._atomic_opt); //输出非原子操作
            //如果是字符串
            if (this._typ == Pan3d.SyncEvent.TYPE_STRING)
                bytes.writeUTF(this._value_str ? this._value_str : "");
            else if (this._typ == Pan3d.SyncEvent.TYPE_DOUBLE)
                bytes.writeDouble(this._value_dbe);
            else
                bytes.writeUnsignedInt(this.value);
            //bytes.writeUnsignedInt(this._value_u32);
            //如果是原子操作需要加一些成员
            if (this._atomic_opt) {
                bytes.writeUnsignedInt(this._callback_index);
                if (this._typ == Pan3d.SyncEvent.TYPE_STRING)
                    bytes.writeUTF(this._old_value_str ? this._old_value_str : "");
                else if (this._typ == Pan3d.SyncEvent.TYPE_DOUBLE)
                    bytes.writeDouble(this._old_value_dbe);
                else
                    bytes.writeUnsignedInt(this.old_value);
                //bytes.writeUnsignedInt(this._old_value_u32);
            }
        };
        BinLogStru.prototype.clone = function () {
            var binlog = BinLogStru.malloc();
            binlog._opt = this._opt;
            binlog._typ = this._typ;
            binlog._index = this._index;
            binlog._atomic_opt = this._atomic_opt;
            //binlog._value_u32 = this._value_u32;
            binlog.value = this.value;
            binlog._value_dbe = this._value_dbe;
            binlog._value_str = this._value_str;
            binlog._callback_index = this._callback_index;
            //binlog._old_value_u32 = this._old_value_u32;
            binlog.old_value = this.old_value;
            binlog._old_value_dbe = this._old_value_dbe;
            binlog._old_value_str = this._old_value_str;
            return binlog;
        };
        BinLogStru._pool = new Array;
        return BinLogStru;
    }(Pan3d.SyncEvent));
    Pan3d.BinLogStru = BinLogStru;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BinLogStru.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SyncEventRecorder = /** @class */ (function (_super) {
        __extends(SyncEventRecorder, _super);
        function SyncEventRecorder() {
            var _this = _super.call(this) || this;
            /**
             * 用于监听下标变化
             */
            _this._events_value = new Pan3d.NetEventDispatcher();
            /**
             * 用于监听字符下标变化
             */
            _this._events_str_values = new Pan3d.NetEventDispatcher();
            /**
             * 用于触发多下标单回调的情况
             */
            _this._events_mask = new Pan3d.NetEventDispatcher(Pan3d.NetEventDispatcher.KEY_TYPE_INT_MASK);
            /**
             * 用于事件回调
             */
            _this._events_callback = new Pan3d.NetEventDispatcher();
            /*整形下标长度*/
            _this._uint32_values_len = 0;
            /*字符串下标长度*/
            _this._str_values_len = 0;
            //字符串下标值
            _this._str_values = new Array;
            //对象的唯一ID
            _this._guid = "";
            //临时变量,每次读取需要使用的临时变量
            _this._tmpBinlog = new Pan3d.BinLogStru();
            _this._afterUpdateIntObj = new Object;
            _this._afterUpdateStrObj = new Object;
            _this._uint32_values_buffer = new DataView(new ArrayBuffer(0));
            return _this;
        }
        Object.defineProperty(SyncEventRecorder.prototype, "guid", {
            get: function () {
                return this._guid;
            },
            set: function (s) {
                this._guid = s;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 重置整个对象,下标清零
         */
        SyncEventRecorder.prototype.Reset = function () {
            this._events_value.Clear();
            this._events_str_values.Clear();
            this._events_callback.Clear();
            this.clearValues();
        };
        /*清理下标*/
        SyncEventRecorder.prototype.clearValues = function () {
            this._uint32_values_len = 0;
            //this._uint32_values.length = this._uint32_values_len;	
            this._uint32_values_buffer = new DataView(new ArrayBuffer(0));
            this._str_values_len = 0;
            this._str_values.length = this._str_values_len;
        };
        SyncEventRecorder.prototype.checkIntSize = function (index) {
            var flag = false;
            while (index >= this._uint32_values_len) {
                //以8的倍数扩张
                this._uint32_values_len += 8;
                flag = true;
                //this._uint32_values.length = this._uint32_values_len;
            }
            if (flag) {
                //this._uint32_values_buffer = new DataView(new ArrayBuffer(this._uint32_values_len << 2));
                var tmp = new Uint8Array(new ArrayBuffer(this._uint32_values_len << 2));
                tmp.set(new Uint8Array(this._uint32_values_buffer.buffer, 0, this._uint32_values_buffer.buffer.byteLength));
                this._uint32_values_buffer = new DataView(tmp.buffer);
            }
        };
        SyncEventRecorder.prototype.checkStrSize = function (index) {
            while (index >= this._str_values_len) {
                //以8的倍数扩张
                this._str_values_len += 8;
                this._str_values.length = this._str_values_len;
            }
        };
        SyncEventRecorder.prototype.OnEventSyncBinLog = function (binlog) {
            if (this._after_update) {
                if (binlog.typ == Pan3d.SyncEvent.TYPE_STRING) {
                    //SyncEventRecorder.tmpStrMask.SetBit(binlog.index);
                    this._afterUpdateStrObj[binlog.index] = true;
                }
                else {
                    //SyncEventRecorder.tmpIntMask.SetBit(binlog.index);
                    this._afterUpdateIntObj[binlog.index] = true;
                }
            }
            //如果是从模式的原子操作则触发回调
            if (binlog.atomic_opt) {
                this._events_callback.DispatchInt(binlog.callback_idx, binlog);
            }
            else if (binlog.typ == Pan3d.SyncEvent.TYPE_STRING) {
                this._events_str_values.DispatchInt(binlog.index, binlog);
            }
            else {
                this._events_value.DispatchInt(binlog.index, binlog);
            }
        };
        /**
         * 监听对象在下标变化
         * @param index 下标值
         * @param callback 回调格式function(binlog:BinLogStru):void
         */
        SyncEventRecorder.prototype.AddListen = function (index, callback) {
            this._events_value.AddListenInt(index, callback);
        };
        /**
         *  监听对象在下标变化
         * @param baseIndex 下标基础
         * @param callback 回调指针
         * @param arg 下标基础之后的列表
         */
        SyncEventRecorder.prototype.AddListens = function (baseIndex, callback) {
            if (callback === void 0) { callback = null; }
            var arg = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                arg[_i - 2] = arguments[_i];
            }
            SyncEventRecorder.addListens_mask.Clear();
            for (var i = 0; i < arg.length; i++)
                SyncEventRecorder.addListens_mask.SetBit(baseIndex + arg[i]);
            this._events_mask.AddListenIntMask(SyncEventRecorder.addListens_mask, callback);
        };
        /**
         * 移除监听对象在下标变化
         * @param index 下标值
         * @param callback 回调格式function(binlog:BinLogStru):void
         */
        SyncEventRecorder.prototype.removeListene = function (index, callback) {
            if (callback === void 0) { callback = null; }
            this._events_value.removeListenerInt(index, callback);
        };
        /**
         *  移除监听对象在下标变化，列表集合
         * @param baseIndex 下标基础
         * @param callback 回调指针
         * @param arg 下标基础之后的列表
         */
        SyncEventRecorder.prototype.removeListenes = function (baseIndex, callback) {
            if (callback === void 0) { callback = null; }
            var arg = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                arg[_i - 2] = arguments[_i];
            }
            SyncEventRecorder.addListens_mask.Clear();
            for (var i = 0; i < arg.length; i++)
                SyncEventRecorder.addListens_mask.SetBit(baseIndex + arg[i]);
            this._events_mask.removeListenerUpdateMask(SyncEventRecorder.addListens_mask, callback);
        };
        /**
         * 监听对象在下标变化
         * @param index 下标值
         * @param callback 回调格式function(binlog:BinLogStru):void
         */
        SyncEventRecorder.prototype.AddListenString = function (index, callback) {
            this._events_str_values.AddListenInt(index, callback);
        };
        /**
         * 移除监听对象在下标变化
         * @param index 下标值
         * @param callback 回调格式function(binlog:BinLogStru):void
         */
        SyncEventRecorder.prototype.removeListeneString = function (index, callback) {
            if (callback === void 0) { callback = null; }
            this._events_str_values.removeListenerInt(index, callback);
        };
        SyncEventRecorder.prototype.GetDouble = function (index) {
            if (index + 1 < this._uint32_values_len)
                return this._uint32_values_buffer.getFloat64(index << 2, true);
            //return SyncEvent.GetDoubleValue(this._uint32_values,index);
            return 0;
        };
        SyncEventRecorder.prototype.GetUInt32 = function (index) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getUint32(index << 2, true);
            //return this._uint32_values[index];
            return 0;
        };
        SyncEventRecorder.prototype.GetInt32 = function (index) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getInt32(index << 2, true);
            //return (this._uint32_values[index] - 0xFFFFFFFF) - 1;
            return 0;
        };
        SyncEventRecorder.prototype.GetUInt16 = function (index, offset) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getUint16((index << 2) + (offset << 1), true);
            //return SyncEvent.GetUInt16Value(this._uint32_values[index], offset);
            return 0;
        };
        SyncEventRecorder.prototype.GetInt16 = function (index, offset) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getInt16((index << 2) + (offset << 1), true);
            //return SyncEvent.GetInt16Value(this._uint32_values[index],offset);
            return 0;
        };
        SyncEventRecorder.prototype.GetFloat = function (index) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getFloat32(index << 2, true);
            //return SyncEvent.GetFloatValue(this._uint32_values[index]);
            return 0;
        };
        SyncEventRecorder.prototype.GetByte = function (index, offset) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getInt8((index << 2) + offset);
            //return SyncEvent.GetByteValue(this._uint32_values[index], offset);
            return 0;
        };
        SyncEventRecorder.prototype.GetUInt8 = function (index, offset) {
            if (index < this._uint32_values_len)
                return this._uint32_values_buffer.getUint8((index << 2) + offset);
            //return SyncEvent.GetByteValue(this._uint32_values[index], offset);
            return 0;
        };
        SyncEventRecorder.prototype.GetBit = function (index, offset) {
            index = index + (offset >> 5);
            if (index < this._uint32_values_len)
                return (Boolean)((this._uint32_values_buffer.getUint32(index << 2, true) >> (offset & 31)) & 1);
            //return (Boolean)(this._uint32_values[index] >> (offset&31) & 1);
            return false;
        };
        SyncEventRecorder.prototype.SetBit = function (index, offset, flag) {
            var old = this._uint32_values_buffer.getUint32(index << 2, true);
            old = old & (0xFFFFFFFF ^ (0x1 << offset)) | ((flag ? 1 : 0) << offset);
            this._uint32_values_buffer.setUint32(index << 2, old, true);
        };
        SyncEventRecorder.prototype.GetStr = function (index) {
            if (index < this._str_values_len) {
                if (this._str_values[index]) {
                    return this._str_values[index];
                }
                else {
                    return "";
                }
            }
            return "";
        };
        /////////////////////////////////////////////////////////////////////
        //以下为下标操作相关		
        /////////////////////////////////////////////////////////////////////
        SyncEventRecorder.prototype.SetDouble = function (index, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index + 1);
            //SyncEvent.SetDoubleValue(this._uint32_values, index, value);
            this._uint32_values_buffer.setFloat64(index << 2, value, true);
        };
        SyncEventRecorder.prototype.AddDouble = function (index, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index + 1);
            //var d: number = SyncEvent.GetDoubleValue(this._uint32_values, index);
            //var d: number = this.GetDouble(index);
            //d += value;
            //SyncEvent.SetDoubleValue(this._uint32_values, index, d);
            this.SetDouble(index, this.GetDouble(index) + value);
        };
        SyncEventRecorder.prototype.SubDouble = function (index, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index + 1);
            //var d: number = SyncEvent.GetDoubleValue(this._uint32_values, index);
            //d -= value;
            //SyncEvent.SetDoubleValue(this._uint32_values, index, d);
            this.SetDouble(index, this.GetDouble(index) - value);
        };
        SyncEventRecorder.prototype.SetUInt32 = function (index, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index);
            //this._uint32_values[index] = value;
            this._uint32_values_buffer.setUint32(index << 2, value, true);
        };
        SyncEventRecorder.prototype.AddUInt32 = function (index, value) {
            //取出数据 并执行加法运算
            //this._uint32_values[index] += value;
            this.SetUInt32(index, this.GetUInt32(index) + value);
        };
        SyncEventRecorder.prototype.SubUInt32 = function (index, value) {
            //取出数据 并执行减法运算
            //this._uint32_values[index] -= value;
            this.SetUInt32(index, this.GetUInt32(index) - value);
        };
        SyncEventRecorder.prototype.SetInt32 = function (index, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index);
            //this._uint32_values[index] = SyncEvent.SetInt32Value(value);
            this._uint32_values_buffer.setInt32(index << 2, value, true);
        };
        SyncEventRecorder.prototype.AddInt32 = function (index, value) {
            //取出数据 并执行加法运算
            //var v: number = this.GetInt32(index);
            //v += value;
            //this._uint32_values[index] = SyncEvent.SetInt32Value(v);
            this.SetInt32(index, this.GetInt32(index) + value);
        };
        SyncEventRecorder.prototype.SubInt32 = function (index, value) {
            //取出数据 并执行减法运算
            //var v: number = this.GetInt32(index);
            //v -= value;
            //this._uint32_values[index] = SyncEvent.SetInt32Value(v);
            this.SetInt32(index, this.GetInt32(index) - value);
        };
        SyncEventRecorder.prototype.SetUInt16 = function (index, offset, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index);
            //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], value, offset);
            this._uint32_values_buffer.setUint16((index << 2) + (offset << 1), value, true);
        };
        SyncEventRecorder.prototype.AddUInt16 = function (index, offset, value) {
            //取出数据 并执行加法运算
            this.checkIntSize(index);
            //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], this.GetUInt16(index, offset) + value, offset);
            this.SetUInt16(index, offset, this.GetUInt16(index, offset) + value);
        };
        SyncEventRecorder.prototype.SubUInt16 = function (index, offset, value) {
            this.checkIntSize(index);
            //取出数据 并执行加法运算			
            //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], this.GetUInt16(index, offset) - value, offset);
            this.SetUInt16(index, offset, this.GetUInt16(index, offset) - value);
        };
        SyncEventRecorder.prototype.SetInt16 = function (index, offset, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index);
            // this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], value, offset);
            this._uint32_values_buffer.setInt16((index << 2) + (offset << 1), value, true);
        };
        SyncEventRecorder.prototype.AddInt16 = function (index, offset, value) {
            //取出数据 并执行加法运算
            //this.checkIntSize(index);
            //var v: number = SyncEvent.GetInt16Value(this._uint32_values[index], offset);
            //v += value;
            //this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], v, offset);
            this.SetInt16(index, offset, this.GetInt16(index, offset) + value);
        };
        SyncEventRecorder.prototype.SubInt16 = function (index, offset, value) {
            //取出数据 并执行加法运算
            //var v: number = SyncEvent.GetInt16Value(this._uint32_values[index], offset);
            //v -= value;
            //this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], v, offset);
            this.SetInt16(index, offset, this.GetInt16(index, offset) - value);
        };
        SyncEventRecorder.prototype.SetFloat = function (index, v) {
            //如果空间不够就自动增长			
            this.checkIntSize(index);
            //this._uint32_values[index] = SyncEvent.SetFloatValue(v);
            this._uint32_values_buffer.setFloat32(index << 2, v, true);
        };
        SyncEventRecorder.prototype.SetByte = function (index, offset, value) {
            //如果空间不够就自动增长
            this.checkIntSize(index);
            //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], value, offset);
            this._uint32_values_buffer.setInt8((index << 2) + offset, value);
        };
        SyncEventRecorder.prototype.AddByte = function (index, offset, value) {
            //this.checkIntSize(index);
            //var v: number = SyncEvent.GetByteValue(this._uint32_values[index], offset);
            //v += value;
            //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], v, offset);
            this.SetByte(index, offset, this.GetByte(index, offset) + value);
        };
        SyncEventRecorder.prototype.SubByte = function (index, offset, value) {
            //this.checkIntSize(index);
            //var v: number = SyncEvent.GetByteValue(this._uint32_values[index], offset);
            //v -= value;
            //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], v, offset);
            this.SetByte(index, offset, this.GetByte(index, offset) - value);
        };
        SyncEventRecorder.prototype.SetStr = function (index, val) {
            this.checkStrSize(index);
            this._str_values[index] = val;
        };
        ///////////////////////////////////////////////////////////////////////////////////////////
        //以下为对象传输相关
        ///////////////////////////////////////////////////////////////////////////////////////////
        SyncEventRecorder.prototype.ReadValues = function (mask, bytes, isNew) {
            var length = mask.GetCount();
            for (var i = 0; i < length; i++) {
                if (mask.GetBit(i)) {
                    this.checkIntSize(i);
                    //从模式需要抛出事件
                    var binlog = !isNew ? Pan3d.BinLogStru.malloc() : null;
                    if (binlog) {
                        binlog.typ = Pan3d.SyncEvent.TYPE_UINT32;
                        binlog.index = i;
                        binlog.old_value = this.GetUInt32(i);
                        //binlog.old_value = this._uint32_values[i];
                    }
                    this.SetUInt32(i, bytes.readUnsignedInt());
                    //this._uint32_values[i] = bytes.readUnsignedInt();
                    if (binlog) {
                        binlog.value = this.GetUInt32(i);
                        //binlog.value = this._uint32_values[i];
                        this._events_value.DispatchInt(binlog.index, binlog);
                        Pan3d.BinLogStru.free(binlog);
                        if (this._after_update) {
                            this._afterUpdateIntObj[i] = true;
                        }
                    }
                }
            }
            return true;
        };
        SyncEventRecorder.prototype.ReadStringValues = function (mask, bytes, isNew) {
            var length = mask.GetCount();
            for (var i = 0; i < length; i++) {
                if (mask.GetBit(i)) {
                    //这样的性能并不好，但是可以节约内存，而且字符下标的用途比较少
                    this.checkStrSize(i);
                    //从模式需要抛出事件
                    var binlog = !isNew ? Pan3d.BinLogStru.malloc() : null;
                    if (binlog) {
                        binlog.index = i;
                        binlog.typ = Pan3d.SyncEvent.TYPE_STRING;
                        binlog.old_str = this._str_values[i];
                    }
                    this._str_values[i] = bytes.readUTF();
                    if (binlog) {
                        binlog.str = this._str_values[i];
                        this._events_str_values.DispatchInt(binlog.index, binlog);
                        Pan3d.BinLogStru.free(binlog);
                        if (this._after_update) {
                            this._afterUpdateStrObj[i] = true;
                        }
                    }
                }
            }
            return true;
        };
        /**
         * 数字下标创建包掩码
         * @param mask
         */
        SyncEventRecorder.prototype.GetCreateMask = function (mask) {
            mask.Clear();
            for (var i = 0; i < this._uint32_values_len; i++) {
                //如果该下标不等于0则需要下发								
                //if(this._uint32_values[i]) 
                if (this.GetUInt32(i))
                    mask.SetBit(i);
            }
        };
        /**
         * 字符串创建包掩码
         * @param mask
         */
        SyncEventRecorder.prototype.GetCreateStringMask = function (mask) {
            mask.Clear();
            for (var i = 0; i < this._str_values_len; i++) {
                if (this._str_values[i] && this._str_values[i].length > 0)
                    mask.SetBit(i);
            }
        };
        SyncEventRecorder.prototype.ApplyAtomicBinLog = function (binlog) {
            //如果原子操作类型等于成功或者失败则执行回调
            if (binlog.atomic_opt == Pan3d.SyncEvent.ATOMIC_OPT_RESULT_FAILED || binlog.atomic_opt == Pan3d.SyncEvent.ATOMIC_OPT_RESULT_OK) {
                this._events_callback.DispatchInt(binlog.callback_idx, binlog);
                return;
            }
            //字符串分支
            if (binlog._typ == Pan3d.SyncEvent.TYPE_STRING) {
                //如果越界了就扩张
                this.checkStrSize(binlog._index);
                //如果不等就操作失败
                if (binlog._old_value_str != this._str_values[binlog._index]) {
                    binlog._old_value_str = binlog._value_str;
                    binlog._value_str = this._str_values[binlog._index];
                    binlog._atomic_opt = Pan3d.SyncEvent.ATOMIC_OPT_RESULT_FAILED;
                }
                else {
                    binlog._atomic_opt = Pan3d.SyncEvent.ATOMIC_OPT_RESULT_OK;
                    //应用完后记录一下准备回去了
                    this.ApplyBinLog(binlog);
                }
                return;
            }
            //其他类型,目前仅仅支持uint32/int32类型
            //校验长度越界就扩张
            this.checkIntSize(binlog._index);
            //读取u32进行比较			
            //var cur_val:number = this._uint32_values[binlog.index];
            var cur_val = this.GetUInt32(binlog.index);
            if (binlog.old_value != cur_val) {
                binlog.old_value = binlog.value;
                binlog.value = cur_val;
                binlog._atomic_opt = Pan3d.SyncEvent.ATOMIC_OPT_RESULT_FAILED;
            }
            else {
                binlog._atomic_opt = Pan3d.SyncEvent.ATOMIC_OPT_RESULT_OK;
                //应用完后记录一下准备回去了
                this.ApplyBinLog(binlog);
            }
        };
        /**
         * 将binlog的操作实施到对象，并且如果就主模式，转换binlog得到
         * 这个函数会把转
         * @param binlog
         */
        SyncEventRecorder.prototype.ApplyBinLog = function (binlog) {
            var index = binlog.index;
            //字符串直接处理掉了
            if (binlog._typ == Pan3d.SyncEvent.TYPE_STRING) {
                this.checkStrSize(index);
                binlog.old_str = this._str_values[index] ? this._str_values[index] : ""; //保存旧值 
                this._str_values[index] = binlog._value_str;
                return;
            }
            //记录一下旧值
            if (binlog.typ == Pan3d.SyncEvent.TYPE_DOUBLE) {
                if (this._uint32_values_len > index + 1) {
                    //binlog._old_value_dbe = SyncEvent.GetDoubleValue(this._uint32_values, index);
                    binlog._old_value_dbe = this.GetDouble(index);
                }
                this.checkIntSize(index + 1);
            }
            else {
                if (binlog.typ != Pan3d.SyncEvent.TYPE_BIT && this._uint32_values_len > index /*&& binlog.opt != OPT_SET*/) {
                    //binlog.old_value = this._uint32_values[index];
                    binlog.old_value = this.GetUInt32(index);
                }
                this.checkIntSize(index);
            }
            //因为uint32不需要偏移，所以单独写
            if (binlog.typ == Pan3d.SyncEvent.TYPE_UINT32 || binlog.typ == Pan3d.SyncEvent.TYPE_INT32 || binlog.typ == Pan3d.SyncEvent.TYPE_FLOAT) {
                switch (binlog.opt) {
                    case Pan3d.SyncEvent.OPT_SET:
                        //this._uint32_values[index] = binlog.uint32;
                        this.SetUInt32(index, binlog.uint32);
                        break;
                    case Pan3d.SyncEvent.OPT_ADD:
                        //this._uint32_values[index] = this._uint32_values[index] + binlog.uint32;
                        this.AddUInt32(index, binlog.uint32);
                        break;
                    case Pan3d.SyncEvent.OPT_SUB:
                        //this._uint32_values[index] = this._uint32_values[index] - binlog.uint32;
                        this.SubUInt32(index, binlog.uint32);
                        break;
                }
            }
            else if (binlog.typ == Pan3d.SyncEvent.TYPE_DOUBLE) {
                switch (binlog.opt) {
                    case Pan3d.SyncEvent.OPT_SET:
                        //SyncEvent.SetDoubleValue(this._uint32_values, index, binlog.double);
                        this.SetDouble(index, binlog.double);
                        break;
                    case Pan3d.SyncEvent.OPT_ADD:
                        //var d: number = SyncEvent.GetDoubleValue(this._uint32_values, index);
                        //d += binlog.double;
                        //SyncEvent.SetDoubleValue(this._uint32_values, index, d);
                        this.AddDouble(index, binlog.double);
                        break;
                    case Pan3d.SyncEvent.OPT_SUB:
                        //var dd: number = SyncEvent.GetDoubleValue(this._uint32_values, index);
                        //dd -= binlog.double;
                        //SyncEvent.SetDoubleValue(this._uint32_values, index, dd);
                        this.SubDouble(index, binlog.double);
                        break;
                }
            }
            else if (binlog.typ == Pan3d.SyncEvent.TYPE_BIT) { //FIXME			
                switch (binlog.opt) {
                    case Pan3d.SyncEvent.OPT_SET:
                        //this._uint32_values[index] = SyncEvent.SetBitValue(this._uint32_values[index], 1, binlog.uint32);
                        this.SetBit(index, binlog.uint32, true);
                        break;
                    case Pan3d.SyncEvent.OPT_UNSET:
                        //this._uint32_values[index] = SyncEvent.SetBitValue(this._uint32_values[index], 0, binlog.uint32);
                        this.SetBit(index, binlog.uint32, false);
                        break;
                    default:
                        throw "JLC_BinLogObject_BIT:op type is error.";
                }
            }
            else {
                var value = 0;
                switch (binlog.typ) {
                    case Pan3d.SyncEvent.TYPE_UINT16:
                        switch (binlog.opt) {
                            case Pan3d.SyncEvent.OPT_SET:
                                //value = binlog.uint16;
                                //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.SetUInt16(index, binlog.offset, binlog.uint16);
                                break;
                            case Pan3d.SyncEvent.OPT_ADD:
                                //value = this.GetUInt16(index,binlog.offset) + binlog.uint16;
                                //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.AddUInt16(index, binlog.offset, binlog.uint16);
                                break;
                            case Pan3d.SyncEvent.OPT_SUB:
                                //value = this.GetUInt16(index,binlog.offset) - binlog.uint16;
                                //this._uint32_values[index] = SyncEvent.SetUInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.SubUInt16(index, binlog.offset, binlog.uint16);
                                break;
                            default:
                                throw "JLC_BinLogObject_UINT16:unknow OP type";
                        }
                        break;
                    case Pan3d.SyncEvent.TYPE_INT16:
                        switch (binlog.opt) {
                            case Pan3d.SyncEvent.OPT_SET:
                                //value = binlog.int16;
                                //this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.SetInt16(index, binlog.offset, binlog.int16);
                                break;
                            case Pan3d.SyncEvent.OPT_ADD:
                                //value = this.GetInt16(index,binlog.offset) + binlog.int16;
                                //this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.AddInt16(index, binlog.offset, binlog.int16);
                                break;
                            case Pan3d.SyncEvent.OPT_SUB:
                                //value = this.GetInt16(index,binlog.offset) - binlog.int16;
                                //this._uint32_values[index] = SyncEvent.SetInt16Value(this._uint32_values[index], value, binlog.offset);
                                this.SubInt16(index, binlog.offset, binlog.int16);
                                break;
                            default:
                                throw "JLC_BinLogObject_UINT16:unknow OP type";
                        }
                        break;
                    case Pan3d.SyncEvent.TYPE_UINT8:
                        value = 0;
                        //var old: number = SyncEvent.GetByteValue(this._uint32_values[index], binlog.offset);
                        switch (binlog.opt) {
                            case Pan3d.SyncEvent.OPT_SET:
                                //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], binlog.byte, binlog.offset);
                                this.SetByte(index, binlog.offset, binlog.byte);
                                break;
                            case Pan3d.SyncEvent.OPT_ADD:
                                //value = old + value;
                                //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], value, binlog.offset);
                                this.AddByte(index, binlog.offset, binlog.byte);
                                break;
                            case Pan3d.SyncEvent.OPT_SUB:
                                //value = old - value;
                                //this._uint32_values[index] = SyncEvent.SetByteValue(this._uint32_values[index], value, binlog.offset);
                                this.SubByte(index, binlog.offset, binlog.byte);
                                break;
                            default:
                                throw "JLC_BinLogObject_UINT8:op type is error.";
                        }
                        break;
                    default:
                        throw "JLC_BinLogObject:op type is error.";
                }
            }
        };
        SyncEventRecorder.prototype.clearAfterUpdateObj = function () {
            if (!this._after_update) {
                return;
            }
            for (var key in this._afterUpdateIntObj) {
                delete this._afterUpdateIntObj[key];
            }
            for (var key in this._afterUpdateStrObj) {
                delete this._afterUpdateStrObj[key];
            }
        };
        SyncEventRecorder.prototype.ReadFrom = function (flags, bytes, evFilter, applyNew) {
            if (evFilter === void 0) { evFilter = null; }
            if (applyNew === void 0) { applyNew = true; }
            var isNew = Boolean(flags & Pan3d.SyncEvent.OBJ_OPT_NEW);
            //创建包需要将所有的值清空
            if (isNew) {
                this.clearValues();
            }
            //创建包或更新包
            if (isNew || flags & Pan3d.SyncEvent.OBJ_OPT_UPDATE) {
                if (evFilter) {
                    evFilter.pushNew();
                }
                this.clearAfterUpdateObj();
                //用于更新时使用的掩码				
                SyncEventRecorder.tmpIntMask.ReadFrom(bytes);
                SyncEventRecorder.tmpStrMask.ReadFrom(bytes);
                //如果可以触发的话
                // if(evFilter){
                //     evFilter.pushUpdateMask(SyncEvent.TYPE_INT32, SyncEventRecorder.tmpIntMask);
                //     evFilter.pushUpdateMask(SyncEvent.TYPE_STRING, SyncEventRecorder.tmpStrMask);
                // }
                // if (flags & SyncEvent.OBJ_OPT_UPDATE) {
                //     if (this.guid.charAt(0) == "O") {
                //         //console.log("对象更新：" + this.guid);
                //     }
                // }
                //读取整数
                this.ReadValues(SyncEventRecorder.tmpIntMask, bytes, isNew);
                this.ReadStringValues(SyncEventRecorder.tmpStrMask, bytes, isNew);
                //应用更新后也触发一下事件
                if (this._after_update != null && applyNew) {
                    //this._events_mask.DispatchIntMask(SyncEventRecorder.tmpIntMask,this);
                    //this._after_update(this, flags, SyncEventRecorder.tmpIntMask, SyncEventRecorder.tmpStrMask);
                    this._after_update(flags, this._afterUpdateIntObj, this._afterUpdateStrObj);
                }
            }
            //如果更新的话可能还带原子操作
            //binlog更新
            if (flags & Pan3d.SyncEvent.OBJ_OPT_BINLOG) {
                SyncEventRecorder.tmpIntMask.Clear();
                SyncEventRecorder.tmpStrMask.Clear();
                this.clearAfterUpdateObj();
                var len = bytes.readUnsignedShort();
                ////console.log("同步GUID：" + this.guid + "长度：" + len);	
                for (var i = 0; i < len; i++) {
                    this._tmpBinlog.ReadFrom(bytes);
                    if (this._tmpBinlog._atomic_opt) {
                        this.ApplyAtomicBinLog(this._tmpBinlog); //原子操作
                    }
                    else {
                        if (evFilter)
                            evFilter.pushBinlog(this._tmpBinlog);
                        this.ApplyBinLog(this._tmpBinlog);
                    }
                    this.OnEventSyncBinLog(this._tmpBinlog);
                }
                //应用更新后也触发一下事件
                if (this._after_update != null) {
                    //this._events_mask.DispatchIntMask(SyncEventRecorder.tmpIntMask,this);
                    //this._after_update(this, flags, SyncEventRecorder.tmpIntMask, SyncEventRecorder.tmpStrMask);
                    this._after_update(flags, this._afterUpdateIntObj, this._afterUpdateStrObj);
                }
            }
            if (isNew) {
                ////console.log("创建Binlog  " + this.guid);
                this.onBaseCreated();
            }
            return true;
        };
        SyncEventRecorder.prototype.onBaseCreated = function () {
        };
        SyncEventRecorder.prototype.GetHashCode = function () {
            var FNV_offset_basis = 2166136261;
            var FNV_prime = 16777619;
            var h1 = FNV_offset_basis;
            //for (var v in this._uint32_values){	
            for (var i = 0; i < this._uint32_values_len; i++) {
                var v = this.GetUInt32(i);
                h1 ^= v;
                h1 *= FNV_prime;
            }
            var bytes = new Pan3d.Pan3dByteArray;
            bytes.endian = Pan3d.Endian.LITTLE_ENDIAN;
            var h2 = FNV_offset_basis;
            bytes.writeUTFBytes(this._guid); //need
            for (var i = 0; i < bytes.length; i++) {
                h2 ^= (bytes.getByte(i));
                h2 *= FNV_prime;
            }
            for (var s in this._str_values) {
                bytes.clear();
                bytes.writeUTFBytes(s ? s : "");
                for (i = 0; i < bytes.length; i++) {
                    h2 ^= (bytes[i]);
                    h2 *= FNV_prime;
                }
            }
            return h1 ^ (h2 << 1);
        };
        SyncEventRecorder.prototype.Equals = function (o) {
            //对所有的length处理一下成最长
            if (this._uint32_values_len > o._uint32_values_len) {
                o.checkIntSize(this._uint32_values_len);
            }
            else if (this._uint32_values_len < o._uint32_values_len) {
                this.checkIntSize(o._uint32_values_len);
            }
            if (this._str_values_len > o._str_values_len) {
                o.checkStrSize(this._str_values_len);
            }
            else if (this._str_values_len > o._str_values_len) {
                this.checkStrSize(o._str_values_len);
            }
            return this.GetHashCode() == o.GetHashCode();
        };
        SyncEventRecorder.prototype.DeleteThis = function () {
            //delete this;
        };
        SyncEventRecorder.prototype.dispose = function () {
            ////console.log("回收Binlog  " + this.guid);
            this.clearValues();
            this._events_value.Clear();
            this._events_str_values.Clear();
            this._events_mask.Clear();
            this._events_callback.Clear();
            this._after_update = null;
        };
        SyncEventRecorder.addListens_mask = new Pan3d.UpdateMask;
        SyncEventRecorder.tmpIntMask = new Pan3d.UpdateMask;
        SyncEventRecorder.tmpStrMask = new Pan3d.UpdateMask;
        return SyncEventRecorder;
    }(Pan3d.SyncEvent));
    Pan3d.SyncEventRecorder = SyncEventRecorder;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SyncEventRecorder.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GuidObject = /** @class */ (function (_super) {
        __extends(GuidObject, _super);
        function GuidObject(g) {
            if (g === void 0) { g = ""; }
            var _this = _super.call(this) || this;
            //引用计数
            _this._ref = 0;
            _this.guid = g;
            return _this;
        }
        /**
            * 增加引用计数
            * @param r 计数变量,1/-1
            */
        GuidObject.prototype.add_ref = function (r) {
            this._ref = this._ref + r;
        };
        Object.defineProperty(GuidObject.prototype, "ref", {
            /**
                * 当引用计数小于等于0的时候就可以从对象表中被释放了
                */
            get: function () {
                return this._ref;
            },
            enumerable: true,
            configurable: true
        });
        GuidObject.prototype.getName = function () {
            return "ccav";
        };
        GuidObject.prototype.getGuid = function () {
            return "991199";
        };
        return GuidObject;
    }(Pan3d.SyncEventRecorder));
    Pan3d.GuidObject = GuidObject;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GuidObject.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var GuidObjectTable = /** @class */ (function (_super) {
        __extends(GuidObjectTable, _super);
        function GuidObjectTable() {
            var _this = _super.call(this) || this;
            _this._objs = new Object;
            //std::function<uint32_t(const string&)> 从字符串转换出整形用于节约 
            _this._hashGUID = null;
            //以对象ID的hash希，整型作为key的对象表
            _this._u_2_guid = new Object();
            //用于每次发包的缓存 		 
            _this._packet_pool = new Array;
            _this._newEvent = new Pan3d.NetEventDispatcher(Pan3d.NetEventDispatcher.KEY_TYPE_STRING);
            _this._delEvent = new Pan3d.NetEventDispatcher(Pan3d.NetEventDispatcher.KEY_TYPE_STRING);
            _this._indexer = new Pan3d.StringIndexer();
            return _this;
        }
        GuidObjectTable.prototype.Get = function (k) {
            return (this._objs[k]);
        };
        Object.defineProperty(GuidObjectTable.prototype, "indexer", {
            /**
             * 索引器
             */
            get: function () {
                return this._indexer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 创建对象
         * @param k
         * @return
         */
        GuidObjectTable.prototype.CreateObject = function (k) {
            var p = this._objs[k];
            if (!p) {
                p = new Pan3d.GuidObject();
                p.guid = k;
                this.AttachObject(p);
            }
            return p;
        };
        /**
         * 释放对象
         * @param o
         */
        GuidObjectTable.prototype.ReleaseObject = function (o) {
            var k = o.guid;
            var p = this._objs[k];
            if (!p)
                return;
            this.DetachObject(p);
        };
        GuidObjectTable.prototype.ReleaseKey = function (k) {
            var p = this._objs[k];
            if (!p)
                return;
            this.DetachObject(p);
        };
        GuidObjectTable.prototype.AttachObject = function (o) {
            if (o == null)
                throw new Error("AttachObject,o==null");
            o.add_ref(1);
            this._objs[o.guid] = o;
            //加入对象分类
            this._indexer.insert(o);
            //如果hash函数不为空则要维护一个key对照表	
            var u_guid = 0;
            if (this._hashGUID != null) {
                u_guid = this._hashGUID(o.guid);
                if (u_guid != 0)
                    this._u_2_guid[u_guid] = o.guid;
            }
        };
        GuidObjectTable.prototype.DetachObject = function (o) {
            o.add_ref(-1);
            if (o.ref <= 0) {
                this._indexer.remove(o.guid);
                delete this._objs[o.guid];
                //如果hash函数不为空则要维护一个key对照表	
                var u_guid = 0;
                if (this._hashGUID != null) {
                    u_guid = this._hashGUID(o.guid);
                    if (u_guid != 0) {
                        delete this._u_2_guid[u_guid];
                        ////console.log("删除GUID"+ u_guid);
                    }
                }
            }
        };
        GuidObjectTable.prototype.msgClientsubscription = function ($byte) {
        };
        /**
         * 应用对象更新数据包
         * @param bytes
         */
        GuidObjectTable.prototype.ApplyBlock = function (bytes) {
            while (bytes.bytesAvailable) {
                var flags = bytes.readUnsignedByte();
                var guid; //= bytes.readUTF();	
                //先读出标志，如果是整形guid则转换成字符串
                if (flags & Pan3d.SyncEvent.OBJ_OPT_U_GUID) {
                    var u_guid = bytes.readUnsignedInt();
                    guid = this._u_2_guid[u_guid] ? this._u_2_guid[u_guid] : "";
                    if (guid.length == 0) {
                        //console.log("111没有对象 uguid=>", u_guid);
                    }
                }
                else {
                    guid = bytes.readUTF();
                }
                //if (ObjectDef.getPrefix(guid) == "O"){
                //  //console.log("oooooooooooooodddd " + flags);
                //}
                if (guid.length == 0) {
                    //console.log("没有对象 guid=>", guid);
                    return false;
                }
                var cur_obj = this.Get(guid);
                //对象是否属于索引
                var evFilter;
                //如果是删除则触发事件
                if (flags & Pan3d.SyncEvent.OBJ_OPT_DELETE) {
                    this._delEvent.DispatchString(guid, cur_obj);
                    this.ReleaseKey(guid);
                    evFilter = this._indexer.matchObject(cur_obj);
                    //对象消失了					
                    if (evFilter != null) {
                        evFilter.beginPush(cur_obj);
                        evFilter.pushDelete();
                        evFilter.endPush();
                    }
                    cur_obj.dispose();
                    continue;
                }
                //从流中读出对象,如果没有找到该对象则读取后抛弃
                var applyNew = (flags & Pan3d.SyncEvent.OBJ_OPT_NEW) == 0;
                if (!cur_obj) {
                    if (flags & Pan3d.SyncEvent.OBJ_OPT_NEW) {
                        applyNew = !this._objs[guid];
                        cur_obj = this.CreateObject(guid);
                        // console.log("创建GUID:" + guid);
                    }
                    else {
                        cur_obj = GuidObjectTable.applyBlock_tmp_obj;
                    }
                }
                if (flags & Pan3d.SyncEvent.OBJ_OPT_UPDATE) {
                    // console.log("更新GUID:" + guid);
                }
                evFilter = this._indexer.matchObject(cur_obj);
                if (evFilter) {
                    evFilter.beginPush(cur_obj);
                }
                cur_obj.ReadFrom(flags, bytes, evFilter, applyNew);
                if (evFilter) {
                    evFilter.endPush();
                }
                ;
                //如果是新对象则触发下事件
                if (flags & Pan3d.SyncEvent.OBJ_OPT_NEW) {
                    this._newEvent.DispatchString(cur_obj.guid.charAt(0), cur_obj);
                }
            }
            return true;
        };
        /*根据查询定符串返回对象列表*/
        GuidObjectTable.prototype.SearchObject = function (s, vec) {
            //TODO:这里的正则对象性能优化
            var regex = new RegExp(s);
            vec.length = 0;
            for (var k in this._objs) {
                if (regex.test(k))
                    vec.push(k);
            }
        };
        /*提供一种机制用于遍历所有的对象列表 委托格式 f(obj:GuidObject):void*/
        GuidObjectTable.prototype.ForEachObject = function (f) {
            for (var o in this._objs) {
                f(this._objs[o]);
            }
        };
        /**
         * 调用远程创建对象，成功的时候回调
         * @param guid
         * @param cb function(o:GuidObject):void
         */
        GuidObjectTable.prototype.RegisterCreateEvent = function (guid, cb) {
            this._newEvent.AddListenString(guid, cb);
        };
        /**
         * 调用远程删除对象,成功时回调
         * @param guid
         * @param cb function(o:GuidObject):void
         */
        GuidObjectTable.prototype.RegisterReleaseEvent = function (guid, cb) {
            this._delEvent.AddListenString(guid, cb);
        };
        /**
         * 从池中分配新的数据包,如果没有包号就不要写入
         * @param optCode
         * @return
         */
        GuidObjectTable.prototype.newPacket = function (optCode) {
            if (optCode === void 0) { optCode = 0; }
            var pkt = null;
            if (this._packet_pool.length == 0) {
                pkt = new Pan3d.Pan3dByteArray;
                pkt.endian = Pan3d.Endian.LITTLE_ENDIAN;
            }
            else {
                pkt = this._packet_pool.shift();
                pkt.clear();
            }
            if (optCode)
                pkt.writeShort(optCode);
            return pkt;
        };
        /**
         * 回收数据包到包池
         * @param pkt
         */
        GuidObjectTable.prototype.freePacket = function (pkt) {
            pkt.clear();
            this._packet_pool.push(pkt);
        };
        /**
         * 清理对象
         */
        GuidObjectTable.prototype.clearObjs = function () {
            for (var key in this._objs) {
                if (this._objs[key] instanceof Pan3d.GuidObject) {
                    var obj = this._objs[key];
                    this.removeObject(obj.guid, obj);
                    obj.dispose();
                }
                delete this._objs[key];
            }
        };
        /*移除对象*/
        GuidObjectTable.prototype.removeObject = function (guid, obj) {
            this._delEvent.DispatchString(guid, obj);
            this.ReleaseKey(guid);
            var evFilter = this._indexer.matchObject(obj);
            //对象消失了					
            if (evFilter != null) {
                evFilter.beginPush(obj);
                evFilter.pushDelete();
                evFilter.endPush();
            }
        };
        GuidObjectTable.prototype.dispose = function () {
            this._newEvent.Clear();
            this._delEvent.Clear();
            //this._indexer.Clear();
            for (var key in this._objs) {
                var k = this._objs[key];
                if (k) {
                    k.dispose();
                }
            }
            this._objs = new Object();
        };
        GuidObjectTable.applyBlock_tmp_obj = new Pan3d.GuidObject;
        return GuidObjectTable;
    }(Pan3d.SyncEvent));
    Pan3d.GuidObjectTable = GuidObjectTable;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GuidObjectTable.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
     * 用于记录所有的同步事件，目前最常用于ui重绘
     * 记录时，先通过testRecorder验证是否是关心的对象，
     * 再调用push将所关心的的binlog用自定义的格式记录下来
     * 现在使用的格式为(数量-short,(index-short,oldValue-unumber)...)
     * 通过pop可以得到当前队列中的所有符合条件的事件消息，并调用相应的处理函数
     * @author linbc
     */
var Pan3d;
(function (Pan3d) {
    var SyncEventFilter = /** @class */ (function (_super) {
        __extends(SyncEventFilter, _super);
        function SyncEventFilter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SyncEventFilter.prototype.open = function () {
            if (!this._opening)
                this._opening = true;
        };
        /**
         * 关闭对象事件管理
         */
        SyncEventFilter.prototype.close = function () {
            if (this._opening) {
                this._opening = false;
                this._curObj = null;
                this._curEventCount = 0;
                this._eventObjs.length = 0;
                this._eventParams.clear();
            }
        };
        /**
         * 初始化
         */
        SyncEventFilter.prototype.SyncEventFilter = function () {
            this._opening = false;
            this._curObj = null;
            this._curEventCount = 0;
            this._eventParams = new Pan3d.Pan3dByteArray;
            this._eventParams.endian = Pan3d.Endian.LITTLE_ENDIAN;
            this._eventObjs = new Array();
        };
        SyncEventFilter.prototype.beginPush = function (obj) {
            //如果以前的当前对象不等于空，则需要判断是否是空
            if (this._curObj)
                this.endPush();
            this._curObj = obj;
            //插入对象ID及事件数量，0显然是不准的 ,仅用于占位
            this._eventObjs.push(obj.guid);
            this._eventParams.writeShort(0);
            return true;
        };
        /**
         * 有始有终嘛，修改binlog数量,或者移除符合条件，但是没有记录到事件的对象ID
         */
        SyncEventFilter.prototype.endPush = function () {
            if (this._curEventCount) {
                var curPos = this._eventParams.position;
                //两个short加上一个number 8个字节
                this._eventParams.position -= 8 * this._curEventCount;
                //向前移动两个字节，用于记录数量
                this._eventParams.position -= 2;
                this._eventParams.writeShort(this._curEventCount);
                this._curEventCount = 0;
                this._eventParams.position = curPos;
            }
            else {
                //移除该guid
                this._eventObjs.splice(this._eventObjs.length - 1, 1);
                //移除binlog数量的记录值,short占用两个字节
                this._eventParams.position -= 2;
            }
            this._curObj = null;
        };
        SyncEventFilter.prototype.writeParam = function (ev, index, oldVal) {
            this._eventParams.writeShort(ev);
            this._eventParams.writeShort(index);
            this._eventParams.writeInt(oldVal);
            this._curEventCount++;
        };
        SyncEventFilter.prototype.pushDelete = function () {
            this.writeParam(SyncEventFilter.EV_DEL, 0, 0);
        };
        SyncEventFilter.prototype.pushNew = function () {
            this.writeParam(SyncEventFilter.EV_NEW, 0, 0);
        };
        SyncEventFilter.prototype.pushUpdateMask = function (typ, mask) {
            //var opt:number = (typ == TYPE_STRING?EV_UPDATE_S:EV_UPDATE_I);	
            var len = mask.GetCount();
            var i;
            if (typ == Pan3d.SyncEvent.TYPE_STRING) {
                //对于字符串而言无需要保存旧值，这里写入的错误的值，但是没有关系
                for (i = 0; i < len; i++) {
                    if (mask.GetBit(i))
                        this.writeParam(SyncEventFilter.EV_UPDATE_S, i, 0);
                }
            }
            else {
                for (i = 0; i < len; i++) {
                    if (mask.GetBit(i))
                        this.writeParam(SyncEventFilter.EV_UPDATE_I, i, this._curObj.GetInt32(i));
                }
            }
        };
        /**
         * 对象更新调用该接口进行数据插入,相应的会记录成UI可以理解的数据格式
         * @param binlog
         *
         */
        SyncEventFilter.prototype.pushBinlog = function (binlog) {
            //如果是原子操作则忽略
            if (binlog._atomic_opt != 0)
                return;
            var opt = (binlog._typ == Pan3d.SyncEvent.TYPE_STRING ? SyncEventFilter.EV_UPDATE_S : SyncEventFilter.EV_UPDATE_I);
            this.writeParam(opt, binlog.index, this._curObj.GetInt32(binlog.index));
        };
        /**
         * 开始读之先，置一下，数组的位置
         *
         */
        SyncEventFilter.prototype.beginPop = function () {
            this._eventParams.position = 0;
        };
        /**
         * 开始弹出一个对象的事件,返回空的时候就是没有对象
         * @param params
         * @return 对象的guid
         *
         */
        SyncEventFilter.prototype.pop = function (params) {
            if (this._eventObjs.length == 0)
                return "";
            //先清空
            params.length = 0;
            var len = this._eventParams.readShort();
            for (var i = 0; i < len; i++) {
                //读取一个
                params.push(this._eventParams.readShort()); //操作类型
                params.push(this._eventParams.readShort()); //变化下标
                params.push(this._eventParams.readInt()); //原值
            }
            return this._eventObjs.shift();
        };
        /**
         * 读完了，清空一下数据
         *
         */
        SyncEventFilter.prototype.endPop = function () {
            if (this._eventObjs.length == 0)
                this._eventParams.clear();
        };
        SyncEventFilter.prototype.Clear = function () {
            this._curObj = null;
            this._eventObjs = null;
            if (this._eventParams) {
                this._eventParams.clear();
                this._eventParams = null;
            }
        };
        /**
             * 标识为是个新对象
             */
        SyncEventFilter.EV_NEW = 0;
        /**
         * 标识为对象消失
         */
        SyncEventFilter.EV_DEL = 1;
        /**
         * 对象整型下标发生变化
         */
        SyncEventFilter.EV_UPDATE_I = 2;
        /**
         * 对象字符串下标发生变化
         */
        SyncEventFilter.EV_UPDATE_S = 3;
        return SyncEventFilter;
    }(Pan3d.SyncEvent));
    Pan3d.SyncEventFilter = SyncEventFilter;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SyncEventFilter.js.map
var Pan3d;
(function (Pan3d) {
    var ObjectDef = /** @class */ (function () {
        function ObjectDef() {
        }
        ObjectDef.getPrefix = function (s) {
            return s.charAt(0);
        };
        ObjectDef.getGUIDIndex = function (s) {
            var idx = s.indexOf(".");
            idx = idx > 0 ? idx - 1 : Number.MAX_VALUE;
            return Number(s.substr(1, idx));
        };
        ObjectDef.testUG = function (u, g) {
            var idx = u.indexOf(".");
            if (idx != -1) {
                var s = u.substr(idx + 1);
                return s == g;
            }
            return false;
        };
        ObjectDef.MAP = "M";
        ObjectDef.UNIT = "U";
        ObjectDef.STRENGTH = "B";
        ObjectDef.PLAYER = "p";
        ObjectDef.BAG = "I";
        ObjectDef.FACTION = "L";
        ObjectDef.GROW = "X";
        ObjectDef.INSTANCE = "C";
        ObjectDef.SOCIAL = "s";
        ObjectDef.EMAIL = "g";
        ObjectDef.GLOBEL = "G";
        ObjectDef.QUEST = "Q";
        ObjectDef.LOOT = "O";
        ObjectDef.TEAM = "T";
        ObjectDef.GLOBAL_VALUE = "G.globalvalue";
        ObjectDef.GAME_CONFIG = "G.gameconfig";
        return ObjectDef;
    }());
    Pan3d.ObjectDef = ObjectDef;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ObjectDef.js.map
/***********************************************************************/
/*************** 本代码由协议工具自动生成，请勿手动修改 ****************/
/***********************************************************************/
var Pan3d;
(function (Pan3d) {
    var both_sync_mstime = /** @class */ (function () {
        function both_sync_mstime() {
            this.optcode = 0;
        }
        /**
         从输入二进制流中读取结构体
         */
        both_sync_mstime.read = function (self, bytes) {
            if (this.input == null)
                this.input = new Pan3d.Pan3dByteArray();
            this.input = bytes;
            //var parmLen:uint;
            //var i:int;
            //服务器运行的毫秒数
            self.mstime_now = this.input.readUint32();
            //自然时间
            self.time_now = this.input.readUint32();
            //自然时间的服务器启动时间
            self.open_time = this.input.readUint32();
        };
        both_sync_mstime.param_count = 3;
        both_sync_mstime.optname = "onSync_mstime";
        return both_sync_mstime;
    }());
    Pan3d.both_sync_mstime = both_sync_mstime;
    var both_sync_mstime_app = /** @class */ (function () {
        function both_sync_mstime_app() {
            this.optcode = 0;
        }
        /**
         从输入二进制流中读取结构体
         */
        both_sync_mstime_app.read = function (self, bytes) {
            if (this.input == null)
                this.input = new Pan3d.Pan3dByteArray();
            this.input = bytes;
            //var parmLen:uint;
            //var i:int;
            //服务器运行的毫秒数
            self.mstime_now = this.input.readUint32();
            //自然时间
            self.time_now = this.input.readUint32();
            //自然时间的服务器启动时间
            self.open_time = this.input.readUint32();
        };
        both_sync_mstime_app.param_count = 3;
        both_sync_mstime_app.optname = "onSync_mstime_app";
        return both_sync_mstime_app;
    }());
    Pan3d.both_sync_mstime_app = both_sync_mstime_app;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=clientmsg.js.map
/***********************************************************************/
/***************��������Э�鹤���Զ����ɣ������ֶ��޸�****************/
/************************ Э��汾��:#�������ƣ�ע�� ******************************/
/***********************************************************************/
//package cow.net.structs
//{	
//import sys.utils.Stream;	
var Pan3d;
(function (Pan3d) {
    var Protocols = /** @class */ (function () {
        function Protocols(f) {
            this._stream = new Pan3d.Pan3dByteArray;
            this._FUNCS = new Object();
            this._send_func = f;
            this._stream.endian = Pan3d.Endian.LITTLE_ENDIAN;
        }
        Protocols.prototype.getFuncName = function (cmd) {
            if (this._FUNCS[cmd]) {
                return this._FUNCS[cmd];
            }
            return null;
        };
        return Protocols;
    }());
    Pan3d.Protocols = Protocols;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Protocols.js.map
/***********************************************************************/
/*************** 本代码由协议工具自动生成，请勿手动修改 ****************/
/***********************************************************************/
var Pan3d;
(function (Pan3d) {
    var point = /** @class */ (function () {
        function point() {
        }
        /**
         从输入二进制流中读取结构体
         */
        point.prototype.read = function (input) {
            var i;
            this.pos_x = input.readFloat();
            this.pos_y = input.readFloat();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        point.prototype.write = function (output) {
            var i;
            output.writeFloat(this.pos_x);
            output.writeFloat(this.pos_y);
        };
        return point;
    }());
    Pan3d.point = point;
    var taxi_menu_info = /** @class */ (function () {
        function taxi_menu_info() {
            /**
             * 传送地点名称
             */
            this.taxi_text = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        taxi_menu_info.prototype.read = function (input) {
            var i;
            this.id = input.readInt32();
            this.taxi_text = input.readStringByLen(50);
            this.map_id = input.readUint32();
            this.pos_x = input.readUint16();
            this.pos_y = input.readUint16();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        taxi_menu_info.prototype.write = function (output) {
            var i;
            output.writeInt32(this.id);
            output.writeStringByLen(this.taxi_text, 50);
            output.writeUint32(this.map_id);
            output.writeUint16(this.pos_x);
            output.writeUint16(this.pos_y);
        };
        return taxi_menu_info;
    }());
    Pan3d.taxi_menu_info = taxi_menu_info;
    var char_create_info = /** @class */ (function () {
        function char_create_info() {
            /**
             * 名称
             */
            this.name = ""; //String
            /**
             *
             */
            this.guid = ""; //String
            /**
             * 邀请的帮派id
             */
            this.inviteGuid = ""; //String
            /**
             * 创建的帮派名称
             */
            this.faction_name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        char_create_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.faction = input.readUint8();
            this.gender = input.readUint8();
            this.level = input.readUint16();
            this.guid = input.readStringByLen(50);
            this.head_id = input.readUint32();
            this.hair_id = input.readUint32();
            this.race = input.readUint8();
            this.inviteGuid = input.readStringByLen(50);
            this.faction_name = input.readStringByLen(50);
            this.icon = input.readUint8();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        char_create_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeUint8(this.faction);
            output.writeUint8(this.gender);
            output.writeUint16(this.level);
            output.writeStringByLen(this.guid, 50);
            output.writeUint32(this.head_id);
            output.writeUint32(this.hair_id);
            output.writeUint8(this.race);
            output.writeStringByLen(this.inviteGuid, 50);
            output.writeStringByLen(this.faction_name, 50);
            output.writeUint8(this.icon);
        };
        return char_create_info;
    }());
    Pan3d.char_create_info = char_create_info;
    var quest_option = /** @class */ (function () {
        function quest_option() {
            /**
             * 任务标题
             */
            this.quest_title = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        quest_option.prototype.read = function (input) {
            var i;
            this.quest_id = input.readUint32();
            this.quest_icon = input.readUint32();
            this.quest_level = input.readUint16();
            this.quest_title = input.readStringByLen(50);
            this.flags = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        quest_option.prototype.write = function (output) {
            var i;
            output.writeUint32(this.quest_id);
            output.writeUint32(this.quest_icon);
            output.writeUint16(this.quest_level);
            output.writeStringByLen(this.quest_title, 50);
            output.writeUint32(this.flags);
        };
        return quest_option;
    }());
    Pan3d.quest_option = quest_option;
    var quest_canaccept_info = /** @class */ (function () {
        function quest_canaccept_info() {
            /**
             * 标题
             */
            this.title = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        quest_canaccept_info.prototype.read = function (input) {
            var i;
            this.quest_id = input.readUint32();
            this.quest_type = input.readUint8();
            this.title = input.readStringByLen(50);
            this.npc_id = input.readUint32();
            this.quest_level = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        quest_canaccept_info.prototype.write = function (output) {
            var i;
            output.writeUint32(this.quest_id);
            output.writeUint8(this.quest_type);
            output.writeStringByLen(this.title, 50);
            output.writeUint32(this.npc_id);
            output.writeUint32(this.quest_level);
        };
        return quest_canaccept_info;
    }());
    Pan3d.quest_canaccept_info = quest_canaccept_info;
    var gossip_menu_option_info = /** @class */ (function () {
        function gossip_menu_option_info() {
            /**
             * 选项文本
             */
            this.option_title = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        gossip_menu_option_info.prototype.read = function (input) {
            var i;
            this.id = input.readInt32();
            this.option_icon = input.readInt32();
            this.option_title = input.readStringByLen(200);
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        gossip_menu_option_info.prototype.write = function (output) {
            var i;
            output.writeInt32(this.id);
            output.writeInt32(this.option_icon);
            output.writeStringByLen(this.option_title, 200);
        };
        return gossip_menu_option_info;
    }());
    Pan3d.gossip_menu_option_info = gossip_menu_option_info;
    var item_cooldown_info = /** @class */ (function () {
        function item_cooldown_info() {
        }
        /**
         从输入二进制流中读取结构体
         */
        item_cooldown_info.prototype.read = function (input) {
            var i;
            this.item = input.readUint32();
            this.cooldown = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        item_cooldown_info.prototype.write = function (output) {
            var i;
            output.writeUint32(this.item);
            output.writeUint32(this.cooldown);
        };
        return item_cooldown_info;
    }());
    Pan3d.item_cooldown_info = item_cooldown_info;
    var quest_status = /** @class */ (function () {
        function quest_status() {
        }
        /**
         从输入二进制流中读取结构体
         */
        quest_status.prototype.read = function (input) {
            var i;
            this.quest_id = input.readUint16();
            this.status = input.readUint8();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        quest_status.prototype.write = function (output) {
            var i;
            output.writeUint16(this.quest_id);
            output.writeUint8(this.status);
        };
        return quest_status;
    }());
    Pan3d.quest_status = quest_status;
    var item_reward_info = /** @class */ (function () {
        function item_reward_info() {
        }
        /**
         从输入二进制流中读取结构体
         */
        item_reward_info.prototype.read = function (input) {
            var i;
            this.item_id = input.readUint16();
            this.num = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        item_reward_info.prototype.write = function (output) {
            var i;
            output.writeUint16(this.item_id);
            output.writeUint32(this.num);
        };
        return item_reward_info;
    }());
    Pan3d.item_reward_info = item_reward_info;
    var social_friend_info = /** @class */ (function () {
        function social_friend_info() {
            /**
             * 好友guid
             */
            this.guid = ""; //String
            /**
             * 名字
             */
            this.name = ""; //String
            /**
             * 帮派
             */
            this.faction = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        social_friend_info.prototype.read = function (input) {
            var i;
            this.guid = input.readStringByLen(50);
            this.name = input.readStringByLen(50);
            this.faction = input.readStringByLen(50);
            this.level = input.readUint16();
            this.icon = input.readUint16();
            this.vip = input.readUint16();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        social_friend_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.guid, 50);
            output.writeStringByLen(this.name, 50);
            output.writeStringByLen(this.faction, 50);
            output.writeUint16(this.level);
            output.writeUint16(this.icon);
            output.writeUint16(this.vip);
        };
        return social_friend_info;
    }());
    Pan3d.social_friend_info = social_friend_info;
    var faction_info = /** @class */ (function () {
        function faction_info() {
            /**
             * 帮派guid
             */
            this.faction_guid = ""; //String
            /**
             * 名字
             */
            this.faction_name = ""; //String
            /**
             * 帮主名字
             */
            this.faction_bz = ""; //String
            /**
             * 公告
             */
            this.faction_gg = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        faction_info.prototype.read = function (input) {
            var i;
            this.faction_guid = input.readStringByLen(50);
            this.faction_name = input.readStringByLen(50);
            this.faction_bz = input.readStringByLen(50);
            this.faction_gg = input.readStringByLen(108);
            this.level = input.readUint16();
            this.icon = input.readUint8();
            this.player_count = input.readUint16();
            this.minlev = input.readUint16();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        faction_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.faction_guid, 50);
            output.writeStringByLen(this.faction_name, 50);
            output.writeStringByLen(this.faction_bz, 50);
            output.writeStringByLen(this.faction_gg, 108);
            output.writeUint16(this.level);
            output.writeUint8(this.icon);
            output.writeUint16(this.player_count);
            output.writeUint16(this.minlev);
        };
        return faction_info;
    }());
    Pan3d.faction_info = faction_info;
    var rank_info = /** @class */ (function () {
        function rank_info() {
            /**
             * 名字
             */
            this.name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        rank_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.value = input.readFloat();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        rank_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeFloat(this.value);
        };
        return rank_info;
    }());
    Pan3d.rank_info = rank_info;
    var line_info = /** @class */ (function () {
        function line_info() {
        }
        /**
         从输入二进制流中读取结构体
         */
        line_info.prototype.read = function (input) {
            var i;
            this.lineNo = input.readUint16();
            this.rate = input.readUint8();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        line_info.prototype.write = function (output) {
            var i;
            output.writeUint16(this.lineNo);
            output.writeUint8(this.rate);
        };
        return line_info;
    }());
    Pan3d.line_info = line_info;
    var wait_info = /** @class */ (function () {
        function wait_info() {
            /**
             * 名字
             */
            this.name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        wait_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.state = input.readInt8();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        wait_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeInt8(this.state);
        };
        return wait_info;
    }());
    Pan3d.wait_info = wait_info;
    var cultivation_rivals_info = /** @class */ (function () {
        function cultivation_rivals_info() {
            /**
             * 名字
             */
            this.name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        cultivation_rivals_info.prototype.read = function (input) {
            var i;
            this.index = input.readUint32();
            this.name = input.readStringByLen(50);
            this.level = input.readUint32();
            this.weapon = input.readUint32();
            this.avatar = input.readUint32();
            this.divine = input.readUint32();
            this.force = input.readUint32();
            this.chest = input.readUint32();
            this.gender = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        cultivation_rivals_info.prototype.write = function (output) {
            var i;
            output.writeUint32(this.index);
            output.writeStringByLen(this.name, 50);
            output.writeUint32(this.level);
            output.writeUint32(this.weapon);
            output.writeUint32(this.avatar);
            output.writeUint32(this.divine);
            output.writeUint32(this.force);
            output.writeUint32(this.chest);
            output.writeUint32(this.gender);
        };
        return cultivation_rivals_info;
    }());
    Pan3d.cultivation_rivals_info = cultivation_rivals_info;
    var faction_gift_info = /** @class */ (function () {
        function faction_gift_info() {
            /**
             * 赠送者guid
             */
            this.guid = ""; //String
            /**
             * 赠送者留言
             */
            this.msg = ""; //String
            /**
             * 赠送道具信息
             */
            this.item_list = ""; //String
            /**
             * 回复信息
             */
            this.reply_list = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        faction_gift_info.prototype.read = function (input) {
            var i;
            this.rank = input.readUint32();
            this.id = input.readUint32();
            this.point = input.readUint32();
            this.thank = input.readUint32();
            this.reply = input.readUint32();
            this.time = input.readUint32();
            this.count_id = input.readUint32();
            this.guid = input.readStringByLen(50);
            this.msg = input.readStringByLen(50);
            this.item_list = input.readStringByLen(150);
            this.reply_list = input.readStringByLen(100);
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        faction_gift_info.prototype.write = function (output) {
            var i;
            output.writeUint32(this.rank);
            output.writeUint32(this.id);
            output.writeUint32(this.point);
            output.writeUint32(this.thank);
            output.writeUint32(this.reply);
            output.writeUint32(this.time);
            output.writeUint32(this.count_id);
            output.writeStringByLen(this.guid, 50);
            output.writeStringByLen(this.msg, 50);
            output.writeStringByLen(this.item_list, 150);
            output.writeStringByLen(this.reply_list, 100);
        };
        return faction_gift_info;
    }());
    Pan3d.faction_gift_info = faction_gift_info;
    var faction_gift_rank_info = /** @class */ (function () {
        function faction_gift_rank_info() {
            /**
             * 女王名称
             */
            this.queen_name = ""; //String
            /**
             * 家族名称
             */
            this.faction_name = ""; //String
            /**
             * 骑士名称
             */
            this.guard_name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        faction_gift_rank_info.prototype.read = function (input) {
            var i;
            this.rank = input.readUint32();
            this.point = input.readUint32();
            this.queen_name = input.readStringByLen(50);
            this.faction_name = input.readStringByLen(50);
            this.guard_name = input.readStringByLen(50);
            this.faction_flag = input.readUint32();
            this.queen_vip = input.readUint32();
            this.guard_vip = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        faction_gift_rank_info.prototype.write = function (output) {
            var i;
            output.writeUint32(this.rank);
            output.writeUint32(this.point);
            output.writeStringByLen(this.queen_name, 50);
            output.writeStringByLen(this.faction_name, 50);
            output.writeStringByLen(this.guard_name, 50);
            output.writeUint32(this.faction_flag);
            output.writeUint32(this.queen_vip);
            output.writeUint32(this.guard_vip);
        };
        return faction_gift_rank_info;
    }());
    Pan3d.faction_gift_rank_info = faction_gift_rank_info;
    var mass_boss_info = /** @class */ (function () {
        function mass_boss_info() {
        }
        /**
         从输入二进制流中读取结构体
         */
        mass_boss_info.prototype.read = function (input) {
            var i;
            this.id = input.readUint8();
            this.state = input.readUint8();
            this.time = input.readUint32();
            this.percent = input.readUint8();
            this.count = input.readUint16();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        mass_boss_info.prototype.write = function (output) {
            var i;
            output.writeUint8(this.id);
            output.writeUint8(this.state);
            output.writeUint32(this.time);
            output.writeUint8(this.percent);
            output.writeUint16(this.count);
        };
        return mass_boss_info;
    }());
    Pan3d.mass_boss_info = mass_boss_info;
    var mass_boss_rank_info = /** @class */ (function () {
        function mass_boss_rank_info() {
            /**
             * 名称
             */
            this.name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        mass_boss_rank_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.dam = input.readDouble();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        mass_boss_rank_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeDouble(this.dam);
        };
        return mass_boss_rank_info;
    }());
    Pan3d.mass_boss_rank_info = mass_boss_rank_info;
    var equip_info = /** @class */ (function () {
        function equip_info() {
            /**
             * 装备信息
             */
            this.equip = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        equip_info.prototype.read = function (input) {
            var i;
            this.equip = input.readStringByLen(50);
            this.strength_lv = input.readUint32();
            this.refine_rank = input.readUint32();
            this.refine_star = input.readUint32();
            this.gem1_lv = input.readUint32();
            this.gem2_lv = input.readUint32();
            this.gem3_lv = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        equip_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.equip, 50);
            output.writeUint32(this.strength_lv);
            output.writeUint32(this.refine_rank);
            output.writeUint32(this.refine_star);
            output.writeUint32(this.gem1_lv);
            output.writeUint32(this.gem2_lv);
            output.writeUint32(this.gem3_lv);
        };
        return equip_info;
    }());
    Pan3d.equip_info = equip_info;
    var act_rank_info = /** @class */ (function () {
        function act_rank_info() {
            /**
             * 名称
             */
            this.name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        act_rank_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.value = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        act_rank_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeUint32(this.value);
        };
        return act_rank_info;
    }());
    Pan3d.act_rank_info = act_rank_info;
    var faction_match_info = /** @class */ (function () {
        function faction_match_info() {
            /**
             * 家族名称
             */
            this.name = ""; //String
            /**
             * 家族id
             */
            this.guid = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        faction_match_info.prototype.read = function (input) {
            var i;
            this.name = input.readStringByLen(50);
            this.result = input.readUint32();
            this.rank = input.readUint32();
            this.guid = input.readStringByLen(50);
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        faction_match_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.name, 50);
            output.writeUint32(this.result);
            output.writeUint32(this.rank);
            output.writeStringByLen(this.guid, 50);
        };
        return faction_match_info;
    }());
    Pan3d.faction_match_info = faction_match_info;
    var group_search_info = /** @class */ (function () {
        function group_search_info() {
            /**
             * 队伍guid
             */
            this.guid = ""; //String
            /**
             * 队长guid
             */
            this.cap_guid = ""; //String
            /**
             * 队长名称
             */
            this.cap_name = ""; //String
        }
        /**
         从输入二进制流中读取结构体
         */
        group_search_info.prototype.read = function (input) {
            var i;
            this.guid = input.readStringByLen(50);
            this.cap_guid = input.readStringByLen(50);
            this.cap_name = input.readStringByLen(50);
            this.members = input.readUint32();
        };
        /**
         * 将结构体写入到输出二进制流中
         */
        group_search_info.prototype.write = function (output) {
            var i;
            output.writeStringByLen(this.guid, 50);
            output.writeStringByLen(this.cap_guid, 50);
            output.writeStringByLen(this.cap_name, 50);
            output.writeUint32(this.members);
        };
        return group_search_info;
    }());
    Pan3d.group_search_info = group_search_info;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=clientstru.js.map
var Pan3d;
(function (Pan3d) {
    var NetManager = /** @class */ (function () {
        function NetManager() {
            var _this = this;
            this.connectState = 0; // 0断开 1正在连接 2连接成功
            this._handlerMap = new Object;
            this.protocolos = new Pan3d.Protocols(function ($byte) {
                _this.send($byte);
            });
        }
        NetManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new NetManager();
            }
            return this._instance;
        };
        NetManager.prototype.connect = function (ip, port, conntFun) {
            var _this = this;
            // var str:string = window.location.toString();
            // var preStr:string = "ws://"
            // if(str.indexOf("https") != -1){
            //     preStr = "wss://"
            // }
            this._socket = new WebSocket("ws://" + ip + ":" + port);
            this._socket.binaryType = "arraybuffer";
            this._socket.onopen = function (evt) { _this.onopenEvent(evt); };
            this._socket.onmessage = function (evt) { _this.onmessageEvent(evt); };
            this._socket.onclose = function (evt) { _this.oncloseEvent(evt); };
            this._socket.onerror = function (evt) { _this.onErrorEvent(evt); };
            this._connetFun = conntFun;
            this.connectState = 1;
        };
        NetManager.prototype.onErrorEvent = function (evt) {
            console.log("socket error", evt);
            this.connectState = 0;
        };
        NetManager.prototype.onopenEvent = function (evt) {
            //console.log("连接服务器成功");
            this._connetFun();
            // TimeUtil.addTimeOut(30 * 1000, () => {
            //     if (!GuidData.player) {
            //         alert("服务器关闭，请换服务器")
            //         window.location.href = "login.html";
            //     }
            // });
            this.connectState = 2;
        };
        NetManager.prototype.onmessageEvent = function (evt) {
            var $byte = new Pan3d.Pan3dByteArray(evt.data);
            $byte.endian = Pan3d.Endian.LITTLE_ENDIAN;
            var optcode = $byte.readUnsignedShort();
            //console.log("消息号:" + optcode + ":" + this.protocolos.getFuncName(optcode))
            if (this._handlerMap[optcode]) {
                this._handlerMap[optcode]($byte);
            }
            else {
                console.log("未注册的消息号:" + optcode + ":" + this.protocolos.getFuncName(optcode));
            }
        };
        NetManager.prototype.oncloseEvent = function (evt) {
            this.connectState = 2;
            console.log("服务器断开");
        };
        NetManager.prototype.reg = function (netReg) {
            var obj = netReg.getHanderMap();
            for (var key in obj) {
                this._handlerMap[key] = obj[key];
            }
        };
        NetManager.prototype.unReg = function (key) {
            delete this._handlerMap[key];
        };
        NetManager.prototype.send = function ($byte) {
            this._socket.send($byte.buffer);
        };
        NetManager.prototype.close = function () {
            this._socket.close();
        };
        return NetManager;
    }());
    Pan3d.NetManager = NetManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=NetManager.js.map
var Pan3d;
(function (Pan3d) {
    var DualQuatFloat32Array = /** @class */ (function () {
        function DualQuatFloat32Array() {
        }
        return DualQuatFloat32Array;
    }());
    Pan3d.DualQuatFloat32Array = DualQuatFloat32Array;
    var AnimData = /** @class */ (function () {
        function AnimData() {
            this.inLoop = 0;
            this.inter = new Array;
            this.bounds = new Array;
            this.nameHeight = 0;
            this.posAry = new Array;
            this.hasProcess = false;
        }
        AnimData.prototype.processMesh = function ($skinMesh) {
            if (this.hasProcess) {
                //console.log("has process logic error");
                return;
            }
            this.makeArrBoneQPAry($skinMesh);
            this.hasProcess = true;
        };
        AnimData.prototype.makeArrBoneQPAry = function ($skinMesh) {
            this.meshBoneQPAryDic = new Pan3d.Dictionary([]);
            for (var k = 0; k < $skinMesh.meshAry.length; k++) {
                var $conleM = this.conleMatrixArr();
                for (var i = 0; i < $conleM.length; i++) {
                    var frameAry = $conleM[i];
                    for (var j = 0; j < frameAry.length; j++) {
                        if ($skinMesh.meshAry[k].bindPosMatrixAry[j]) {
                            frameAry[j].prepend($skinMesh.meshAry[k].bindPosMatrixAry[j]);
                        }
                    }
                }
                var temp = this.makeFrameDualQuatFloatArray($skinMesh, $conleM);
                this.meshBoneQPAryDic[$skinMesh.meshAry[k].uid] = temp;
                this.boneQPAry = temp; //存一下到原来数据中
            }
            this.matrixAry = $conleM; //将最后一个回传给插孔
        };
        AnimData.prototype.getBoneQPAryByMesh = function ($mesh) {
            return this.meshBoneQPAryDic[$mesh.uid];
        };
        AnimData.prototype.conleMatrixArr = function () {
            var $arr = new Array();
            for (var i = 0; i < this.matrixAry.length; i++) {
                var frameAry = this.matrixAry[i];
                var temp = new Array();
                for (var j = 0; j < frameAry.length; j++) {
                    temp.push(frameAry[j].clone());
                }
                $arr.push(temp);
            }
            return $arr;
        };
        AnimData.prototype.makeFrameDualQuatFloatArray = function ($skinMesh, $matrixAry) {
            var $backArr = new Array();
            var tempMatrix = new Pan3d.Matrix3D();
            for (var i = 0; i < $skinMesh.meshAry.length; i++) {
                var $frameDualQuat = new Array;
                var newIDBoneArr = $skinMesh.meshAry[i].boneNewIDAry;
                for (var j = 0; j < $matrixAry.length; j++) {
                    var baseBone = $matrixAry[j];
                    var $DualQuatFloat32Array = new DualQuatFloat32Array;
                    $DualQuatFloat32Array.quat = new Float32Array(newIDBoneArr.length * 4);
                    $DualQuatFloat32Array.pos = new Float32Array(newIDBoneArr.length * 3);
                    for (var k = 0; k < newIDBoneArr.length; k++) {
                        var $m = baseBone[newIDBoneArr[k]].clone(tempMatrix);
                        $m.appendScale(-1, 1, 1); //特别标记，因为四元数和矩阵运算结果不一
                        var $q = new Pan3d.Quaternion();
                        $q.fromMatrix($m);
                        var $p = $m.position;
                        $DualQuatFloat32Array.quat[k * 4 + 0] = $q.x;
                        $DualQuatFloat32Array.quat[k * 4 + 1] = $q.y;
                        $DualQuatFloat32Array.quat[k * 4 + 2] = $q.z;
                        $DualQuatFloat32Array.quat[k * 4 + 3] = $q.w;
                        $DualQuatFloat32Array.pos[k * 3 + 0] = $p.x;
                        $DualQuatFloat32Array.pos[k * 3 + 1] = $p.y;
                        $DualQuatFloat32Array.pos[k * 3 + 2] = $p.z;
                    }
                    $frameDualQuat.push($DualQuatFloat32Array);
                }
                $backArr.push($frameDualQuat);
            }
            return $backArr;
        };
        return AnimData;
    }());
    Pan3d.AnimData = AnimData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=AnimData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SkinMesh = /** @class */ (function (_super) {
        __extends(SkinMesh, _super);
        function SkinMesh() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.meshAry = new Array;
            _this.fileScale = 1;
            _this.tittleHeight = 0;
            _this.hitBox = new Pan3d.Vector2D(0, 0);
            _this.type = 0;
            _this.animDic = new Object;
            _this.ready = false;
            _this.hasDestory = false;
            return _this;
        }
        SkinMesh.prototype.makeHitBoxItem = function () {
            this.hitPosItem = new Array;
            var w = this.hitBox.x;
            var h = this.hitBox.y;
            var a = new Pan3d.Vector3D(-w, 0, -w);
            var b = new Pan3d.Vector3D(w, 0, -w);
            var c = new Pan3d.Vector3D(w, 0, w);
            var d = new Pan3d.Vector3D(-w, 0, w);
            this.hitPosItem.push(a);
            this.hitPosItem.push(b);
            this.hitPosItem.push(c);
            this.hitPosItem.push(d);
            var a1 = new Pan3d.Vector3D(-w, h, -w);
            var b1 = new Pan3d.Vector3D(w, h, -w);
            var c1 = new Pan3d.Vector3D(w, h, w);
            var d1 = new Pan3d.Vector3D(-w, h, w);
            this.hitPosItem.push(a1);
            this.hitPosItem.push(b1);
            this.hitPosItem.push(c1);
            this.hitPosItem.push(d1);
        };
        SkinMesh.prototype.addMesh = function ($mesh) {
            $mesh.uid = this.meshAry.length;
            this.meshAry.push($mesh);
        };
        SkinMesh.prototype.loadParticle = function () {
        };
        SkinMesh.prototype.loadMaterial = function ($fun) {
            if ($fun === void 0) { $fun = null; }
            for (var i = 0; i < this.meshAry.length; i++) {
                this.loadByteMeshDataMaterial(this.meshAry[i], $fun);
            }
        };
        SkinMesh.prototype.loadByteMeshDataMaterial = function ($meshData, $fun) {
            if ($fun === void 0) { $fun = null; }
            var url = Pan3d.Scene_data.fileRoot + $meshData.materialUrl;
            url = url.replace("_byte.txt", ".txt");
            url = url.replace(".txt", "_byte.txt");
            Pan3d.MaterialManager.getInstance().getMaterialByte(url, function ($material) {
                $meshData.material = $material;
                if ($material.usePbr) {
                    Pan3d.MeshDataManager.getInstance().uploadPbrMesh($meshData, $material.useNormal);
                }
                else if ($material.lightProbe || $material.directLight) {
                    Pan3d.MeshDataManager.getInstance().uploadPbrMesh($meshData, false);
                }
                if ($meshData.materialParamData) {
                    $meshData.materialParam = new Pan3d.MaterialBaseParam();
                    $meshData.materialParam.setData($meshData.material, $meshData.materialParamData);
                }
                if ($fun) {
                    $fun($material);
                }
            }, null, true, Pan3d.MaterialAnimShader.MATERIAL_ANIM_SHADER, Pan3d.MaterialAnimShader);
        };
        SkinMesh.prototype.setAction = function (actionAry, roleUrl) {
            this.animUrlAry = new Array;
            for (var i = 0; i < actionAry.length; i++) {
                var name = actionAry[i];
                var url = roleUrl + actionAry[i];
                var anim = Pan3d.AnimManager.getInstance().getAnimDataImmediate(url);
                anim.processMesh(this);
                this.animDic[name] = anim;
                this.animUrlAry.push(url);
            }
        };
        SkinMesh.prototype.destory = function () {
            if (this.allParticleDic) {
                for (var key in this.allParticleDic) {
                    Pan3d.ParticleManager.getInstance().releaseUrl(key);
                }
                this.allParticleDic = null;
            }
            for (var i = 0; i < this.meshAry.length; i++) {
                this.meshAry[i].destory();
            }
            this.meshAry.length = 0;
            this.meshAry = null;
            this.boneSocketDic = null;
            for (var i = 0; i < this.animUrlAry.length; i++) {
                Pan3d.AnimManager.getInstance().clearAnim(this.animUrlAry[i]);
            }
            for (var key in this.animDic) {
                delete this.animDic[key];
            }
            this.animDic = null;
            this.hasDestory = true;
        };
        SkinMesh.prototype.clone = function () {
            var temp = new SkinMesh();
            for (var key in this) {
                temp[key] = this[key];
            }
            temp.meshAry = [];
            for (var i = 0; i < this.meshAry.length; i++) {
                temp.meshAry.push(this.meshAry[i].clone());
            }
            return temp;
        };
        return SkinMesh;
    }(Pan3d.ResCount));
    Pan3d.SkinMesh = SkinMesh;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SkinMesh.js.map
var Pan3d;
(function (Pan3d) {
    var BoneSocketData = /** @class */ (function () {
        function BoneSocketData() {
        }
        return BoneSocketData;
    }());
    Pan3d.BoneSocketData = BoneSocketData;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BoneSocketData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var CollisionVo = /** @class */ (function (_super) {
        __extends(CollisionVo, _super);
        function CollisionVo($x, $y, $z) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($z === void 0) { $z = 0; }
            return _super.call(this) || this;
        }
        return CollisionVo;
    }(Pan3d.Object3D));
    Pan3d.CollisionVo = CollisionVo;
    var CollisionItemVo = /** @class */ (function () {
        function CollisionItemVo() {
        }
        return CollisionItemVo;
    }());
    Pan3d.CollisionItemVo = CollisionItemVo;
    var CollisionType = /** @class */ (function () {
        function CollisionType() {
        }
        CollisionType.Polygon = 0;
        CollisionType.BOX = 1;
        CollisionType.BALL = 2; //球体
        CollisionType.Cylinder = 3; //圆柱
        CollisionType.Cone = 4; //圆锥
        return CollisionType;
    }());
    Pan3d.CollisionType = CollisionType;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CollisionVo.js.map
var Pan3d;
(function (Pan3d) {
    var CapsuleVo = /** @class */ (function () {
        function CapsuleVo($radius, $height) {
            this.radius = $radius;
            this.height = $height;
        }
        return CapsuleVo;
    }());
    Pan3d.CapsuleVo = CapsuleVo;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CapsuleVo.js.map
var Pan3d;
(function (Pan3d) {
    var LightVo = /** @class */ (function () {
        function LightVo() {
            this.sunDirect = new Array(0, 1, 0);
            this.sunColor = new Array(2, 0, 0);
            this.ambientColor = new Array(0, 0, 0);
        }
        LightVo.prototype.setData = function (sd, sc, ac) {
            this.sunDirect[0] = sd.x;
            this.sunDirect[1] = sd.y;
            this.sunDirect[2] = sd.z;
            this.sunColor[0] = sc.x;
            this.sunColor[1] = sc.y;
            this.sunColor[2] = sc.z;
            this.ambientColor[0] = ac.x;
            this.ambientColor[1] = ac.y;
            this.ambientColor[2] = ac.z;
        };
        return LightVo;
    }());
    Pan3d.LightVo = LightVo;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LightVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var LineDisplayShader = /** @class */ (function (_super) {
        __extends(LineDisplayShader, _super);
        function LineDisplayShader() {
            return _super.call(this) || this;
        }
        LineDisplayShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v3Color");
        };
        LineDisplayShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec3 v3Color;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec4 colorData;" +
                "void main(void)" +
                "{" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   colorData =vec4(v3Color,1) ;" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        LineDisplayShader.prototype.getFragmentShaderString = function () {
            var $str = " precision mediump float;\n" +
                "varying vec4 colorData;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor =colorData;\n" +
                "}";
            return $str;
        };
        LineDisplayShader.LineShader = "LineShader";
        return LineDisplayShader;
    }(Pan3d.Shader3D));
    Pan3d.LineDisplayShader = LineDisplayShader;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LineDisplayShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var LineDisplaySprite = /** @class */ (function (_super) {
        __extends(LineDisplaySprite, _super);
        function LineDisplaySprite() {
            var _this = _super.call(this) || this;
            _this.baseColor = new Pan3d.Vector3D(1, 0, 0);
            _this.objData = new Pan3d.ObjData;
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Pan3d.LineDisplayShader.LineShader);
            _this.program = _this.shader.program;
            _this.makeLineMode(new Pan3d.Vector3D(0, 0, 0), new Pan3d.Vector3D(100, 0, 0), new Pan3d.Vector3D());
            _this.makeLineMode(new Pan3d.Vector3D(0, 0, 0), new Pan3d.Vector3D(100, 0, 100), new Pan3d.Vector3D());
            _this.makeLineMode(new Pan3d.Vector3D(100, 0, 0), new Pan3d.Vector3D(100, 0, 100), new Pan3d.Vector3D());
            _this.upToGpu();
            return _this;
        }
        LineDisplaySprite.prototype.makeLineMode = function (a, b, $color) {
            if ($color === void 0) { $color = null; }
            if (!this.lineVecPos || !this.lineIndex) {
                this.clear();
            }
            if ($color) {
                this.baseColor = $color;
            }
            this.lineVecPos.push(a.x, a.y, a.z);
            this.lineVecPos.push(b.x, b.y, b.z);
            this.lineColor.push(this.baseColor.x, this.baseColor.y, this.baseColor.z);
            this.lineColor.push(this.baseColor.x, this.baseColor.y, this.baseColor.z);
            this.lineIndex.push(this.lineIndex.length + 0, this.lineIndex.length + 1);
        };
        LineDisplaySprite.prototype.clear = function () {
            this.lineVecPos = new Array;
            this.lineIndex = new Array;
            this.lineColor = new Array;
            if (this.objData.indexBuffer) {
                this.objData.indexBuffer = null;
            }
        };
        LineDisplaySprite.prototype.upToGpu = function () {
            if (this.lineIndex.length) {
                //console.log("A星长度", this.lineIndex.length)
                this.objData.treNum = this.lineIndex.length;
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.lineVecPos);
                this.objData.normalsBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.lineColor);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.lineIndex);
            }
        };
        LineDisplaySprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Pan3d.Scene_data.context3D.setProgram(this.program);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Pan3d.Scene_data.viewMatrx3D.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Pan3d.Scene_data.cam3D.cameraMatrix.m);
                Pan3d.Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Pan3d.Scene_data.context3D.setVa(1, 3, this.objData.normalsBuffer);
                Pan3d.Scene_data.context3D.drawLine(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return LineDisplaySprite;
    }(Pan3d.Display3D));
    Pan3d.LineDisplaySprite = LineDisplaySprite;
    var MulLineSprite = /** @class */ (function (_super) {
        __extends(MulLineSprite, _super);
        function MulLineSprite() {
            var _this = _super.call(this) || this;
            if (!_this.itemSprite) {
                _this.itemSprite = new Array;
            }
            return _this;
        }
        MulLineSprite.prototype.makeLineMode = function (a, b, $color) {
            if ($color === void 0) { $color = null; }
            _super.prototype.makeLineMode.call(this, a, b, $color);
            var $dic = this.getSprite();
            $dic.makeLineMode(a, b, $color);
        };
        MulLineSprite.prototype.getSprite = function () {
            var $id = Math.floor(this.lineIndex.length / 10000);
            if (!this.itemSprite[$id]) {
                var $temp = new LineDisplaySprite;
                $temp.clear();
                $temp.baseColor = this.baseColor;
                this.itemSprite.push($temp);
            }
            return this.itemSprite[$id];
        };
        MulLineSprite.prototype.update = function () {
            for (var i = 0; i < this.itemSprite.length; i++) {
                this.itemSprite[i].posMatrix = this.posMatrix;
                this.itemSprite[i].update();
            }
        };
        MulLineSprite.prototype.upToGpu = function () {
            for (var i = 0; i < this.itemSprite.length; i++) {
                this.itemSprite[i].upToGpu();
            }
        };
        MulLineSprite.prototype.clear = function () {
            _super.prototype.clear.call(this);
            if (!this.itemSprite) {
                this.itemSprite = new Array;
            }
            for (var i = 0; this.itemSprite && i < this.itemSprite.length; i++) {
                this.itemSprite[i].clear();
            }
        };
        return MulLineSprite;
    }(LineDisplaySprite));
    Pan3d.MulLineSprite = MulLineSprite;
    var GridLineSprite = /** @class */ (function (_super) {
        __extends(GridLineSprite, _super);
        function GridLineSprite() {
            var _this = _super.call(this) || this;
            _this.makeGridData();
            return _this;
        }
        GridLineSprite.prototype.makeGridData = function () {
            var w = 100;
            var n = 10;
            var skeep = w / n;
            this.clear();
            var a;
            var b;
            a = new Pan3d.Vector3D(0, 0, +w);
            b = new Pan3d.Vector3D(0, 0, -w);
            this.makeLineMode(a, b, new Pan3d.Vector3D(0, 0, 1, 1));
            a = new Pan3d.Vector3D(+w, 0, 0);
            b = new Pan3d.Vector3D(-w, 0, 0);
            this.makeLineMode(a, b, new Pan3d.Vector3D(1, 0, 0, 1));
            this.baseColor = new Pan3d.Vector3D(128 / 255, 128 / 255, 128 / 255, 1);
            for (var i = 1; i <= n; i++) {
                a = new Pan3d.Vector3D(+i * skeep, 0, +w);
                b = new Pan3d.Vector3D(+i * skeep, 0, -w);
                this.makeLineMode(a, b);
                a = new Pan3d.Vector3D(-i * skeep, 0, +w);
                b = new Pan3d.Vector3D(-i * skeep, 0, -w);
                this.makeLineMode(a, b);
                a = new Pan3d.Vector3D(+w, 0, +i * skeep);
                b = new Pan3d.Vector3D(-w, 0, +i * skeep);
                this.makeLineMode(a, b);
                a = new Pan3d.Vector3D(+w, 0, -i * skeep);
                b = new Pan3d.Vector3D(-w, 0, -i * skeep);
                this.makeLineMode(a, b);
            }
            this.upToGpu();
        };
        return GridLineSprite;
    }(LineDisplaySprite));
    Pan3d.GridLineSprite = GridLineSprite;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=LineDisplaySprite.js.map
var Pan3d;
(function (Pan3d) {
    var FpsMc = /** @class */ (function () {
        function FpsMc() {
            this.drawNum = 0;
            this.fpsStr = "";
        }
        FpsMc.update = function () {
        };
        FpsMc.prototype.getStr = function () {
            if (true) {
                // FpsMc.fpsNowNum = Math.min(this.drawNum + float2int(this.drawNum / 10 * FpsMc.addFps), 60)
                FpsMc.fpsNowNum = Math.min(this.drawNum, 600);
                this.fpsStr = "Fps:" + String(FpsMc.fpsNowNum) + "-" + FpsMc.tipStr;
            }
            return this.fpsStr;
        };
        FpsMc.addFps = 0;
        FpsMc.fpsNowNum = 0;
        FpsMc.tipStr = "";
        return FpsMc;
    }());
    Pan3d.FpsMc = FpsMc;
    var FpsStage = /** @class */ (function () {
        function FpsStage() {
            this.lastTime = 0;
            this.cPos = new Pan3d.Vector2D(150, 100);
        }
        FpsStage.getInstance = function () {
            if (!this._instance) {
                this._instance = new FpsStage();
            }
            return this._instance;
        };
        FpsStage.prototype.init = function ($cadves, $loadCav) {
            var _this = this;
            this.canvas2D = $cadves;
            this.loadCav = $loadCav;
            this.fps = new FpsMc();
            this.canvasUi = this.canvas2D.getContext("2d");
            this.loadCtx = this.loadCav.getContext("2d");
            Pan3d.TimeUtil.addFrameTick(function () { _this.upData(); });
        };
        FpsStage.prototype.showLoadInfo = function (str) {
            /*
            this.loadCtx.clearRect(0, 0, this.loadCav.width, this.loadCav.height);
            this.loadCtx.font = "40px Helvetica";
            this.loadCtx.fillStyle = "#ffffff";
            this.loadCtx.textBaseline = "top";
            this.loadCtx.textAlign = "left";
            this.loadCtx.fillText(str, 0, 0);
    
            */
        };
        FpsStage.prototype.removeShowLoad = function () {
            if (this.loadCav.parentElement) {
                this.loadCav.parentElement.removeChild(this.loadCav);
            }
            FpsStage.showFps = true;
        };
        FpsStage.prototype.upData = function () {
            this.fps.drawNum++;
            if (this.lastTime >= Pan3d.TimeUtil.getTimer() - 1000) {
                return;
            }
            this.lastTime = Pan3d.TimeUtil.getTimer();
            if (!FpsStage.showFps) {
                this.canvasUi.clearRect(0, 0, this.canvas2D.width, this.canvas2D.height);
                return;
            }
            this.canvasUi.font = "40px Helvetica";
            var wNum = this.canvasUi.measureText(this.fps.getStr()).width;
            this.canvas2D.width = wNum;
            this.canvas2D.height = 30;
            this.canvasUi.clearRect(50, 0, this.canvas2D.width - 50, this.canvas2D.height);
            this.canvasUi.fillStyle = "#000000"; // text color
            this.canvasUi.fillRect(50, 0, this.canvas2D.width - 50, this.canvas2D.height);
            this.canvasUi.font = "30px Helvetica";
            this.canvasUi.fillStyle = "#ffffff"; // text color
            this.canvasUi.fillText(this.fps.getStr(), 50, 0);
            this.fps.drawNum = 0;
        };
        FpsStage.prototype.makeXyzLine = function () {
            var xPos = new Pan3d.Vector3D(80, 0, 0);
            var yPos = new Pan3d.Vector3D(0, 70, 0);
            var zPos = new Pan3d.Vector3D(0, 0, 80);
            var $m = new Pan3d.Matrix3D;
            $m.appendRotation(Pan3d.Scene_data.cam3D.rotationY, Pan3d.Vector3D.Y_AXIS);
            $m.appendRotation(Pan3d.Scene_data.cam3D.rotationX, Pan3d.Vector3D.X_AXIS);
            xPos = $m.transformVector(xPos);
            yPos = $m.transformVector(yPos);
            zPos = $m.transformVector(zPos);
            this.drawLine(new Pan3d.Vector2D(0, 0), new Pan3d.Vector2D(xPos.x, -xPos.y), "#ff0000");
            this.drawLine(new Pan3d.Vector2D(0, 0), new Pan3d.Vector2D(yPos.x, -yPos.y), "#00ff00");
            this.drawLine(new Pan3d.Vector2D(0, 0), new Pan3d.Vector2D(zPos.x, -zPos.y), "#0000ff");
            this.canvasUi.font = "12px Helvetica";
            this.canvasUi.fillStyle = "#ff0000"; // text color
            this.canvasUi.fillText("x", xPos.x + this.cPos.x, -xPos.y + this.cPos.y);
            this.canvasUi.fillStyle = "#00ff00"; // text color
            this.canvasUi.fillText("y", yPos.x + this.cPos.x, -yPos.y + this.cPos.y);
            this.canvasUi.fillStyle = "#0000ff"; // text color
            this.canvasUi.fillText("z", zPos.x + this.cPos.x, -zPos.y + this.cPos.y);
        };
        FpsStage.prototype.drawLine = function (a, b, $color) {
            if ($color === void 0) { $color = "red"; }
            this.canvasUi.beginPath();
            this.canvasUi.lineWidth = 2;
            this.canvasUi.strokeStyle = $color;
            this.canvasUi.moveTo(a.x + this.cPos.x, a.y + this.cPos.y);
            this.canvasUi.lineTo(b.x + this.cPos.x, b.y + this.cPos.y);
            this.canvasUi.stroke();
        };
        FpsStage.prototype.resetSize = function () {
            this.cPos = new Pan3d.Vector2D(150, Pan3d.Scene_data.stageHeight - 100);
        };
        FpsStage.showFps = false;
        return FpsStage;
    }());
    Pan3d.FpsStage = FpsStage;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=FpsStage.js.map
var Pan3d;
(function (Pan3d) {
    var Module = /** @class */ (function () {
        function Module() {
            /**
                 * processor字典
                 */
            this.processorMap = new Object();
        }
        Module.prototype.getModuleName = function () {
            throw new Error("module必须复写命名");
            //return "";
        };
        /**
        * 注册的Processor的集合
        * 请注意：返回为Processor的实例数组
        * @return
        *
        */
        Module.prototype.listProcessors = function () {
            return null;
        };
        /**
        * 注册所有的Processor
        */
        Module.prototype.registerProcessors = function () {
            //注册Processor
            var processorArr = this.listProcessors();
            if (processorArr != null && processorArr.length > 0) {
                for (var i = 0; i < processorArr.length; i++) {
                    this.registerProcessor(processorArr[i]);
                }
            }
        };
        /**
        * 注册Processor
        * @param $processor
        */
        Module.prototype.registerProcessor = function ($processor) {
            //单例
            if (this.processorMap[$processor.getName()] != null) {
                throw new Error("同一Module不能注册两个相同的Processor");
            }
            this.processorMap[$processor.getName()] = $processor;
            $processor.registerEvents();
            Pan3d.NetManager.getInstance().reg($processor);
        };
        /**
        * 注册Module
        * @param $module
        */
        Module.registerModule = function ($module) {
            //单例
            if (Module.moduleMap[$module.getModuleName()] != null) {
                throw new Error("不能注册两个相同的Module");
            }
            Module.moduleMap[$module.getModuleName()] = $module;
            $module.registerProcessors();
            //$module.onRegister();
        };
        /**
        * module字典
        */
        Module.moduleMap = new Object();
        return Module;
    }());
    Pan3d.Module = Module;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Module.js.map
var Pan3d;
(function (Pan3d) {
    var Processor = /** @class */ (function () {
        function Processor() {
        }
        Processor.prototype.getName = function () {
            throw new Error("process必须复写命名");
            //return "";
        };
        /**
        * 解析事件，之后交给处理函数
        * @param $notification
        */
        Processor.prototype.receivedModuleEvent = function ($event) {
        };
        /**
        * 监听的事件类的集合
        * 请注意：返回为事件的CLASS(这些CLASS必须继承自ModuleEvent)的数组
        * @return
        *
        */
        Processor.prototype.listenModuleEvents = function () {
            return null;
        };
        Processor.prototype.registerEvents = function () {
            //注册消息监听
            var meClassArr = this.listenModuleEvents();
            if (meClassArr != null && meClassArr.length > 0) {
                Pan3d.ModuleEventManager.addEvents(meClassArr, this.receivedModuleEvent, this);
            }
        };
        Processor.prototype.getHanderMap = function () {
            var obj = new Object;
            return obj;
        };
        return Processor;
    }());
    Pan3d.Processor = Processor;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Processor.js.map
var Pan3d;
(function (Pan3d) {
    var ModuleEventManager = /** @class */ (function () {
        function ModuleEventManager() {
        }
        ModuleEventManager.addEvents = function (ary, $fun, $thisObj) {
            for (var i = 0; i < ary.length; i++) {
                ModuleEventManager._instance.addEventListener(ary[i].type, $fun, $thisObj);
            }
        };
        ModuleEventManager.dispatchEvent = function ($event, $data) {
            if ($data === void 0) { $data = null; }
            if ($data) {
                $event.data = $data;
            }
            ModuleEventManager._instance.dispatchEvent($event);
        };
        ModuleEventManager._instance = new Pan3d.EventDispatcher();
        return ModuleEventManager;
    }());
    Pan3d.ModuleEventManager = ModuleEventManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=ModuleEventManager.js.map
var GameVersion = /** @class */ (function () {
    function GameVersion() {
    }
    GameVersion.init = function (str) {
        var ary = str.split("\n");
        for (var i = 0; i < ary.length; i++) {
            var itemAry = ary[i].split("\t");
            if (itemAry.length == 2) {
                this._dic[itemAry[0]] = itemAry[1];
            }
        }
    };
    GameVersion.getVersion = function (key) {
        return this._dic[key];
    };
    GameVersion._dic = new Object;
    return GameVersion;
}());
function getUItittleUrl(name) {
    return "ui/load/tittle/" + name + ".png";
}
function getSkillUrl(name) {
    if (!name || name.length == 0) {
        //console.log("没有技能")
    }
    var str = "skill/" + name + getBaseUrl() + ".txt";
    return str.replace(".txt", "_byte.txt");
}
function getModelUrl(name) {
    return "model/" + name + getBaseUrl() + ".txt";
}
function getModelUIUrl(name) {
    return "model/" + name + getBaseUrl() + ".txt";
}
function getMapUrl(name) {
    return "map/" + name + ".txt";
}
function getRoleUrl(name) {
    // if (name.search("2242") != -1) {
    //     //console.log("2242224222422242")
    // }
    // if (name == "0") {
    //     //console.log("没有这个装备")
    // }
    return "role/" + name + getBaseUrl() + ".txt";
}
function getZipMapUrl(name) {
    return "map/" + name + "/";
}
/**标准化数字 */
function Snum($num) {
    return "123";
}
function getEffectUIUrl(name) {
    return "ui/load/effect/" + name + ".png";
}
function getKeyProById($id) {
    return "cc";
}
//# sourceMappingURL=UnitFunction.js.map
var Pan3d;
(function (Pan3d) {
    var CharAction = /** @class */ (function () {
        function CharAction() {
        }
        CharAction.STANAD = "stand";
        CharAction.WALK = "walk";
        CharAction.DEATH = "death";
        CharAction.JUMP = "jump";
        CharAction.SIT = "sit";
        CharAction.ATTACK_01 = "attack_01";
        CharAction.ATTACK_02 = "attack_02";
        CharAction.ATTACK_03 = "attack_03";
        CharAction.ATTACK_04 = "attack_04";
        CharAction.ATTACK_05 = "attack_05";
        CharAction.ATTACK_06 = "attack_06";
        CharAction.ATTACK_010 = "attack_010";
        CharAction.ATTACK_020 = "attack_020";
        CharAction.STAND_MOUNT = "stand_mount_01";
        CharAction.WALK_MOUNT = "walk_mount_01";
        CharAction.s_attack_01 = "s_attack_01"; //移动中行走的特殊技能
        return CharAction;
    }());
    Pan3d.CharAction = CharAction;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=CharAction.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var Unit = /** @class */ (function (_super) {
        __extends(Unit, _super);
        function Unit() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.path = new Array;
            _this.isMain = false;
            _this.originalRotation = 0;
            return _this;
        }
        return Unit;
    }(Pan3d.GuidObject));
    Pan3d.Unit = Unit;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=Unit.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SceneBaseChar = /** @class */ (function (_super) {
        __extends(SceneBaseChar, _super);
        function SceneBaseChar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._avatar = -1;
            _this._visible = true;
            return _this;
        }
        Object.defineProperty(SceneBaseChar.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        SceneBaseChar.prototype.setAvatar = function (num) {
            if (this._avatar == num) {
                return;
            }
            this._avatar = num;
            this.setRoleUrl(this.getSceneCharAvatarUrl(num));
        };
        SceneBaseChar.prototype.update = function () {
            if (this.visible) {
                _super.prototype.update.call(this);
            }
            if (this._shadow) {
                this._shadow._visible = this.visible;
            }
        };
        SceneBaseChar.prototype.getSceneCharAvatarUrl = function (num) {
            var $url = getRoleUrl(String(num));
            return getRoleUrl(String(num));
        };
        SceneBaseChar.prototype.getSceneCharWeaponUrl = function (num, $suffix) {
            if ($suffix === void 0) { $suffix = ""; }
            return getModelUrl(String(num + $suffix));
        };
        return SceneBaseChar;
    }(Pan3d.Display3dMovie));
    Pan3d.SceneBaseChar = SceneBaseChar;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SceneBaseChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var SceneChar = /** @class */ (function (_super) {
        __extends(SceneChar, _super);
        function SceneChar() {
            var _this = _super.call(this) || this;
            _this.speedTX = 1.5 / 20;
            _this.life = 0;
            _this.isMount = false;
            _this._px = 0;
            _this._py = 0;
            _this._pz = 0;
            _this._pRotationY = 0;
            _this._isBoss = false;
            _this._optimization = false; //当优化为true的时候 不显示
            _this._weaponNum = -1;
            _this._wingID = -1;
            _this.lastBloodcolorType = 0;
            _this.tittleHeight = 50;
            _this.toRotationY = 0;
            _this._resultVisible = true;
            _this._showHitBox = false;
            // private triIndex: Array<number> = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7]
            // private triIndex: Array<number> = [0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 2, 6, 7, 2, 7, 3, 3, 7, 4, 3, 4, 0]
            _this.triIndex = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 2, 6, 7, 2, 7, 3, 3, 7, 4, 3, 4, 0];
            _this.shadow = true;
            _this.skillitem = new Array();
            return _this;
        }
        Object.defineProperty(SceneChar.prototype, "isDeath", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "isBoss", {
            get: function () {
                return this._isBoss;
            },
            set: function (val) {
                this._isBoss = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "px", {
            get: function () {
                return this._px;
            },
            set: function (val) {
                this._px = val;
                if (this.isMount) {
                    this.mountChar.x = val;
                    if (this._shadow) {
                        this._shadow.x = val;
                    }
                }
                else {
                    this.x = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "py", {
            get: function () {
                return this._py;
            },
            set: function (val) {
                this._py = val;
                if (this.isMount) {
                    this.mountChar.y = val;
                    if (this._shadow) {
                        this._shadow.y = val;
                    }
                }
                else {
                    this.y = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "pz", {
            get: function () {
                return this._pz;
            },
            set: function (val) {
                this._pz = val;
                if (this.isMount) {
                    this.mountChar.z = val;
                    if (this._shadow) {
                        this._shadow.z = val;
                    }
                }
                else {
                    this.z = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "forceRotationY", {
            /**强制角度 */
            set: function (val) {
                this.pRotationY = val;
                this.rotationY = val;
                this.toRotationY = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "pRotationY", {
            get: function () {
                return this._pRotationY;
            },
            set: function (val) {
                this._pRotationY = val;
                if (this.isMount) {
                    this.mountChar.rotationY = val;
                }
                else {
                    this.rotationY = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        SceneChar.prototype.play = function ($action, $completeState, needFollow) {
            if ($completeState === void 0) { $completeState = 0; }
            if (needFollow === void 0) { needFollow = true; }
            if (this.isSinging) {
                $completeState = 0; //吟唱时动作状态成为2;
                if ($action == Pan3d.CharAction.WALK || $action == Pan3d.CharAction.STANAD) {
                    return true;
                }
            }
            if (this.isMount) {
                this.mountChar.visible = Boolean($action != Pan3d.CharAction.JUMP);
                if ($action == Pan3d.CharAction.STANAD) {
                    _super.prototype.play.call(this, Pan3d.CharAction.STAND_MOUNT);
                }
                else if ($action == Pan3d.CharAction.WALK) {
                    _super.prototype.play.call(this, Pan3d.CharAction.WALK_MOUNT);
                }
                else {
                    if (this.mountChar.visible) {
                        _super.prototype.play.call(this, Pan3d.CharAction.STAND_MOUNT);
                    }
                    else {
                        _super.prototype.play.call(this, Pan3d.CharAction.JUMP);
                    }
                }
                return this.mountChar.play($action, $completeState, needFollow);
            }
            else {
                return _super.prototype.play.call(this, $action, $completeState, needFollow);
            }
            // if (this.unit && this.unit.isMain) {
            //     if (this.isMount) {
            //         //console.log("有坐骑")
            //     } else {
            //         //console.log("无坐骑") 
            //     }
            // }
        };
        SceneChar.prototype.getCurrentAction = function () {
            if (this.isMount) {
                return this.mountChar.curentAction;
            }
            else {
                return this.curentAction;
            }
        };
        SceneChar.prototype.getSceneCharAvatarUrl = function (num) {
            var $tempNum = String(num);
            if (num == 0) {
                //console.log("衣服为0")
                throw new Error("衣服为getSceneCharAvatarUrl");
            }
            var $url = getRoleUrl($tempNum);
            return $url;
        };
        SceneChar.prototype.setMount = function () {
        };
        SceneChar.prototype.setWeapon = function (num) {
            if (this._weaponNum == num) {
                return;
            }
            this._weaponNum = num;
            if (num <= 0) { //移除武器
                this.removePart(SceneChar.WEAPON_PART);
            }
            else {
            }
        };
        SceneChar.prototype.setWeaponByAvatar = function (avatar, $suffix) {
            if ($suffix === void 0) { $suffix = ""; }
        };
        SceneChar.prototype.addTestWeapon = function () {
            this.addPart("test" + Math.random(), SceneChar.WEAPON_DEFAULT_SLOT, this.getSceneCharWeaponUrl(Math.random() > 0.5 ? 5202 : 5201));
        };
        SceneChar.prototype.refreshTittle = function () {
            this.refreshPos();
        };
        SceneChar.prototype.showName = function ($color) {
            if ($color === void 0) { $color = null; }
            var nameAry = this.unit.getName().split(",");
            var $baseName = nameAry[nameAry.length - 1];
            $color = "[00ff00]";
            var $colorName = $color + $baseName;
            if (!this._charNameVo) {
                this._charNameVo = Pan3d.BloodManager.getInstance().getCharNameMeshVo($colorName);
            }
            else {
                this._charNameVo.name = $colorName;
            }
            this.refreshPos();
        };
        SceneChar.prototype.showBlood = function ($colorType) {
            if ($colorType === void 0) { $colorType = 0; }
            //添加显示血条 -FIXME--0
            this.lastBloodcolorType = $colorType;
            if (!this._charBloodVo) {
                this._charBloodVo = Pan3d.BloodManager.getInstance().getBloodLineMeshVo();
                this._charBloodVo.colortype = $colorType;
            }
            else {
                this._charBloodVo.colortype = $colorType;
            }
            this.refreshPos();
        };
        SceneChar.prototype.onMeshLoaded = function () {
            if (this._skinMesh) {
                this.tittleHeight = this._skinMesh.tittleHeight;
            }
        };
        SceneChar.prototype.refreshPos = function () {
            //处理血条和名字位置 -FIXME--0
            if (this._charBloodVo) {
                this._charBloodVo.pos.x = this.px;
                if (this.isMount) {
                    this._charBloodVo.pos.y = this.py + this.tittleHeight - 6 + 20;
                }
                else {
                    this._charBloodVo.pos.y = this.py + this.tittleHeight - 6;
                }
                this._charBloodVo.pos.z = this.pz;
                this._charBloodVo.visible = this._resultVisible;
            }
            if (this._charNameVo) {
                this._charNameVo.pos.x = this.px;
                if (this.isMount) {
                    this._charNameVo.pos.y = this.py + this.tittleHeight + 20;
                }
                else {
                    this._charNameVo.pos.y = this.py + this.tittleHeight;
                }
                this._charNameVo.pos.z = this.pz;
                this._charNameVo.visible = this._resultVisible;
            }
            if (this._charTitleVo) {
                this._charTitleVo.pos.x = this.px;
                if (this.isMount) {
                    this._charTitleVo.pos.y = this.py + this.tittleHeight + 20 + 10;
                }
                else {
                    this._charTitleVo.pos.y = this.py + this.tittleHeight + 10;
                }
                this._charTitleVo.pos.z = this.pz;
                this._charTitleVo.visible = this._resultVisible;
            }
        };
        Object.defineProperty(SceneChar.prototype, "walkPath", {
            set: function ($wp) {
                if ($wp.length == 0) {
                    return;
                }
                // //console.log("收到寻路信息",$wp,  TimeUtil.getTimer())
                if (this.curentAction == Pan3d.CharAction.STANAD || this.curentAction == Pan3d.CharAction.STAND_MOUNT) {
                    this.play(Pan3d.CharAction.WALK);
                }
                this._walkPath = $wp;
                this.setTarget();
                this._speedDirect = null;
            },
            enumerable: true,
            configurable: true
        });
        /*
        public set walkPath2D($item: Array<Vector2D>) {
            //if (this.unit) {
            //    this.unit.sendPath($item);
            //}
          //  $item.splice(0, 1);
            $item.shift()
            this.applyWalk($item)
        }
        private setWalkPathFun($item: Array<Vector2D>, $bfun: Function = null): void {
    
            this.walkPath2D = $item;
            this.walkCompleteBackFun = $bfun
    
        }
        */
        //得到A星数据后重新刷坐标
        SceneChar.prototype.fixAstartData = function (pos) {
            if (this._walkPath) {
                for (var i = 0; i < this._walkPath.length; i++) {
                    this._walkPath[i].x += pos.x;
                    this._walkPath[i].z = pos.y - this._walkPath[i].z;
                    this._walkPath[i].y = Pan3d.AstarUtil.getHeightByPos(this._walkPath[i]);
                }
            }
            this.px += pos.x;
            this.pz = pos.y - this.pz;
            if (this._astatTopos) {
                this._astatTopos.x += pos.x;
                this._astatTopos.z = pos.y - this._astatTopos.z;
                this.setAstarNrmAndRotation();
            }
            this.refreshY();
        };
        SceneChar.prototype.applyWalk = function ($item) {
            if ($item && $item.length == 2) {
                //排除是停止的路径将不处理
                if ($item[0].x == $item[1].x && $item[0].y == $item[1].y) {
                    this._speedDirect = null;
                    this._walkPath = null;
                    if (this.curentAction == Pan3d.CharAction.WALK) {
                        this.play(Pan3d.CharAction.STANAD);
                    }
                    var $k = Pan3d.AstarUtil.getWorldPosByStart2D($item[0]);
                    this.px = $k.x;
                    this.pz = $k.z;
                    return;
                }
            }
            this.walkPath = Pan3d.AstarUtil.Path2dTo3d($item);
        };
        Object.defineProperty(SceneChar.prototype, "moveToPos2D", {
            set: function ($v2d) {
                // $v2d=new Vector2D(154,87)
                this._walkPath = null;
                this.play(this._defaultAction);
                var pos = Pan3d.AstarUtil.getWorldPosByStart2D($v2d);
                this.px = pos.x;
                this.pz = pos.z;
                this.refreshY();
            },
            enumerable: true,
            configurable: true
        });
        SceneChar.prototype.stopToPos = function ($v2d) {
            var pos = Pan3d.AstarUtil.getWorldPosByStart2D($v2d);
            var arr = new Array;
            arr.push(pos);
            this.walkPath = arr;
        };
        SceneChar.prototype.moveTile = function (xt, yt) {
            this.moveToPos2D = new Pan3d.Vector2D(xt, yt);
        };
        SceneChar.prototype.updateFrame = function (t) {
            _super.prototype.updateFrame.call(this, t);
        };
        SceneChar.prototype.refreshY = function () {
            this.py = Pan3d.AstarUtil.getHeightByPos(this.getCurrentPos());
            this.refreshPos();
        };
        SceneChar.prototype.refreshHP = function () {
        };
        //平滑num=1为直接
        SceneChar.prototype.rotationToNew = function (value, num) {
            if (num === void 0) { num = 1; }
            var anum = value - this.pRotationY;
            if (anum == 0) {
                return;
            }
            if (anum < 1) {
                this.pRotationY = value;
                return;
            }
            var a = ((value - this.pRotationY) % 360 + 360) % 360;
            if (a > 180) {
                this.pRotationY -= (360 - a) / num;
            }
            else {
                this.pRotationY += a / num;
            }
        };
        Object.defineProperty(SceneChar.prototype, "speedUseTime", {
            //设计毫秒走每个格子，
            set: function (value) {
                // this.speed = 0.01 * (1000 / (value))
                this.speedTX = 0.01 * (value / 10);
                ////console.log(this.speedTX )
            },
            enumerable: true,
            configurable: true
        });
        SceneChar.prototype.refreshSpeed = function () {
            this.speedUseTime = 1;
        };
        SceneChar.prototype.walkAstar = function (t) {
            if (this.unit && this.unit.isMain) {
            }
            var $wk = Math.min(t, 50);
            var distance = Pan3d.Vector3D.distance(new Pan3d.Vector3D(this.px, 0, this.pz), this._astatTopos);
            if (distance > 5) {
                var sn = $wk * this.speedTX;
                if (sn > distance) {
                    this.px = this._astatTopos.x;
                    this.pz = this._astatTopos.z;
                    var tempT = (sn - distance) / this.speedTX;
                    this.walkAstar(tempT);
                }
                else {
                    this.px += this._astarDirect.x * sn;
                    this.pz += this._astarDirect.z * sn;
                }
            }
            else {
                this.setTarget();
                if (!this._walkPath) { //已结束
                    this.px = this._astatTopos.x;
                    this.pz = this._astatTopos.z;
                    this.walkComplete();
                }
                else {
                    this.walkAstar(t);
                }
            }
        };
        SceneChar.prototype.walkComplete = function () {
            if (this.walkCompleteBackFun) {
                this.walkCompleteBackFun();
            }
        };
        SceneChar.prototype.setTarget = function () {
            if (!this._walkPath) {
                return;
            }
            if (this._walkPath.length == 0) {
                this._walkPath = null;
                this.play(Pan3d.CharAction.STANAD);
                return;
            }
            this._astatTopos = this._walkPath.shift();
            this.setAstarNrmAndRotation();
        };
        //计算移动角度和寻路方向 
        SceneChar.prototype.setAstarNrmAndRotation = function () {
            if (this._astatTopos) {
                this._astarDirect = this._astatTopos.subtract(this.getCurrentPos());
                this._astarDirect.y = 0;
                this._astarDirect.normalize();
                if (Pan3d.Vector3D.distance(this.getCurrentPos(), this._astatTopos) > 10) {
                    this.toRotationY = this.mathAngle(this._astatTopos.z, this._astatTopos.x, this.pz, this.px) + 180;
                }
            }
        };
        SceneChar.prototype.mathAngle = function (x1, y1, x2, y2) {
            return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
        };
        SceneChar.prototype.setSpeedDirect = function (value) {
            if (this.isDeath) {
                return;
            }
            this._speedDirect = value;
            if (this.curentAction == Pan3d.CharAction.STANAD || this.curentAction == Pan3d.CharAction.STAND_MOUNT) {
                this.play(Pan3d.CharAction.WALK);
            }
            this._walkPath = null;
        };
        SceneChar.prototype.stopMove = function () {
            this._speedDirect = null;
            this._walkPath = null;
            this.play(Pan3d.CharAction.STANAD);
        };
        SceneChar.prototype.getEndWalkPathPos = function () {
            if (this._walkPath) {
                return this._walkPath[this._walkPath.length - 1];
            }
            else {
                return null;
            }
        };
        SceneChar.prototype.watch = function ($obj, $syn) {
            if ($syn === void 0) { $syn = false; }
            if (!$obj) {
                //console.log("面向对象无")
                return;
            }
            var xx = $obj.x - this.px;
            var yy = $obj.z - this.pz;
            var distance = Math.sqrt(xx * xx + yy * yy);
            xx /= distance;
            yy /= distance;
            var angle = Math.asin(xx) / Math.PI * 180;
            if (yy <= 0) {
                angle = 180 - angle;
            }
            if (!isNaN(angle)) {
                this.forceRotationY = angle;
            }
        };
        SceneChar.prototype.getCurrentPos = function () {
            return new Pan3d.Vector3D(this.px, this.py, this.pz);
        };
        SceneChar.prototype.getAstarPos = function () {
            return Pan3d.AstarUtil.getGrapIndexByPos(this.getCurrentPos());
        };
        SceneChar.prototype.changeAction = function ($action) {
            if (this.unit && this.unit.isMain) {
                switch ($action) {
                    case Pan3d.CharAction.ATTACK_01:
                        this.play(Pan3d.CharAction.ATTACK_010, 2);
                        break;
                    case Pan3d.CharAction.ATTACK_02:
                        this.play(Pan3d.CharAction.ATTACK_020, 2);
                        break;
                    default:
                        _super.prototype.changeAction.call(this, $action);
                        break;
                }
            }
            else {
                _super.prototype.changeAction.call(this, $action);
            }
        };
        SceneChar.prototype.playSkill = function ($skill) {
            this._walkPath = null;
            Pan3d.SkillManager.getInstance().playSkill($skill);
            this.skillVo = $skill;
        };
        SceneChar.prototype.msgSpellStop = function () {
            if (this.skillVo) {
                ////console.log("停止技能播放");
                this.skillVo.removeSkillForce();
                this.changeAction(this._defaultAction);
                this.skillVo = null;
            }
            this.isSinging = false;
        };
        //清理等待播放的连击技能
        SceneChar.prototype.destory = function () {
            if (this._hasDestory) {
                return;
            }
            _super.prototype.destory.call(this);
            this.destoryName();
            if (this._isBoss) {
            }
            if (this.skillVo) {
                this.skillVo.removeSkillForce();
                this.skillVo = null;
            }
            if (this._wingDisplay) {
                this._wingDisplay.destory();
            }
            this._hasDestory = true;
        };
        SceneChar.prototype.destoryName = function () {
            //清理血条和名称 -FIXME-0
            if (this._charNameVo) {
                this._charNameVo.destory();
                this._charNameVo = null;
            }
            if (this._charBloodVo) {
                this._charBloodVo.destory();
                this._charBloodVo = null;
            }
            if (this._charTitleVo) {
                this._charTitleVo.destory();
                this._charTitleVo = null;
            }
        };
        SceneChar.prototype.removeStage = function () {
            _super.prototype.removeStage.call(this);
            if (this._charNameVo) {
                this._charNameVo.visible = false;
            }
            if (this._charBloodVo) {
                this._charBloodVo.visible = false;
            }
            if (this.mountChar) {
                Pan3d.SceneManager.getInstance().removeMovieDisplay(this.mountChar);
            }
            if (this._wingDisplay) {
                Pan3d.SceneManager.getInstance().removeMovieDisplay(this._wingDisplay);
            }
        };
        SceneChar.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            if (this._charNameVo) {
                this._charNameVo.visible = true;
            }
            if (this._charBloodVo) {
                this._charBloodVo.visible = true;
            }
            if (this.mountChar) {
                Pan3d.SceneManager.getInstance().addMovieDisplay(this.mountChar);
            }
            if (this._wingDisplay) {
                Pan3d.SceneManager.getInstance().addMovieDisplay(this._wingDisplay);
            }
        };
        SceneChar.prototype.math_distance = function ($other) {
            return Pan3d.MathClass.math_distance(this.px, this.pz, $other.x, $other.z);
        };
        Object.defineProperty(SceneChar.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.applyVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "optimization", {
            get: function () {
                return this._optimization;
            },
            set: function (value) {
                this._optimization = value;
                this.applyVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneChar.prototype, "resultVisible", {
            get: function () {
                return this._resultVisible;
            },
            enumerable: true,
            configurable: true
        });
        SceneChar.prototype.applyVisible = function () {
            var value = this._visible;
            if (this._visible) {
                if (this._optimization) {
                    value = false;
                }
                else {
                    value = true;
                }
            }
            else {
                value = false;
            }
            if (this._partDic) {
                if (this._partDic[SceneChar.WEAPON_PART]) {
                    for (var _i = 0, _a = this._partDic[SceneChar.WEAPON_PART]; _i < _a.length; _i++) {
                        var obj = _a[_i];
                        obj.sceneVisible = value;
                    }
                }
            }
            if (this._wingDisplay) {
                this._wingDisplay.visible = value;
            }
            /*
            if (this._charBloodVo) {
                this._charBloodVo.visible = value
            }
            if (this._charNameVo) {
                this._charNameVo.visible = value
            }
            if (this._factionNameVo) {
                this._factionNameVo.visible = value
            }
            if (this._charTitleVo) {
                this._charTitleVo.visible = value
            }
            */
            if (!value) {
                this.destoryName();
            }
            this.shadow = value;
            this._resultVisible = value;
        };
        SceneChar.prototype.update = function () {
            if (!this._skinMesh) {
                return;
            }
            if (this._optimization) {
                return;
            }
            _super.prototype.update.call(this);
            if (this._showHitBox) {
                if (!this.lineSprite) {
                    Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader, new Pan3d.LineDisplayShader);
                    this.lineSprite = new Pan3d.LineDisplaySprite();
                    this.lineSprite.clear();
                    for (var i = 0; i < this.triIndex.length / 3; i++) {
                        var a = this._skinMesh.hitPosItem[this.triIndex[i * 3 + 0]];
                        var b = this._skinMesh.hitPosItem[this.triIndex[i * 3 + 1]];
                        var c = this._skinMesh.hitPosItem[this.triIndex[i * 3 + 2]];
                        this.lineSprite.makeLineMode(a, b);
                        this.lineSprite.makeLineMode(b, c);
                        this.lineSprite.makeLineMode(c, a);
                    }
                    this.lineSprite.upToGpu();
                }
                this.lineSprite.posMatrix = this.posMatrix.clone();
                this.lineSprite.update();
            }
        };
        SceneChar.prototype.mouseClik = function ($lineA, $lineB) {
            var $pos = Pan3d.Scene_data.cam3D.cameraMatrix.transformVector(this.getCurrentPos());
            if ($pos.z < Pan3d.Scene_data.cam3D.distance / 3) { //在Z后面
                return null;
            }
            var hitVec2 = Pan3d.MathUtil.math3DWorldtoDisplay2DPos($lineB);
            if (this._skinMesh) {
                if (!this.hitBox2DItem) {
                    this.hitBox2DItem = new Array;
                }
                this.hitBox2DItem.length = 0;
                for (var j = 0; j < this._skinMesh.hitPosItem.length; j++) {
                    var temppp = this.posMatrix.transformVector(this._skinMesh.hitPosItem[j]);
                    this.hitBox2DItem.push(Pan3d.MathUtil.math3DWorldtoDisplay2DPos(temppp));
                }
                for (var i = 0; i < this.triIndex.length / 3; i++) {
                    Pan3d.TestTriangle.baseTri.p1 = this.hitBox2DItem[this.triIndex[i * 3 + 0]];
                    Pan3d.TestTriangle.baseTri.p2 = this.hitBox2DItem[this.triIndex[i * 3 + 1]];
                    Pan3d.TestTriangle.baseTri.p3 = this.hitBox2DItem[this.triIndex[i * 3 + 2]];
                    if (Pan3d.TestTriangle.baseTri.checkPointIn(hitVec2)) {
                        return true;
                    }
                }
            }
            else {
                if (Pan3d.Vector2D.distance(hitVec2, Pan3d.MathUtil.math3DWorldtoDisplay2DPos(this.posMatrix.position)) < 20) {
                    return true;
                }
            }
            return false;
        };
        SceneChar.WEAPON_PART = "weapon";
        SceneChar.WEAPON_DEFAULT_SLOT = "w_01";
        SceneChar.MOUNT_SLOT = "mount_01";
        SceneChar.WING_SLOT = "wing_01";
        SceneChar.SEL_PART = "select";
        SceneChar.QUEST_ICON = "questicon";
        SceneChar.NONE_SLOT = "none";
        SceneChar.Defaul_Man_Avatar = 2002; //男
        SceneChar.Defaul_WoMan_Avater = 2012; //女
        return SceneChar;
    }(Pan3d.SceneBaseChar));
    Pan3d.SceneChar = SceneChar;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=SceneChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var MountChar = /** @class */ (function (_super) {
        __extends(MountChar, _super);
        function MountChar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MountChar.prototype.setData = function ($rank, $iid) {
            if ($iid > 0) {
                var obj = {};
                var avatar = obj.mountID;
                this.setAvatar(avatar);
                return;
            }
            if ($rank > 0) {
                var obj = {};
                var avatar = obj.mountID;
                this.setAvatar(avatar);
            }
        };
        return MountChar;
    }(Pan3d.SceneBaseChar));
    Pan3d.MountChar = MountChar;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=MountChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pan3d;
(function (Pan3d) {
    var BaseProcessor = /** @class */ (function (_super) {
        __extends(BaseProcessor, _super);
        function BaseProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BaseProcessor;
    }(Pan3d.Processor));
    Pan3d.BaseProcessor = BaseProcessor;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=BaseProcessor.js.map
var Pan3d;
(function (Pan3d) {
    var GameStart = /** @class */ (function () {
        function GameStart() {
            this.dataReady = false;
            this.uiReadyNum = 0;
            this.uiAllNum = 0;
        }
        GameStart.prototype.init = function () {
            var _this = this;
            Pan3d.TextureManager.getInstance().getTexture(Pan3d.Scene_data.fileRoot + "ui/load/001.jpg", function ($texture) {
            });
            if (GameStart.outNet) {
                GameStart.GM = false;
            }
            var $baseUiList = new Array;
            $baseUiList.push({ xmlurl: "ui/arpgui/textlist.txt", picurl: "ui/arpgui/textlist.png", name: Pan3d.UIData.textlist });
            $baseUiList.push({ xmlurl: "ui/uidata/public/public.txt", picurl: "ui/uidata/public/public.png", name: Pan3d.UIData.publicUi });
            this.uiAllNum = Pan3d.UIData.init($baseUiList, function () {
                _this.loadAll();
            }, function (num) {
                _this.uiReadyNum = num;
                if (_this.dataReady) {
                    Pan3d.FpsStage.getInstance().showLoadInfo("读取UI数据：" + _this.uiReadyNum + "/" + _this.uiAllNum);
                }
            });
        };
        GameStart.prototype.loadAll = function () {
            if (this.uiReadyNum == this.uiAllNum && this.dataReady) {
                this.loadDataComplet();
                Pan3d.FpsStage.getInstance().showLoadInfo("正在连接服务器");
                GameStart.ready = true;
            }
        };
        GameStart.prototype.loadDataComplet = function () {
            if (GameStart.outNet) {
                GameStart.GM = false;
            }
        };
        /**是否是外网 */
        GameStart.outNet = false;
        GameStart.GM = true;
        GameStart.ready = false;
        GameStart.appVersion = 0;
        return GameStart;
    }());
    Pan3d.GameStart = GameStart;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GameStart.js.map
var Pan3d;
(function (Pan3d) {
    var GameMouseManager = /** @class */ (function () {
        function GameMouseManager() {
            this.ready = false;
            this.resetPos = new Pan3d.Vector2D(150, 400);
            this.bindPos = new Pan3d.Vector2D();
            this.useMouseEvent = true;
            this.lastMouseEvetTime = 0;
            this.nextSendTime = 0;
            this.skipNum = 0;
            this.isFristTouchMove = true;
            this.yaoganIdentifier = -1;
        }
        GameMouseManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new GameMouseManager();
            }
            return this._instance;
        };
        GameMouseManager.prototype.setBtn = function ($a, $b) {
            this.b_yaogan_bar = $a;
            this.b_yaogan_bg = $b;
            this.ready = true;
        };
        GameMouseManager.prototype.addMouseEvent = function () {
            var _this = this;
            if (Pan3d.Scene_data.isPc) {
                document.addEventListener(Pan3d.MouseType.MouseDown, function ($evt) { _this.onMouse($evt); });
                document.addEventListener(Pan3d.MouseType.MouseUp, function ($evt) { _this.onMouse($evt); });
                document.addEventListener(Pan3d.MouseType.MouseMove, function ($evt) { _this.onMouse($evt); });
                document.addEventListener(Pan3d.MouseType.MouseWheel, function ($evt) { _this.onMouseWheel($evt); });
            }
            else {
                document.addEventListener(Pan3d.MouseType.TouchMove, function ($evt) { _this.onTouchMove($evt); });
                document.addEventListener(Pan3d.MouseType.TouchEnd, function ($evt) { _this.onTouchEnd($evt); });
                document.addEventListener(Pan3d.MouseType.TouchStart, function ($evt) { _this.onTouchStart($evt); });
            }
            this.bindPos.x = this.resetPos.x;
            this.bindPos.y = this.resetPos.y;
            this.updataFun = function (t) { _this.updata(t); };
        };
        GameMouseManager.prototype.onMouseWheel = function ($evt) {
            Pan3d.AstarUtil.sceneVectList = null;
            Pan3d.Scene_data.gameAngle += $evt.wheelDelta / 100;
        };
        GameMouseManager.prototype.isCanUseMouseEvent = function () {
            return this.useMouseEvent;
        };
        GameMouseManager.prototype.onMouse = function ($e) {
            if (!this.isCanUseMouseEvent()) {
                return;
            }
            if ($e.button == 2) {
                return;
            }
            var evt;
            var point = new Pan3d.Vector2D();
            if ($e instanceof MouseEvent) {
                if ($e.type == Pan3d.MouseType.MouseDown) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
                }
                else if ($e.type == Pan3d.MouseType.MouseUp) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                }
                else if ($e.type == Pan3d.MouseType.MouseMove) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
                }
                else if ($e.type == Pan3d.MouseType.MouseClick) {
                }
                point.x = $e.pageX;
                point.y = $e.pageY;
            }
            if (evt) {
                evt.mouseEvent = $e;
            }
            this.makeMouseEvent(evt, point);
        };
        GameMouseManager.prototype.makeMouseEvent = function (evt, point) {
            this.lastMouseEvetTime = Pan3d.TimeUtil.getTimer();
            var temp = win.LayerManager.getInstance().mouseEvetData(evt, point);
            if (evt.type == Pan3d.InteractiveEvent.Move) {
                return;
            }
        };
        GameMouseManager.prototype.mouseToEvent = function ($touchEvent) {
            var evt;
            var point = new Pan3d.Vector2D();
            if ($touchEvent.type == Pan3d.MouseType.TouchStart) {
                evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
            }
            else if ($touchEvent.type == Pan3d.MouseType.TouchEnd) {
                evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                point.x = $touchEvent.changedTouches[0].pageX;
                point.y = $touchEvent.changedTouches[0].pageY;
            }
            else if ($touchEvent.type == Pan3d.MouseType.TouchMove) {
                evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
            }
            if ($touchEvent.touches.length) {
                point.x = $touchEvent.touches[$touchEvent.touches.length - 1].clientX;
                point.y = $touchEvent.touches[$touchEvent.touches.length - 1].clientY;
            }
            this.makeMouseEvent(evt, point);
            return evt;
        };
        GameMouseManager.prototype.cantClikGround = function ($mousePos) {
            if (Pan3d.GameInstance.useYaoGan) {
                return false;
            }
            if (!Pan3d.GameInstance.mainChar) {
                return false;
            }
            if (!Pan3d.SceneManager.getInstance().render) {
                return false;
            }
            if (Pan3d.GameInstance.mainChar.isDeath) {
                return false;
            }
            return true;
        };
        GameMouseManager.prototype.onSceneMouseDown = function ($evt) {
            if (this.ready) {
                return;
            }
            var $mousePos = new Pan3d.Vector2D;
            if (!Pan3d.Scene_data.verticalScene) {
                $mousePos.x = $evt.x;
                $mousePos.y = $evt.y;
            }
            else {
                $mousePos.x = $evt.y;
                $mousePos.y = Pan3d.Scene_data.stageHeight - $evt.x;
            }
        };
        GameMouseManager.prototype.onTouchStart = function ($e) {
            if (!this.isCanUseMouseEvent()) {
                return;
            }
            this.mouseToEvent($e);
        };
        GameMouseManager.prototype.onTouchEnd = function ($e) {
            if (!this.isCanUseMouseEvent()) {
                return;
            }
            if (Pan3d.GameInstance.useYaoGan) {
                var hasYaoGan = false;
                for (var i = 0; i < $e.touches.length; i++) {
                    if ($e.touches[i].identifier == this.yaoganIdentifier) {
                        hasYaoGan = true;
                    }
                }
                if (!hasYaoGan) {
                    this.bindPos.x = this.resetPos.x;
                    this.bindPos.y = this.resetPos.y;
                    Pan3d.TimeUtil.removeFrameTick(this.updataFun);
                    this.canTestClikGroundMove = null; //
                    Pan3d.GameInstance.useYaoGan = false;
                    this.setBasePostion();
                }
            }
            this.mouseToEvent($e);
        };
        GameMouseManager.prototype.setBasePostion = function () {
            this.b_yaogan_bar.x = this.bindPos.x - this.b_yaogan_bar.width / 2;
            this.b_yaogan_bar.y = this.bindPos.y - this.b_yaogan_bar.height / 2;
            //console.log(this.b_yaogan_bar.y)
            this.b_yaogan_bg.x = this.bindPos.x - this.b_yaogan_bg.width / 2;
            this.b_yaogan_bg.y = this.bindPos.y - this.b_yaogan_bg.height / 2;
        };
        GameMouseManager.prototype.onTouchMove = function ($e) {
            // alert("--MOve--");
            if (!this.isCanUseMouseEvent()) {
                return;
            }
        };
        GameMouseManager.prototype.updata = function (t) {
        };
        GameMouseManager.prototype.getMouseDownPos = function ($touch) {
            var $mousePos = new Pan3d.Vector2D;
            if (!Pan3d.Scene_data.verticalScene) {
                $mousePos.x = $touch.pageX / Pan3d.UIData.Scale;
                $mousePos.y = $touch.pageY / Pan3d.UIData.Scale;
            }
            else {
                $mousePos.x = $touch.pageY / Pan3d.UIData.Scale;
                $mousePos.y = (Pan3d.Scene_data.stageHeight - $touch.pageX) / Pan3d.UIData.Scale;
            }
            $mousePos.y += (Pan3d.Scene_data.stageHeight / Pan3d.UIData.Scale - 540);
            return $mousePos;
        };
        return GameMouseManager;
    }());
    Pan3d.GameMouseManager = GameMouseManager;
})(Pan3d || (Pan3d = {}));
//# sourceMappingURL=GameMouseManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var SkillSceneChar = /** @class */ (function (_super) {
            __extends(SkillSceneChar, _super);
            function SkillSceneChar() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SkillSceneChar.prototype.onMeshLoaded = function () {
                _super.prototype.onMeshLoaded.call(this);
                if (this.loadFinishFun) {
                    this.loadFinishFun();
                }
            };
            SkillSceneChar.prototype.changeAction = function ($action) {
                this.curentAction = this._defaultAction;
                if (this.changeActionFun) {
                    this.changeActionFun($action);
                }
            };
            SkillSceneChar.prototype.setWeaponByAvatar = function (avatar, $suffix) {
                if ($suffix === void 0) { $suffix = ""; }
            };
            return SkillSceneChar;
        }(Pan3d.SceneChar));
        me.SkillSceneChar = SkillSceneChar;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=SkillSceneChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var ModelSceneChar = /** @class */ (function (_super) {
            __extends(ModelSceneChar, _super);
            function ModelSceneChar() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ModelSceneChar.prototype.setWeaponByAvatar = function (avatar, $suffix) {
                if ($suffix === void 0) { $suffix = ""; }
                this.addPart(Pan3d.SceneChar.WEAPON_PART, Pan3d.SceneChar.WEAPON_DEFAULT_SLOT, this.getSceneCharWeaponUrl(avatar, $suffix));
            };
            ModelSceneChar.prototype.setWingByID = function ($wingId) {
                if (!this._wingDisplay) {
                    this._wingDisplay = new Pan3d.SceneBaseChar();
                }
                this._wingDisplay.setRoleUrl(getRoleUrl($wingId));
                this._wingDisplay.setBind(this, Pan3d.SceneChar.WING_SLOT);
                Pan3d.SceneManager.getInstance().addMovieDisplay(this._wingDisplay);
            };
            ModelSceneChar.prototype.setMountById = function ($mountId) {
                if (!this.mountChar) {
                    this.mountChar = new Pan3d.MountChar();
                }
                this.mountChar.setRoleUrl(getRoleUrl($mountId));
                this.setBind(this.mountChar, Pan3d.SceneChar.MOUNT_SLOT);
                Pan3d.SceneManager.getInstance().addMovieDisplay(this.mountChar);
                this.isMount = true;
            };
            return ModelSceneChar;
        }(Pan3d.SceneChar));
        me.ModelSceneChar = ModelSceneChar;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=ModelSceneChar.js.map
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var ModelshowMouseManager = /** @class */ (function () {
            function ModelshowMouseManager() {
            }
            ModelshowMouseManager.getInstance = function () {
                if (!this._instance) {
                    this._instance = new ModelshowMouseManager();
                }
                return this._instance;
            };
            ModelshowMouseManager.prototype.addMouseEvent = function () {
                var _this = this;
                if (Pan3d.Scene_data.isPc) {
                    document.addEventListener(Pan3d.MouseType.MouseDown, function ($evt) { _this.onMouse($evt); });
                    document.addEventListener(Pan3d.MouseType.MouseUp, function ($evt) { _this.onMouse($evt); });
                    document.addEventListener(Pan3d.MouseType.MouseMove, function ($evt) { _this.onMouse($evt); });
                    document.addEventListener(Pan3d.MouseType.MouseWheel, function ($evt) { _this.onMouseWheel($evt); });
                }
                else {
                    document.addEventListener(Pan3d.MouseType.TouchMove, function ($evt) { _this.mouseToEvent($evt); });
                    document.addEventListener(Pan3d.MouseType.TouchEnd, function ($evt) { _this.mouseToEvent($evt); });
                    document.addEventListener(Pan3d.MouseType.TouchStart, function ($evt) { _this.mouseToEvent($evt); });
                }
            };
            ModelshowMouseManager.prototype.onMouseWheel = function ($evt) {
            };
            ModelshowMouseManager.prototype.onMouse = function ($e) {
                var evt;
                var point = new Pan3d.Vector2D();
                if ($e instanceof MouseEvent) {
                    if ($e.type == Pan3d.MouseType.MouseDown) {
                        evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
                    }
                    else if ($e.type == Pan3d.MouseType.MouseUp) {
                        evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                    }
                    else if ($e.type == Pan3d.MouseType.MouseMove) {
                        evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
                    }
                    else if ($e.type == Pan3d.MouseType.MouseClick) {
                    }
                    point.x = $e.pageX;
                    point.y = $e.pageY;
                }
                this.makeMouseEvent(evt, point);
            };
            ModelshowMouseManager.prototype.mouseToEvent = function ($touchEvent) {
                var evt;
                var point = new Pan3d.Vector2D();
                if ($touchEvent.type == Pan3d.MouseType.TouchStart) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down);
                }
                else if ($touchEvent.type == Pan3d.MouseType.TouchEnd) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up);
                    point.x = $touchEvent.changedTouches[0].pageX;
                    point.y = $touchEvent.changedTouches[0].pageY;
                }
                else if ($touchEvent.type == Pan3d.MouseType.TouchMove) {
                    evt = new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move);
                }
                if ($touchEvent.touches.length) {
                    point.x = $touchEvent.touches[$touchEvent.touches.length - 1].clientX;
                    point.y = $touchEvent.touches[$touchEvent.touches.length - 1].clientY;
                }
                this.makeMouseEvent(evt, point);
            };
            ModelshowMouseManager.prototype.makeMouseEvent = function (evt, point) {
                var temp = Pan3d.UIManager.getInstance().mouseEvetData(evt, point);
                if (!temp) {
                    if (evt.type == Pan3d.InteractiveEvent.Up) {
                        this.clikSceneGround(point);
                    }
                }
            };
            ModelshowMouseManager.prototype.clikSceneGround = function ($pos) {
            };
            ModelshowMouseManager.prototype.walkPathComplete = function () {
            };
            return ModelshowMouseManager;
        }());
        me.ModelshowMouseManager = ModelshowMouseManager;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=ModelshowMouseManager.js.map
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var SceneMouseEventModel = /** @class */ (function () {
            function SceneMouseEventModel() {
                this.lastRotationY = 0;
                this.lastRotationX = 0;
                this._lastMousePos = new Pan3d.Vector2D();
            }
            SceneMouseEventModel.getInstance = function () {
                if (!this._instance) {
                    this._instance = new SceneMouseEventModel();
                }
                return this._instance;
            };
            SceneMouseEventModel.prototype.initSceneFocueEvent = function () {
                var _this = this;
                Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Down, this.onMouseDown, this);
                Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Up, this.onMouseUp, this);
                Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Move, this.onMouseMove, this);
                document.addEventListener(Pan3d.MouseType.MouseWheel, function ($evt) { _this.onMouseWheel($evt); });
            };
            SceneMouseEventModel.prototype.onMouseWheel = function ($evt) {
                Pan3d.Scene_data.cam3D.distance += $evt.wheelDelta / 10;
            };
            SceneMouseEventModel.prototype.onMouseMove = function ($evt) {
                if (this._isMouseDown) {
                    var $addx = $evt.x - this._lastMousePos.x;
                    Pan3d.Scene_data.focus3D.rotationY = this.lastRotationY - $addx;
                    var $addy = $evt.y - this._lastMousePos.y;
                    Pan3d.Scene_data.focus3D.rotationX = this.lastRotationX - $addy;
                }
            };
            SceneMouseEventModel.prototype.onMouseDown = function ($evt) {
                this._lastMousePos.x = $evt.x;
                this._lastMousePos.y = $evt.y;
                this.lastRotationY = Pan3d.Scene_data.focus3D.rotationY;
                this.lastRotationX = Pan3d.Scene_data.focus3D.rotationX;
                this._isMouseDown = true;
            };
            SceneMouseEventModel.prototype.onMouseUp = function ($evt) {
                this._isMouseDown = false;
            };
            return SceneMouseEventModel;
        }());
        me.SceneMouseEventModel = SceneMouseEventModel;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=SceneMouseEventModel.js.map
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var CharModelShow = /** @class */ (function () {
            function CharModelShow() {
                this.addModelChar();
            }
            CharModelShow.prototype.addModelChar = function () {
                var $sc = new scenedis.me.ModelSceneChar();
                $sc.setRoleUrl(getRoleUrl("50003"));
                $sc.setWingByID("901");
                $sc.setMountById("4103");
                $sc.setWeaponByAvatar(50011);
                $sc.play(Pan3d.CharAction.STAND_MOUNT);
                Pan3d.SceneManager.getInstance().addMovieDisplay($sc);
            };
            return CharModelShow;
        }());
        me.CharModelShow = CharModelShow;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=CharModelShow.js.map
var scenedis;
(function (scenedis) {
    var me;
    (function (me) {
        var CharSkillPlayModel = /** @class */ (function () {
            function CharSkillPlayModel() {
                this.skillFileName = "jichu_1";
                this.charIdstr = "50001";
                this.weaponNum = 50011;
                this.skipId = 1;
                this.skillEffectItem = ["skill_01", "skill_02", "skill_03", "m_skill_01", "m_skill_02", "m_skill_03"];
                this.initSkillPlay();
            }
            CharSkillPlayModel.prototype.initSkillPlay = function () {
                if (!getUrlParam("id")) {
                    window.location.href = "index.html?id=" + random(10);
                }
                else {
                    this.makeUrlParam();
                    this.makeMainChar();
                }
            };
            CharSkillPlayModel.prototype.makeUrlParam = function () {
                this.paramId = Number(getUrlParam("id"));
                if (isNaN(this.paramId)) {
                    this.paramId = 0;
                }
                this.paramId = Math.floor(this.paramId);
                this.paramId = this.paramId % 6 + 1;
                if (this.paramId <= 0 || this.paramId > 6) {
                    this.paramId = 1;
                }
                if (this.paramId == 3 || this.paramId == 4) {
                    this.makeAttackChar();
                }
                this.skillFileName = "jichu_" + (Math.ceil(this.paramId / 2));
                this.charIdstr = "5000" + this.paramId;
                this.weaponNum = 50010 + this.paramId;
            };
            CharSkillPlayModel.prototype.makeAttackChar = function () {
                var $sc = new Pan3d.SceneChar();
                $sc.z = 100;
                $sc.setRoleUrl(getRoleUrl("7001"));
                Pan3d.SceneManager.getInstance().addMovieDisplay($sc);
                this.attackTarget = $sc;
                this.attackTarget.x = random(50) + 30;
                this.attackTarget.z = random(50) + 30;
            };
            CharSkillPlayModel.prototype.makeMainChar = function () {
                var _this = this;
                Pan3d.SkillManager.getInstance().preLoadSkill(getSkillUrl(this.skillFileName));
                var $sc = new scenedis.me.SkillSceneChar();
                $sc.setRoleUrl(getRoleUrl(this.charIdstr));
                Pan3d.SceneManager.getInstance().addMovieDisplay($sc);
                $sc.setWeaponByAvatar(this.weaponNum);
                this.mainChar = $sc;
                $sc.changeActionFun = function () { _this.playSkill(); };
                $sc.loadFinishFun = function () {
                    Pan3d.ResManager.getInstance().loadSkillRes(Pan3d.Scene_data.fileRoot + getSkillUrl(_this.skillFileName), function ($skillRes) {
                        Pan3d.SkillManager.getInstance().preLoadSkill(getSkillUrl(_this.skillFileName));
                        Pan3d.TimeUtil.addTimeOut(1000, function () { _this.playSkill(); });
                        console.log(Pan3d.TimeUtil.getTimer());
                    });
                };
            };
            CharSkillPlayModel.prototype.playSkill = function () {
                var $effectName = this.skillEffectItem[this.skipId % this.skillEffectItem.length];
                var $skill = Pan3d.SkillManager.getInstance().getSkill(getSkillUrl(this.skillFileName), $effectName);
                if ($skill.keyAry) {
                    if (this.textPlaySkillFun) {
                        Pan3d.TimeUtil.removeTimeTick(this.textPlaySkillFun);
                        this.textPlaySkillFun = null;
                    }
                }
                else {
                    return;
                }
                if ($skill) {
                    $skill.reset();
                    $skill.isDeath = false;
                }
                if (this.paramId == 3 || this.paramId == 4) {
                    /*
                    if ($effectName == "skill_01" || $effectName == "skill_02" || $effectName == "skill_03") {
                        $skill.configTrajectory(this.mainChar, this.attackTarget);
                    } else {
                       
                        if ($effectName == "m_skill_01") {
                            $skill.configFixEffect(this.mainChar);
                        } else {
                            this.attackTarget.x = random(50) + 30;
                            this.attackTarget.z = random(50) + 30;
                            var $tempPos: Vector3D = new Vector3D(this.attackTarget.x, this.attackTarget.y, this.attackTarget.z)
                            var $hitPosItem: Array<Vector3D> = new Array()
                            $hitPosItem.push($tempPos)
                            $skill.configFixEffect(this.mainChar, null, $hitPosItem);
            
                        }
                    }
                    */
                    if ($effectName == "m_skill_01") {
                        $skill.configFixEffect(this.mainChar);
                    }
                    else {
                        this.attackTarget.x = random(50) + 30;
                        this.attackTarget.z = random(50) + 30;
                        var $tempPos = new Pan3d.Vector3D(this.attackTarget.x, this.attackTarget.y, this.attackTarget.z);
                        var $hitPosItem = new Array();
                        $hitPosItem.push($tempPos);
                        $skill.configFixEffect(this.mainChar, null, $hitPosItem);
                    }
                    this.mainChar.watch(this.attackTarget, true);
                }
                else {
                    $skill.configFixEffect(this.mainChar);
                }
                this.mainChar.playSkill($skill);
                this.skipId++;
            };
            return CharSkillPlayModel;
        }());
        me.CharSkillPlayModel = CharSkillPlayModel;
    })(me = scenedis.me || (scenedis.me = {}));
})(scenedis || (scenedis = {}));
//# sourceMappingURL=CharSkillPlayModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene3d_me;
(function (scene3d_me) {
    var OverrideEngine = /** @class */ (function (_super) {
        __extends(OverrideEngine, _super);
        function OverrideEngine() {
            return _super.call(this) || this;
        }
        OverrideEngine.initConfig = function () {
            var _this = this;
            Pan3d.Engine.update = function () { _this.update(); }; //更换update
            Pan3d.Engine.init = function ($caves) { _this.init($caves); }; //更换引擎初始化
            Pan3d.Engine.resetSize = function (width, height) { _this.resetSize(width, height); }; //更尺寸变化
        };
        OverrideEngine.update = function () {
            Pan3d.TimeUtil.update();
            Pan3d.SceneManager.getInstance().update();
        };
        OverrideEngine.resetSize = function (width, height) {
            Pan3d.Scene_data.stageWidth = width;
            Pan3d.Scene_data.stageHeight = height;
            Pan3d.Scene_data.canvas3D.width = Pan3d.Scene_data.stageWidth;
            Pan3d.Scene_data.canvas3D.height = Pan3d.Scene_data.stageHeight;
            Pan3d.Scene_data.context3D.resetSize(Pan3d.Scene_data.stageWidth, Pan3d.Scene_data.stageHeight);
            Pan3d.UIManager.getInstance().resize();
            Pan3d.BloodManager.getInstance().resize();
            Pan3d.Engine.resetViewMatrx3D();
        };
        OverrideEngine.init = function ($caves) {
            var isIpad = /ipad/i.test(navigator.userAgent);
            var isIphone = /iPhone/i.test(navigator.userAgent);
            var isAndroid = /android/i.test(navigator.userAgent);
            var isWindow = /iindow/i.test(navigator.userAgent);
            var sUserAgent = navigator.userAgent.toLowerCase();
            ////console.log("--sUserAgent--",sUserAgent,isIpad,isIphone,isAndroid,isWindow);
            if (isIpad || isIphone || isAndroid) {
                Pan3d.Scene_data.isPc = false;
            }
            else {
                Pan3d.Scene_data.isPc = true;
            }
            Pan3d.Scene_data.vpMatrix = new Pan3d.Matrix3D;
            Pan3d.Scene_data.canvas3D = $caves;
            Pan3d.Scene_data.context3D = new Pan3d.Context3D();
            Pan3d.Scene_data.context3D.init($caves);
            Pan3d.UIManager.getInstance().init();
            Pan3d.Scene_data.cam3D = new Pan3d.Camera3D;
            Pan3d.Scene_data.focus3D = new Pan3d.Object3D;
            Pan3d.Scene_data.focus3D.x = 0;
            Pan3d.Scene_data.focus3D.y = 0;
            Pan3d.Scene_data.focus3D.z = 0;
            Pan3d.Scene_data.focus3D.rotationY = 135;
            Pan3d.Scene_data.focus3D.rotationX = -45;
            Pan3d.Scene_data.light = new Pan3d.LightVo();
            Pan3d.TimeUtil.init();
            Pan3d.Scene_data.supportBlob = true;
        };
        return OverrideEngine;
    }(Pan3d.Engine));
    scene3d_me.OverrideEngine = OverrideEngine;
})(scene3d_me || (scene3d_me = {}));
//# sourceMappingURL=OverrideEngine.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene3d_me;
(function (scene3d_me) {
    var OverrideSceneManager = /** @class */ (function (_super) {
        __extends(OverrideSceneManager, _super);
        function OverrideSceneManager() {
            return _super.call(this) || this;
        }
        OverrideSceneManager.initConfig = function () {
            Pan3d.SceneManager._instance = new OverrideSceneManager;
        };
        OverrideSceneManager.prototype.update = function () {
            Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D, Pan3d.Scene_data.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            Pan3d.Scene_data.context3D._contextSetTest.clear();
            if (isNaN(this._time)) {
                this._time = Pan3d.TimeUtil.getTimer();
            }
            this.updateMovieFrame();
            if (this._ready) {
                Pan3d.ParticleManager.getInstance().updateTime();
                Pan3d.SkillManager.getInstance().update();
                if (this.render) {
                    Pan3d.Scene_data.context3D.cullFaceBack(false);
                    Pan3d.Scene_data.context3D.cullFaceBack(true);
                    Pan3d.Scene_data.context3D.cullFaceBack(true);
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.setDepthTest(true);
                    this.updateStaticDiplay();
                    this.updateSpriteDisplay();
                    this.updateMovieDisplay();
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                    Pan3d.ParticleManager.getInstance().update();
                    Pan3d.BloodManager.getInstance().update();
                    Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                }
                Pan3d.Scene_data.context3D.setDepthTest(false);
                Pan3d.UIManager.getInstance().update();
            }
        };
        return OverrideSceneManager;
    }(Pan3d.SceneManager));
    scene3d_me.OverrideSceneManager = OverrideSceneManager;
})(scene3d_me || (scene3d_me = {}));
//# sourceMappingURL=OverrideSceneManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene3d_me;
(function (scene3d_me) {
    var ExpTextJumpUiDrawAndRefreash256 = /** @class */ (function (_super) {
        __extends(ExpTextJumpUiDrawAndRefreash256, _super);
        function ExpTextJumpUiDrawAndRefreash256() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExpTextJumpUiDrawAndRefreash256.prototype.drawTxtBydigitalAndtext = function ($vo) {
            var rec = this.parent.uiAtlas.getRec(this.textureStr);
            var ctx = Pan3d.UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var picid = $vo.type;
            var $width = 50;
            var $height = 25;
            var txtcolor;
            if ($vo.type == Pan3d.TextJumpType.EXPERIENCE) {
                txtcolor = Pan3d.ArtFont.num54;
            }
            var distion = Pan3d.ArtFont.getInstance().getAirFontWidth(ctx, String(this._data.str), txtcolor);
            distion += $width;
            Pan3d.UiDraw.cxtDrawImg(ctx, "TYPE" + picid, new Pan3d.Rectangle(rec.pixelWitdh - distion, rec.pixelHeight - $height, $width, $height), Pan3d.UIData.publicUi);
            Pan3d.ArtFont.getInstance().writeFontToCtxLeft(ctx, String(this._data.str), txtcolor, rec.pixelWitdh - distion + $width + 2, rec.pixelHeight - $height);
            Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            return distion;
        };
        return ExpTextJumpUiDrawAndRefreash256;
    }(Pan3d.ExpTextJumpUiDrawAndRefreash));
    scene3d_me.ExpTextJumpUiDrawAndRefreash256 = ExpTextJumpUiDrawAndRefreash256;
})(scene3d_me || (scene3d_me = {}));
(function (scene3d_me) {
    var OverrideBloodManager = /** @class */ (function (_super) {
        __extends(OverrideBloodManager, _super);
        function OverrideBloodManager() {
            var _this = _super.call(this) || this;
            _this._jumpText256_256 = new Pan3d.AlphaUiContianer(scene3d_me.ExpTextJumpUiDrawAndRefreash256, new Pan3d.Rectangle(0, 0, 256, 256), 2);
            _this.uiContianerItem.push(_this._jumpText256_256);
            return _this;
        }
        OverrideBloodManager.getInstance = function () {
            if (!Pan3d.BloodManager._instance) {
                console.log("一定要到这里--->复写飘字");
                Pan3d.BloodManager._instance = new OverrideBloodManager();
            }
            return Pan3d.BloodManager._instance;
        };
        OverrideBloodManager.prototype.setExpJump256_256Num = function ($textJumpUiVo) {
            this._jumpText256_256.showTemp($textJumpUiVo);
            console.log($textJumpUiVo);
        };
        return OverrideBloodManager;
    }(Pan3d.BloodManager));
    scene3d_me.OverrideBloodManager = OverrideBloodManager;
})(scene3d_me || (scene3d_me = {}));
//# sourceMappingURL=OverrideBloodManager.js.map
var scene3d_me;
(function (scene3d_me) {
    var Scene3dInit = /** @class */ (function () {
        function Scene3dInit() {
        }
        Scene3dInit.initData = function () {
            //替换SceneManager场景管理对象；
            scene3d_me.OverrideSceneManager.initConfig();
            //替换Engine引擎对象；
            scene3d_me.OverrideEngine.initConfig();
            //初始化场景
            Pan3d.Engine.init(mainpan3d_me.canvas);
            scene3d_me.OverrideBloodManager.getInstance();
            Pan3d.Engine.resetSize(mainpan3d_me.canvas.width, mainpan3d_me.canvas.height); //设置canvas大小
            Pan3d.Engine.initPbr();
            Scene3dInit.isConfig = true; //完成
            Pan3d.SceneManager.getInstance().ready = true; //场景update可以
        };
        Scene3dInit.isConfig = false;
        return Scene3dInit;
    }());
    scene3d_me.Scene3dInit = Scene3dInit;
})(scene3d_me || (scene3d_me = {}));
//# sourceMappingURL=Scene3dInit.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene2d_me;
(function (scene2d_me) {
    var Override2dEngine = /** @class */ (function (_super) {
        __extends(Override2dEngine, _super);
        function Override2dEngine() {
            return _super.call(this) || this;
        }
        Override2dEngine.initConfig = function () {
            var _this = this;
            Pan3d.Engine.update = function () { _this.update(); }; //更换update
            Pan3d.Engine.init = function ($caves) { _this.init($caves); }; //更换引擎初始化
            Pan3d.Engine.resetSize = function (width, height) { _this.resetSize(width, height); }; //更尺寸变化
            Pan3d.Engine.resetViewMatrx3D = function () { _this.resetViewMatrx3D(); };
        };
        Override2dEngine.resetSize = function (width, height) {
            if (isNaN(width)) {
                width = document.body.clientWidth;
            }
            if (isNaN(height)) {
                height = document.body.clientHeight;
            }
            Pan3d.Scene_data.stageWidth = width;
            Pan3d.Scene_data.stageHeight = height;
            Pan3d.Scene_data.context3D.resetSize(Pan3d.Scene_data.stageWidth, Pan3d.Scene_data.stageHeight);
            Pan3d.UIManager.getInstance().resize();
            Pan3d.BloodManager.getInstance().resize();
            Pan3d.Engine.resetViewMatrx3D();
            scene2d_me.CanvasPostionModel.getInstance().resetSize();
        };
        Override2dEngine.init = function ($caves) {
            scene3d_me.OverrideEngine.init($caves);
            Pan3d.Scene_data.focus3D.x = 0;
            Pan3d.Scene_data.focus3D.y = 0;
            Pan3d.Scene_data.focus3D.z = 0;
            Pan3d.Scene_data.focus3D.rotationY = 0;
            Pan3d.Scene_data.focus3D.rotationX = -45;
            Pan3d.Scene_data.cam3D.distance = 250;
        };
        Override2dEngine.resetViewMatrx3D = function () {
            if (Pan3d.Scene_data.viewMatrx3D) {
                Pan3d.Scene_data.viewMatrx3D.identity();
            }
            else {
                Pan3d.Scene_data.viewMatrx3D = new Pan3d.Matrix3D;
            }
            var fovw = Pan3d.Scene_data.stageWidth;
            var fovh = Pan3d.Scene_data.stageHeight;
            Pan3d.Scene_data.sceneViewHW = Math.max(fovw, fovh);
            Pan3d.Scene_data.viewMatrx3D.appendScale(1 / Pan3d.Scene_data.sceneViewHW * 2, 1 / Pan3d.Scene_data.sceneViewHW * 2, 1 / 1000);
            Pan3d.Scene_data.viewMatrx3D.appendScale(1 * (Pan3d.Scene_data.sceneViewHW / fovw * 2), fovw / fovh * (Pan3d.Scene_data.sceneViewHW / fovw * 2), 1);
            Pan3d.Scene_data.viewMatrx3D.appendScale(2 * this.htmlScale, 2 * this.htmlScale, 1);
        };
        Override2dEngine.htmlScale = 0.5;
        return Override2dEngine;
    }(scene3d_me.OverrideEngine));
    scene2d_me.Override2dEngine = Override2dEngine;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=Override2dEngine.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene2d_me;
(function (scene2d_me) {
    var Override2dSceneManager = /** @class */ (function (_super) {
        __extends(Override2dSceneManager, _super);
        function Override2dSceneManager() {
            return _super.call(this) || this;
        }
        Override2dSceneManager.initConfig = function () {
            Pan3d.SceneManager._instance = new Override2dSceneManager;
        };
        Override2dSceneManager.prototype.update = function () {
            Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D, Pan3d.Scene_data.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            Pan3d.Scene_data.context3D._contextSetTest.clear();
            if (isNaN(this._time)) {
                this._time = Pan3d.TimeUtil.getTimer();
            }
            scene2d_me.GroundModel.getInstance().update();
            this.updateMovieFrame();
            if (this._ready) {
                Pan3d.ParticleManager.getInstance().updateTime();
                Pan3d.SkillManager.getInstance().update();
                if (this.render) {
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.setDepthTest(true);
                    this.updateStaticDiplay();
                    this.updateSpriteDisplay();
                    this.updateMovieDisplay();
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                    Pan3d.ParticleManager.getInstance().update();
                    Pan3d.BloodManager.getInstance().update();
                    Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                }
                Pan3d.Scene_data.context3D.setDepthTest(false);
                Pan3d.UIManager.getInstance().update();
            }
        };
        return Override2dSceneManager;
    }(scene3d_me.OverrideSceneManager));
    scene2d_me.Override2dSceneManager = Override2dSceneManager;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=Override2dSceneManager.js.map
var scene2d_me;
(function (scene2d_me) {
    var CanvasPostionModel = /** @class */ (function () {
        function CanvasPostionModel() {
            this.lastPostionV2d = new Pan3d.Vector2D;
            this._lastMousePos = new Pan3d.Vector2D();
            this.tureMoveV2d = new Pan3d.Vector2D(0, 0);
            this.initSceneFocueEvent();
        }
        CanvasPostionModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new CanvasPostionModel();
            }
            return this._instance;
        };
        CanvasPostionModel.prototype.initSceneFocueEvent = function () {
            Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Down, this.onMouseDown, this);
            Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Up, this.onMouseUp, this);
            Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Move, this.onMouseMove, this);
        };
        CanvasPostionModel.prototype.onMouseMove = function ($evt) {
            if (this._isMouseDown) {
                this.tureMoveV2d.x = this.lastPostionV2d.x + $evt.x - this._lastMousePos.x;
                this.tureMoveV2d.y = this.lastPostionV2d.y + $evt.y - this._lastMousePos.y;
                this.resetSize();
            }
        };
        CanvasPostionModel.prototype.onMouseDown = function ($evt) {
            this._lastMousePos.x = $evt.x;
            this._lastMousePos.y = $evt.y;
            this.lastPostionV2d = new Pan3d.Vector2D(this.tureMoveV2d.x, this.tureMoveV2d.y);
            this._isMouseDown = true;
        };
        CanvasPostionModel.prototype.onMouseUp = function ($evt) {
            this._isMouseDown = false;
        };
        CanvasPostionModel.prototype.resetSize = function () {
            var $nScale = (0.25 / scene2d_me.Override2dEngine.htmlScale);
            Pan3d.Scene_data.focus3D.x = 0 + Pan3d.Scene_data.stageWidth / 2 * $nScale;
            Pan3d.Scene_data.focus3D.z = 0 - Pan3d.Scene_data.stageHeight / 2 * $nScale / (Math.sin(45 * Math.PI / 180));
            Pan3d.Scene_data.focus3D.x -= this.tureMoveV2d.x * $nScale;
            Pan3d.Scene_data.focus3D.z += this.tureMoveV2d.y * $nScale / (Math.sin(45 * Math.PI / 180));
            scene2d_me.Ground2dBaseSprite.perentpos = this.tureMoveV2d;
        };
        return CanvasPostionModel;
    }());
    scene2d_me.CanvasPostionModel = CanvasPostionModel;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=CanvasPostionModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene2d_me;
(function (scene2d_me) {
    var Scene2dChar = /** @class */ (function (_super) {
        __extends(Scene2dChar, _super);
        function Scene2dChar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Scene2dChar.prototype.setWeaponByAvatar = function (avatar, $suffix) {
            if ($suffix === void 0) { $suffix = ""; }
            this.addPart(Pan3d.SceneChar.WEAPON_PART, Pan3d.SceneChar.WEAPON_DEFAULT_SLOT, this.getSceneCharWeaponUrl(avatar, $suffix));
        };
        Scene2dChar.prototype.setWingByID = function ($wingId) {
            if (!this._wingDisplay) {
                this._wingDisplay = new Pan3d.SceneBaseChar();
            }
            this._wingDisplay.setRoleUrl(getRoleUrl($wingId));
            this._wingDisplay.setBind(this, Pan3d.SceneChar.WING_SLOT);
            Pan3d.SceneManager.getInstance().addMovieDisplay(this._wingDisplay);
        };
        Scene2dChar.prototype.setMountById = function ($mountId) {
            if (!this.mountChar) {
                this.mountChar = new Pan3d.MountChar();
            }
            this.mountChar.setRoleUrl(getRoleUrl($mountId));
            this.setBind(this.mountChar, Pan3d.SceneChar.MOUNT_SLOT);
            Pan3d.SceneManager.getInstance().addMovieDisplay(this.mountChar);
            this.isMount = true;
        };
        Scene2dChar.prototype.set2dPos = function ($x, $y) {
            this.x = $x * scene2d_me.Override2dEngine.htmlScale;
            this.z = $y * scene2d_me.Override2dEngine.htmlScale / (Math.sin(45 * Math.PI / 180)) * -1;
            if (this.mountChar) {
                this.mountChar.x = this.x;
                this.mountChar.z = this.z;
            }
        };
        Object.defineProperty(Scene2dChar.prototype, "rotationY", {
            set: function (value) {
                this._rotationY = value;
                if (this.mountChar) {
                    this.mountChar.rotationY = this._rotationY;
                }
                this.updateMatrix();
                this.updateRotationMatrix();
            },
            enumerable: true,
            configurable: true
        });
        return Scene2dChar;
    }(Pan3d.SceneChar));
    scene2d_me.Scene2dChar = Scene2dChar;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=Scene2dChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var scene2d_me;
(function (scene2d_me) {
    var Ground2dBaseShader = /** @class */ (function (_super) {
        __extends(Ground2dBaseShader, _super);
        function Ground2dBaseShader() {
            return _super.call(this) || this;
        }
        Ground2dBaseShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        Ground2dBaseShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "varying vec2 v_texCoord;" +
                "uniform vec4 movesize;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(u2Texture.x, u2Texture.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0.xy*=movesize.zw;" +
                "   vt0.xy+=movesize.xy;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        Ground2dBaseShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        Ground2dBaseShader.Ground2dBaseShader = "Ground2dBaseShader";
        return Ground2dBaseShader;
    }(Pan3d.Shader3D));
    scene2d_me.Ground2dBaseShader = Ground2dBaseShader;
    var Ground2dBaseSprite = /** @class */ (function (_super) {
        __extends(Ground2dBaseSprite, _super);
        function Ground2dBaseSprite() {
            var _this = _super.call(this) || this;
            _this.x = 0;
            _this.y = 0;
            _this.width = 100;
            _this.height = 100;
            _this.initData();
            return _this;
        }
        Ground2dBaseSprite.prototype.initData = function () {
            Pan3d.ProgrmaManager.getInstance().registe(Ground2dBaseShader.Ground2dBaseShader, new Ground2dBaseShader);
            this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Ground2dBaseShader.Ground2dBaseShader);
            this.program = this.shader.program;
            this.objData = new Pan3d.ObjData;
            this.objData.vertices = new Array();
            this.objData.vertices.push(0, -1, 0);
            this.objData.vertices.push(1, -1, 0);
            this.objData.vertices.push(1, 0, 0);
            this.objData.vertices.push(0, 0, 0);
            this.objData.uvs = new Array();
            this.objData.uvs.push(0, 1);
            this.objData.uvs.push(1, 1);
            this.objData.uvs.push(1, 0);
            this.objData.uvs.push(0, 0);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 1, 2);
            this.objData.indexs.push(0, 2, 3);
            this.loadTexture();
            this.upToGpu();
        };
        Ground2dBaseSprite.prototype.loadTexture = function () {
            var $ctx = Pan3d.UIManager.getInstance().getContext2D(128, 128, false);
            $ctx.fillStyle = "rgb(255,255,255)";
            $ctx.fillRect(0, 0, 128, 128);
            this._uvTextureRes = Pan3d.TextureManager.getInstance().getCanvasTexture($ctx);
        };
        Ground2dBaseSprite.prototype.setPicUrl = function ($url) {
            var _this = this;
            //  var $url: string = Scene_data.fileRoot + "pan/zymap2d/scene/1007/maps/0_0.jpg"
            Pan3d.TextureManager.getInstance().getTexture($url, function ($texture) {
                _this._uvTextureRes = $texture;
            });
        };
        Ground2dBaseSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Ground2dBaseSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer && this._uvTextureRes) {
                Pan3d.Scene_data.context3D.setProgram(this.program);
                Pan3d.Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Pan3d.Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Pan3d.Scene_data.context3D.setVc4fv(this.shader, "movesize", this.getMoveSizeData());
                Pan3d.Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._uvTextureRes.texture, 0);
                Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        Ground2dBaseSprite.prototype.getMoveSizeData = function () {
            var $tx = (this.x + Ground2dBaseSprite.perentpos.x) / (Pan3d.Scene_data.stageWidth / 2) - 1;
            var $ty = 1 - (this.y + Ground2dBaseSprite.perentpos.y) / (Pan3d.Scene_data.stageHeight / 2);
            var $tw = this.width / (Pan3d.Scene_data.stageWidth / 2);
            var $th = this.height / (Pan3d.Scene_data.stageHeight / 2);
            return [$tx, $ty, $tw, $th];
        };
        Ground2dBaseSprite.perentpos = new Pan3d.Vector2D();
        return Ground2dBaseSprite;
    }(Pan3d.Display3D));
    scene2d_me.Ground2dBaseSprite = Ground2dBaseSprite;
    var GroundModel = /** @class */ (function () {
        function GroundModel() {
            this._groundItem = new Array();
        }
        GroundModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new GroundModel();
            }
            return this._instance;
        };
        GroundModel.prototype.update = function () {
            Pan3d.Scene_data.context3D.setWriteDepth(false);
            Pan3d.Scene_data.context3D.setDepthTest(false);
            for (var i = 0; i < this._groundItem.length; i++) {
                this._groundItem[i].update();
            }
        };
        GroundModel.prototype.addGroundPicByeUrl = function ($url, $rect) {
            if ($url === void 0) { $url = null; }
            if ($rect === void 0) { $rect = null; }
            var $dis = new Ground2dBaseSprite();
            if ($url) {
                $dis.setPicUrl($url);
            }
            if ($rect) {
                $dis.x = $rect.x;
                $dis.y = $rect.y;
                $dis.width = $rect.width;
                $dis.height = $rect.height;
            }
            this._groundItem.push($dis);
            return $dis;
        };
        return GroundModel;
    }());
    scene2d_me.GroundModel = GroundModel;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=GroundModel.js.map
var scene2d_me;
(function (scene2d_me) {
    var Scene2dInit = /** @class */ (function () {
        function Scene2dInit() {
        }
        Scene2dInit.initData = function () {
            //替换SceneManager场景管理对象；
            scene2d_me.Override2dSceneManager.initConfig();
            //替换Engine引擎对象；
            scene2d_me.Override2dEngine.initConfig();
            Pan3d.Scene_data.fileRoot = " http://" + document.domain + "/res/";
            Pan3d.Engine.init(mainpan3d_me.canvas); //初始化场景
            Pan3d.Engine.resetSize(mainpan3d_me.canvas.width, mainpan3d_me.canvas.height); //设置canvas大小
            Pan3d.Engine.initPbr();
            Scene2dInit.isConfig = true; //完成
            Pan3d.SceneManager.getInstance().ready = true; //场景update可以
        };
        Scene2dInit.addGridLineSprite = function () {
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader, new Pan3d.LineDisplayShader);
            Pan3d.SceneManager.getInstance().addDisplay(new Pan3d.GridLineSprite());
        };
        Scene2dInit.isConfig = false;
        return Scene2dInit;
    }());
    scene2d_me.Scene2dInit = Scene2dInit;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=Scene2dInit.js.map
var scene2d_me;
(function (scene2d_me) {
    var AppDataArpg = /** @class */ (function () {
        function AppDataArpg() {
        }
        //以下为2D的换算
        AppDataArpg.math3dto2Darpg = function ($p) {
            var $point = Pan3d.Scene_data.vpMatrix.transformVector($p);
            var fovw = Pan3d.Scene_data.stageWidth / 4 / scene2d_me.Override2dEngine.htmlScale;
            var fovh = Pan3d.Scene_data.stageHeight / 4 / scene2d_me.Override2dEngine.htmlScale;
            var tx = fovw + $point.x * fovw;
            var ty = fovh - $point.y * fovh;
            return new Pan3d.Vector2D(tx, ty);
        };
        //通过3D坐标计算出2D场景中的坐标
        AppDataArpg.getScene2DBy3Dpostion = function ($v3d) {
            var $v2 = this.math3dto2Darpg($v3d);
            $v2.x -= AppDataArpg.sceneStagePos.x;
            $v2.y -= AppDataArpg.sceneStagePos.y;
            return $v2;
        };
        AppDataArpg.math2Dto3DGroundarpg = function ($p) {
            this._vpMatrixInver = Pan3d.Scene_data.vpMatrix.clone();
            this._vpMatrixInver.invert();
            var $k0 = this.math2dto3Darpg($p, 100);
            var $k1 = this.math2dto3Darpg($p, 200);
            if (!this.triItem) {
                this.triItem = new Array;
                this.triItem.push(new Pan3d.Vector3D(0, 0, 0));
                this.triItem.push(new Pan3d.Vector3D(-100, 0, 100));
                this.triItem.push(new Pan3d.Vector3D(+100, 0, 100));
            }
            return Pan3d.MathUtil.getLinePlaneInterectPointByTri($k0, $k1, this.triItem);
        };
        AppDataArpg.math2dto3Darpg = function ($p, $deph) {
            if ($deph === void 0) { $deph = 100; }
            var fovw = Pan3d.Scene_data.stageWidth / 4;
            var fovh = Pan3d.Scene_data.stageHeight / 4;
            var tx = $p.x;
            var ty = $p.y;
            var $point = new Pan3d.Vector3D();
            $point.y = (fovh - ty) / fovh;
            $point.x = (tx - fovw) / fovw;
            $point.z = $deph;
            //$point = this._viewMatrixInver.transformVector($point);
            //$point = this._camMatrixInver.transformVector($point);
            $point = this._vpMatrixInver.transformVector($point);
            return $point;
        };
        AppDataArpg.refrishPos = function ($vec) {
            AppDataArpg.sceneStagePos.x = $vec.x;
            AppDataArpg.sceneStagePos.y = $vec.y;
            Pan3d.Scene_data.focus3D.x = -AppDataArpg.sceneStagePos.x / 2;
            Pan3d.Scene_data.focus3D.z = AppDataArpg.sceneStagePos.y / 2 / (Math.sin(45 * Math.PI / 180));
            // SceneGroundModel.getInstance().resetViewMatrx3D();
        };
        AppDataArpg.resetSelfPosCenter = function () {
            if (Pan3d.GameInstance.mainChar) {
                var $v2 = this.getScene2DBy3Dpostion(new Pan3d.Vector3D(Pan3d.GameInstance.mainChar.x, 0, Pan3d.GameInstance.mainChar.z));
                var $tw = Pan3d.Scene_data.stageWidth / 4 / scene2d_me.Override2dEngine.htmlScale;
                var $th = Pan3d.Scene_data.stageHeight / 4 / scene2d_me.Override2dEngine.htmlScale;
                var $tox = new Pan3d.Vector2D($tw - $v2.x, $th - $v2.y);
                this.refrishPos($tox);
            }
        };
        AppDataArpg.sceneStagePos = new Pan3d.Vector2D;
        AppDataArpg.lockMainChar = true;
        return AppDataArpg;
    }());
    scene2d_me.AppDataArpg = AppDataArpg;
})(scene2d_me || (scene2d_me = {}));
//# sourceMappingURL=AppDataArpg.js.map
var mainpan3d_me = /** @class */ (function () {
    function mainpan3d_me() {
    }
    return mainpan3d_me;
}());
//# sourceMappingURL=mainpan3d.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var OverrideSkillTrajectory = /** @class */ (function (_super) {
        __extends(OverrideSkillTrajectory, _super);
        function OverrideSkillTrajectory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OverrideSkillTrajectory.prototype.reset = function () {
            this.particle.reset();
            this.skill.skillManager.sceneManager.particleManager.removeParticle(this.particle);
            if (this.endParticle) {
                this.endParticle.reset();
                this.skill.skillManager.sceneManager.particleManager.addParticle(this.endParticle);
                this.endParticle.setPos(this._currentTargetPos.x, this._currentTargetPos.y, this._currentTargetPos.z);
            }
            if (this.removeCallFun) {
                this.removeCallFun(this);
            }
        };
        OverrideSkillTrajectory.prototype.addToRender = function () {
            if (!this.particle) {
                return;
            }
            this.particle.reset();
            this.particle.sceneVisible = true;
            this.skill.skillManager.sceneManager.particleManager.addParticle(this.particle);
            var beginPos;
            if (this.data.beginType == 0) {
                var ma = new Pan3d.Matrix3D;
                ma.appendRotation(this.active.rotationY, Pan3d.Vector3D.Y_AXIS);
                beginPos = ma.transformVector(this.data.beginPos);
                this._currentPos.setTo(this.active.x + beginPos.x, this.active.y + beginPos.y, this.active.z + beginPos.z);
            }
            else if (this.data.beginType == 1) {
                var tempMa = new Pan3d.Matrix3D;
                var bindActive = (this.active);
                bindActive.getSocket(this.data.beginSocket, tempMa);
                beginPos = tempMa.position;
                this._currentPos.setTo(beginPos.x, beginPos.y, beginPos.z);
            }
            this.particle.setPos(this._currentPos.x, this._currentPos.y, this._currentPos.z);
            this.path.add();
        };
        OverrideSkillTrajectory.prototype.endPlayFun = function (e) {
            if (e === void 0) { e = null; }
            this.skill.skillManager.sceneManager.particleManager.removeParticle(this.endParticle);
            this.endParticle.removeEventListener(Pan3d.BaseEvent.COMPLETE, this.endPlayFun, this);
        };
        OverrideSkillTrajectory.prototype.setInfo = function (obj) {
            this.time = obj.frame * Pan3d.Scene_data.frameTime;
            this.particle = this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + obj.url);
            this.particle.bindTarget = this;
            this.data = obj;
            //this.path.speed = this.data.speed;
            if (this.data.endParticleUrl) {
                this.endParticle = this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + this.data.endParticleUrl);
                this.endParticle.addEventListener(Pan3d.BaseEvent.COMPLETE, this.endPlayFun, this);
            }
            //this.time = obj.frame * Pan3d.Scene_data.frameTime;
            //this.particle = this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + obj.url);
            //this.particle.bindTarget = this;
            //this.data = <Pan3d.SkillTrajectoryTargetKeyVo>obj;
            ////this.path.speed = this.data.speed;
            //if (this.data.endParticleUrl) {
            //    this.endParticle = this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + this.data.endParticleUrl);
            //    this.endParticle.addEventListener(Pan3d.BaseEvent.COMPLETE, this.endPlayFun, this);
            //}
        };
        return OverrideSkillTrajectory;
    }(Pan3d.SkillTrajectory));
    layapan_me.OverrideSkillTrajectory = OverrideSkillTrajectory;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=OverrideSkillTrajectory.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var OverrideSkillFixEffectKeyVo = /** @class */ (function (_super) {
        __extends(OverrideSkillFixEffectKeyVo, _super);
        function OverrideSkillFixEffectKeyVo() {
            var _this = _super.call(this) || this;
            console.log("OverrideSkillFixEffectKeyVo");
            return _this;
        }
        return OverrideSkillFixEffectKeyVo;
    }(Pan3d.SkillFixEffectKeyVo));
    layapan_me.OverrideSkillFixEffectKeyVo = OverrideSkillFixEffectKeyVo;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=OverrideSkillKeyVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var SkillType = Pan3d.SkillType;
    var SkillVo = Pan3d.SkillVo;
    var OverrideSkill = /** @class */ (function (_super) {
        __extends(OverrideSkill, _super);
        function OverrideSkill($skillManager) {
            if ($skillManager === void 0) { $skillManager = null; }
            var _this = _super.call(this) || this;
            _this.baseName = "OverrideSkill";
            _this.skillManager = $skillManager;
            return _this;
        }
        OverrideSkill.prototype.skillComplete = function () {
            this.skillManager.removeSkill(this);
            this.isDeath = true;
            if (this.completeFun) {
                this.completeFun();
            }
            this.idleTime = 0;
        };
        OverrideSkill.prototype.setData = function ($data, $skillData) {
            if (this.hasDestory) {
                return;
            }
            this.skillVo = new SkillVo();
            this.skillVo.setData($data);
            this.setKeyAry();
            this.trajectoryAry = new Array;
            this._skillData = $skillData;
        };
        OverrideSkill.prototype.setKeyAry = function () {
            var _this = this;
            this.keyAry = new Array;
            if (this.skillVo.types == SkillType.FixEffect) {
                for (var i = 0; i < this.skillVo.keyAry.length; i++) {
                    var keySkill = new layapan_me.OverrideSkillFixEffect(this);
                    keySkill.setInfo(this.skillVo.keyAry[i]);
                    keySkill.removeCallFun = function ($key) { _this.removeKey($key); };
                    keySkill.active = this.active;
                    this.keyAry.push(keySkill);
                }
            }
            else if (this.skillVo.types == SkillType.TrajectoryDynamicTarget || this.skillVo.types == SkillType.TrajectoryDynamicPoint) {
                for (var i = 0; i < this.skillVo.keyAry.length; i++) {
                    var trajectory;
                    var tkv = (this.skillVo.keyAry[i]);
                    if (tkv.multype == 1) {
                        //trajectory = new SkillMulTrajectory();
                    }
                    else {
                        trajectory = new layapan_me.OverrideSkillTrajectory();
                        trajectory.skill = this;
                    }
                    trajectory.setInfo(this.skillVo.keyAry[i]);
                    this.keyAry.push(trajectory);
                }
            }
        };
        return OverrideSkill;
    }(Pan3d.Skill));
    layapan_me.OverrideSkill = OverrideSkill;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=OverrideSkill.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var BaseEvent = Pan3d.BaseEvent;
    var Vector3D = Pan3d.Vector3D;
    var Matrix3D = Pan3d.Matrix3D;
    var OverrideSkillFixEffect = /** @class */ (function (_super) {
        __extends(OverrideSkillFixEffect, _super);
        function OverrideSkillFixEffect($skillvo) {
            var _this = _super.call(this) || this;
            _this.skill = $skillvo;
            return _this;
        }
        OverrideSkillFixEffect.prototype.onPlayCom = function (event) {
            if (event === void 0) { event = null; }
            this.particle.removeEventListener(BaseEvent.COMPLETE, this.onPlayCom, this);
            this.skill.skillManager.sceneManager.particleManager.removeParticle(this.particle);
            this.removeCallFun(this);
        };
        OverrideSkillFixEffect.prototype.addToRender = function () {
            if (!this.particle) {
                return;
            }
            this.particle.reset();
            this.particle.sceneVisible = true;
            this.skill.skillManager.sceneManager.particleManager.addParticle(this.particle);
            this.particle.addEventListener(BaseEvent.COMPLETE, this.onPlayCom, this);
            if (this.outPos) {
                this.particle.x = this.outPos.x;
                this.particle.y = this.outPos.y;
                this.particle.z = this.outPos.z;
                this.particle.rotationX = this.rotation.x;
                this.particle.rotationY = this.rotation.y + this.active.rotationY;
                this.particle.rotationZ = this.rotation.z;
                this.particle.bindTarget = null;
            }
            else if (this.hasSocket) {
                var targetActive = this.active;
                this.particle.bindTarget = (targetActive);
                this.particle.bindSocket = this.socket;
            }
            else {
                var ma = new Matrix3D;
                ma.appendRotation(this.active.rotationY, Vector3D.Y_AXIS);
                var v3d = ma.transformVector(this.pos);
                v3d.x += this.active.x;
                v3d.y += this.active.y;
                v3d.z += this.active.z;
                var $SkillBugBind = new Pan3d.SkillBugBind();
                $SkillBugBind.bindMatrix = new Matrix3D;
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.x, Vector3D.X_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.y, Vector3D.Y_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.rotation.z, Vector3D.Z_AXIS);
                $SkillBugBind.bindMatrix.appendRotation(this.active.rotationY, Vector3D.Y_AXIS);
                $SkillBugBind.bindMatrix.appendTranslation(v3d.x, v3d.y, v3d.z);
                this.particle.bindTarget = $SkillBugBind;
            }
        };
        return OverrideSkillFixEffect;
    }(Pan3d.SkillFixEffect));
    layapan_me.OverrideSkillFixEffect = OverrideSkillFixEffect;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=OverrideSkillFixEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var ShadowManager = Pan3d.ShadowManager;
    var LayaOverrideShadowManager = /** @class */ (function (_super) {
        __extends(LayaOverrideShadowManager, _super);
        function LayaOverrideShadowManager() {
            return _super.call(this) || this;
        }
        return LayaOverrideShadowManager;
    }(ShadowManager));
    layapan_me.LayaOverrideShadowManager = LayaOverrideShadowManager;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverrideShadowManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var Shader3D = Pan3d.Shader3D;
    var Display3DParticle = Pan3d.Display3DParticle;
    var CombineParticle = Pan3d.CombineParticle;
    var CombineParticleData = Pan3d.CombineParticleData;
    var ParticleManager = Pan3d.ParticleManager;
    var LoadManager = Pan3d.LoadManager;
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var Frame3DParticleShader = /** @class */ (function (_super) {
        __extends(Frame3DParticleShader, _super);
        function Frame3DParticleShader() {
            return _super.call(this) || this;
        }
        Frame3DParticleShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        Frame3DParticleShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(u2Texture.x, u2Texture.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        Frame3DParticleShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz =infoUv.xyz*infoUv.w;\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        Frame3DParticleShader.Frame3DParticleShader = "Frame3DParticleShader";
        return Frame3DParticleShader;
    }(Shader3D));
    layapan_me.Frame3DParticleShader = Frame3DParticleShader;
    var Frame3DParticle = /** @class */ (function (_super) {
        __extends(Frame3DParticle, _super);
        function Frame3DParticle() {
            var _this = _super.call(this) || this;
            _this.beginTime = 0;
            Pan3d.ProgrmaManager.getInstance().registe(Frame3DParticleShader.Frame3DParticleShader, new Frame3DParticleShader);
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Frame3DParticleShader.Frame3DParticleShader);
            _this.initData();
            return _this;
        }
        Frame3DParticle.prototype.updateTime = function (t) {
            this._time = t - this.beginTime;
            if (this.frameTextureItem) {
                if (!this.loop) {
                    if (this._time > (this.speedTm * this.frameTextureItem.length)) {
                        this.visible = false;
                    }
                }
                var skipId = Math.floor(this._time / this.speedTm);
                this._uvTextureRes = this.frameTextureItem[skipId % this.frameTextureItem.length];
            }
        };
        Frame3DParticle.prototype.initData = function () {
            if (Frame3DParticle.baseFrameObjData) {
                this.objData = Frame3DParticle.baseFrameObjData;
                return;
            }
            this.objData = new ObjData;
            this.objData.vertices = new Array();
            var tw = 100;
            var th = 100;
            this.objData.vertices.push(-tw, -th, 0);
            this.objData.vertices.push(tw, -th, 0);
            this.objData.vertices.push(tw, th, 0);
            this.objData.vertices.push(-tw, th, 0);
            this.objData.uvs = new Array();
            this.objData.uvs.push(0, 1);
            this.objData.uvs.push(1, 1);
            this.objData.uvs.push(1, 0);
            this.objData.uvs.push(0, 0);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 1, 2);
            this.objData.indexs.push(0, 2, 3);
            this.upToGpu();
            Frame3DParticle.baseFrameObjData = this.objData;
        };
        Frame3DParticle.prototype.makeFrameParticle = function (pathurl, fileBaseName, info) {
            this.speedTm = 100; //默认为100毫秒一帧
            this.picNum = 5; //默认只有一张图从0开始
            this.loop = true;
            for (var key in info) {
                this[key] = info[key];
            }
            this.loadTexture(pathurl, fileBaseName);
        };
        Frame3DParticle.getFrameParticle = function (pathurl, fileBaseName, info) {
            var combineParticle = new CombineParticle();
            combineParticle.url = pathurl + fileBaseName;
            combineParticle.displayAry = new Array();
            var tempDic = new Frame3DParticle();
            combineParticle.displayAry.push(tempDic);
            tempDic.bindVecter3d = combineParticle.bindVecter3d;
            tempDic.makeFrameParticle(pathurl, fileBaseName, info);
            return combineParticle;
        };
        Frame3DParticle.prototype.loadTexture = function (pathurl, fileBaseName) {
            var _this = this;
            this.frameTextureItem = new Array;
            for (var i = 0; i < this.picNum; i++) {
                this.frameTextureItem.push(null);
                var url = pathurl + fileBaseName + i + ".png";
                //   url = "res/skill/10104_shifa/xulimengji_qishou_00001.png";
                TextureManager.getInstance().getTexture(url, function ($texture, $info) {
                    _this.frameTextureItem[$info.id] = $texture;
                }, null, { id: i });
            }
        };
        Frame3DParticle.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Frame3DParticle.prototype.update = function () {
            if (!this.visible) {
                return;
            }
            if (this.objData && this.objData.indexBuffer && this._uvTextureRes) {
                Scene_data.context3D.setProgram(this.shader.program);
                this.posMatrix = new Pan3d.Matrix3D;
                if (this.bindVecter3d) {
                    this.posMatrix.appendScale(2, 2, 1);
                    this.posMatrix.appendTranslation(this.bindVecter3d.x, this.bindVecter3d.y, this.bindVecter3d.z);
                }
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._uvTextureRes.texture, 0);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return Frame3DParticle;
    }(Display3DParticle));
    layapan_me.Frame3DParticle = Frame3DParticle;
    var AtlasFrameVo = /** @class */ (function () {
        function AtlasFrameVo() {
        }
        AtlasFrameVo.prototype.meshData = function (value) {
            this.frame = value.frame;
            this.sourceSize = value.sourceSize;
            this.spriteSourceSize = value.spriteSourceSize;
        };
        return AtlasFrameVo;
    }());
    layapan_me.AtlasFrameVo = AtlasFrameVo;
    var Frame3DAtlasShader = /** @class */ (function (_super) {
        __extends(Frame3DAtlasShader, _super);
        function Frame3DAtlasShader() {
            return _super.call(this) || this;
        }
        Frame3DAtlasShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        Frame3DAtlasShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "uniform vec4 uvchange;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(u2Texture.x*uvchange.z+uvchange.x, u2Texture.y*uvchange.w+uvchange.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   vt0.z =v3Position.z;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        Frame3DAtlasShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "infoUv.xyz =infoUv.xyz*infoUv.w;\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        Frame3DAtlasShader.Frame3DAtlasShader = "Frame3DAtlasShader";
        return Frame3DAtlasShader;
    }(Shader3D));
    layapan_me.Frame3DAtlasShader = Frame3DAtlasShader;
    var Frame3DAtlasParticle = /** @class */ (function (_super) {
        __extends(Frame3DAtlasParticle, _super);
        function Frame3DAtlasParticle() {
            var _this = _super.call(this) || this;
            _this.uvchangeData = [0, 0, 1, 1];
            _this.beginTime = 0;
            Pan3d.ProgrmaManager.getInstance().registe(Frame3DAtlasShader.Frame3DAtlasShader, new Frame3DAtlasShader);
            _this.shader = Pan3d.ProgrmaManager.getInstance().getProgram(Frame3DAtlasShader.Frame3DAtlasShader);
            _this.initData();
            return _this;
        }
        Frame3DAtlasParticle.prototype.updateTime = function (t) {
            this._time = t - this.beginTime;
            if (this.frameInfoItem && this._uvTextureRes) {
                if (!this.loop) {
                    if (this._time > this.timeLen) {
                        this.visible = false;
                    }
                }
                var skipId = Math.floor(this._time / (this.timeLen / this.frameInfoItem.length));
                var vo = this.frameInfoItem[skipId % this.frameInfoItem.length];
                this.uvchangeData[0] = vo.frame.x / this._uvTextureRes.width;
                this.uvchangeData[1] = vo.frame.y / this._uvTextureRes.height;
                this.uvchangeData[2] = vo.frame.w / this._uvTextureRes.width;
                this.uvchangeData[3] = vo.frame.h / this._uvTextureRes.height;
                this.scaleX = vo.sourceSize.w / 100 * this.frameScale;
                this.scaleY = vo.sourceSize.h / 100 * this.frameScale;
            }
        };
        Frame3DAtlasParticle.prototype.initData = function () {
            if (Frame3DAtlasParticle.baseFrameObjData) {
                this.objData = Frame3DAtlasParticle.baseFrameObjData;
                return;
            }
            this.objData = new ObjData;
            this.objData.vertices = new Array();
            var tw = 50;
            var th = 50;
            this.objData.vertices.push(-tw, -th, 0.9);
            this.objData.vertices.push(tw, -th, 0.9);
            this.objData.vertices.push(tw, th, 0.9);
            this.objData.vertices.push(-tw, th, 0.9);
            this.objData.uvs = new Array();
            this.objData.uvs.push(0, 1);
            this.objData.uvs.push(1, 1);
            this.objData.uvs.push(1, 0);
            this.objData.uvs.push(0, 0);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 1, 2);
            this.objData.indexs.push(0, 2, 3);
            this.upToGpu();
            Frame3DAtlasParticle.baseFrameObjData = this.objData;
        };
        Frame3DAtlasParticle.prototype.makeFrameParticle = function (pathurl, fileBaseName, info) {
            this.frameScale = 1;
            this.isShow = true;
            for (var key in info) {
                this[key] = info[key];
            }
            this.LoadAtlas(pathurl, fileBaseName);
        };
        Frame3DAtlasParticle.prototype.LoadAtlas = function (pathurl, fileBaseName) {
            var _this = this;
            LoadManager.getInstance().load(pathurl + fileBaseName + ".atlas", LoadManager.XML_TYPE, function ($data) {
                var $obj = Array(JSON.parse($data))[0];
                _this.frameInfoItem = [];
                for (var key in $obj.frames) {
                    var $atlasFrameVo = new AtlasFrameVo();
                    $atlasFrameVo.meshData($obj.frames[key]);
                    $atlasFrameVo.key = key;
                    _this.frameInfoItem.push($atlasFrameVo);
                }
                if (isNaN(_this.timeLen)) {
                    _this.timeLen = _this.frameInfoItem.length * 100; //默认
                }
                TextureManager.getInstance().getTexture(pathurl + $obj.meta.image, function ($texture, $info) {
                    _this._uvTextureRes = $texture;
                });
            });
        };
        Frame3DAtlasParticle.getFrameParticle = function (pathurl, fileBaseName, info) {
            var combineParticle = new CombineParticle();
            combineParticle.url = pathurl + fileBaseName;
            combineParticle.displayAry = new Array();
            var tempDic = new Frame3DAtlasParticle();
            combineParticle.displayAry.push(tempDic);
            tempDic.bindVecter3d = combineParticle.bindVecter3d;
            tempDic.makeFrameParticle(pathurl, fileBaseName, info);
            return combineParticle;
        };
        Frame3DAtlasParticle.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        Frame3DAtlasParticle.prototype.update = function () {
            if (!this.visible) {
                return;
            }
            if (this.objData && this.objData.indexBuffer && this._uvTextureRes) {
                if (this.isShow) {
                    Scene_data.context3D.setWriteDepth(false);
                    Scene_data.context3D.setDepthTest(false);
                }
                else {
                    Scene_data.context3D.setWriteDepth(false);
                    Scene_data.context3D.setDepthTest(true);
                }
                Scene_data.context3D.setProgram(this.shader.program);
                this.posMatrix = new Pan3d.Matrix3D;
                this.posMatrix.appendScale(this.scaleX, this.scaleY, 1);
                if (this.bindVecter3d) {
                    this.posMatrix.appendTranslation(this.bindVecter3d.x, this.bindVecter3d.y, this.bindVecter3d.z);
                }
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVc4fv(this.shader, "uvchange", this.uvchangeData);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._uvTextureRes.texture, 0);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
                if (this.isShow) {
                    Scene_data.context3D.setWriteDepth(true);
                    Scene_data.context3D.setDepthTest(true);
                }
            }
        };
        return Frame3DAtlasParticle;
    }(Display3DParticle));
    layapan_me.Frame3DAtlasParticle = Frame3DAtlasParticle;
    var LayaOverride2dParticleManager = /** @class */ (function (_super) {
        __extends(LayaOverride2dParticleManager, _super);
        function LayaOverride2dParticleManager() {
            return _super.call(this) || this;
        }
        LayaOverride2dParticleManager.prototype.getParticleByte = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            var combineParticle = new CombineParticle();
            var url = $url;
            if (ParticleManager.getInstance()._dic[url]) {
                var baseData = ParticleManager.getInstance()._dic[url];
                combineParticle = baseData.getCombineParticle();
            }
            combineParticle.url = url;
            return combineParticle;
        };
        LayaOverride2dParticleManager.prototype.registerUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (ParticleManager.getInstance()._dic[$url]) {
                var baseData = ParticleManager.getInstance()._dic[$url];
                baseData.useNum++;
            }
        };
        LayaOverride2dParticleManager.prototype.releaseUrl = function ($url) {
            $url = $url.replace("_byte.txt", ".txt");
            $url = $url.replace(".txt", "_byte.txt");
            if (ParticleManager.getInstance()._dic[$url]) {
                var baseData = ParticleManager.getInstance()._dic[$url];
                baseData.clearUseNum();
            }
        };
        LayaOverride2dParticleManager.prototype.addResByte = function ($url, $data) {
            if (!ParticleManager.getInstance()._dic[$url]) {
                var baseData = new CombineParticleData();
                ////console.log("load particle",$url);
                baseData.setDataByte($data);
                ParticleManager.getInstance()._dic[$url] = baseData;
            }
        };
        return LayaOverride2dParticleManager;
    }(ParticleManager));
    layapan_me.LayaOverride2dParticleManager = LayaOverride2dParticleManager;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverride2dParticleManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var LayaOverride2dEngine = /** @class */ (function (_super) {
        __extends(LayaOverride2dEngine, _super);
        function LayaOverride2dEngine() {
            return _super.call(this) || this;
        }
        LayaOverride2dEngine.initConfig = function () {
            var _this = this;
            Pan3d.UIData.resize = function () { _this.uiScaleresize(); }; //更换update
            Pan3d.Engine.update = function () { _this.update(); }; //更换update
            Pan3d.Engine.init = function ($caves) { scene2d_me.Override2dEngine.init($caves); }; //更换引擎初始化
            Pan3d.Engine.resetSize = function (width, height) { scene2d_me.Override2dEngine.resetSize(width, height); }; //更尺寸变化
            Pan3d.Engine.resetViewMatrx3D = function () { scene2d_me.Override2dEngine.resetViewMatrx3D(); };
        };
        LayaOverride2dEngine.uiScaleresize = function () {
            console.log("重置什么也不做");
            Pan3d.UIData.Scale = 1;
        };
        return LayaOverride2dEngine;
    }(scene3d_me.OverrideEngine));
    layapan_me.LayaOverride2dEngine = LayaOverride2dEngine;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverride2dEngine.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var ResManager = Pan3d.ResManager;
    var Scene_data = Pan3d.Scene_data;
    var SkillData = Pan3d.SkillData;
    var SkillManager = Pan3d.SkillManager;
    var LayaOverride2dSkillManager = /** @class */ (function (_super) {
        __extends(LayaOverride2dSkillManager, _super);
        function LayaOverride2dSkillManager($sceneManager) {
            var _this = _super.call(this) || this;
            _this.sceneManager = $sceneManager;
            return _this;
        }
        LayaOverride2dSkillManager.prototype.addSrc = function ($url, skillData) {
            for (var key in skillData.data) {
                var skill = new layapan_me.OverrideSkill(this);
                skill.name = key;
                skill.isDeath = true;
                skill.src = true;
                skill.setData(skillData.data[key], skillData);
                skillData.addSrcSkill(skill);
                //skillData.useNum++;
                SkillManager.getInstance();
                var dkey = $url + key;
                if (!SkillManager.getInstance()._skillDic[dkey]) {
                    SkillManager.getInstance()._skillDic[dkey] = new Array;
                }
                SkillManager.getInstance()._skillDic[dkey].push(skill);
            }
        };
        LayaOverride2dSkillManager.prototype.playSkill = function ($skill) {
            $skill.skillManager = this;
            _super.prototype.playSkill.call(this, $skill);
        };
        LayaOverride2dSkillManager.prototype.getSkill = function ($url, $name, $callback) {
            var _this = this;
            if ($callback === void 0) { $callback = null; }
            var skill;
            var key = $url + $name;
            // if(key == "skill/jichu_1_byte.txtm_skill_04"){
            //     console.log("添加技能风暴");
            //     this.fengbaonum++;
            // }
            var ary = SkillManager.getInstance()._skillDic[key];
            if (ary) {
                for (var i = 0; i < ary.length; i++) {
                    skill = ary[i];
                    if (skill.isDeath && skill.useNum == 0) {
                        skill.reset();
                        skill.isDeath = false;
                        return skill;
                    }
                }
            }
            skill = new layapan_me.OverrideSkill(this);
            skill.name = $name;
            skill.isDeath = false;
            if (!SkillManager.getInstance()._skillDic[key]) {
                SkillManager.getInstance()._skillDic[key] = new Array;
            }
            SkillManager.getInstance()._skillDic[key].push(skill);
            if (this._dic[$url]) {
                skill.setData(this._dic[$url].data[skill.name], this._dic[$url]);
                skill.key = key;
                this._dic[$url].useNum++;
                return skill;
            }
            if (SkillManager.getInstance()._loadDic[$url]) {
                var obj = new Object;
                obj.name = $name;
                obj.skill = skill;
                obj.callback = $callback;
                SkillManager.getInstance()._loadDic[$url].push(obj);
                return skill;
            }
            SkillManager.getInstance()._loadDic[$url] = new Array;
            var obj = new Object;
            obj.name = $name;
            obj.skill = skill;
            obj.callback = $callback;
            SkillManager.getInstance()._loadDic[$url].push(obj);
            ResManager.getInstance().loadSkillRes(Scene_data.fileRoot + $url, function ($skillRes) {
                _this.loadSkillCom($url, $skillRes);
            });
            return skill;
        };
        LayaOverride2dSkillManager.prototype.loadSkillCom = function ($url, $skillRes) {
            var skillData = new SkillData();
            skillData.data = $skillRes.data;
            for (var i = 0; i < SkillManager.getInstance()._loadDic[$url].length; i++) {
                var obj = SkillManager.getInstance()._loadDic[$url][i];
                if (!obj.skill.hasDestory) {
                    obj.skill.setData(skillData.data[obj.name], skillData);
                    obj.skill.key = $url + obj.name;
                    skillData.useNum++;
                }
            }
            this._dic[$url] = skillData;
            this.addSrc($url, skillData);
            for (var i = 0; i < SkillManager.getInstance()._loadDic[$url].length; i++) {
                var obj = SkillManager.getInstance()._loadDic[$url][i];
                if (obj.callback) {
                    obj.callback();
                }
            }
            SkillManager.getInstance()._loadDic[$url].length = 0;
            SkillManager.getInstance()._loadDic[$url] = null;
        };
        return LayaOverride2dSkillManager;
    }(SkillManager));
    layapan_me.LayaOverride2dSkillManager = LayaOverride2dSkillManager;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverride2dSkillManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var LayaGroupRes = /** @class */ (function (_super) {
        __extends(LayaGroupRes, _super);
        function LayaGroupRes() {
            return _super.call(this) || this;
        }
        LayaGroupRes.prototype.readParticle = function () {
            var objNum = this._byte.readInt();
            //this.particleAry = new Array;
            var time = Pan3d.TimeUtil.getTimer();
            for (var i = 0; i < objNum; i++) {
                var url = Pan3d.Scene_data.fileRoot + this._byte.readUTF();
                var size = this._byte.readInt();
                var dataByte = new Pan3d.Pan3dByteArray;
                dataByte.length = size;
                this._byte.readBytes(dataByte, 0, size);
                this.scene.particleManager.addResByte(url, dataByte);
            }
        };
        return LayaGroupRes;
    }(Pan3d.GroupRes));
    layapan_me.LayaGroupRes = LayaGroupRes;
    var LayaOverrideGroupDataManager = /** @class */ (function (_super) {
        __extends(LayaOverrideGroupDataManager, _super);
        function LayaOverrideGroupDataManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LayaOverrideGroupDataManager.prototype.getGroupData = function ($url, $fun) {
            var _this = this;
            if (this._dic[$url]) {
                var gr = this._dic[$url];
                gr.useNum++;
                $fun(gr);
                return;
            }
            if (this._loadDic[$url]) {
                this._loadDic[$url].push($fun);
                return;
            }
            this._loadDic[$url] = new Array;
            this._loadDic[$url].push($fun);
            var group = new LayaGroupRes();
            group.scene = this.scene;
            group.load($url, function () {
                var ary = _this._loadDic[$url];
                for (var i = 0; i < ary.length; i++) {
                    var fun = ary[i];
                    fun(group);
                }
                _this._dic[$url] = group;
                delete _this._loadDic[$url];
                group.initReg();
            });
        };
        return LayaOverrideGroupDataManager;
    }(Pan3d.GroupDataManager));
    layapan_me.LayaOverrideGroupDataManager = LayaOverrideGroupDataManager;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverrideGroupDataManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var layapan_me;
(function (layapan_me) {
    var LayaOverride2dSceneManager = /** @class */ (function (_super) {
        __extends(LayaOverride2dSceneManager, _super);
        function LayaOverride2dSceneManager() {
            var _this = _super.call(this) || this;
            _this.particleManager = new layapan_me.LayaOverride2dParticleManager();
            _this.shadowManager = new layapan_me.LayaOverrideShadowManager();
            _this.skillManager = new layapan_me.LayaOverride2dSkillManager(_this);
            _this.groupDataManager = new layapan_me.LayaOverrideGroupDataManager();
            console.log("创建场景=>", LayaOverride2dSceneManager.sceneNum++);
            return _this;
        }
        LayaOverride2dSceneManager.initConfig = function () {
            Pan3d.SceneManager._instance = new LayaOverride2dSceneManager;
        };
        LayaOverride2dSceneManager.prototype.update = function () {
            Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D, Pan3d.Scene_data.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            scene2d_me.GroundModel.getInstance().update();
            this.upFrame();
        };
        LayaOverride2dSceneManager.prototype.changeBloodManager = function ($bloodManager) {
        };
        LayaOverride2dSceneManager.prototype.addMovieDisplay = function ($display) {
            $display._scene = this;
            this._displayRoleList.push($display);
            $display.addStage();
        };
        LayaOverride2dSceneManager.prototype.loadSceneConfigCom = function (obj) {
            //保持原来的角度
            var $rotationY = Pan3d.Scene_data.focus3D.rotationY;
            _super.prototype.loadSceneConfigCom.call(this, obj);
            Pan3d.Scene_data.focus3D.rotationY = $rotationY;
        };
        LayaOverride2dSceneManager.prototype.playLyf = function ($url, $pos, $r) {
            var _this = this;
            if ($r === void 0) { $r = 0; }
            this.groupDataManager.scene = this;
            this.groupDataManager.getGroupData(Pan3d.Scene_data.fileRoot + $url, function (groupRes) {
                for (var i = 0; i < groupRes.dataAry.length; i++) {
                    var item = groupRes.dataAry[i];
                    if (item.types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                        var $particle = _this.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + item.particleUrl);
                        $particle.x = $pos.x;
                        $particle.y = $pos.y;
                        $particle.z = $pos.z;
                        $particle.rotationY = $r;
                        _this.particleManager.addParticle($particle);
                        $particle.addEventListener(Pan3d.BaseEvent.COMPLETE, _this.onPlayCom, _this);
                    }
                    else {
                        console.log("播放的不是单纯特效");
                    }
                }
            });
        };
        LayaOverride2dSceneManager.prototype.charPlaySkill = function ($char, $skillfile) {
            if (!$char._scene.ready) {
                return;
            }
            var $skill = this.skillManager.getSkill(getSkillUrl($skillfile), "skill_01");
            if (!$skill.keyAry) {
                return;
            }
            if ($skill) {
                $skill.reset();
                $skill.isDeath = false;
            }
            $skill.configFixEffect($char);
            this.skillManager.playSkill($skill);
        };
        LayaOverride2dSceneManager.prototype.onPlayCom = function (value) {
            this.particleManager.removeParticle((value.target));
        };
        LayaOverride2dSceneManager.prototype.upFrame = function () {
            Pan3d.Scene_data.context3D._contextSetTest.clear();
            if (isNaN(this._time)) {
                this._time = Pan3d.TimeUtil.getTimer();
            }
            this.updateMovieFrame();
            if (this._ready) {
                this.particleManager.updateTime();
                this.skillManager.update();
                if (this.render) {
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.setDepthTest(true);
                    this.updateStaticDiplay();
                    this.updateSpriteDisplay();
                    this.updateMovieDisplay();
                    this.shadowManager.update();
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                    this.particleManager.update();
                    Pan3d.Scene_data.context3D.setBlendParticleFactors(0);
                    Pan3d.Scene_data.context3D.setWriteDepth(true);
                    Pan3d.Scene_data.context3D.setWriteDepth(false);
                }
                Pan3d.Scene_data.context3D.setDepthTest(false);
                Pan3d.UIManager.getInstance().update();
                this.cameraMatrix = Pan3d.Scene_data.cam3D.cameraMatrix.clone();
                this.viewMatrx3D = Pan3d.Scene_data.viewMatrx3D.clone();
            }
        };
        LayaOverride2dSceneManager.sceneNum = 0;
        return LayaOverride2dSceneManager;
    }(scene3d_me.OverrideSceneManager));
    layapan_me.LayaOverride2dSceneManager = LayaOverride2dSceneManager;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaOverride2dSceneManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var layapan_me;
(function (layapan_me) {
    var CombineParticle = Pan3d.CombineParticle;
    var Scene_data = Pan3d.Scene_data;
    var ParticleManager = Pan3d.ParticleManager;
    var Vector3D = Pan3d.Vector3D;
    var BaseRes = Pan3d.BaseRes;
    var MaterialAnimShader = Pan3d.MaterialAnimShader;
    var Display3DSprite = Pan3d.Display3DSprite;
    var ShadowManager = Pan3d.ShadowManager;
    var LayaSceneBaseChar = /** @class */ (function (_super) {
        __extends(LayaSceneBaseChar, _super);
        function LayaSceneBaseChar() {
            var _this = _super.call(this) || this;
            _this._avatar = -1;
            _this._visible = true;
            _this.changeColor = [1, 1, 1, 1];
            _this._alpha = 1;
            _this.x;
            return _this;
        }
        Object.defineProperty(LayaSceneBaseChar.prototype, "alpha", {
            get: function () {
                return this._alpha;
            },
            set: function (value) {
                this._alpha = value;
                this.changeColor[0] = 1;
                this.changeColor[1] = 1;
                this.changeColor[2] = 1;
                this.changeColor[3] = value;
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneBaseChar.prototype.updateMaterialMesh = function ($mesh) {
            if (this.changeColor[0] != 1 || this.changeColor[1] != 1 || this.changeColor[2] != 1 || this.changeColor[3] != 1) {
                if (!LayaSceneBaseChar.alphaShader) {
                    LayaSceneBaseChar.alphaShader = this.makeAlphaShader();
                }
                var $selfShader = $mesh.material.shader;
                $mesh.material.shader = LayaSceneBaseChar.alphaShader;
                Scene_data.context3D.setProgram(LayaSceneBaseChar.alphaShader.program);
                Scene_data.context3D.cullFaceBack(false);
                Scene_data.context3D.setBlendParticleFactors(-1);
                this.setVcMatrix($mesh);
                this.setMaterialTextureAlpha($mesh.material, $mesh.materialParam);
                this.setVa($mesh);
                Scene_data.context3D.setVc4fv($mesh.material.shader, "alphadata", this.changeColor);
                this.setMeshVc($mesh);
                Scene_data.context3D.drawCall($mesh.indexBuffer, $mesh.treNum);
                $mesh.material.shader = $selfShader;
            }
            else {
                _super.prototype.updateMaterialMesh.call(this, $mesh);
            }
        };
        LayaSceneBaseChar.prototype.playSkill = function ($skill) {
            var $scene = this._scene;
            this._walkPath = null;
            $scene.skillManager.playSkill($skill);
            this.skillVo = $skill;
        };
        LayaSceneBaseChar.prototype.setMaterialTextureAlpha = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            //透明的时候只显示一个主材质贴图
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].isMain) {
                    var txte = texVec[i].texture;
                    var $has = false;
                    if ($mp) {
                        for (var j = 0; j < $mp.dynamicTexList.length; j++) {
                            if ($mp.dynamicTexList[j].target) {
                                if ($mp.dynamicTexList[j].target.name == texVec[i].name) {
                                    txte = $mp.dynamicTexList[j].texture;
                                }
                            }
                        }
                    }
                    Scene_data.context3D.setRenderTexture($material.shader, "alphatexture", txte, 0);
                }
            }
        };
        LayaSceneBaseChar.prototype.makeAlphaShader = function () {
            var shader = new MaterialAnimShader();
            shader.paramAry = [false, false, false, false, false, false, false, 0];
            shader.fragment =
                "precision mediump float;\n" +
                    "uniform sampler2D alphatexture;\n" +
                    "uniform vec4 alphadata;\n" +
                    "varying vec2 v0;\n" +
                    "void main(void){\n" +
                    "vec4 ft0 = texture2D(alphatexture,v0);\n" +
                    "gl_FragColor =ft0*alphadata;\n" +
                    "}";
            var encodetf = shader.encode();
            return shader;
        };
        Object.defineProperty(LayaSceneBaseChar.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneBaseChar.prototype.setAvatar = function (num) {
            if (this._avatar == num) {
                return;
            }
            this._avatar = num;
            this.setRoleUrl(this.getSceneCharAvatarUrl(num));
        };
        Object.defineProperty(LayaSceneBaseChar.prototype, "shadow", {
            set: function (value) {
                var $scene = this._scene;
                if (value) {
                    if (!this._shadow) {
                        this._shadow = $scene.shadowManager.addShadow();
                    }
                }
                else {
                    if (this._shadow) {
                        $scene.shadowManager.removeShadow(this._shadow);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneBaseChar.prototype.update = function () {
            if (this.visible) {
                _super.prototype.update.call(this);
            }
            if (this._shadow) {
                this._shadow._visible = this.visible;
            }
        };
        LayaSceneBaseChar.prototype.getSceneCharAvatarUrl = function (num) {
            var $url = getRoleUrl(String(num));
            return getRoleUrl(String(num));
        };
        LayaSceneBaseChar.prototype.getSceneCharWeaponUrl = function (num, $suffix) {
            if ($suffix === void 0) { $suffix = ""; }
            return getModelUrl(String(num + $suffix));
        };
        // 是否播放中
        LayaSceneBaseChar.prototype.isPlaying = function () {
            // if(this._completeState != 1){
            // 	return true;
            // }
            return this._completeState != 1 || !this._curentFrame || (this._curentFrame < (this._animDic[this.curentAction].matrixAry.length - 1));
        };
        LayaSceneBaseChar.prototype.loadPartRes = function ($bindSocket, groupRes, ary) {
            if (this._hasDestory) {
                return;
            }
            for (var i = 0; i < groupRes.dataAry.length; i++) {
                var item = groupRes.dataAry[i];
                var posV3d;
                var rotationV3d;
                var scaleV3d;
                if (item.isGroup) {
                    posV3d = new Vector3D(item.x, item.y, item.z);
                    rotationV3d = new Vector3D(item.rotationX, item.rotationY, item.rotationZ);
                    scaleV3d = new Vector3D(item.scaleX, item.scaleY, item.scaleZ);
                }
                if (item.types == BaseRes.SCENE_PARTICLE_TYPE) {
                    var particle = ParticleManager.getInstance().getParticleByte(Scene_data.fileRoot + item.particleUrl);
                    ary.push(particle);
                    particle.bindTarget = this;
                    particle.bindSocket = $bindSocket;
                    particle.dynamic = true;
                    this._scene.particleManager.addParticle(particle);
                    if (item.isGroup) {
                        particle.setGroup(posV3d, rotationV3d, scaleV3d);
                    }
                }
                else if (item.types == BaseRes.PREFAB_TYPE) {
                    var display = new Display3DSprite();
                    display.setObjUrl(item.objUrl);
                    display.setMaterialUrl(item.materialUrl, item.materialInfoArr);
                    display.dynamic = true;
                    ary.push(display);
                    display.setBind(this, $bindSocket);
                    this._scene.addSpriteDisplay(display);
                    if (item.isGroup) {
                        display.setGroup(posV3d, rotationV3d, scaleV3d);
                    }
                }
            }
            this.applyVisible();
        };
        LayaSceneBaseChar.prototype.removeStage = function () {
            this._onStage = false;
            if (this._shadow) {
                ShadowManager.getInstance().removeShadow(this._shadow);
            }
            for (var key in this._partDic) {
                var ary = this._partDic[key];
                for (var i = 0; i < ary.length; i++) {
                    if (ary[i] instanceof CombineParticle) {
                        this._scene.particleManager.removeParticle(ary[i]);
                    }
                    else if (ary[i] instanceof Display3DSprite) {
                        this._scene.removeSpriteDisplay(ary[i]);
                    }
                }
            }
        };
        Object.defineProperty(LayaSceneBaseChar.prototype, "px", {
            get: function () {
                return this.x;
            },
            set: function (value) {
                this.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneBaseChar.prototype, "py", {
            get: function () {
                return this.y;
            },
            set: function (value) {
                this.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneBaseChar.prototype, "pz", {
            get: function () {
                return this.z;
            },
            set: function (value) {
                this.z = value;
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneBaseChar.prototype.addSkinMeshParticle = function () {
            if (!this._skinMesh) {
                return;
            }
            var dicAry = new Array;
            this._partDic["mesh"] = dicAry;
            var meshAry = this._skinMesh.meshAry;
            if (!meshAry) {
                return;
            }
            for (var i = 0; i < meshAry.length; i++) {
                var particleAry = meshAry[i].particleAry;
                for (var j = 0; j < particleAry.length; j++) {
                    var bindPartcle = particleAry[j];
                    var particle;
                    particle = ParticleManager.getInstance().getParticleByte(Scene_data.fileRoot + bindPartcle.url);
                    if (!particle.sourceData) {
                        console.log("particle.sourceData error");
                    }
                    particle.dynamic = true;
                    particle.bindSocket = bindPartcle.socketName;
                    dicAry.push(particle);
                    particle.bindTarget = this;
                    this._scene.particleManager.addParticle(particle);
                }
            }
        };
        return LayaSceneBaseChar;
    }(Pan3d.Display3dMovie));
    layapan_me.LayaSceneBaseChar = LayaSceneBaseChar;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaSceneBaseChar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var layapan_me;
(function (layapan_me) {
    var Display3DSprite = Pan3d.Display3DSprite;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Vector3D = Pan3d.Vector3D;
    var Vector2D = Pan3d.Vector2D;
    var Scene_data = Pan3d.Scene_data;
    var MathClass = Pan3d.MathClass;
    var TestTriangle = Pan3d.TestTriangle;
    var LineDisplayShader = Pan3d.LineDisplayShader;
    var LineDisplaySprite = Pan3d.LineDisplaySprite;
    var CombineParticle = Pan3d.CombineParticle;
    var CharAction = Pan3d.CharAction;
    var BaseRes = Pan3d.BaseRes;
    var ParticleManager = Pan3d.ParticleManager;
    var LayaSceneChar = /** @class */ (function (_super) {
        __extends(LayaSceneChar, _super);
        function LayaSceneChar() {
            var _this = _super.call(this) || this;
            _this.isMount = false;
            _this._px = 0;
            _this._py = 0;
            _this._pz = 0;
            _this._pRotationY = 0;
            _this.toRotationY = 0;
            _this._pScale = 1;
            _this.tittleHeight = 50;
            _this._optimization = false; //当优化为true的时候 不显示
            _this._weaponNum = -1;
            _this._resultVisible = true;
            _this._hpRatio = 0;
            // 是否显示血条
            _this._bloodEnable = false;
            _this._angerRatio = 0;
            // 是否显示怒气
            _this._angerEnable = false;
            // 是否显示名字
            _this._nameEnable = false;
            _this._showHitBox = false;
            // private triIndex: Array<number> = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7]
            // private triIndex: Array<number> = [0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 2, 6, 7, 2, 7, 3, 3, 7, 4, 3, 4, 0]
            _this._triIndex = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 2, 6, 7, 2, 7, 3, 3, 7, 4, 3, 4, 0];
            // this.shadow = true;
            _this.skillitem = new Array();
            _this._bloodColor = LayaSceneChar.BLOOD_COLOR_HP;
            _this._angerColor = LayaSceneChar.BLOOD_COLOR_ANGER;
            return _this;
        }
        Object.defineProperty(LayaSceneChar.prototype, "forceRotationY", {
            /**强制角度 */
            set: function (val) {
                this.pRotationY = val;
                this.rotationY = val;
                this.toRotationY = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "pRotationY", {
            get: function () {
                return this._pRotationY;
            },
            set: function (val) {
                this._pRotationY = val;
                if (this.isMount) {
                    this._mountChar.rotationY = val;
                }
                else {
                    this.rotationY = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "pScale", {
            get: function () {
                return this._pScale;
            },
            set: function (v) {
                this._pScale = v;
                this._mountChar && (this._mountChar.scale = v);
                this._wingDisplay && (this._wingDisplay.scale = v);
                this.scale = v;
                if (this._skinMesh) {
                    this.tittleHeight = this._skinMesh.tittleHeight * v;
                }
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneChar.prototype.setMount = function (v) {
            this.isMount = (v && v.length != 0);
            if (this.isMount) {
                if (!this._mountChar) {
                    this._mountChar = new layapan_me.LayaSceneBaseChar();
                    this._mountChar.scale = this._pScale;
                }
                this._mountChar.setRoleUrl(getRoleUrl(v));
                this.setBind(this._mountChar, LayaSceneChar.MOUNT_SLOT);
                this._mountChar._scene = this._scene;
                this._scene && this._scene.addMovieDisplay(this._mountChar);
            }
            else {
                this.setBind(null, null);
                if (this._mountChar) {
                    this._mountChar = null;
                }
            }
            return this.isMount;
        };
        LayaSceneChar.prototype.setWing = function (v) {
            if (v && v.length) {
                if (!this._wingDisplay) {
                    this._wingDisplay = new layapan_me.LayaSceneBaseChar();
                    this._wingDisplay.scale = this._pScale;
                }
                this._wingDisplay.setRoleUrl(getRoleUrl(v));
                this._wingDisplay.setBind(this, LayaSceneChar.WING_SLOT);
                this._wingDisplay._scene = this._scene;
                this._scene && this._scene.addMovieDisplay(this._wingDisplay);
            }
            else {
                if (this._wingDisplay) {
                    this._wingDisplay.setBind(null, null);
                    //this._wingDisplay.removeSelf();
                    this._wingDisplay = null;
                }
            }
        };
        LayaSceneChar.prototype.setWeapon = function (num) {
            if (this._weaponNum == num) {
                return;
            }
            this._weaponNum = num;
            if (num <= 0) { //移除武器
                this.removePart(LayaSceneChar.WEAPON_PART);
            }
            else {
                this.setWeaponByAvatar(this._weaponNum);
            }
        };
        LayaSceneChar.prototype.setWeaponByAvatar = function (avatar, $suffix) {
            if ($suffix === void 0) { $suffix = ""; }
            this.addPart(LayaSceneChar.WEAPON_PART, LayaSceneChar.WEAPON_DEFAULT_SLOT, this.getSceneCharWeaponUrl(avatar, $suffix));
        };
        LayaSceneChar.prototype.addPart = function ($key, $bindSocket, $url) {
            var _this = this;
            if (this._partUrl[$key] == $url) { //如果相同则返回
                return;
            }
            else if (this._partUrl[$key]) { //如果不同则先移除
                this.removePart($key);
            }
            if (!this._partDic[$key]) {
                this._partDic[$key] = new Array;
            }
            this._partUrl[$key] = $url;
            var ary = this._partDic[$key];
            this._scene.groupDataManager.scene = this._scene;
            this._scene.groupDataManager.getGroupData(Scene_data.fileRoot + $url, function (groupRes) {
                console.log($bindSocket, groupRes, ary);
                _this.loadPartRes($bindSocket, groupRes, ary);
            });
        };
        LayaSceneChar.prototype.addPartToPos = function ($key, $url, $pos) {
            var _this = this;
            if ($pos === void 0) { $pos = null; }
            if (this._partUrl[$key] == $url) { //如果相同则返回
                return;
            }
            else if (this._partUrl[$key]) { //如果不同则先移除
                this.removePart($key);
            }
            if (!this._partDic[$key]) {
                this._partDic[$key] = new Array;
            }
            this._partUrl[$key] = $url;
            var ary = this._partDic[$key];
            this._scene.groupDataManager.scene = this._scene;
            this._scene.groupDataManager.getGroupData(Scene_data.fileRoot + $url, function (groupRes) {
                _this.loadPartToPos(groupRes, ary, $pos);
            });
        };
        LayaSceneChar.prototype.loadPartToPos = function (groupRes, ary, $pos) {
            if (this._hasDestory) {
                return;
            }
            for (var i = 0; i < groupRes.dataAry.length; i++) {
                var item = groupRes.dataAry[i];
                var posV3d = new Vector3D($pos.x, $pos.y, $pos.z);
                var rotationV3d = new Vector3D(0, 0, 0);
                var scaleV3d = new Vector3D(1, 1, 1);
                if (item.isGroup) {
                    posV3d = new Vector3D(item.x + $pos.x, item.y + $pos.y, item.z + $pos.z);
                    rotationV3d = new Vector3D(item.rotationX, item.rotationY, item.rotationZ);
                    scaleV3d = new Vector3D(item.scaleX, item.scaleY, item.scaleZ);
                }
                if (item.types == BaseRes.SCENE_PARTICLE_TYPE) {
                    var particle = ParticleManager.getInstance().getParticleByte(Scene_data.fileRoot + item.particleUrl);
                    ary.push(particle);
                    particle.bindTarget = this;
                    particle.bindSocket = Pan3d.SceneChar.NONE_SLOT;
                    particle.dynamic = true;
                    this._scene.particleManager.addParticle(particle);
                    particle.setGroup(posV3d, rotationV3d, scaleV3d);
                }
                else if (item.types == BaseRes.PREFAB_TYPE) {
                    var display = new Display3DSprite();
                    display.setObjUrl(item.objUrl);
                    display.setMaterialUrl(item.materialUrl, item.materialInfoArr);
                    display.dynamic = true;
                    ary.push(display);
                    display.setBind(this, Pan3d.SceneChar.NONE_SLOT);
                    this._scene.addSpriteDisplay(display);
                    display.setGroup(posV3d, rotationV3d, scaleV3d);
                }
            }
            this.applyVisible();
        };
        LayaSceneChar.prototype.removePart = function ($key) {
            var ary = this._partDic[$key];
            if (!ary) {
                return;
            }
            for (var i = 0; i < ary.length; i++) {
                if (ary[i] instanceof CombineParticle) {
                    this._scene.particleManager.removeParticle(ary[i]);
                    ary[i].destory();
                }
                else if (ary[i] instanceof Display3DSprite) {
                    this._scene.removeSpriteDisplay(ary[i]);
                    ary[i].destory();
                }
            }
            this._partDic[$key] = null;
            this._partUrl[$key] = null;
            delete this._partDic[$key];
            delete this._partUrl[$key];
        };
        LayaSceneChar.prototype.getSceneCharAvatarUrl = function (num) {
            var $tempNum = String(num);
            if (num == 0) {
                //console.log("衣服为0")
                throw new Error("衣服为getSceneCharAvatarUrl");
            }
            var $url = getRoleUrl($tempNum);
            return $url;
        };
        LayaSceneChar.prototype.onMeshLoaded = function () {
            if (this._skinMesh) {
                this.tittleHeight = this._skinMesh.tittleHeight * this._pScale;
            }
        };
        LayaSceneChar.prototype.play = function ($action, $completeState, needFollow) {
            if ($completeState === void 0) { $completeState = 0; }
            if (needFollow === void 0) { needFollow = true; }
            if (this.isMount) {
                this._mountChar.visible = Boolean($action != CharAction.JUMP);
                if ($action == CharAction.STANAD) {
                    _super.prototype.play.call(this, CharAction.STAND_MOUNT);
                }
                else if ($action == CharAction.WALK) {
                    _super.prototype.play.call(this, CharAction.WALK_MOUNT);
                }
                else {
                    if (this._mountChar.visible) {
                        _super.prototype.play.call(this, CharAction.STAND_MOUNT);
                    }
                    else {
                        _super.prototype.play.call(this, CharAction.JUMP);
                    }
                }
                return this._mountChar.play($action, $completeState, needFollow);
            }
            else {
                return _super.prototype.play.call(this, $action, $completeState, needFollow);
            }
        };
        LayaSceneChar.prototype.getCurrentAction = function () {
            if (this.isMount) {
                return this._mountChar.curentAction;
            }
            else {
                return this.curentAction;
            }
        };
        //平滑num=1为直接
        LayaSceneChar.prototype.rotationToNew = function (value, num) {
            if (num === void 0) { num = 1; }
            var anum = value - this.pRotationY;
            if (anum == 0) {
                return;
            }
            if (anum < 1) {
                this.pRotationY = value;
                return;
            }
            var a = ((value - this.pRotationY) % 360 + 360) % 360;
            if (a > 180) {
                this.pRotationY -= (360 - a) / num;
            }
            else {
                this.pRotationY += a / num;
            }
        };
        LayaSceneChar.prototype.stopMove = function () {
            this.play(CharAction.STANAD);
        };
        LayaSceneChar.prototype.watch = function ($obj, $syn) {
            if ($syn === void 0) { $syn = false; }
            if (!$obj) {
                //console.log("面向对象无")
                return;
            }
            var xx = $obj.x - this.px;
            var yy = $obj.z - this.pz;
            var distance = Math.sqrt(xx * xx + yy * yy);
            xx /= distance;
            yy /= distance;
            var angle = Math.asin(xx) / Math.PI * 180;
            if (yy <= 0) {
                angle = 180 - angle;
            }
            if (!isNaN(angle)) {
                this.forceRotationY = angle;
            }
        };
        LayaSceneChar.prototype.getCurrentPos = function () {
            return new Vector3D(this.px, this.py, this.pz);
        };
        /*
        playSkill($skill: Skill): void {
            if (!this._scene) {
                return;
            }
            this._scene.skillManager.playSkill($skill);
            this.skillVo = $skill;
        }
        */
        LayaSceneChar.prototype.msgSpellStop = function () {
            if (this.skillVo) {
                ////console.log("停止技能播放");
                this.skillVo.removeSkillForce();
                this.changeAction(this._defaultAction);
                this.skillVo = null;
            }
            this.isSinging = false;
        };
        /*
        setScene(scene: Pan3d.SceneManager): void {
            super.setScene(scene);
            if (this._scene) {
                this._mountChar && this._scene.addMovieDisplay(this._mountChar);
                this._wingDisplay && this._scene.addMovieDisplay(this._wingDisplay);
            }
            this._bloodManager = this._scene instanceof PanScene ? this._scene.bloodManager : null;
            this.nameEnable = this._nameEnable;
            this.bloodEnable = this._bloodEnable;
            this.angerEnable = this._angerEnable;
        }

        removeSelf(): void {
            if (this._mountChar) {
                this._mountChar.removeSelf();
            }
            if (this._wingDisplay) {
                this._wingDisplay.removeSelf();
            }
            if (this._charNameVo) {
                this._charNameVo.visible = false;
            }
            if (this._charBloodVo) {
                this._charBloodVo.visible = false;
            }
            if (this._charAngerVo) {
                this._charAngerVo.visible = false;
            }
            super.removeSelf();
        }
        */
        LayaSceneChar.prototype.destory = function () {
            if (this._hasDestory) {
                return;
            }
            if (this.skillVo) {
                this.skillVo.removeSkillForce();
                this.skillVo = null;
            }
            if (this._mountChar) {
                this._mountChar.destory();
                this._mountChar = null;
            }
            if (this._wingDisplay) {
                this._wingDisplay.destory();
                this._wingDisplay = null;
            }
            if (this._charNameVo) {
                this._charNameVo.destory();
                this._charNameVo = null;
            }
            if (this._charBloodVo) {
                this._charBloodVo.destory();
                this._charBloodVo = null;
            }
            if (this._charAngerVo) {
                this._charAngerVo.destory();
                this._charAngerVo = null;
            }
            this._hasDestory = true;
            _super.prototype.destory.call(this);
        };
        Object.defineProperty(LayaSceneChar.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.applyVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "optimization", {
            get: function () {
                return this._optimization;
            },
            set: function (value) {
                this._optimization = value;
                this.applyVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "resultVisible", {
            get: function () {
                return this._resultVisible;
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneChar.prototype.applyVisible = function () {
            var value = this._visible;
            if (this._visible) {
                if (this._optimization) {
                    value = false;
                }
                else {
                    value = true;
                }
            }
            else {
                value = false;
            }
            if (this._partDic) {
                if (this._partDic[LayaSceneChar.WEAPON_PART]) {
                    for (var _i = 0, _a = this._partDic[LayaSceneChar.WEAPON_PART]; _i < _a.length; _i++) {
                        var obj = _a[_i];
                        obj.sceneVisible = value;
                    }
                }
            }
            // this._mountChar && (this._mountChar.sceneVisible = value);
            // this._wingDisplay && (this._wingDisplay.sceneVisible = value);
            this._resultVisible = value;
        };
        Object.defineProperty(LayaSceneChar.prototype, "isCamera2D", {
            set: function (v) {
                this._isCamera2D = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "bloodColor", {
            set: function (v) {
                this._bloodColor = v;
                this._charBloodVo && (this._charBloodVo.colortype = this._bloodColor);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "hpRatio", {
            get: function () {
                return this._hpRatio;
            },
            set: function (v) {
                this._hpRatio = v;
                this._charBloodVo && (this._charBloodVo.num = this._hpRatio);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "bloodEnable", {
            set: function (v) {
                this._bloodEnable = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "angerColor", {
            set: function (v) {
                this._angerColor = v;
                this._charAngerVo && (this._charAngerVo.colortype = this._angerColor);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "angerRatio", {
            get: function () {
                return this._angerRatio;
            },
            set: function (v) {
                this._angerRatio = v;
                this._charAngerVo && (this._charAngerVo.num = this._angerRatio);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "angerEnable", {
            set: function (v) {
                this._angerEnable = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "charName", {
            get: function () {
                return this._charName || "";
            },
            set: function (v) {
                if (this._charName == v)
                    return;
                this._charName = v;
                this._charNameVo && (this._charNameVo.name = this._charName);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "nameEnable", {
            set: function (v) {
                this._nameEnable = v;
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneChar.prototype.updateBind = function () {
            _super.prototype.updateBind.call(this);
            this.updateWeaponScale();
            this.refreshPos();
        };
        LayaSceneChar.prototype.updateWeaponScale = function () {
            if (this._partDic.hasOwnProperty(LayaSceneChar.WEAPON_PART)) {
                var ary = this._partDic[LayaSceneChar.WEAPON_PART];
                if (ary instanceof Array) {
                    for (var i = 0; i < ary.length; i++) {
                        var item = ary[i];
                        if (item instanceof Display3DSprite) {
                            item.scale = this._pScale;
                        }
                    }
                }
            }
        };
        LayaSceneChar.prototype.refreshPos = function () {
            var posY = this.py + this.tittleHeight;
            if (this.isMount) {
                posY += 20;
            }
            //处理怒气条位置
            if (this._charAngerVo) {
                this._charAngerVo.pos.x = this.px;
                this._charAngerVo.pos.y = posY;
                this._charAngerVo.pos.z = this.pz;
                this._charAngerVo.visible = this._resultVisible;
                posY += (this._isCamera2D ? 5 : 5);
            }
            //处理血条和名字位置 -FIXME--0
            if (this._charBloodVo) {
                this._charBloodVo.pos.x = this.px;
                this._charBloodVo.pos.y = posY;
                this._charBloodVo.pos.z = this.pz;
                this._charBloodVo.visible = this._resultVisible;
                posY += (this._isCamera2D ? 10 : 10);
            }
            if (this._charNameVo) {
                this._charNameVo.pos.x = this.px;
                this._charNameVo.pos.y = posY;
                this._charNameVo.pos.z = this.pz;
                this._charNameVo.visible = this._resultVisible;
                // posY += 6;
            }
        };
        Object.defineProperty(LayaSceneChar.prototype, "px", {
            get: function () {
                return this._px;
            },
            set: function (value) {
                this._px = value;
                if (this._mountChar) {
                    this._mountChar.x = this._px;
                }
                else {
                    this.x = this.px;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayaSceneChar.prototype, "pz", {
            get: function () {
                return this._pz;
            },
            set: function (value) {
                this._pz = value;
                if (this._mountChar) {
                    this._mountChar.z = this._pz;
                }
                else {
                    this.z = this.pz;
                }
            },
            enumerable: true,
            configurable: true
        });
        LayaSceneChar.prototype.update = function () {
            if (!this._skinMesh) {
                return;
            }
            if (this._optimization) {
                return;
            }
            _super.prototype.update.call(this);
            if (this._showHitBox) {
                if (!this.lineSprite) {
                    ProgrmaManager.getInstance().registe(LineDisplayShader.LineShader, new LineDisplayShader);
                    this.lineSprite = new LineDisplaySprite();
                    this.lineSprite.clear();
                    for (var i = 0; i < this._triIndex.length / 3; i++) {
                        var a = this._skinMesh.hitPosItem[this._triIndex[i * 3 + 0]];
                        var b = this._skinMesh.hitPosItem[this._triIndex[i * 3 + 1]];
                        var c = this._skinMesh.hitPosItem[this._triIndex[i * 3 + 2]];
                        this.lineSprite.makeLineMode(a, b);
                        this.lineSprite.makeLineMode(b, c);
                        this.lineSprite.makeLineMode(c, a);
                    }
                    this.lineSprite.upToGpu();
                }
                this.lineSprite.posMatrix = this.posMatrix.clone();
                this.lineSprite.update();
            }
        };
        LayaSceneChar.prototype.math_distance = function ($other) {
            return MathClass.math_distance(this.px, this.pz, $other.x, $other.z);
        };
        LayaSceneChar.prototype.get2dPos = function () {
            var $v2d = new Vector2D;
            var $nScale = 0.25 / scene2d_me.Override2dEngine.htmlScale;
            if (this._mountChar) {
                $v2d.x = this._mountChar.px;
                $v2d.y = this._mountChar.pz;
            }
            else {
                $v2d.x = this.px;
                $v2d.y = this.pz;
            }
            $v2d.x = $v2d.x / $nScale;
            $v2d.y = $v2d.y / -1 * (Math.sin(45 * Math.PI / 180)) / $nScale;
            return $v2d;
        };
        LayaSceneChar.prototype.set2dPos = function ($x, $y) {
            var $nScale = 0.25 / scene2d_me.Override2dEngine.htmlScale;
            var $tx = $x * $nScale;
            var $tz = $y * $nScale / (Math.sin(45 * Math.PI / 180)) * -1;
            this._px = $tx;
            this._pz = $tz;
            if (this._mountChar) {
                this._mountChar.x = $tx;
                this._mountChar.z = $tz;
            }
            else {
                this.x = $tx;
                this.z = $tz;
            }
        };
        LayaSceneChar.prototype.math3DWorldtoDisplay2DPos = function ($pos) {
            var $scene = this._scene;
            var m = $scene.cameraMatrix.clone();
            m.append($scene.viewMatrx3D.clone());
            var fovw = Scene_data.stageWidth;
            var fovh = Scene_data.stageHeight;
            var p = m.transformVector($pos);
            var b = new Vector2D;
            b.x = ((p.x / p.w) + 1) * (fovw / 2);
            b.y = ((-p.y / p.w) + 1) * (fovh / 2);
            return b;
        };
        LayaSceneChar.prototype.mouseClik = function (lineA, $lineB) {
            var $scene = this._scene;
            var $pos = $scene.cameraMatrix.transformVector(this.getCurrentPos());
            if ($pos.z < 10) { //在Z后面
                return false;
            }
            var hitVec2 = this.math3DWorldtoDisplay2DPos($lineB);
            if (this._skinMesh) {
                if (!this._hitBox2DItem) {
                    this._hitBox2DItem = new Array;
                }
                this._hitBox2DItem.length = 0;
                for (var j = 0; j < this._skinMesh.hitPosItem.length; j++) {
                    var temppp = this.posMatrix.transformVector(this._skinMesh.hitPosItem[j]);
                    this._hitBox2DItem.push(this.math3DWorldtoDisplay2DPos(temppp));
                }
                for (var i = 0; i < this._triIndex.length / 3; i++) {
                    TestTriangle.baseTri.p1 = this._hitBox2DItem[this._triIndex[i * 3 + 0]];
                    TestTriangle.baseTri.p2 = this._hitBox2DItem[this._triIndex[i * 3 + 1]];
                    TestTriangle.baseTri.p3 = this._hitBox2DItem[this._triIndex[i * 3 + 2]];
                    if (TestTriangle.baseTri.checkPointIn(hitVec2)) {
                        console.log(this._hitBox2DItem);
                        return true;
                    }
                }
            }
            else {
                if (Vector2D.distance(hitVec2, this.math3DWorldtoDisplay2DPos(this.posMatrix.position)) < 20) {
                    return true;
                }
            }
            return false;
            //var $pos: Vector3D = Scene_data.cam3D.cameraMatrix.transformVector(this.getCurrentPos())
            //          if ($pos.z < Scene_data.cam3D.distance / 3) { //在Z后面
            //              return false
            //          }
            //          var hitVec2: Vector2D = MathUtil.math3DWorldtoDisplay2DPos($lineB)
            //          if (this._skinMesh) {
            //              if (!this._hitBox2DItem) {
            //                  this._hitBox2DItem = new Array;
            //              }
            //              this._hitBox2DItem.length = 0
            //              for (var j: number = 0; j < this._skinMesh.hitPosItem.length; j++) {
            //                  var temppp: Vector3D = this.posMatrix.transformVector(this._skinMesh.hitPosItem[j])
            //                  this._hitBox2DItem.push(MathUtil.math3DWorldtoDisplay2DPos(temppp))
            //              }
            //              for (var i: number = 0; i < this._triIndex.length / 3; i++) {
            //                  TestTriangle.baseTri.p1 = this._hitBox2DItem[this._triIndex[i * 3 + 0]];
            //                  TestTriangle.baseTri.p2 = this._hitBox2DItem[this._triIndex[i * 3 + 1]];
            //                  TestTriangle.baseTri.p3 = this._hitBox2DItem[this._triIndex[i * 3 + 2]];
            //                  if (TestTriangle.baseTri.checkPointIn(hitVec2)) {
            //                      console.log(this._hitBox2DItem)
            //                      return true
            //                  }
            //              }
            //          } else {
            //              if (Vector2D.distance(hitVec2, MathUtil.math3DWorldtoDisplay2DPos(this.posMatrix.position)) < 20) {
            //                  return true
            //              }
            //          }
            //          return false
        };
        LayaSceneChar.prototype.removeStage = function () {
            _super.prototype.removeStage.call(this);
            if (this._charNameVo) {
                this._charNameVo.visible = false;
            }
            if (this._charBloodVo) {
                this._charBloodVo.visible = false;
            }
            if (this._mountChar) {
                this._scene.removeMovieDisplay(this._mountChar);
            }
            if (this._wingDisplay) {
                this._scene.removeMovieDisplay(this._wingDisplay);
            }
        };
        LayaSceneChar.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            if (this._charNameVo) {
                this._charNameVo.visible = true;
            }
            if (this._charBloodVo) {
                this._charBloodVo.visible = true;
            }
            if (this._mountChar) {
                this._scene.addMovieDisplay(this._mountChar);
            }
            if (this._wingDisplay) {
                this._scene.addMovieDisplay(this._wingDisplay);
            }
        };
        // 血条颜色 对应素材 res_3d\ui\load\blood.png
        LayaSceneChar.BLOOD_COLOR_HP = 0;
        LayaSceneChar.BLOOD_COLOR_ANGER = 1;
        LayaSceneChar.Defaul_Man_Avatar = 2002; //男
        LayaSceneChar.Defaul_WoMan_Avater = 2012; //女
        LayaSceneChar.WEAPON_PART = "weapon";
        LayaSceneChar.WEAPON_DEFAULT_SLOT = "w_01";
        LayaSceneChar.MOUNT_SLOT = "mount_01";
        LayaSceneChar.WING_SLOT = "wing_01";
        LayaSceneChar.SEL_PART = "select";
        LayaSceneChar.QUEST_ICON = "questicon";
        LayaSceneChar.NONE_SLOT = "none";
        return LayaSceneChar;
    }(layapan_me.LayaSceneBaseChar));
    layapan_me.LayaSceneChar = LayaSceneChar;
})(layapan_me || (layapan_me = {}));
//# sourceMappingURL=LayaSceneChar.js.map
//# sourceMappingURL=ITile.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pack;
(function (pack) {
    var EventDispatcher = Pan3d.EventDispatcher;
    var Prefab = /** @class */ (function (_super) {
        __extends(Prefab, _super);
        function Prefab() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Prefab.prototype.getName = function () {
            return "prefab";
        };
        return Prefab;
    }(EventDispatcher));
    pack.Prefab = Prefab;
})(pack || (pack = {}));
//# sourceMappingURL=Prefab.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pack;
(function (pack) {
    var PrefabStaticMesh = /** @class */ (function (_super) {
        __extends(PrefabStaticMesh, _super);
        function PrefabStaticMesh() {
            var _this = _super.call(this) || this;
            _this.sunColor = new Vector3D(2, 3, 4, 1);
            return _this;
        }
        PrefabStaticMesh.prototype.getObject = function () {
            var obj = {};
            obj.material = this.material;
            obj.name = this.getName();
            obj.objsurl = this.objsurl;
            obj.paramInfo = this.paramInfo;
            obj.sunColor = this.sunColor;
            obj.textureurl = this.textureurl;
            obj.url = this.url;
            return obj;
        };
        return PrefabStaticMesh;
    }(pack.Prefab));
    pack.PrefabStaticMesh = PrefabStaticMesh;
})(pack || (pack = {}));
//# sourceMappingURL=PrefabStaticMesh.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pack;
(function (pack) {
    var RoleStaticMesh = /** @class */ (function (_super) {
        __extends(RoleStaticMesh, _super);
        function RoleStaticMesh() {
            return _super.call(this) || this;
        }
        RoleStaticMesh.prototype.getObject = function () {
            var obj = {};
            obj.name = this.getName();
            obj.meshAry = this.skinMesh.meshAry;
            obj.animDic = this.animDic;
            obj.animPlayKey = this.animPlayKey;
            obj.version = this.version;
            return obj;
        };
        return RoleStaticMesh;
    }(pack.Prefab));
    pack.RoleStaticMesh = RoleStaticMesh;
})(pack || (pack = {}));
//# sourceMappingURL=RoleStaticMesh.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pack;
(function (pack) {
    var EventDispatcher = Pan3d.EventDispatcher;
    var SkillStatcMesh = /** @class */ (function (_super) {
        __extends(SkillStatcMesh, _super);
        function SkillStatcMesh() {
            var _this = _super.call(this) || this;
            _this.actionnum = -1;
            _this.interval = 2;
            return _this;
        }
        SkillStatcMesh.prototype.getObject = function () {
            var obj = {};
            obj.skillUrl = this.skillUrl;
            obj.roleUrl = this.roleUrl;
            obj.url = this.url;
            obj.actionnum = this.actionnum;
            obj.interval = this.interval;
            obj.version = this.version;
            return obj;
        };
        SkillStatcMesh.prototype.getName = function () {
            return "skill";
        };
        return SkillStatcMesh;
    }(EventDispatcher));
    pack.SkillStatcMesh = SkillStatcMesh;
})(pack || (pack = {}));
//# sourceMappingURL=SkillStatcMesh.js.map
var pack;
(function (pack) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var ConstItem = Pan3d.ConstItem;
    var TexItem = Pan3d.TexItem;
    var TextureManager = Pan3d.TextureManager;
    var TextureRes = Pan3d.TextureRes;
    var PackMaterialManager = /** @class */ (function () {
        function PackMaterialManager() {
            this.dic = {};
            this.loadDic = {};
        }
        PackMaterialManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new PackMaterialManager();
            }
            return this._instance;
        };
        PackMaterialManager.prototype.replaceMaterialByUrl = function ($url) {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.BYTE_TYPE, function ($dtstr) {
                var $byte = new Pan3d.Pan3dByteArray($dtstr);
                $byte.position = 0;
                var $temp = JSON.parse($byte.readUTF());
                if (_this.dic[$url]) { //有了就反回
                    var $materialTree = _this.dic[$url];
                    $materialTree.setData({ data: $temp.data }); //这里只更新材质数据结构，为了编辑时能用到最新数据
                }
            });
        };
        PackMaterialManager.prototype.makeRoleShader = function ($materialTree, $temp) {
            var $roleShader = new left.RoleMaterialShader();
            if ($temp.info.paramAry) {
                $roleShader.paramAry = [];
                for (var i = 0; i < $temp.info.paramAry.length; i++) {
                    $roleShader.paramAry.push($temp.info.paramAry[i]);
                }
            }
            else {
                $roleShader.paramAry = [false, false, false, false, false, false, false, false, false, false];
            }
            $roleShader.vertex = $roleShader.getVertexShaderString();
            $roleShader.fragment = $temp.info.shaderStr;
            $roleShader.encode();
            //this.outShader($roleShader.vertex)
            $materialTree.roleShader = $roleShader;
        };
        PackMaterialManager.prototype.outShader = function ($str) {
            var $item = $str.split("\n");
            console.log("----");
            for (var i = 0; i < $item.length; i++) {
                var str = "\"";
                str += $item[i];
                if (i < ($item.length - 1)) {
                    str += "\\n";
                    str += "\"";
                    str += "\+";
                }
                else {
                    str += "\"";
                }
                console.log(str);
            }
            console.log("----");
        };
        PackMaterialManager.prototype.makeMaterialShaderByByte = function ($byte, $url, Met) {
            if (Met === void 0) { Met = null; }
            $byte.position = 0;
            var $temp = JSON.parse($byte.readUTF());
            var $buildShader = new left.BuildMaterialShader();
            if ($temp.info.paramAry) {
                $buildShader.paramAry = [];
                for (var i = 0; i < $temp.info.paramAry.length; i++) {
                    $buildShader.paramAry.push($temp.info.paramAry[i]);
                }
            }
            else {
                $buildShader.paramAry = [false, false, false, false, false, false, false, false, false, false];
            }
            $buildShader.vertex = $buildShader.getVertexShaderString();
            $buildShader.fragment = $temp.info.shaderStr;
            $buildShader.encode();
            var $materialTree;
            if (Met) {
                $materialTree = Met;
            }
            else {
                $materialTree = new materialui.MaterialTree();
            }
            $materialTree.setData({ data: $temp.data });
            $materialTree.useNormal = $temp.info.useNormal;
            $materialTree.hasTime = $temp.info.hasTime;
            if ($materialTree.hasTime) {
                $materialTree.timeValue = new Vector2D($temp.info.timeValue.x, $temp.info.timeValue.y);
            }
            $materialTree.showurl = $temp.info.showurl;
            $materialTree.blendMode = $temp.info.blendMode;
            $materialTree.writeZbuffer = $temp.info.writeZbuffer;
            $materialTree.zbuff = $temp.info.zbuff;
            $materialTree.useLightUv = $buildShader.paramAry[2];
            $materialTree.texList = this.makeTextList($temp.info.texList);
            $materialTree.constList = this.makeConstList($temp.info.constList);
            $materialTree.fcData = this.makeFc($materialTree.constList, ($temp.info.fcData).split(","));
            $materialTree.fcNum = Math.round($materialTree.fcData.length / 4);
            $materialTree.modelShader = $buildShader;
            $materialTree.url = $url;
            this.makeRoleShader($materialTree, $temp);
            $materialTree.laterTextureurl = $temp.info.laterTextureurl;
            return $materialTree;
        };
        PackMaterialManager.prototype.getMaterialByUrl = function ($url, bfun) {
            var _this = this;
            if (this.dic[$url]) { //有了就反回
                bfun(this.dic[$url]);
            }
            if (!this.loadDic[$url]) { //创建加载队列
                this.loadDic[$url] = [bfun];
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.BYTE_TYPE, function ($dtstr) {
                    var $byte = new Pan3d.Pan3dByteArray($dtstr);
                    var $materialTree = _this.makeMaterialShaderByByte($byte, $url);
                    if (!_this.dic[$url]) {
                        _this.dic[$url] = $materialTree;
                    }
                    while (_this.loadDic[$url].length) {
                        _this.loadDic[$url].pop()($materialTree);
                    }
                });
            }
            else {
                this.loadDic[$url].push(bfun);
            }
        };
        PackMaterialManager.prototype.makeConstList = function (item) {
            var constList = [];
            for (var i = 0; i < item.length; i++) {
                var temp = new ConstItem();
                for (var key in item[i]) {
                    temp[key] = item[i][key];
                }
                temp.name = "fc" + i;
                temp.offset = i;
                temp.id = i;
                constList.push(temp);
            }
            return constList;
        };
        PackMaterialManager.prototype.makeFc = function (constVec, infofcData) {
            var fcData = new Float32Array(infofcData.length);
            for (var i = 0; i < infofcData.length; i++) {
                fcData[i] = Number(infofcData[i]);
            }
            for (var k = 0; k < constVec.length; k++) {
                constVec[k].creat(fcData);
            }
            return fcData;
        };
        PackMaterialManager.prototype.loadTextureRes = function (texItem) {
            if (texItem.type == TexItem.CUBEMAP) {
                LoadManager.getInstance().load(Scene_data.fileRoot + texItem.url, LoadManager.IMG_TYPE, function ($img, $info) {
                    texItem.textureRes = new TextureRes;
                    texItem.textureRes.texture = Pan3d.CubemapLoad.makeTempCubeTextture($img);
                });
            }
            else {
                TextureManager.getInstance().getTexture(Scene_data.fileRoot + texItem.url, function ($texture) {
                    texItem.textureRes = $texture;
                });
            }
        };
        PackMaterialManager.prototype.makeTextList = function (item) {
            var texList = new Array;
            for (var i = 0; i < item.length; i++) {
                var texItem = new TexItem;
                texItem.id = item[i]._id;
                texItem.url = item[i].url;
                texItem.name = item[i].name;
                texItem.isDynamic = item[i].isDynamic;
                texItem.paramName = item[i].paramName;
                texItem.isMain = item[i].isMain;
                texItem.type = item[i].type;
                this.loadTextureRes(texItem);
                texList.push(texItem);
            }
            return texList;
        };
        return PackMaterialManager;
    }());
    pack.PackMaterialManager = PackMaterialManager;
})(pack || (pack = {}));
//# sourceMappingURL=PackMaterialManager.js.map
var pack;
(function (pack) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var PackObjDataManager = /** @class */ (function () {
        function PackObjDataManager() {
            this.dic = {};
            this.loadDic = {};
        }
        PackObjDataManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new PackObjDataManager();
            }
            return this._instance;
        };
        PackObjDataManager.prototype.getObjDataByUrl = function ($url, bfun) {
            var _this = this;
            if (this.dic[$url]) { //有了就反回
                bfun(this.dic[$url]);
            }
            if (!this.loadDic[$url]) { //创建加载队列
                this.loadDic[$url] = [bfun];
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($modelxml) {
                    var $objData = _this.readTxtToModel($modelxml);
                    if (!_this.dic[$url]) {
                        _this.dic[$url] = $objData;
                    }
                    while (_this.loadDic[$url].length) {
                        _this.loadDic[$url].pop()($objData);
                    }
                });
            }
            else {
                this.loadDic[$url].push(bfun);
            }
        };
        PackObjDataManager.prototype.readTxtToModel = function ($str) {
            var objstr = JSON.parse($str);
            var $objdata = new ObjData();
            $objdata.vertices = objstr.vertices;
            $objdata.normals = objstr.normals;
            $objdata.uvs = objstr.uvs;
            $objdata.lightuvs = objstr.lightuvs;
            $objdata.indexs = objstr.indexs;
            $objdata.treNum = $objdata.indexs.length;
            TBNUtils.processTBN($objdata);
            $objdata.vertexBuffer = Scene_data.context3D.uploadBuff3D($objdata.vertices);
            $objdata.uvBuffer = Scene_data.context3D.uploadBuff3D($objdata.uvs);
            $objdata.lightUvBuffer = Scene_data.context3D.uploadBuff3D($objdata.lightuvs);
            $objdata.tangentBuffer = Scene_data.context3D.uploadBuff3D($objdata.tangents);
            $objdata.bitangentBuffer = Scene_data.context3D.uploadBuff3D($objdata.bitangents);
            $objdata.normalsBuffer = Scene_data.context3D.uploadBuff3D($objdata.normals);
            $objdata.indexBuffer = Scene_data.context3D.uploadIndexBuff3D($objdata.indexs);
            return $objdata;
        };
        return PackObjDataManager;
    }());
    pack.PackObjDataManager = PackObjDataManager;
})(pack || (pack = {}));
//# sourceMappingURL=PackObjDataManager.js.map
var pack;
(function (pack) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var Pan3dByteArray = Pan3d.Pan3dByteArray;
    var PrefabStaticMesh = pack.PrefabStaticMesh;
    var TextureManager = Pan3d.TextureManager;
    var DynamicBaseConstItem = Pan3d.DynamicBaseConstItem;
    var DynamicBaseTexItem = Pan3d.DynamicBaseTexItem;
    var PackPrefabManager = /** @class */ (function () {
        function PackPrefabManager() {
            this.dic = {};
            this.loadDic = {};
        }
        PackPrefabManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new PackPrefabManager();
            }
            return this._instance;
        };
        PackPrefabManager.prototype.playBfun = function ($prefab, $url) {
            if (!this.dic[$url]) {
                this.dic[$url] = $prefab;
            }
            while (this.loadDic[$url].length) {
                this.loadDic[$url].pop()($prefab);
            }
        };
        PackPrefabManager.prototype.makeMaterialBaseParam = function (materialParam, paramInfo) {
            materialParam.dynamicConstList = [];
            materialParam.dynamicTexList = [];
            for (var i = 0; paramInfo && i < paramInfo.length; i++) {
                var tempInfo = paramInfo[i];
                if (tempInfo.type == "tex") {
                    this.mekeParamTexture(tempInfo, materialParam);
                }
                else {
                    this.makeParamValue(tempInfo, materialParam);
                }
            }
        };
        PackPrefabManager.prototype.makeParamValue = function (obj, materialParam) {
            var constList = materialParam.material.constList;
            var targetName = obj.paramName;
            var target = null;
            for (var j = 0; j < constList.length; j++) {
                if (targetName == constList[j].paramName0
                    || targetName == constList[j].paramName1
                    || targetName == constList[j].paramName2
                    || targetName == constList[j].paramName3) {
                    target = constList[j];
                    break;
                }
            }
            var constItem = new DynamicBaseConstItem();
            constItem.setTargetInfo(target, targetName, obj.type);
            switch (obj.type) {
                case "vec3":
                    constItem.setCurrentVal(obj.data.x, obj.data.y, obj.data.z);
                    break;
                case "vec2":
                    constItem.setCurrentVal(obj.data.x, obj.data.y);
                    break;
                case "float":
                    constItem.setCurrentVal(obj.data);
                    break;
            }
            materialParam.dynamicConstList.push(constItem);
        };
        PackPrefabManager.prototype.mekeParamTexture = function (obj, materialParam) {
            var texList = materialParam.material.texList;
            var texItem = new DynamicBaseTexItem();
            texItem.paramName = obj.paramName;
            for (var i = 0; i < texList.length; i++) {
                if (texItem.paramName == texList[i].paramName) {
                    texItem.target = texList[i];
                    break;
                }
            }
            TextureManager.getInstance().getTexture(Scene_data.fileRoot + obj.data, function ($textres) {
                texItem.textureRes = $textres;
            });
            materialParam.dynamicTexList.push(texItem);
        };
        PackPrefabManager.prototype.getPrefabByUrl = function ($url, bfun) {
            var _this = this;
            if (this.dic[$url]) { //有了就反回
                bfun(this.dic[$url]);
            }
            if (!this.loadDic[$url]) { //创建加载队列
                this.loadDic[$url] = [bfun];
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.BYTE_TYPE, function ($byte) {
                    var $obj = JSON.parse(new Pan3dByteArray($byte).readUTF());
                    var $prefab = new PrefabStaticMesh();
                    for (var key in $obj) {
                        $prefab[key] = $obj[key];
                    }
                    $prefab.url = $url;
                    if ($prefab.objsurl) {
                        pack.PackObjDataManager.getInstance().getObjDataByUrl($prefab.objsurl, function (value) {
                            $prefab.objData = value;
                            if ($prefab.textureurl) {
                                pack.PackMaterialManager.getInstance().getMaterialByUrl($prefab.textureurl, function ($materialTree) {
                                    $prefab.material = $materialTree;
                                    //    console.log("prefab加载完成", $prefab.url)
                                    _this.playBfun($prefab, $url);
                                });
                            }
                        });
                    }
                    else {
                        console.log("没有模型地址");
                        if ($prefab.textureurl) {
                            pack.PackMaterialManager.getInstance().getMaterialByUrl($prefab.textureurl, function ($materialTree) {
                                $prefab.material = $materialTree;
                                _this.playBfun($prefab, $url);
                            });
                        }
                        else {
                            console.log("没有材质地址");
                        }
                    }
                });
            }
            else {
                this.loadDic[$url].push(bfun);
            }
        };
        return PackPrefabManager;
    }());
    pack.PackPrefabManager = PackPrefabManager;
})(pack || (pack = {}));
//# sourceMappingURL=PackPrefabManager.js.map
var pack;
(function (pack) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var RoleStaticMesh = pack.RoleStaticMesh;
    var MeshData = Pan3d.MeshData;
    var AnimData = Pan3d.AnimData;
    var SkinMesh = Pan3d.SkinMesh;
    var DualQuatFloat32Array = Pan3d.DualQuatFloat32Array;
    var Dictionary = Pan3d.Dictionary;
    var PackRoleManager = /** @class */ (function () {
        function PackRoleManager() {
            this.dic = {};
            this.loadDic = {};
        }
        PackRoleManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new PackRoleManager();
            }
            return this._instance;
        };
        PackRoleManager.prototype.playBfun = function ($prefab, $url) {
            if (!this.dic[$url]) {
                this.dic[$url] = $prefab;
            }
            while (this.loadDic[$url].length) {
                this.loadDic[$url].pop()($prefab);
            }
        };
        PackRoleManager.prototype.makeBufToRole = function (meshData) {
            var len = (meshData.vertices.length / 3) * meshData.stride;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            this.pushToBuff(data, meshData.vertices, 3, 0, meshData.stride); //vertices
            this.pushToBuff(data, meshData.uvs, 2, meshData.uvsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.tangents, 3, meshData.tangentsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.bitangents, 3, meshData.bitangentsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.normals, 3, meshData.normalsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.boneIDAry, 4, meshData.boneIDOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.boneWeightAry, 4, meshData.boneWeightOffsets, meshData.stride); //vertices
            meshData.vertexBuffer = Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            meshData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(meshData.indexs);
        };
        PackRoleManager.prototype.pushToBuff = function (data, arr, dataWidth, offset, stride) {
            var $len = data.byteLength / stride;
            var arrId = 0;
            for (var i = 0; i < $len; i++) {
                var pos = i * stride + offset;
                for (var j = 0; j < dataWidth; j++) {
                    var $num = arr[arrId++];
                    data.setFloat32(pos + j * 4, $num, true);
                }
            }
        };
        PackRoleManager.prototype.getFloat32ArrayByArr = function (obj) {
            var numarr = new Array;
            for (var key in obj) {
                numarr.push(obj[key]);
            }
            var temp = new Float32Array(numarr.length);
            for (var i = 0; i < numarr.length; i++) {
                temp[i] = numarr[i];
            }
            return temp;
        };
        PackRoleManager.prototype.getmeshBoneQPAryDic = function ($arr) {
            var item = new Dictionary([]);
            for (var key in $arr) {
                var a1 = new Array;
                for (var j = 0; j < $arr[key].length; j++) {
                    var a2 = $arr[key][j];
                    var a3 = new Array();
                    for (var k = 0; k < a2.length; k++) {
                        var a4 = a2[k];
                        var $dbq = new DualQuatFloat32Array();
                        $dbq.quat = this.getFloat32ArrayByArr(a4.quat);
                        $dbq.pos = this.getFloat32ArrayByArr(a4.pos);
                        a3.push($dbq);
                    }
                    a1.push(a3);
                }
                item[key] = a1;
            }
            return item;
        };
        PackRoleManager.prototype.getRoleZzwByUrl = function ($url, bfun) {
            var _this = this;
            if (this.dic[$url]) { //有了就反回
                bfun(this.dic[$url]);
            }
            if (!this.loadDic[$url]) { //创建加载队列
                this.loadDic[$url] = [bfun];
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($str) {
                    var temp = JSON.parse($str);
                    var tempRoleStatemesh = new RoleStaticMesh();
                    tempRoleStatemesh.url = $url;
                    tempRoleStatemesh.animPlayKey = temp.animPlayKey;
                    var $skinMesh = new SkinMesh();
                    $skinMesh.meshAry = new Array();
                    for (var i = 0; i < temp.meshAry.length; i++) {
                        var $meshData = new MeshData();
                        /*
                        $meshData.vertices = temp.meshAry[i].vertices
                        $meshData.uvs = temp.meshAry[i].uvs
                        $meshData.tangents = temp.meshAry[i].tangents
                        $meshData.bitangents = temp.meshAry[i].bitangents
                        $meshData.boneIDAry = temp.meshAry[i].boneIDAry
                        $meshData.boneWeightAry = temp.meshAry[i].boneWeightAry
                        $meshData.normals = temp.meshAry[i].normals
                        $meshData.indexs = temp.meshAry[i].indexs
                        $meshData.stride = temp.meshAry[i].stride;
                        $meshData.uid = temp.meshAry[i].uid;
                        $meshData.treNum = temp.meshAry[i]._treNum;

                        $meshData.uvsOffsets = temp.meshAry[i].uvsOffsets;
                        $meshData.tangentsOffsets = temp.meshAry[i].tangentsOffsets;
                        $meshData.bitangentsOffsets = temp.meshAry[i].bitangentsOffsets;
                        $meshData.normalsOffsets = temp.meshAry[i].normalsOffsets;
                        $meshData.boneIDOffsets = temp.meshAry[i].boneIDOffsets;
                        $meshData.boneWeightOffsets = temp.meshAry[i].boneWeightOffsets;
                        */
                        for (var strKey in temp.meshAry[i]) {
                            $meshData[strKey] = temp.meshAry[i][strKey];
                        }
                        $meshData.material = null;
                        _this.makeBufToRole($meshData);
                        $meshData.compressBuffer = true;
                        $skinMesh.meshAry.push($meshData);
                    }
                    var $animDic = {};
                    for (var key in temp.animDic) {
                        var $animData = new AnimData;
                        $animData.meshBoneQPAryDic = _this.getmeshBoneQPAryDic(temp.animDic[key].meshBoneQPAryDic);
                        $animDic[key] = $animData;
                    }
                    tempRoleStatemesh.skinMesh = $skinMesh;
                    tempRoleStatemesh.animDic = $animDic;
                    if (tempRoleStatemesh.skinMesh.meshAry.length) {
                        for (var i = 0; i < tempRoleStatemesh.skinMesh.meshAry.length; i++) {
                            _this.loadMeshArrBy(tempRoleStatemesh.skinMesh.meshAry, i, function () {
                                _this.playBfun(tempRoleStatemesh, $url);
                            });
                        }
                    }
                    else {
                        _this.playBfun(tempRoleStatemesh, $url); //没有mesh时就不需要处理里面的材质对象
                    }
                });
            }
            else {
                this.loadDic[$url].push(bfun);
            }
        };
        PackRoleManager.prototype.loadMeshArrBy = function (value, i, bfun) {
            if (!value[i].materialUrl) {
                value[i].materialUrl = "assets/base/base.material"; //设计默认材质路径
            }
            pack.PackMaterialManager.getInstance().getMaterialByUrl(value[i].materialUrl, function ($materialTree) {
                $materialTree.shader = $materialTree.roleShader;
                //   $materialTree.program = $materialTree.shader.program;
                value[i].material = $materialTree;
                var isFinish = true;
                for (var j = 0; j < value.length; j++) {
                    if (!value[j].material) {
                        isFinish = false;
                    }
                }
                if (isFinish) {
                    bfun();
                    // console.log("所有材质加载完成,只回一次")
                }
            });
        };
        return PackRoleManager;
    }());
    pack.PackRoleManager = PackRoleManager;
})(pack || (pack = {}));
//# sourceMappingURL=PackRoleManager.js.map
var pack;
(function (pack) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var PackSkillManager = /** @class */ (function () {
        function PackSkillManager() {
            this.dic = {};
            this.loadDic = {};
        }
        PackSkillManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new PackSkillManager();
            }
            return this._instance;
        };
        PackSkillManager.prototype.playBfun = function ($prefab, $url) {
            if (!this.dic[$url]) {
                this.dic[$url] = $prefab;
            }
            while (this.loadDic[$url].length) {
                this.loadDic[$url].pop()($prefab);
            }
        };
        PackSkillManager.prototype.getPrefabByUrl = function ($url, bfun) {
            var _this = this;
            if (this.dic[$url]) { //有了就反回
                bfun(this.dic[$url]);
            }
            if (!this.loadDic[$url]) { //创建加载队列
                this.loadDic[$url] = [bfun];
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($str) {
                    var $obj = JSON.parse($str);
                    var $skillmesh = new pack.SkillStatcMesh();
                    for (var key in $obj) {
                        $skillmesh[key] = $obj[key];
                    }
                    $skillmesh.url = $url;
                    _this.playBfun($skillmesh, $url);
                });
            }
            else {
                this.loadDic[$url].push(bfun);
            }
        };
        return PackSkillManager;
    }());
    pack.PackSkillManager = PackSkillManager;
})(pack || (pack = {}));
//# sourceMappingURL=PackSkillManager.js.map
var md5list;
(function (md5list) {
    var MeshData = Pan3d.MeshData;
    var Quaternion = Pan3d.Quaternion;
    var Vector3D = Pan3d.Vector3D;
    var Scene_data = Pan3d.Scene_data;
    var MeshToObjUtils = /** @class */ (function () {
        function MeshToObjUtils() {
        }
        MeshToObjUtils.prototype.getObj = function (mesh) {
            var objData = new MeshData;
            objData.vertices = new Array;
            objData.uvs = new Array;
            objData.normals = new Array;
            objData.indexs = new Array;
            var bindPosAry = new Array;
            var invertAry = new Array;
            var meshItemAry = new Array;
            var boneItemAry = this.processBoneNew(mesh.boneItem);
            for (var i = 0; i < boneItemAry.length; i++) {
                var objbone = boneItemAry[i];
                var OldQ = new Quaternion(objbone.qx, objbone.qy, objbone.qz);
                OldQ.w = this.getW(OldQ.x, OldQ.y, OldQ.z);
                var newM = OldQ.toMatrix3D();
                newM.appendTranslation(objbone.tx, objbone.ty, objbone.tz);
                objbone.matrix = newM;
                bindPosAry.push(newM);
                var inverMatrix = newM.clone();
                inverMatrix.invert();
                invertAry.push(inverMatrix);
            }
            for (i = 0; i < mesh.uvItem.length; i++) {
                var objuv = mesh.uvItem[i];
                var v3d = new Vector3D;
                var wAry = new Array;
                for (var j = 0; j < objuv.b; j++) {
                    var weightID = objuv.a + j;
                    var objWeight = mesh.weightItem[weightID];
                    var ma = boneItemAry[objWeight.boneId].matrix;
                    var tempV3d = new Vector3D(objWeight.x, objWeight.y, objWeight.z);
                    tempV3d = ma.transformVector(tempV3d);
                    tempV3d.scaleBy(objWeight.w);
                    v3d = v3d.add(tempV3d);
                    wAry.push(objWeight.w);
                }
                objData.vertices.push(v3d.x, v3d.y, v3d.z);
                objData.uvs.push(objuv.x, objuv.y);
                var meshitem = new md5list.MeshItem;
                meshitem.verts = new Vector3D(v3d.x, v3d.y, v3d.z);
                meshitem.uvInfo = objuv;
                meshItemAry.push(meshitem);
            }
            for (i = 0; i < mesh.triItem.length; i++) {
                objData.indexs.push(mesh.triItem[i].t0, mesh.triItem[i].t1, mesh.triItem[i].t2);
            }
            objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(objData.vertices);
            objData.uvBuffer = Scene_data.context3D.uploadBuff3D(objData.uvs);
            objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(objData.indexs);
            objData.bindPosAry = bindPosAry;
            objData.invertAry = invertAry;
            return objData;
        };
        MeshToObjUtils.prototype.getW = function (x, y, z) {
            var t = 1 - (x * x + y * y + z * z);
            if (t < 0) {
                t = 0;
            }
            else {
                t = -Math.sqrt(t);
            }
            return t;
        };
        MeshToObjUtils.prototype.processBoneNew = function (targetAry) {
            var newTargetAry = MeshToObjUtils.getStorNewTargerArr(targetAry);
            //添加bip骨骼到新数组
            var mapkeyAry = new Array; //新旧ID映射关系
            for (var i = 0; i < targetAry.length; i++) {
                var index = newTargetAry.indexOf(targetAry[i]);
                mapkeyAry.push(index);
            }
            var resultAry = new Array; //最终更新的数据
            for (i = 0; i < newTargetAry.length; i++) { //数据复制
                var $kkkk = newTargetAry[i];
                resultAry.push($kkkk.clone());
            }
            for (i = 0; i < resultAry.length; i++) { //从映射关系更新父级id
                index = resultAry[i].father;
                if (index != -1) {
                    resultAry[i].father = mapkeyAry[index];
                }
            }
            return resultAry;
        };
        MeshToObjUtils.getStorNewTargerArr = function (targetAry) {
            var newTargetAry = new Array;
            var i;
            /*
               for (i = 0; i < targetAry.length; i++) {
                   if (targetAry[i].name.indexOf("origin") != -1) {
                       newTargetAry.push(targetAry[i]);
                   }
               }
       
               for (i = 0; i < targetAry.length; i++) {
                   if (targetAry[i].name.indexOf("Bip") != -1) {
                       newTargetAry.push(targetAry[i]);
                   }
               }
               //添加weapon骨骼到新数组
               for (i = 0; i < targetAry.length; i++) {
                   if (targetAry[i].name.indexOf("weapon") != -1) {
                       newTargetAry.push(targetAry[i]);
                   }
               }
       
               */
            //添加剩余的骨骼到新数组
            for (i = 0; i < targetAry.length; i++) {
                if (newTargetAry.indexOf(targetAry[i]) == -1) {
                    newTargetAry.push(targetAry[i]);
                }
            }
            return newTargetAry;
        };
        return MeshToObjUtils;
    }());
    md5list.MeshToObjUtils = MeshToObjUtils;
})(md5list || (md5list = {}));
//# sourceMappingURL=MeshToObjUtils.js.map
var md5list;
(function (md5list) {
    var Dictionary = Pan3d.Dictionary;
    var ObjectBone = Pan3d.ObjectBone;
    var Md5Analysis = /** @class */ (function () {
        function Md5Analysis() {
        }
        Md5Analysis.prototype.addMesh = function (str) {
            var arr;
            if (str.indexOf("mesh") != -1) {
                //存入没一个元件MESH;
                var meshData = new md5list.Md5MeshData();
                var meshSmaple = new Dictionary([]);
                arr = str.split(/[\n\r]{2}/);
                var numverts = false;
                var numvertsIndex = 0;
                var currentnumvertsIndex = 0;
                var numvertsArray = new Array();
                var numtris = false;
                var numtrisIndex = 0;
                var currentnumtrisIndex = 0;
                var numtrisArray = new Array();
                var numweights = false;
                var numweightsIndex = 0;
                var currentnumweightsIndex = 0;
                var numweightsArray = new Array();
                var joints;
                var jointAry = new Array;
                var reg = /\d+/;
                for (var m = 0; m < arr.length; m++) {
                    if (numverts) {
                        if (currentnumvertsIndex < numvertsIndex) {
                            numvertsArray.push(arr[m]);
                            currentnumvertsIndex++;
                        }
                        else {
                            //mesh["numverts"] = numvertsArray;
                            meshSmaple["numverts"] = numvertsArray;
                            numverts = false;
                        }
                    }
                    if (numtris) {
                        if (currentnumtrisIndex < numtrisIndex) {
                            numtrisArray.push(arr[m]);
                            currentnumtrisIndex++;
                        }
                        else {
                            //mesh["numtris"] = numtrisArray;
                            meshSmaple["numtris"] = numtrisArray;
                            numtris = false;
                        }
                    }
                    if (numweights) {
                        if (currentnumweightsIndex < numweightsIndex) {
                            numweightsArray.push(arr[m]);
                            currentnumweightsIndex++;
                        }
                        else {
                            //mesh["numweights"] = numweightsArray;
                            meshSmaple["numweights"] = numweightsArray;
                            numweights = false;
                        }
                    }
                    if (joints) {
                        jointAry.push(arr[m]);
                    }
                    if (String(arr[m]).indexOf("numverts") != -1) {
                        numverts = true;
                        numvertsIndex = Number(arr[m].match(reg)[0]);
                    }
                    if (String(arr[m]).indexOf("numtris") != -1) {
                        numtris = true;
                        numtrisIndex = Number(arr[m].match(reg)[0]);
                    }
                    if (String(arr[m]).indexOf("numweights") != -1) {
                        numweights = true;
                        numweightsIndex = Number(arr[m].match(reg)[0]);
                    }
                    if (String(arr[m]).indexOf("joints") != -1) {
                        joints = true;
                    }
                    if (String(arr[m]).indexOf("mesh") != -1) {
                        joints = false;
                        meshSmaple["joints"] = jointAry;
                    }
                    if (String(arr[m]).indexOf("commandline") != -1) {
                    }
                }
                meshData.mesh = meshSmaple;
                this.joinTri(meshData);
                this.joinPoint(meshData);
                this.joinUV(meshData);
                this.joinJoints(meshData);
                // console.log(meshData)
                return meshData;
            }
            return null;
        };
        Md5Analysis.prototype.joinJoints = function (meshData) {
            var jointAry = meshData.mesh["joints"];
            meshData.boneItem = new Array;
            for (var i = 0; i < jointAry.length; i++) {
                var line = jointAry[i];
                if (line.length < 9) {
                    break;
                }
                var boneName = line.match(/\".+\"/)[0];
                line = line.replace(boneName, "");
                var boneNameAry = TpGame.getArrByStr(line);
                if (boneNameAry.length == 1) {
                    break;
                }
                var bone = new ObjectBone();
                bone.name = boneName;
                bone.father = Number(boneNameAry[0]);
                bone.tx = Number(boneNameAry[2]);
                bone.ty = Number(boneNameAry[3]);
                bone.tz = Number(boneNameAry[4]);
                bone.qx = Number(boneNameAry[7]);
                bone.qy = Number(boneNameAry[8]);
                bone.qz = Number(boneNameAry[9]);
                meshData.boneItem.push(bone);
            }
        };
        Md5Analysis.prototype.joinUV = function (meshData) {
            var _meshNumverts = meshData.mesh["numverts"];
            meshData.uvItem = new Array();
            var _str = "";
            var _arr = new Array();
            var i = 0;
            for (i = 0; i < _meshNumverts.length; i++) {
                _str = this.genewStr(_meshNumverts[i]);
                _arr = _str.split(" ");
                var _temp = new md5list.ObjectUv();
                _temp.id = Number(_arr[1]);
                _temp.x = Number(_arr[2]);
                _temp.y = Number(_arr[3]);
                _temp.a = Number(_arr[4]);
                _temp.b = Number(_arr[5]);
                meshData.uvItem.push(_temp);
            }
        };
        Md5Analysis.prototype.joinPoint = function (meshData) {
            var _meshNumweights = meshData.mesh["numweights"];
            meshData.weightItem = new Array;
            var _str = "";
            var _arr = new Array();
            var i = 0;
            for (i = 0; i < _meshNumweights.length; i++) {
                _str = this.genewStr(_meshNumweights[i]);
                _arr = _str.split(" ");
                var _temp = new md5list.ObjectWeight();
                _temp.id = Number(_arr[1]);
                _temp.boneId = Number(_arr[2]);
                _temp.w = Number(_arr[3]);
                _temp.x = Number(_arr[4]);
                _temp.y = Number(_arr[5]);
                _temp.z = Number(_arr[6]);
                meshData.weightItem.push(_temp);
            }
        };
        Md5Analysis.prototype.joinTri = function (meshData) {
            var _meshNumtris = meshData.mesh["numtris"];
            meshData.triItem = new Array;
            var _str = "";
            var _arr = new Array();
            var i = 0;
            for (i = 0; i < _meshNumtris.length; i++) {
                _str = this.genewStr(_meshNumtris[i]);
                _arr = _str.split(" ");
                var _temp = new md5list.ObjectTri();
                _temp.id = Number(_arr[1]);
                _temp.t0 = Number(_arr[2]);
                _temp.t1 = Number(_arr[3]);
                _temp.t2 = Number(_arr[4]);
                meshData.triItem.push(_temp);
            }
        };
        Md5Analysis.prototype.genewStr = function (_str) {
            var _s = "";
            var _t = "";
            var _e = " ";
            var i = 0;
            while (i < _str.length) {
                _t = _str.charAt(i);
                switch (_t) {
                    case "(":
                        break;
                    case ")":
                        break;
                    case "\"":
                        break;
                    case "	":
                        if (_e != " ") {
                            _s = _s + " ";
                        }
                        _e = " ";
                        break;
                    case " ":
                        if (_e != " ") {
                            _s = _s + " ";
                        }
                        _e = " ";
                        break;
                    default:
                        _s = _s + _t;
                        _e = _t;
                        break;
                }
                i++;
            }
            return _s;
        };
        return Md5Analysis;
    }());
    md5list.Md5Analysis = Md5Analysis;
})(md5list || (md5list = {}));
//# sourceMappingURL=Md5Analysis.js.map
var md5list;
(function (md5list) {
    var Matrix3D = Pan3d.Matrix3D;
    var Quaternion = Pan3d.Quaternion;
    var Vector3D = Pan3d.Vector3D;
    var Dictionary = Pan3d.Dictionary;
    var ObjectBone = Pan3d.ObjectBone;
    var Md5animAnalysis = /** @class */ (function () {
        function Md5animAnalysis() {
            this.loopKey = "inLoop";
            this.boundsKey = "mybounds";
            this.nameHeightKey = "nameheight";
            this.interKey = "inter";
            this.pos = "pos";
        }
        Md5animAnalysis.prototype.addAnim = function (ini) {
            this._dir = new Dictionary([]);
            this.allFrames = new Array();
            this.framesok = false;
            this._hierarchyitem = new Array();
            this._hierarchy = new Array();
            this._baseframe = new Array();
            this._bounds = new Array();
            this._frame = new Array();
            this.bigArr = new Array();
            //var ini:String = urlloader.data;
            var arr = ini.split("\r\n");
            var len = arr.length;
            var tempStr = "";
            var isbig = false;
            //var t:int = getTimer();
            for (var i = 0; i < len; i++) {
                var dindex = String(arr[i]).indexOf("//");
                if (dindex == 0) {
                    //注释行
                    continue;
                }
                if (dindex != -1) {
                    //包含注释
                    arr[i] = String(arr[i]).substring(0, dindex);
                    //删除注释
                }
                if (String(arr[i]).indexOf("{") != -1) {
                    isbig = true;
                }
                if (isbig) {
                    tempStr += arr[i] + "\n\r";
                    if (String(arr[i]).indexOf("}") != -1) {
                        isbig = false;
                        this.bigArr.push(tempStr);
                        tempStr = "";
                    }
                }
                else {
                    if (arr[i] != "") {
                        var arr2 = String(arr[i]).split(" ");
                        this._dir[arr2[0]] = arr2[1];
                        //正常行
                    }
                    else {
                        //空行
                    }
                }
            }
            //trace("anim字符串解析耗时：" + (getTimer() - t))
            //t = getTimer();
            //			trace(3)
            for (var p = 0; p < this.bigArr.length; p++) {
                this.handleBigWord(this.bigArr[p]);
            }
            this._pushhierarchyitem();
            //this.processBounds();
            //processInter();
            //processPos();
            // this.setRestult();
            return this.setFrameToMatrix(this.allFrames);
        };
        Md5animAnalysis.prototype.setFrameToMatrix = function (frameAry) {
            var matrixAry = new Array;
            for (var j = 0; j < frameAry.length; j++) {
                var boneAry = frameAry[j];
                var Q0 = new Quaternion();
                var newM = new Matrix3D();
                var frameMatrixAry = new Array;
                matrixAry.push(frameMatrixAry);
                for (var i = 0; i < boneAry.length; i++) {
                    var xyzfarme0 = boneAry[i];
                    Q0 = new Quaternion(xyzfarme0.qx, xyzfarme0.qy, xyzfarme0.qz);
                    Q0.w = this.getW(Q0.x, Q0.y, Q0.z);
                    if (xyzfarme0.father == -1) {
                        newM = Q0.toMatrix3D();
                        newM.appendTranslation(xyzfarme0.tx, xyzfarme0.ty, xyzfarme0.tz);
                        newM.appendRotation(-90, Vector3D.X_AXIS);
                        //xyzfarme0.matrix = newM;
                        frameMatrixAry.push(newM);
                    }
                    else {
                        var fatherBone = boneAry[xyzfarme0.father];
                        newM = Q0.toMatrix3D();
                        newM.appendTranslation(xyzfarme0.tx, xyzfarme0.ty, xyzfarme0.tz);
                        //newM.append(fatherBone.matrix);
                        newM.append(frameMatrixAry[xyzfarme0.father]);
                        frameMatrixAry.push(newM);
                        //xyzfarme0.matrix = newM;
                    }
                }
                for (i = 0; i < frameMatrixAry.length; i++) {
                    frameMatrixAry[i].appendScale(-1, 1, 1); //特别标记，因为四元数和矩阵运算结果不一  先存正确的矩阵
                    //xyzfarme0.matrix.appendScale(-1, 1, 1);
                }
            }
            return matrixAry;
        };
        Md5animAnalysis.prototype.getW = function (x, y, z) {
            var t = 1 - (x * x + y * y + z * z);
            if (t < 0) {
                t = 0;
            }
            else {
                t = -Math.sqrt(t);
            }
            return t;
        };
        Md5animAnalysis.prototype.setRestult = function () {
            this.resultInfo = new Object;
            this.resultInfo.frames = this.allFrames;
            this.resultInfo.matrixAry = this.setFrameToMatrix(this.allFrames);
        };
        Md5animAnalysis.prototype._pushhierarchyitem = function () {
            var _str = "";
            var _arr = new Array();
            var i = 0;
            for (i = 0; i < this._hierarchy.length; i++) {
                //_str=_genewStr(_hierarchy[i]);
                var tempary = this.getBoneFilterStr(this._hierarchy[i]);
                _arr = tempary[1].split(" ");
                //_arr=_str.split(" ");
                var _temp = new ObjectBone();
                _temp.father = Number(_arr[0]);
                _temp.changtype = Number(_arr[1]);
                _temp.startIndex = Number(_arr[2]);
                _temp.name = tempary[0];
                this._hierarchyitem.push(_temp);
            }
            this._pushbasefamer();
        };
        Md5animAnalysis.prototype._pushbasefamer = function () {
            var _str = "";
            var i = 0;
            for (i = 0; i < this._baseframe.length; i++) {
                var _arr = TpGame.getArrByStr(this._baseframe[i]);
                this._hierarchyitem[i].tx = Number(_arr[1]);
                this._hierarchyitem[i].ty = Number(_arr[2]);
                this._hierarchyitem[i].tz = Number(_arr[3]);
                this._hierarchyitem[i].qx = Number(_arr[6]);
                this._hierarchyitem[i].qy = Number(_arr[7]);
                this._hierarchyitem[i].qz = Number(_arr[8]);
            }
            this._pushfamers();
        };
        Md5animAnalysis.prototype._pushfamers = function () {
            var i = 0;
            for (i = 0; i < this._frame.length; i++) {
                if (this._frame[i]) {
                    this.allFrames.push(this._getsamplefamer(this._frame[i]));
                }
            }
            this.framesok = true;
        };
        Md5animAnalysis.prototype._getsamplefamer = function (_framesample) {
            var i = 0;
            var _arr = new Array;
            var _arrframesample = new Array;
            for (var js = 0; js < _framesample.length; js++) {
                var aar = TpGame.getArrByStr(_framesample[js]);
                if (aar.length && aar[aar.length - 1] == "") {
                    aar.pop();
                }
                _arrframesample = _arrframesample.concat(aar);
            }
            for (i = 0; i < this._hierarchyitem.length; i++) {
                var _temp = new ObjectBone();
                _temp.father = this._hierarchyitem[i].father;
                _temp.name = this._hierarchyitem[i].name;
                _temp.tx = this._hierarchyitem[i].tx;
                _temp.ty = this._hierarchyitem[i].ty;
                _temp.tz = this._hierarchyitem[i].tz;
                _temp.qx = this._hierarchyitem[i].qx;
                _temp.qy = this._hierarchyitem[i].qy;
                _temp.qz = this._hierarchyitem[i].qz;
                var k = 0;
                if (this._hierarchyitem[i].changtype & 1) {
                    _temp.tx = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                if (this._hierarchyitem[i].changtype & 2) {
                    _temp.ty = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                if (this._hierarchyitem[i].changtype & 4) {
                    _temp.tz = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                if (this._hierarchyitem[i].changtype & 8) {
                    _temp.qx = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                if (this._hierarchyitem[i].changtype & 16) {
                    _temp.qy = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                if (this._hierarchyitem[i].changtype & 32) {
                    _temp.qz = Number(_arrframesample[this._hierarchyitem[i].startIndex + k]);
                    k++;
                }
                _arr.push(_temp);
            }
            return _arr;
        };
        Md5animAnalysis.prototype.getBoneFilterStr = function (_str) {
            var _s = "";
            var _t = "";
            var _e = " ";
            var i = 0;
            while (i < _str.length) {
                _t = _str.charAt(i);
                switch (_t) {
                    case "(":
                        break;
                    case ")":
                        break;
                    case "	":
                        if (_e != " ") {
                            _s = _s + " ";
                        }
                        _e = " ";
                        break;
                    case " ":
                        if (_e != " ") {
                            _s = _s + " ";
                        }
                        _e = " ";
                        break;
                    default:
                        _s = _s + _t;
                        _e = _t;
                        break;
                }
                i++;
            }
            var index = _s.indexOf("\"", 1);
            var name = _s.slice(1, index);
            //	var num:String = _s.slice(index+2,-1);
            var num = _s.substring(index + 2, _s.length);
            return [name, num];
        };
        Md5animAnalysis.prototype.handleBigWord = function (str) {
            var reg = /\d+/;
            var arr;
            //			if (str.indexOf("inLoop") != -1) {
            //				
            //				arr = str.split("\n\r");
            //				
            //				for (var i:int = 0 ; i < arr.length ; i++) {
            //					
            //					if (String(arr[i]).indexOf("{") == -1 && String(arr[i]).indexOf("}") == -1 && arr[i] != "") {
            //						
            //						_hierarchy.push(arr[i]);
            //					}
            //				}
            //			}
            if (str.indexOf("hierarchy") != -1) {
                arr = str.split("\n\r");
                for (var i = 0; i < arr.length; i++) {
                    if (String(arr[i]).indexOf("{") == -1 && String(arr[i]).indexOf("}") == -1 && arr[i] != "") {
                        this._hierarchy.push(arr[i]);
                    }
                }
            }
            if (str.indexOf("bounds") != -1) {
                arr = str.split("\n\r");
                for (var m = 0; m < arr.length; m++) {
                    if (String(arr[m]).indexOf("{") == -1 && String(arr[m]).indexOf("}") == -1 && String(arr[m]) != "") {
                        this._bounds.push(arr[m]);
                    }
                }
            }
            if (str.indexOf("baseframe") != -1) {
                arr = str.split("\n\r");
                for (var k = 0; k < arr.length; k++) {
                    if (String(arr[k]).indexOf("{") == -1 && String(arr[k]).indexOf("}") == -1 && arr[k] != "") {
                        this._baseframe.push(arr[k]);
                    }
                }
            }
            if (str.indexOf("frame") != -1 && str.indexOf("baseframe") == -1 && str.indexOf("BoneScale") == -1) {
                arr = str.split("\n\r");
                var arrsign;
                var tempArray = new Array();
                for (var w = 0; w < arr.length; w++) {
                    if (String(arr[w]).indexOf("frame") != -1) {
                        arrsign = Number((arr[w]).match(reg)[0]);
                    }
                    if (String(arr[w]).indexOf("{") == -1 && String(arr[w]).indexOf("}") == -1 && arr[w] != "") {
                        tempArray.push(arr[w]);
                    }
                    this._frame[arrsign] = tempArray;
                }
            }
        };
        return Md5animAnalysis;
    }());
    md5list.Md5animAnalysis = Md5animAnalysis;
})(md5list || (md5list = {}));
//# sourceMappingURL=Md5animAnalysis.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var md5list;
(function (md5list) {
    var Shader3D = Pan3d.Shader3D;
    var Display3DSprite = Pan3d.Display3DSprite;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var UIManager = Pan3d.UIManager;
    var DualQuatFloat32Array = Pan3d.DualQuatFloat32Array;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var TextureManager = Pan3d.TextureManager;
    var Quaternion = Pan3d.Quaternion;
    var Md5MeshShader = /** @class */ (function (_super) {
        __extends(Md5MeshShader, _super);
        function Md5MeshShader() {
            return _super.call(this) || this;
        }
        Md5MeshShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "pos");
            $context.bindAttribLocation(this.program, 1, "v2Uv");
            $context.bindAttribLocation(this.program, 2, "boneID");
            $context.bindAttribLocation(this.program, 3, "boneWeight");
        };
        Md5MeshShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 pos;" +
                "attribute vec2 v2Uv;" +
                "attribute vec4 boneID;" +
                "attribute vec4 boneWeight;" +
                "varying vec2 v0;" +
                "uniform vec4 boneQ[70];" +
                "uniform vec3 boneD[70];" +
                "uniform mat4 vpMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "vec4 qdv(vec4 q, vec3 d, vec3 v ){" +
                "   vec3 t = 2.0 * cross(q.xyz, v);" +
                "   vec3 f = v + q.w * t + cross(q.xyz, t);" +
                "   return vec4(f.x + d.x, f.y + d.y, f.z + d.z, 1.0);" +
                " }" +
                "vec4 getQDdata(vec3 vdata){" +
                "   vec4 tempnum = qdv(boneQ[int(boneID.x)], boneD[int(boneID.x)], vdata) * boneWeight.x;" +
                "   tempnum += qdv(boneQ[int(boneID.y)], boneD[int(boneID.y)], vdata) * boneWeight.y;" +
                "   tempnum += qdv(boneQ[int(boneID.z)], boneD[int(boneID.z)], vdata) * boneWeight.z;" +
                "   tempnum += qdv(boneQ[int(boneID.w)], boneD[int(boneID.w)], vdata) * boneWeight.w;" +
                "   tempnum.x = tempnum.x * -1.0;" +
                "   return tempnum;" +
                " }" +
                "vec4 qdvNrm(vec4 q, vec3 v ){" +
                "      vec3 t = 2.0 * cross(q.xyz, v);" +
                "      vec3 f = v + q.w * t + cross(q.xyz, t);" +
                "      return vec4(f.x, f.y, f.z, 1.0);\n" +
                "}" +
                " vec4 getQDdataNrm(vec3 vdata){" +
                "    vec4 tempnum = qdvNrm(boneQ[int(boneID.x)], vdata) * boneWeight.x;" +
                "    tempnum += qdvNrm(boneQ[int(boneID.y)], vdata) * boneWeight.y;" +
                "    tempnum += qdvNrm(boneQ[int(boneID.z)], vdata) * boneWeight.z;" +
                "    tempnum += qdvNrm(boneQ[int(boneID.w)], vdata) * boneWeight.w;" +
                "    tempnum.x = tempnum.x * -1.0;" +
                "    tempnum.xyz = normalize(tempnum.xyz);" +
                "    return tempnum;" +
                "}" +
                " void main(void){" +
                "    v0 = v2Uv;" +
                "    vec4 vt0 = getQDdata(vec3(pos.x, pos.y, pos.z));" +
                "    vt0.xyz = vt0.xyz * 1.0;" +
                "    vt0 = posMatrix3D * vt0;" +
                "    vt0 = vpMatrix3D * vt0;" +
                "    gl_Position = vt0;\n" +
                "  }";
            return $str;
        };
        Md5MeshShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D fs0;\n" +
                "varying vec2 v0;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(fs0, v0.xy);\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        Md5MeshShader.Md5MeshShader = "Md5MeshShader";
        return Md5MeshShader;
    }(Shader3D));
    md5list.Md5MeshShader = Md5MeshShader;
    var Md5MeshSprite = /** @class */ (function (_super) {
        __extends(Md5MeshSprite, _super);
        function Md5MeshSprite() {
            var _this = _super.call(this) || this;
            ProgrmaManager.getInstance().registe(Md5MeshShader.Md5MeshShader, new Md5MeshShader);
            _this.md5shader = ProgrmaManager.getInstance().getProgram(Md5MeshShader.Md5MeshShader);
            _this.loadTexture();
            return _this;
        }
        Md5MeshSprite.prototype.setMd5BodyUrl = function ($url) {
            this.loadBodyMesh($url);
        };
        Md5MeshSprite.prototype.loadBodyMesh = function ($url) {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($str) {
                var $md5Analysis = new md5list.Md5Analysis();
                _this._md5MeshData = $md5Analysis.addMesh($str);
                new md5list.MeshImportSort().processMesh(_this._md5MeshData);
                _this.md5objData = new md5list.MeshToObjUtils().getObj(_this._md5MeshData);
            });
        };
        Md5MeshSprite.prototype.loadTexture = function () {
            var _this = this;
            var $ctx = UIManager.getInstance().getContext2D(128, 128, false);
            $ctx.fillStyle = "rgb(255,0,0)";
            $ctx.fillRect(0, 0, 128, 128);
            this._uvTextureRes = TextureManager.getInstance().getCanvasTexture($ctx);
            TextureManager.getInstance().getTexture(Scene_data.fileRoot + "x_f_武当_01.jpg", function ($texture) {
                _this._uvTextureRes = $texture;
            });
            //   shuangdaonv.jpg
        };
        Md5MeshSprite.prototype.updateMaterialMesh = function ($mesh) {
        };
        Md5MeshSprite.prototype.update = function () {
            if (this.md5objData) {
                this.updateMaterialMeshCopy();
            }
        };
        Md5MeshSprite.prototype.updateMaterialMeshCopy = function () {
            this.baseShder = this.md5shader;
            Scene_data.context3D.setProgram(this.baseShder.program);
            Scene_data.context3D.setVpMatrix(this.baseShder, Scene_data.vpMatrix.m);
            Scene_data.context3D.setVcMatrix4fv(this.baseShder, "posMatrix3D", this.posMatrix.m);
            Scene_data.context3D.setRenderTexture(this.baseShder, "fc0", this._uvTextureRes.texture, 0);
            Scene_data.context3D.setVa(0, 3, this.md5objData.vertexBuffer);
            Scene_data.context3D.setVa(1, 2, this._md5MeshData.uvBuffer);
            Scene_data.context3D.setVa(2, 4, this._md5MeshData.boneIdBuffer);
            Scene_data.context3D.setVa(3, 4, this._md5MeshData.boneWeightBuffer);
            var newIDBoneArr = this._md5MeshData.boneNewIDAry;
            var baseBone = this.md5objData.bindPosAry;
            var $dualQuatFloat32Array = new DualQuatFloat32Array;
            $dualQuatFloat32Array.quat = new Float32Array(newIDBoneArr.length * 4);
            $dualQuatFloat32Array.pos = new Float32Array(newIDBoneArr.length * 3);
            for (var k = 0; k < newIDBoneArr.length; k++) {
                var $m = baseBone[newIDBoneArr[k]].clone();
                var $minverM = this.md5objData.invertAry[newIDBoneArr[k]].clone();
                $m.prepend($minverM);
                $m.appendScale(-1, 1, 1); //特别标记，因为四元数和矩阵运算结果不一
                var $q = new Quaternion();
                $q.fromMatrix($m);
                var $p = $m.position;
                $dualQuatFloat32Array.quat[k * 4 + 0] = $q.x;
                $dualQuatFloat32Array.quat[k * 4 + 1] = $q.y;
                $dualQuatFloat32Array.quat[k * 4 + 2] = $q.z;
                $dualQuatFloat32Array.quat[k * 4 + 3] = $q.w;
                $dualQuatFloat32Array.pos[k * 3 + 0] = $p.x;
                $dualQuatFloat32Array.pos[k * 3 + 1] = $p.y;
                $dualQuatFloat32Array.pos[k * 3 + 2] = $p.z;
            }
            Scene_data.context3D.setVc4fv(this.baseShder, "boneQ", $dualQuatFloat32Array.quat); //旋转
            Scene_data.context3D.setVc3fv(this.baseShder, "boneD", $dualQuatFloat32Array.pos); //所有的位移
            Scene_data.context3D.drawCall(this._md5MeshData.indexBuffer, this._md5MeshData.treNum);
            console.log(this._md5MeshData.treNum / 3, "boid=>", newIDBoneArr.length);
        };
        return Md5MeshSprite;
    }(Display3DSprite));
    md5list.Md5MeshSprite = Md5MeshSprite;
})(md5list || (md5list = {}));
//# sourceMappingURL=Md5MeshSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var md5list;
(function (md5list) {
    var Display3DSprite = Pan3d.Display3DSprite;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var LoadManager = Pan3d.LoadManager;
    var Quaternion = Pan3d.Quaternion;
    var DualQuatFloat32Array = Pan3d.DualQuatFloat32Array;
    var UIManager = Pan3d.UIManager;
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var Md5MoveSprite = /** @class */ (function (_super) {
        __extends(Md5MoveSprite, _super);
        function Md5MoveSprite() {
            var _this = _super.call(this) || this;
            _this.lastTm = 0;
            _this._actionTime = 0;
            _this.skipNum = 0;
            ProgrmaManager.getInstance().registe(md5list.Md5MeshShader.Md5MeshShader, new md5list.Md5MeshShader);
            _this.md5shader = ProgrmaManager.getInstance().getProgram(md5list.Md5MeshShader.Md5MeshShader);
            _this.loadTexture();
            return _this;
        }
        Md5MoveSprite.prototype.loadBodyMesh = function () {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + this.bodyUrl, LoadManager.XML_TYPE, function ($str) {
                _this.md5MeshData = new md5list.Md5Analysis().addMesh($str);
                new md5list.MeshImportSort().processMesh(_this.md5MeshData);
                _this.md5objData = new md5list.MeshToObjUtils().getObj(_this.md5MeshData);
                _this.loadAnimFrame();
            });
        };
        Md5MoveSprite.prototype.setMd5url = function ($bodyurl, $animurl, $picurl) {
            var _this = this;
            if ($picurl === void 0) { $picurl = null; }
            this.bodyUrl = $bodyurl;
            this.animUrl = $animurl;
            if ($picurl) {
                TextureManager.getInstance().getTexture(Scene_data.fileRoot + $picurl, function ($texture) {
                    _this.uvTextureRes = $texture;
                });
            }
            this.loadBodyMesh();
        };
        Md5MoveSprite.prototype.loadAnimFrame = function () {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + this.animUrl, LoadManager.XML_TYPE, function ($str) {
                var $matrixAry = new md5list.Md5animAnalysis().addAnim($str);
                _this.frameQuestArr = new Array;
                for (var i = 0; i < $matrixAry.length; i++) {
                    var $frameAry = $matrixAry[i];
                    for (var j = 0; j < $frameAry.length; j++) {
                        $frameAry[j].prepend(_this.md5objData.invertAry[j]);
                    }
                    _this.frameQuestArr.push(_this.makeDualQuatFloat32Array($matrixAry[i]));
                }
            });
        };
        Md5MoveSprite.prototype.makeDualQuatFloat32Array = function ($frameAry) {
            var newIDBoneArr = this.md5MeshData.boneNewIDAry;
            var baseBone = $frameAry;
            var $tempDq = new DualQuatFloat32Array;
            $tempDq.quat = new Float32Array(newIDBoneArr.length * 4);
            $tempDq.pos = new Float32Array(newIDBoneArr.length * 3);
            for (var k = 0; k < newIDBoneArr.length; k++) {
                var $m = baseBone[newIDBoneArr[k]].clone();
                $m.appendScale(-1, 1, 1); //特别标记，因为四元数和矩阵运算结果不一
                var $q = new Quaternion();
                $q.fromMatrix($m);
                var $p = $m.position;
                $tempDq.quat[k * 4 + 0] = $q.x;
                $tempDq.quat[k * 4 + 1] = $q.y;
                $tempDq.quat[k * 4 + 2] = $q.z;
                $tempDq.quat[k * 4 + 3] = $q.w;
                $tempDq.pos[k * 3 + 0] = $p.x;
                $tempDq.pos[k * 3 + 1] = $p.y;
                $tempDq.pos[k * 3 + 2] = $p.z;
            }
            return $tempDq;
        };
        Md5MoveSprite.prototype.loadTexture = function () {
            var $ctx = UIManager.getInstance().getContext2D(128, 128, false);
            $ctx.fillStyle = "rgb(255,0,0)";
            $ctx.fillRect(0, 0, 128, 128);
            this.uvTextureRes = TextureManager.getInstance().getCanvasTexture($ctx);
        };
        Md5MoveSprite.prototype.update = function () {
            if (this.md5objData && this.frameQuestArr) {
                this.updateMaterialMeshCopy();
            }
        };
        Md5MoveSprite.prototype.updateMaterialMeshCopy = function () {
            this.baseShder = this.md5shader;
            Scene_data.context3D.setProgram(this.baseShder.program);
            Scene_data.context3D.setVpMatrix(this.baseShder, Scene_data.vpMatrix.m);
            Scene_data.context3D.setVcMatrix4fv(this.baseShder, "posMatrix3D", this.posMatrix.m);
            Scene_data.context3D.setRenderTexture(this.baseShder, "fc0", this.uvTextureRes.texture, 0);
            Scene_data.context3D.setVa(0, 3, this.md5objData.vertexBuffer);
            Scene_data.context3D.setVa(1, 2, this.md5MeshData.uvBuffer);
            Scene_data.context3D.setVa(2, 4, this.md5MeshData.boneIdBuffer);
            Scene_data.context3D.setVa(3, 4, this.md5MeshData.boneWeightBuffer);
            var t = Pan3d.TimeUtil.getTimer() - this.lastTm;
            this.lastTm = Pan3d.TimeUtil.getTimer();
            this._actionTime += t;
            var _curentFrame = float2int(this._actionTime / (Scene_data.frameTime * 2));
            var $len = this.frameQuestArr.length;
            var $dualQuatFloat32Array = this.frameQuestArr[_curentFrame % $len];
            Scene_data.context3D.setVc4fv(this.baseShder, "boneQ", $dualQuatFloat32Array.quat); //旋转
            Scene_data.context3D.setVc3fv(this.baseShder, "boneD", $dualQuatFloat32Array.pos); //所有的位移
            Scene_data.context3D.drawCall(this.md5MeshData.indexBuffer, this.md5MeshData.treNum);
        };
        return Md5MoveSprite;
    }(Display3DSprite));
    md5list.Md5MoveSprite = Md5MoveSprite;
})(md5list || (md5list = {}));
//# sourceMappingURL=Md5MoveSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var md5list;
(function (md5list) {
    var Vector3D = Pan3d.Vector3D;
    var MeshData = Pan3d.MeshData;
    var Scene_data = Pan3d.Scene_data;
    var ObjectTri = /** @class */ (function () {
        function ObjectTri() {
            this.id = 0;
            this.t0 = 0;
            this.t1 = 0;
            this.t2 = 0;
        }
        return ObjectTri;
    }());
    md5list.ObjectTri = ObjectTri;
    var ObjectWeight = /** @class */ (function () {
        function ObjectWeight() {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.w = 0;
            this.weight = 0;
            this.boneId = 0;
            this.id = 0;
        }
        ObjectWeight.prototype.clone = function () {
            var obj = new ObjectWeight;
            obj.x = this.x;
            obj.y = this.y;
            obj.z = this.z;
            obj.w = this.w;
            obj.weight = this.weight;
            obj.boneId = this.boneId;
            obj.id = this.id;
            return obj;
        };
        return ObjectWeight;
    }());
    md5list.ObjectWeight = ObjectWeight;
    var ObjectUv = /** @class */ (function () {
        function ObjectUv() {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.a = 0;
            this.b = 0;
            this.w = 0;
            this.id = 0;
        }
        return ObjectUv;
    }());
    md5list.ObjectUv = ObjectUv;
    var MeshItem = /** @class */ (function () {
        function MeshItem() {
            this.normal = new Vector3D;
        }
        return MeshItem;
    }());
    md5list.MeshItem = MeshItem;
    var Md5MeshData = /** @class */ (function (_super) {
        __extends(Md5MeshData, _super);
        function Md5MeshData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Md5MeshData;
    }(MeshData));
    md5list.Md5MeshData = Md5MeshData;
    var MeshImportSort = /** @class */ (function () {
        function MeshImportSort() {
            this.beginKey = 20;
            this.bindWidth = 4;
        }
        MeshImportSort.prototype.processMesh = function (meshData) {
            var weightAry = new Array;
            var i = 0;
            for (i = 0; i < meshData.weightItem.length; i++) {
                weightAry.push(meshData.weightItem[i].clone());
            }
            var mapkeyAry = this.getMapValue(meshData.boneItem);
            for (i = 0; i < weightAry.length; i++) {
                //trace(weightAry[i].boneId,mapkeyAry[weightAry[i].boneId])
                weightAry[i].boneId = mapkeyAry[weightAry[i].boneId];
            }
            //			meshData.souceBoneItem
            meshData.weightItem = weightAry;
            this.processForAgal(meshData);
        };
        MeshImportSort.prototype.processForAgal = function (meshData) {
            var beginKey = 1;
            var uvItem = meshData.uvItem;
            var weightItem = meshData.weightItem;
            var triItem = meshData.triItem;
            var uvArray = new Array();
            var ary = [[], [], [], []];
            var boneWeightAry = new Array;
            var bonetIDAry = new Array;
            var indexAry = new Array;
            var skipNum;
            var beginIndex;
            var allNum;
            var boneUseAry = new Array;
            for (var i = 0; i < uvItem.length; i++) {
                beginIndex = uvItem[i].a;
                allNum = uvItem[i].b;
                for (skipNum = 0; skipNum < 4; skipNum++) {
                    if (skipNum < allNum) {
                        boneUseAry.push((weightItem[beginIndex + skipNum].boneId));
                    }
                    else {
                        boneUseAry.push(boneUseAry[0]);
                    }
                }
            }
            boneUseAry = this.getboneNum(boneUseAry);
            for (i = 0; i < uvItem.length; i++) {
                beginIndex = uvItem[i].a;
                allNum = uvItem[i].b;
                for (skipNum = 0; skipNum < 4; skipNum++) {
                    if (skipNum < allNum) {
                        ary[skipNum].push(weightItem[beginIndex + skipNum].x, weightItem[beginIndex + skipNum].y, weightItem[beginIndex + skipNum].z);
                        bonetIDAry.push(boneUseAry.indexOf((weightItem[beginIndex + skipNum].boneId)));
                        boneWeightAry.push(weightItem[beginIndex + skipNum].w);
                    }
                    else {
                        ary[skipNum].push(0, 0, 0);
                        bonetIDAry.push(boneUseAry.indexOf(0));
                        boneWeightAry.push(0);
                    }
                }
                uvArray.push(uvItem[i].x);
                uvArray.push(uvItem[i].y);
            }
            meshData.boneNewIDAry = boneUseAry;
            for (i = 0; i < triItem.length; i++) {
                indexAry.push(triItem[i].t0, triItem[i].t1, triItem[i].t2);
            }
            meshData.faceNum = indexAry.length / 3;
            meshData.treNum = indexAry.length;
            // console.log(meshData, uvArray, ary, boneWeightAry, bonetIDAry, indexAry)
            this.uplodToGpu(meshData, uvArray, ary, boneWeightAry, bonetIDAry, indexAry);
        };
        MeshImportSort.prototype.uplodToGpu = function (meshData, uvArray, ary3, boneWeightAry, bonetIDAry, indexAry) {
            meshData.uvBuffer = Scene_data.context3D.uploadBuff3D(uvArray);
            meshData.boneWeightAry = boneWeightAry;
            meshData.boneWeightBuffer = Scene_data.context3D.uploadBuff3D(boneWeightAry);
            var arrA = new Array;
            for (var i = 0; i < bonetIDAry.length; i++) {
                arrA.push(Math.max(bonetIDAry[i], 0));
            }
            meshData.boneIDAry = arrA;
            meshData.boneIdBuffer = Scene_data.context3D.uploadBuff3D(arrA);
            meshData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(indexAry);
        };
        MeshImportSort.prototype.getboneNum = function (ary) {
            var numAry = new Array;
            for (var i = 0; i < ary.length; i++) {
                if (numAry.indexOf(ary[i]) == -1) {
                    numAry.push(ary[i]);
                }
            }
            return numAry;
        };
        /**
     * 返回映射关系列表
     * @param targetAry
     * @return
     *
     */
        MeshImportSort.prototype.getMapValue = function (targetAry) {
            var newTargetAry = md5list.MeshToObjUtils.getStorNewTargerArr(targetAry);
            var mapkeyAry = new Array; //新旧ID映射关系
            for (var i = 0; i < targetAry.length; i++) {
                var index = newTargetAry.indexOf(targetAry[i]);
                mapkeyAry.push(index);
            }
            return mapkeyAry;
        };
        return MeshImportSort;
    }());
    md5list.MeshImportSort = MeshImportSort;
})(md5list || (md5list = {}));
//# sourceMappingURL=MeshImportSort.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var UIConatiner = Pan3d.UIConatiner;
    var UIPanelEvent = /** @class */ (function (_super) {
        __extends(UIPanelEvent, _super);
        function UIPanelEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UIPanelEvent.DISPOSE_PANEL_EVENT = "dispose_panel_event";
        return UIPanelEvent;
    }(Pan3d.BaseEvent));
    win.UIPanelEvent = UIPanelEvent;
    var UIPanel = /** @class */ (function (_super) {
        __extends(UIPanel, _super);
        function UIPanel() {
            return _super.call(this) || this;
        }
        UIPanel.prototype.onAdd = function () {
            if (this._disposeEventFun) {
                Pan3d.TimeUtil.removeTimeOut(this._disposeEventFun);
            }
        };
        UIPanel.prototype.onRemove = function () {
            var _this = this;
            if (!this._disposeEventFun) {
                this._disposeEventFun = function () {
                    var evt = new UIPanelEvent(UIPanelEvent.DISPOSE_PANEL_EVENT);
                    evt.panel = _this;
                    Pan3d.ModuleEventManager.dispatchEvent(evt);
                };
            }
            Pan3d.TimeUtil.addTimeOut(20000000, this._disposeEventFun);
        };
        UIPanel.prototype.addRender = function ($uiRender) {
            var index = this.renderList.indexOf($uiRender);
            if (index != -1) {
                return;
            }
            $uiRender.container = this;
            $uiRender.sortnum = this.layer;
            this.renderList.push($uiRender);
            if (this.hasStage) {
                this.perent.addUI($uiRender);
            }
        };
        UIPanel.prototype.removeRender = function ($uiRender) {
            var index = this.renderList.indexOf($uiRender);
            if (index != -1) {
                this.renderList.splice(index, 1);
            }
            else {
                return;
            }
            if (this.hasStage) {
                this.perent.removeUI($uiRender);
            }
        };
        return UIPanel;
    }(UIConatiner));
    win.UIPanel = UIPanel;
})(win || (win = {}));
//# sourceMappingURL=UIPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Rectangle = Pan3d.Rectangle;
    var UIManager = Pan3d.UIManager;
    var UIConatiner = Pan3d.UIConatiner;
    var UIMask = Pan3d.UIMask;
    var UIData = Pan3d.UIData;
    var UIAtlas = Pan3d.UIAtlas;
    var Vector2D = Pan3d.Vector2D;
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var BaseWindow = /** @class */ (function (_super) {
        __extends(BaseWindow, _super);
        function BaseWindow($rect, $move) {
            if ($rect === void 0) { $rect = null; }
            if ($move === void 0) { $move = true; }
            var _this = _super.call(this) || this;
            _this.moveListTy = 0;
            if ($rect) {
                _this.pageRect = $rect;
            }
            else {
                _this.pageRect = new Rectangle(100, 100, 500, 500);
            }
            _this.contentHeight = 0;
            _this.useMoseMove = $move;
            _this._bRender = new UIRenderComponent;
            //   this.addRender(this._bRender);
            _this._mRender = new UIRenderComponent;
            //    this.addRender(this._mRender);
            _this._tRender = new UIRenderComponent;
            //  this.addRender(this._tRender);
            _this._baseMidRender = new UIRenderComponent;
            _this.addRender(_this._baseMidRender);
            _this._baseTopRender = new UIRenderComponent;
            _this.addRender(_this._baseTopRender);
            _this._closeRender = new UIRenderComponent;
            _this.addRender(_this._closeRender);
            _this._bRender.uiAtlas = new UIAtlas();
            _this._bRender.uiAtlas.setInfo("ui/window/window.txt", "ui/window/window.png", function () { _this.loadConfigCom(); });
            return _this;
        }
        BaseWindow.prototype.mouseDown = function (evt) {
            this.mouseIsDown = true;
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.stageMouseMove, this);
        };
        BaseWindow.prototype.stageMouseMove = function (evt) {
            this.mouseIsDown = false;
        };
        BaseWindow.prototype.mouseUp = function (evt) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.stageMouseMove, this);
        };
        BaseWindow.prototype.loadConfigCom = function () {
            this._tRender.uiAtlas = this._bRender.uiAtlas;
            this._mRender.uiAtlas = this._bRender.uiAtlas;
            this._closeRender.uiAtlas = this._bRender.uiAtlas;
            this._baseMidRender.uiAtlas = this._bRender.uiAtlas;
            this._baseTopRender.uiAtlas = this._bRender.uiAtlas;
            this._uiMask = new UIMask();
            BaseWindow.maskLevel++;
            this._uiMask.level = BaseWindow.maskLevel++;
            this.addMask(this._uiMask);
            this.a_bg = this.addEvntBut("b_win_bg", this._bRender);
            this.a_tittle_bg = this.addChild(this._tRender.getComponent("b_tittle_bg"));
            this.a_left_line = this.addChild(this._tRender.getComponent("a_left_line"));
            this.a_rigth_line = this.addChild(this._tRender.getComponent("a_rigth_line"));
            this.a_bottom_line = this.addChild(this._tRender.getComponent("a_bottom_line"));
            this.a_scroll_bar_bg = this.addChild(this._mRender.getComponent("e_scroll_bar_bg"));
            this.a_scroll_bar = this.addChild(this._tRender.getComponent("e_scroll_bar"));
            this.b_bottom_left = this.addChild(this._tRender.getComponent("b_bottom_left"));
            this.b_bottom_mid = this.addChild(this._tRender.getComponent("b_bottom_mid"));
            this.b_bottom_right = this.addChild(this._tRender.getComponent("b_bottom_right"));
            this.b_bottom_line_left = this.addChild(this._tRender.getComponent("b_bottom_line"));
            this.b_bottom_line_right = this.addChild(this._tRender.getComponent("b_bottom_line"));
            this.b_win_close = this.addEvntBut("b_win_close", this._closeRender);
            this.setUiListVisibleByItem([this.a_left_line], false);
            this.setUiListVisibleByItem([this.a_rigth_line], false);
            this.setUiListVisibleByItem([this.a_bottom_line], false);
            this.setUiListVisibleByItem([this.b_win_close], false);
            this.a_scroll_bar.y = this.a_tittle_bg.height + 2;
            //新UI
            this.c_tittle_bg = this._baseTopRender.getComponent("a_tittle_bg");
            this.c_left_line = this._baseTopRender.getComponent("c_left_line");
            this.c_right_line = this._baseTopRender.getComponent("c_left_line");
            this.c_bottom_line = this._baseTopRender.getComponent("b_line_pixe_point");
            this.c_scroll_bar_bg = this._baseTopRender.getComponent("e_scroll_bar_bg");
            this.c_scroll_bar = this._closeRender.getComponent("e_scroll_bar");
            this.c_scroll_bar.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            // 
            this.c_win_bg = this._baseMidRender.getComponent("c_win_bg");
            this.e_panel_1 = this._baseMidRender.getComponent("e_panel_1");
            // this.setUiListVisibleByItem([this.e_panel_1], true)
            this.setUiListVisibleByItem([this.c_win_bg], false);
            this.uiLoadComplete = true;
            this.setHideUi();
            this.setShowUi();
            this.resize();
        };
        BaseWindow.prototype.removeMoveEvent = function () {
            if (this.uiLoadComplete) {
                this.a_tittle_bg.removeEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
                this.a_rigth_line.removeEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
                this.a_bottom_line.removeEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
                this.c_scroll_bar.removeEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            }
        };
        BaseWindow.prototype.setRect = function (value) {
            this.pageRect = value;
            this.resize();
        };
        BaseWindow.prototype.setHideUi = function (value) {
            if (value === void 0) { value = null; }
            if (value) {
                this.hideUiItem = value;
            }
            if (this.uiLoadComplete) {
                for (var i = 0; this.hideUiItem && i < this.hideUiItem.length; i++) {
                    var uiName = this.hideUiItem[i];
                    this.setUiListVisibleByItem([this[uiName]], false);
                }
            }
        };
        BaseWindow.prototype.setShowUi = function (value) {
            if (value === void 0) { value = null; }
            if (value) {
                this.showUiItem = value;
            }
            if (this.uiLoadComplete) {
                for (var i = 0; this.showUiItem && i < this.showUiItem.length; i++) {
                    var uiName = this.showUiItem[i];
                    this.setUiListVisibleByItem([this[uiName]], true);
                }
            }
        };
        BaseWindow.prototype.resize = function () {
            if (this.uiLoadComplete) {
                this.left = this.pageRect.x;
                this.top = this.pageRect.y;
                this.pageRect.width = Math.max(100, this.pageRect.width);
                this.pageRect.height = Math.max(100, this.pageRect.height);
                this.e_panel_1.x = 0;
                this.e_panel_1.y = 0;
                this.e_panel_1.width = this.pageRect.width;
                this.e_panel_1.height = this.pageRect.height;
                this.a_tittle_bg.x = 2;
                this.a_tittle_bg.y = 2;
                this.a_tittle_bg.width = this.pageRect.width - 4;
                this.b_win_close.y = 2;
                this.b_win_close.x = this.pageRect.width - this.b_win_close.width - 5;
                this._uiMask.y = 0;
                this._uiMask.x = 0;
                this._uiMask.width = this.pageRect.width - this.a_rigth_line.width;
                this._uiMask.height = this.pageRect.height;
                if (this.maskRoundRect) {
                    this._uiMask.x += this.maskRoundRect.x;
                    this._uiMask.y += this.maskRoundRect.y;
                    this._uiMask.width -= this.maskRoundRect.width;
                    this._uiMask.height -= this.maskRoundRect.height;
                }
                this.a_bg.x = 0;
                this.a_bg.y = 0;
                this.a_bg.width = this.pageRect.width;
                this.a_bg.height = this.pageRect.height;
                this.a_rigth_line.x = this.pageRect.width - this.a_rigth_line.width;
                this.a_rigth_line.y = this.a_tittle_bg.height - 1;
                this.a_rigth_line.height = this.pageRect.height - this.a_tittle_bg.height;
                this.a_left_line.x = 0;
                this.a_left_line.y = this.a_rigth_line.y;
                this.a_left_line.height = this.a_rigth_line.height;
                this.a_bottom_line.x = 0;
                this.a_bottom_line.y = this.pageRect.height - this.a_bottom_line.height;
                this.a_bottom_line.width = this.a_bg.width;
                this.a_scroll_bar.x = this._uiMask.x + this._uiMask.width - this.a_scroll_bar.width;
                this.a_scroll_bar_bg.x = this.pageRect.width - this.a_rigth_line.width - this.a_scroll_bar_bg.width + 2;
                this.a_scroll_bar_bg.y = this.a_tittle_bg.height;
                this.a_scroll_bar_bg.height = this.a_left_line.height;
                this.setUiListVisibleByItem([this.a_scroll_bar], this.contentHeight > this._uiMask.height);
                if (this.contentHeight > this._uiMask.height) {
                    this.a_scroll_bar.height = this._uiMask.height * (this._uiMask.height / this.contentHeight);
                    this.a_scroll_bar.y = Math.min((this._uiMask.y + this._uiMask.height) - this.a_scroll_bar.height, this.a_scroll_bar.y);
                }
                else {
                    //  this.a_scroll_bar.y = this.a_tittle_bg.height;
                }
                this.b_bottom_left.x = 0;
                this.b_bottom_left.y = this.pageRect.height - this.b_bottom_left.height;
                this.b_bottom_mid.y = this.b_bottom_left.y;
                this.b_bottom_mid.x = this.pageRect.width / 2 - this.b_bottom_mid.width / 2;
                this.b_bottom_right.y = this.b_bottom_left.y;
                this.b_bottom_right.x = this.pageRect.width - this.b_bottom_right.width;
                this.b_bottom_line_left.y = this.b_bottom_left.y;
                this.b_bottom_line_left.x = this.b_bottom_left.x + this.b_bottom_left.width;
                this.b_bottom_line_left.width = this.b_bottom_mid.x - this.b_bottom_left.width;
                this.b_bottom_line_right.y = this.b_bottom_left.y;
                this.b_bottom_line_right.x = this.b_bottom_mid.x + this.b_bottom_mid.width;
                this.b_bottom_line_right.width = this.b_bottom_right.x - this.b_bottom_mid.width - this.b_bottom_mid.x;
                this._bRender.applyObjData();
                this._mRender.applyObjData();
                this._tRender.applyObjData();
                //新UI
                this.c_win_bg.x = 0;
                this.c_win_bg.y = 0;
                this.c_win_bg.width = this.pageRect.width;
                this.c_win_bg.height = this.pageRect.height;
                this.c_tittle_bg.x = 0;
                this.c_tittle_bg.y = 0;
                this.c_tittle_bg.width = this.pageRect.width;
                this.c_left_line.x = 0;
                this.c_left_line.y = 0;
                this.c_left_line.height = this.pageRect.height;
                this.c_right_line.x = this.pageRect.width - this.c_right_line.width;
                this.c_right_line.y = 0;
                this.c_right_line.height = this.pageRect.height;
                this.c_bottom_line.x = 0;
                this.c_bottom_line.y = this.pageRect.height - 1;
                this.c_bottom_line.width = this.pageRect.width;
                this.c_bottom_line.height = 1;
                this.c_scroll_bar_bg.x = this.pageRect.width - this.c_scroll_bar_bg.width - 2;
                this.c_scroll_bar_bg.y = this._uiMask.y;
                this.c_scroll_bar_bg.height = this._uiMask.height;
                if (this.contentHeight > this.pageRect.height) {
                    this.setUiListVisibleByItem([this.c_scroll_bar], true);
                    this.c_scroll_bar.x = this.c_scroll_bar_bg.x + 3;
                    this.c_scroll_bar.height = this._uiMask.height * (this._uiMask.height / this.contentHeight);
                    this.c_scroll_bar.y = Math.min((this._uiMask.y + this._uiMask.height) - this.c_scroll_bar.height, this.c_scroll_bar.y);
                }
                else {
                    this.setUiListVisibleByItem([this.c_scroll_bar], false);
                }
                this._baseMidRender.applyObjData();
            }
            _super.prototype.resize.call(this);
        };
        BaseWindow.prototype.tittleMouseDown = function (evt) {
            this.mouseMoveTaget = evt.target;
            this.lastMousePos = new Vector2D(evt.x, evt.y);
            switch (this.mouseMoveTaget) {
                case this.a_tittle_bg:
                    this.lastPagePos = new Vector2D(this.left, this.top);
                    break;
                case this.a_rigth_line:
                case this.a_bottom_line:
                    this.lastPagePos = new Vector2D(this.pageRect.width, this.pageRect.height);
                    break;
                case this.a_scroll_bar:
                    this.lastPagePos = new Vector2D(0, this.a_scroll_bar.y);
                    break;
                case this.c_scroll_bar:
                    this.lastPagePos = new Vector2D(0, this.c_scroll_bar.y);
                    break;
                default:
                    console.log("nonono");
                    break;
            }
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.mouseOnTittleMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.tittleMouseUp, this);
        };
        BaseWindow.prototype.tittleMouseUp = function (evt) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.mouseOnTittleMove, this);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Up, this.tittleMouseUp, this);
        };
        BaseWindow.prototype.mouseOnTittleMove = function (evt) {
            switch (this.mouseMoveTaget) {
                case this.a_tittle_bg:
                    this.left = this.lastPagePos.x + (evt.x - this.lastMousePos.x);
                    this.top = this.lastPagePos.y + (evt.y - this.lastMousePos.y);
                    this.pageRect.x = this.left;
                    this.pageRect.y = this.top;
                    break;
                case this.a_rigth_line:
                    this.pageRect.width = this.lastPagePos.x + (evt.x - this.lastMousePos.x);
                    break;
                case this.a_bottom_line:
                    this.pageRect.height = this.lastPagePos.y + (evt.y - this.lastMousePos.y);
                    break;
                case this.a_scroll_bar:
                    this.a_scroll_bar.y = this.lastPagePos.y + (evt.y - this.lastMousePos.y);
                    this.a_scroll_bar.y = Math.max(this.a_scroll_bar.y, this._uiMask.y);
                    this.a_scroll_bar.y = Math.min(this.a_scroll_bar.y, this._uiMask.y + this._uiMask.height - this.a_scroll_bar.height);
                    //  console.log(this.a_scroll_bar.y)
                    this.changeScrollBar();
                    break;
                case this.c_scroll_bar:
                    this.c_scroll_bar.y = this.lastPagePos.y + (evt.y - this.lastMousePos.y);
                    this.c_scroll_bar.y = Math.max(this.c_scroll_bar.y, this._uiMask.y);
                    this.c_scroll_bar.y = Math.min(this.c_scroll_bar.y, this._uiMask.y + this._uiMask.height - this.c_scroll_bar.height);
                    this.changeScrollBar();
                    break;
                default:
                    console.log("nonono");
                    break;
            }
            this.resize();
        };
        BaseWindow.prototype.changeScrollBar = function () {
            this.c_scroll_bar.y = Math.max(this.c_scroll_bar.y, this._uiMask.y);
            var th = this._uiMask.height - this.c_scroll_bar.height;
            var ty = this.c_scroll_bar.y - this._uiMask.y;
            this.moveListTy = -(this.contentHeight - this._uiMask.height) * (ty / th);
        };
        BaseWindow.maskLevel = 10;
        return BaseWindow;
    }(UIConatiner));
    win.BaseWindow = BaseWindow;
    var Dis2dBaseWindow = /** @class */ (function (_super) {
        __extends(Dis2dBaseWindow, _super);
        function Dis2dBaseWindow($classVo, $rect, $num) {
            var _this = _super.call(this) || this;
            _this._uiItem = new Array();
            _this._lostItem = new Array();
            _this.width = UIData.designWidth;
            _this.height = UIData.designHeight;
            _this.mathSize($rect, $num);
            _this._baseRender = new UIRenderComponent;
            _this.initData($classVo, $rect, $num, _this._baseRender);
            _this.addRender(_this._baseRender);
            _this.panelInfo = {};
            _this.panelInfo.classVo = $classVo;
            _this.panelInfo.rect = $rect;
            _this.panelInfo.num = $num;
            return _this;
        }
        //显示单元类, 尺寸，数量
        Dis2dBaseWindow.prototype.initData = function ($classVo, $rect, $num, $render) {
            this._voNum = Math.floor($num);
            this._voRect = $rect;
            var kkwA = Math.pow(2, Math.ceil(Math.log($rect.x * $rect.width) / Math.log(2)));
            var kkhB = Math.pow(2, Math.ceil(Math.log($rect.x * $rect.width) / Math.log(2)));
            this._textureRect = new Rectangle(0, 0, kkwA, kkhB);
            $render.uiAtlas = new UIAtlas();
            var $uiAtlas = $render.uiAtlas;
            $uiAtlas.configData = new Array();
            $uiAtlas.ctx = UIManager.getInstance().getContext2D(this._textureRect.width, this._textureRect.height, false);
            $uiAtlas.textureRes = TextureManager.getInstance().getCanvasTexture($uiAtlas.ctx);
            this.makeBaseUi($classVo, $render);
            ;
        };
        Dis2dBaseWindow.prototype.mathSize = function ($rect, $num) {
            $rect.x = 0;
            $rect.y = 0;
            while ($rect.x * $rect.y < $num) {
                if ($rect.x * $rect.width > $rect.y * $rect.height) {
                    $rect.y++;
                }
                else {
                    $rect.x++;
                }
            }
        };
        //根据数量创建单元格UICompenent 并存在数组中，待需要时应用
        Dis2dBaseWindow.prototype.makeBaseUi = function ($classVo, $render) {
            var $uiAtlas = $render.uiAtlas;
            for (var i = 0; i < this._voRect.x; i++) {
                for (var j = 0; j < this._voRect.y; j++) {
                    var $disp2DBaseText = new $classVo();
                    this._uiItem.push($disp2DBaseText);
                    $disp2DBaseText.parent = $render;
                    $disp2DBaseText.voRect = this._voRect;
                    $disp2DBaseText.textureStr = "id_" + i + "_" + j;
                    $uiAtlas.configData.push($uiAtlas.getObject($disp2DBaseText.textureStr, i * this._voRect.width, j * this._voRect.height, this._voRect.width, this._voRect.height, this._textureRect.width, this._textureRect.height));
                    $disp2DBaseText.ui = $render.creatBaseComponent($disp2DBaseText.textureStr);
                    $disp2DBaseText.ui.baseRec = this._voRect.clone();
                    // $disp2DBaseText.ui. addEventListener(InteractiveEvent.Down, this.itemMouseUp, this);
                }
            }
        };
        //找到可用的单元 找到后赋值并添加ui到显示队列
        Dis2dBaseWindow.prototype.showTemp = function ($data) {
            this.clearLostItem();
            var empty;
            //找到上一个数据和现在是一样的对象.避免重复更新纹理
            for (var j = 0; j < this._uiItem.length; j++) {
                if (this._uiItem[j].rightTabInfoVo == null && this._uiItem[j].isEqualLastKey($data)) {
                    empty = this._uiItem[j];
                    break;
                }
            }
            if (!empty) {
                for (var i = 0; i < this._uiItem.length; i++) {
                    if (this._uiItem[i].rightTabInfoVo == null) {
                        empty = this._uiItem[i];
                        break;
                    }
                }
            }
            if (empty) {
                empty.rightTabInfoVo = $data;
                this.addChild(empty.ui);
            }
            else {
                var tempRender = this.makeOtherRender();
                this.initData(this.panelInfo.classVo, this.panelInfo.rect, this.panelInfo.num, tempRender);
                this.addRender(tempRender);
                empty = this.showTemp($data);
            }
            return empty;
        };
        Dis2dBaseWindow.prototype.makeOtherRender = function () {
            var tempRender = new UIRenderComponent;
            return tempRender;
        };
        Dis2dBaseWindow.prototype.clearLostItem = function () {
            for (var i = (this._lostItem.length - 1); i > 0; i--) {
                if (this._lostItem[i].clear) {
                    this._lostItem.splice(i, 1);
                }
            }
        };
        Dis2dBaseWindow.prototype.playLost = function () {
            if (this._lostItem.length) {
                this.showTemp(this._lostItem.pop());
            }
        };
        Dis2dBaseWindow.prototype.clearOneTemp = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (!this._uiItem[i].rightTabInfoVo) {
                    return;
                }
            }
            this._lostItem.length = 0;
            this.clearTemp(this._uiItem[0].rightTabInfoVo);
        };
        //清理单元内的内容并需要将对象移出显示队例
        Dis2dBaseWindow.prototype.clearTemp = function ($data) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo == $data) {
                    this._uiItem[i].rightTabInfoVo = null;
                    this.removeChild(this._uiItem[i].ui);
                    break;
                }
            }
            this.playLost();
        };
        Dis2dBaseWindow.prototype.getVoByData = function (value) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo == value) {
                    return this._uiItem[i];
                }
            }
        };
        Dis2dBaseWindow.prototype.getVoByUi = function ($ui) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    if (this._uiItem[i].ui == $ui) {
                        return this._uiItem[i];
                    }
                }
            }
        };
        Dis2dBaseWindow.prototype.clearAll = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    this.clearTemp(this._uiItem[i].rightTabInfoVo);
                }
            }
        };
        Dis2dBaseWindow.prototype.update = function (t) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    this._uiItem[i].update();
                }
            }
        };
        Dis2dBaseWindow.prototype.getUiItemLen = function () {
            var $num = 0;
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    $num++;
                }
            }
            return $num;
        };
        return Dis2dBaseWindow;
    }(win.BaseWindow));
    win.Dis2dBaseWindow = Dis2dBaseWindow;
})(win || (win = {}));
//# sourceMappingURL=BaseWindow.js.map
var pack;
(function (pack) {
    var Scene_data = Pan3d.Scene_data;
    var FileVo = /** @class */ (function () {
        function FileVo() {
        }
        FileVo.prototype.meshStr = function (str) {
            var $arr = str.split("/");
            this.name = $arr[$arr.length - 2];
            this.path = str;
            this.isFolder = true;
            //  console.log(this.name, this.path)
        };
        FileVo.meshObj = function (value) {
            if (value.name.length - 1 != value.name.lastIndexOf("/")) {
                var vo = new FileVo();
                var str = value.name;
                var $arr = str.split("/");
                vo.name = $arr[$arr.length - 1];
                vo.path = str.replace("upfile/shadertree/", "");
                vo.suffix = vo.name.split(".")[1];
                return vo;
            }
            return null;
        };
        FileVo.PREFAB = "prefab";
        FileVo.MATERIAL = "material";
        FileVo.JPG = "jpg";
        FileVo.PNG = "png";
        FileVo.TXT = "txt";
        FileVo.OBJS = "objs";
        FileVo.MAP = "map";
        FileVo.LYF = "lyf";
        FileVo.ZZW = "zzw";
        FileVo.SKILL = "skill";
        FileVo.MD5ANIM = "md5anim";
        FileVo.MD5MESH = "md5mesh";
        return FileVo;
    }());
    pack.FileVo = FileVo;
    var FileOssModel = /** @class */ (function () {
        function FileOssModel() {
        }
        FileOssModel.oneByOne = function () {
            var _this = this;
            if (this.waitItem.length > 0) {
                var $dir = this.waitItem[0].a; //目录
                var kFun = this.waitItem[0].b; //返回
                var nextMarker = "";
                this.ossWrapper.list({
                    'delimiter': '/',
                    'prefix': $dir,
                    'max-keys': 100,
                    'marker': nextMarker,
                }).then(function (result) {
                    _this.waitItem.shift();
                    _this.oneByOne();
                    kFun(result);
                }).catch(function (err) {
                    console.log(err);
                    console.log("网络异常。需要注意");
                    _this.waitItem.shift();
                    _this.oneByOne();
                    kFun(null);
                });
            }
        };
        FileOssModel.saveDicfileGropFun = function ($dir, fileArr, bfun) {
            //  console.log("保存文件夹目录", $dir, fileArr)
            var $byte = new Pan3d.Pan3dByteArray();
            $byte.writeUTF(JSON.stringify(fileArr));
            var $file = new File([$byte.buffer], this.indexFileName);
            var pathurl = $dir;
            console.log(pathurl + $file.name);
            pack.FileOssModel.upOssFile($file, pathurl + $file.name, function () {
                console.log("文件夹配置", pathurl + $file.name);
                bfun();
            });
        };
        FileOssModel.getDicByUrl = function ($dir, bfun, errBfun) {
            var filePath = Scene_data.ossRoot + $dir + this.indexFileName;
            Pan3d.LoadManager.getInstance().load(filePath, Pan3d.LoadManager.BYTE_TYPE, function ($byte) {
                var $dicByte = new Pan3d.Pan3dByteArray($byte);
                var $tempItem = JSON.parse($dicByte.readUTF());
                var fileArr = [];
                for (var i = 0; i < $tempItem.length; i++) {
                    var fileVo = new FileVo();
                    fileVo.name = $tempItem[i].name;
                    fileVo.path = $tempItem[i].path;
                    if ($tempItem[i].isFolder) {
                        fileVo.isFolder = $tempItem[i].isFolder;
                    }
                    if ($tempItem[i].suffix) {
                        fileVo.suffix = $tempItem[i].suffix;
                    }
                    fileArr.push(fileVo);
                }
                bfun(fileArr);
                //    console.log("url获取", filePath)
            }, {
                errorFun: function () {
                    errBfun();
                }
            });
        };
        //获得文件夹目录
        FileOssModel.getPerentPath = function (value) {
            var idex = value.lastIndexOf("/");
            if (idex != -1) {
                value = value.substr(0, idex + 1);
            }
            else {
                value = "";
            }
            return value;
        };
        //通过方法可以重新生存文件目录
        FileOssModel.getDisByOss = function ($dir, bfun) {
            var _this = this;
            //特别处理是不椒"/"结尾的文件目录
            $dir = this.getPerentPath($dir);
            this.getTempOss($dir, function (value) {
                var fileArr = [];
                for (var i = 0; value.prefixes && i < value.prefixes.length; i++) {
                    var fileVo = new FileVo();
                    fileVo.meshStr(value.prefixes[i]);
                    if (fileVo.name != "hide_min_icon") { //不是隐藏文件夹
                        fileArr.push(fileVo);
                    }
                }
                for (var j = 0; value.objects && j < value.objects.length; j++) {
                    var fileVo = FileVo.meshObj(value.objects[j]);
                    if (fileVo && fileVo.suffix != _this.indexFileName.split(".")[1]) { //不是文件夹配置文件
                        fileArr.push(fileVo);
                    }
                }
                console.log("oss获取文件目录", $dir);
                _this.saveDicfileGropFun($dir, fileArr, function () {
                    bfun(fileArr);
                });
            });
        };
        FileOssModel.getFolderArr = function ($dir, bfun) {
            var _this = this;
            if (this.isMustUseOssGetDic) {
                this.getDisByOss($dir, bfun);
            }
            else {
                this.getDicByUrl($dir, bfun, function () {
                    _this.getDisByOss($dir, bfun);
                });
            }
        };
        FileOssModel.getTempOss = function ($dir, bfun) {
            var _this = this;
            if (!this.waitItem) {
                this.waitItem = [];
            }
            this.waitItem.push({ a: $dir, b: bfun });
            if (this.waitItem.length == 1) {
                if (!this.ossWrapper) {
                    this.makeOssWrapper(function () {
                        _this.oneByOne();
                    });
                }
                else {
                    this.oneByOne();
                }
            }
        };
        FileOssModel.getWarpperByUrl = function (bfun) {
            var _this = this;
            this.WEB_SEVER_EVENT_AND_BACK("get_STS", "id=" + 99, function (res) {
                if (res && res.data && res.data.info) {
                    _this.ossWrapper = new OSS.Wrapper({
                        accessKeyId: res.data.info.AccessKeyId,
                        accessKeySecret: res.data.info.AccessKeySecret,
                        stsToken: res.data.info.SecurityToken,
                        endpoint: "https://oss-cn-shanghai.aliyuncs.com",
                        bucket: "webpan"
                    });
                    bfun();
                }
                else {
                    console.log("链接错误，重试");
                    Pan3d.TimeUtil.addTimeOut(2000, function () {
                        _this.getWarpperByUrl(bfun);
                    });
                }
            });
        };
        FileOssModel.makeOssWrapper = function (bfun) {
            var _this = this;
            if (!this.waitOssWrapper) {
                this.waitOssWrapper = [bfun];
                this.getWarpperByUrl(function () {
                    while (_this.waitOssWrapper.length) {
                        console.log("waitOssWrapper", _this.waitOssWrapper);
                        _this.waitOssWrapper.pop()();
                    }
                });
            }
            else {
                this.waitOssWrapper.push(bfun);
            }
        };
        FileOssModel.makeOssWrapperCopy = function (bfun) {
            var _this = this;
            if (!this.waitOssWrapper) {
                this.waitOssWrapper = [bfun];
                this.WEB_SEVER_EVENT_AND_BACK("get_STS", "id=" + 99, function (res) {
                    if (res && res.data && res.data.info) {
                        _this.ossWrapper = new OSS.Wrapper({
                            accessKeyId: res.data.info.AccessKeyId,
                            accessKeySecret: res.data.info.AccessKeySecret,
                            stsToken: res.data.info.SecurityToken,
                            endpoint: "https://oss-cn-shanghai.aliyuncs.com",
                            bucket: "webpan"
                        });
                        while (_this.waitOssWrapper.length) {
                            console.log("waitOssWrapper", _this.waitOssWrapper);
                            _this.waitOssWrapper.pop()();
                        }
                    }
                    else {
                        console.log("链接错误，重试");
                    }
                });
            }
            else {
                this.waitOssWrapper.push(bfun);
            }
        };
        FileOssModel.deleFile = function ($filename, $bfun) {
            if ($bfun === void 0) { $bfun = null; }
            if (!FileOssModel.ossWrapper) {
                this.makeOssWrapper(function () {
                    FileOssModel.ossWrapper.delete($filename).then(function (result) {
                        // console.log(result);
                        $bfun && $bfun();
                    }).catch(function (err) {
                        console.log(err);
                    });
                });
            }
            else {
                FileOssModel.ossWrapper.delete($filename).then(function (result) {
                    //  console.log(result);
                    $bfun && $bfun();
                }).catch(function (err) {
                    console.log(err);
                });
            }
        };
        FileOssModel.uploadFile = function ($file, $filename, $bfun) {
            if ($bfun === void 0) { $bfun = null; }
            if (!FileOssModel.ossWrapper) {
                this.makeOssWrapper(function () {
                    FileOssModel.ossWrapper.multipartUpload($filename, $file).then(function (result) {
                        //   console.log(result);
                        $bfun && $bfun();
                    }).catch(function (err) {
                        console.log(err);
                    });
                });
            }
            else {
                FileOssModel.ossWrapper.multipartUpload($filename, $file).then(function (result) {
                    //  console.log(result);
                    $bfun && $bfun();
                }).catch(function (err) {
                    console.log(err);
                });
            }
            console.log("上传文件==>", $filename);
        };
        FileOssModel.copyFile = function (toUrl, srcoueUrl, $bfun) {
            if ($bfun === void 0) { $bfun = null; }
            srcoueUrl = encodeURI(srcoueUrl);
            toUrl = decodeURI(toUrl);
            if (!FileOssModel.ossWrapper) {
                this.makeOssWrapper(function () {
                    FileOssModel.ossWrapper.copy(toUrl, srcoueUrl).then(function (result) {
                        console.log(result);
                        $bfun && $bfun();
                    }).catch(function (err) {
                        console.log(err);
                    });
                });
            }
            else {
                console.log(FileOssModel.ossWrapper.copy);
                FileOssModel.ossWrapper.copy(toUrl, srcoueUrl).then(function (result) {
                    console.log(result);
                    $bfun && $bfun();
                }).catch(function (err) {
                    console.log(err);
                });
            }
        };
        FileOssModel.WEB_SEVER_EVENT_AND_BACK = function (webname, postStr, $bfun) {
            if ($bfun === void 0) { $bfun = null; }
            webname = webname.replace(/\s+/g, "");
            var $obj = new Object();
            $obj.webname = webname;
            $obj.postStr = postStr.replace(/\s+/g, "");
            $obj.fun = $bfun;
            this.isPostWeboffwx(webname, postStr, $bfun);
        };
        //网页模式的WEB请求
        FileOssModel.isPostWeboffwx = function (webname, postStr, $bfun) {
            if ($bfun === void 0) { $bfun = null; }
            var ajax = new XMLHttpRequest();
            var url = this.webseverurl + webname;
            // $bfun = null;
            var timestamp = String(Pan3d.TimeUtil.getTimer());
            var keystr = "ABC";
            var self_sign = "ABC";
            ajax.open("post", url, true);
            ajax.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            ajax.setRequestHeader("timestamp", timestamp);
            ajax.setRequestHeader("sign", self_sign);
            ajax.onreadystatechange = function () {
                if (ajax.readyState == 4) {
                    if (ajax.status == 200) {
                        $bfun ? $bfun({ data: JSON.parse(ajax.responseText) }) : null;
                    }
                    else {
                        console.log("HTTP请求错误！错误码：" + ajax.status);
                        $bfun ? $bfun(null) : null;
                    }
                }
            };
            ajax.send(postStr);
        };
        FileOssModel.upOssFile = function (file, $fileUrl, $bfun) {
            var _this = this;
            if ($bfun === void 0) { $bfun = null; }
            this.waitItemUpFile.push({ a: file, b: $fileUrl, c: $bfun });
            if (this.waitItemUpFile.length == 1) {
                if (!FileOssModel.ossWrapper) {
                    FileOssModel.makeOssWrapper(function () {
                        _this.oneByOneUpFile();
                    });
                }
                else {
                    this.oneByOneUpFile();
                }
            }
        };
        FileOssModel.oneByOneUpFile = function () {
            var _this = this;
            if (this.waitItemUpFile.length > 0) {
                FileOssModel.uploadFile(this.waitItemUpFile[0].a, this.waitItemUpFile[0].b, function () {
                    // console.log(this.waitItemUpFile[0])
                    var kFun = _this.waitItemUpFile[0].c;
                    _this.waitItemUpFile.shift();
                    kFun && kFun();
                    _this.oneByOneUpFile();
                });
            }
        };
        FileOssModel.upTempFileToOss = function (bfun) {
            var htmlTxt = document.createElement('input');
            htmlTxt.setAttribute('id', '_ef');
            htmlTxt.setAttribute('type', 'file');
            htmlTxt.setAttribute("style", 'visibility:hidden');
            htmlTxt.click();
            htmlTxt.value;
            htmlTxt.addEventListener("change", function (evt) { changeFile(evt); });
            function changeFile(evt) {
                for (var i = 0; htmlTxt && i < htmlTxt.files.length && i < 1; i++) {
                    var simpleFile = htmlTxt.files[i];
                    htmlTxt = null;
                    bfun(simpleFile);
                }
            }
        };
        FileOssModel.indexFileName = "index.hidegroup"; //配置文件名读取这个文件标记为文件夹下的所以
        FileOssModel.isMustUseOssGetDic = false; //是否必须使用OSS方案 //当文件内有添加删除文件，需要更新配置文件目录
        FileOssModel.webseverurl = "http://api.h5key.com/api/";
        FileOssModel.waitItemUpFile = [];
        FileOssModel.version = 1;
        return FileOssModel;
    }());
    pack.FileOssModel = FileOssModel;
})(pack || (pack = {}));
//# sourceMappingURL=FileOssModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Rectangle = Pan3d.Rectangle;
    var UIConatiner = Pan3d.UIConatiner;
    var UIAtlas = Pan3d.UIAtlas;
    var Scene_data = Pan3d.Scene_data;
    var LayBaseTab = /** @class */ (function (_super) {
        __extends(LayBaseTab, _super);
        function LayBaseTab() {
            var _this = _super.call(this) || this;
            _this.left = 0;
            _this._pageRect = new Rectangle(0, 0, 300, 300);
            _this._bottomRender = new UIRenderComponent;
            _this.addRender(_this._bottomRender);
            _this._topRender = new UIRenderComponent;
            _this.addRender(_this._topRender);
            _this._bottomRender.uiAtlas = new UIAtlas();
            _this._bottomRender.uiAtlas.setInfo("ui/basewin/basewin.txt", "ui/basewin/basewin.png", function () { _this.loadConfigCom(); });
            return _this;
        }
        LayBaseTab.prototype.mouseDown = function (evt) {
            this.mouseIsDown = true;
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.stageMouseMove, this);
        };
        LayBaseTab.prototype.stageMouseMove = function (evt) {
            this.mouseIsDown = false;
        };
        LayBaseTab.prototype.mouseUp = function (evt) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.stageMouseMove, this);
        };
        LayBaseTab.prototype.loadConfigCom = function () {
            this._topRender.uiAtlas = this._bottomRender.uiAtlas;
            this.a_win_tittle = this.addEvntBut("a_win_tittle", this._topRender);
            this.a_bg = this.addEvntBut("a_bg", this._bottomRender);
            this.a_left_line = this.addChild(this._topRender.getComponent("a_rigth_line"));
            this.a_rigth_line = this.addChild(this._topRender.getComponent("a_rigth_line"));
            this.a_bottom_line = this.addChild(this._topRender.getComponent("a_bottom_line"));
            this.a_right_bottom = this.addChild(this._topRender.getComponent("a_right_bottom"));
            this.loadFinish = true;
            this.refrishSize();
        };
        LayBaseTab.prototype.butClik = function (evt) {
            console.log(evt.target);
        };
        Object.defineProperty(LayBaseTab.prototype, "pageRect", {
            get: function () {
                return this._pageRect;
            },
            set: function (value) {
                this._pageRect = value;
                if (this.loadFinish) {
                    this.refrishSize();
                }
            },
            enumerable: true,
            configurable: true
        });
        LayBaseTab.prototype.refrishSize = function () {
            this.left = this._pageRect.x;
            this.top = this._pageRect.y;
            this._pageRect.width = Math.max(100, this._pageRect.width);
            this._pageRect.height = Math.max(100, this._pageRect.height);
            this.a_win_tittle.x = 0;
            this.a_win_tittle.y = 0;
            this.a_win_tittle.width = this._pageRect.width;
            this.a_bg.x = 0;
            this.a_bg.y = 0;
            this.a_bg.width = this._pageRect.width;
            this.a_bg.height = this._pageRect.height;
            this.a_left_line.x = 0;
            this.a_left_line.y = this.a_win_tittle.height;
            this.a_left_line.height = this._pageRect.height - this.a_win_tittle.height - this.a_right_bottom.height;
            this.a_rigth_line.x = this._pageRect.width - this.a_rigth_line.width;
            this.a_rigth_line.y = this.a_win_tittle.height;
            this.a_rigth_line.height = this._pageRect.height - this.a_win_tittle.height - this.a_right_bottom.height;
            this.a_bottom_line.x = 0;
            this.a_bottom_line.y = this._pageRect.height - this.a_bottom_line.height;
            this.a_bottom_line.width = this._pageRect.width - this.a_right_bottom.width;
            this.a_right_bottom.x = this._pageRect.width - this.a_right_bottom.width;
            this.a_right_bottom.y = this._pageRect.height - this.a_right_bottom.height;
            this.resize();
        };
        return LayBaseTab;
    }(UIConatiner));
    win.LayBaseTab = LayBaseTab;
})(win || (win = {}));
//# sourceMappingURL=LayBaseTab.js.map
var win;
(function (win) {
    var Scene_data = Pan3d.Scene_data;
    var UIManager = Pan3d.UIManager;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var MouseType = Pan3d.MouseType;
    var Vector2D = Pan3d.Vector2D;
    var MathClass = Pan3d.MathClass;
    var LayUIManager = /** @class */ (function () {
        function LayUIManager() {
            this.lastTime = 0;
            this._uiList = [];
            this._containerList = [];
        }
        Object.defineProperty(LayUIManager.prototype, "uiList", {
            get: function () {
                return this._uiList;
            },
            enumerable: true,
            configurable: true
        });
        LayUIManager.prototype.addUI = function ($ui) {
            var $id = 0;
            for (var i = this._uiList.length - 1; i >= 0; i--) {
                if (this._uiList[i].sortnum <= $ui.sortnum) {
                    $id = i + 1;
                    break;
                }
            }
            this._uiList.splice($id, 0, $ui);
            $ui.rendering = true;
        };
        LayUIManager.prototype.removeUI = function ($ui) {
            var index = this._uiList.indexOf($ui);
            $ui.rendering = false;
            if (index != -1) {
                this._uiList.splice(index, 1);
            }
        };
        LayUIManager.prototype.addUIContainer = function ($container) {
            if ($container.hasStage) {
                return;
            }
            $container.perent = this;
            this._containerList.push($container);
            $container.resize();
            for (var i = 0; i < $container.renderList.length; i++) {
                this.addUI($container.renderList[i]);
            }
            $container.hasStage = true;
        };
        LayUIManager.prototype.removeAll = function () {
            while (this._containerList.length) {
                ////console.log("this._containerList.length",this._containerList.length)
                this.removeUIContainer(this._containerList[this._containerList.length - 1]);
            }
        };
        LayUIManager.prototype.removeUIContainer = function ($container) {
            if (!$container.hasStage) {
                return;
            }
            var index = this._containerList.indexOf($container);
            $container.hasStage = false;
            $container.perent = null;
            if (index != -1) {
                this._containerList.splice(index, 1);
            }
            for (var i = 0; i < $container.renderList.length; i++) {
                this.removeUI($container.renderList[i]);
            }
        };
        LayUIManager.prototype.hasWindowUI = function () {
            return false;
        };
        LayUIManager.prototype.removeNoInterfaceUI = function () {
            for (var i = (this._containerList.length - 1); i >= 0; i--) {
                if (!this._containerList[i].interfaceUI) { //非主界面的时候
                    this.removeUIContainer(this._containerList[i]);
                }
            }
        };
        LayUIManager.prototype.resize = function () {
            if (!this._uiList) {
                return;
            }
            for (var i = 0; i < this._uiList.length; i++) {
                this._uiList[i].resize();
            }
            for (var i = 0; i < this._containerList.length; i++) {
                this._containerList[i].resize();
            }
        };
        LayUIManager.prototype.upBgGroundZero = function () {
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].container.layer == -1 || this._uiList[i].sortnum == -1) {
                    this._uiList[i].update();
                }
            }
        };
        LayUIManager.prototype.update = function () {
            for (var i = 0; i < this._uiList.length; i++) {
                if (this._uiList[i].container.layer >= 0 && this._uiList[i].sortnum != -1) {
                    this._uiList[i].update();
                }
            }
        };
        //private _touch: any;
        LayUIManager.prototype.regEvent = function ($touce) {
        };
        LayUIManager.prototype.onTouch = function ($e) {
            this.interactiveEvent($e);
        };
        LayUIManager.prototype.onMouse = function ($e) {
            this.interactiveEvent($e);
        };
        LayUIManager.prototype.interactiveEvent = function ($e) {
            var evt;
            var point = new Vector2D();
            if ($e instanceof MouseEvent) {
                if ($e.type == MouseType.MouseDown) {
                    evt = new InteractiveEvent(InteractiveEvent.Down);
                }
                else if ($e.type == MouseType.MouseUp) {
                    evt = new InteractiveEvent(InteractiveEvent.Up);
                }
                else if ($e.type == MouseType.MouseMove) {
                    evt = new InteractiveEvent(InteractiveEvent.Move);
                }
                else if ($e.type == MouseType.MouseClick) {
                }
                //evt.x = $e.pageX;
                //evt.y = $e.pageY;
                point.x = $e.pageX;
                point.y = $e.pageY;
            }
            else {
                if ($e.type == MouseType.TouchStart) {
                    //$e.preventDefault();
                    evt = new InteractiveEvent(InteractiveEvent.Down);
                    if ($e.touches.length > 1) {
                        // evt = new InteractiveEvent(InteractiveEvent.PinchStart);
                        // this.lastSwipeDis = MathClass.math_distance($e.touches[0].clientX, $e.touches[0].clientY, $e.touches[1].clientX, $e.touches[1].clientY);
                        // this.lastSwipeRot = Math.atan2($e.touches[1].clientY - $e.touches[0].clientY, $e.touches[1].clientX - $e.touches[0].clientX);
                        point.x = $e.touches[$e.touches.length - 1].pageX;
                        point.y = $e.touches[$e.touches.length - 1].pageY;
                    }
                    else {
                        point.x = $e.pageX;
                        point.y = $e.pageY;
                    }
                }
                else if ($e.type == MouseType.TouchEnd) {
                    //alert("touseend");
                    evt = new InteractiveEvent(InteractiveEvent.Up);
                    point.x = $e.changedTouches[0].pageX;
                    point.y = $e.changedTouches[0].pageY;
                }
                else if ($e.type == MouseType.TouchMove) {
                    //$e.preventDefault();
                    if ($e.touches.length > 1) {
                        evt = new InteractiveEvent(InteractiveEvent.Pinch);
                        evt.data = MathClass.math_distance($e.touches[0].clientX, $e.touches[0].clientY, $e.touches[1].clientX, $e.touches[1].clientY) / this.lastSwipeDis;
                        evt.roation = (Math.atan2($e.touches[1].clientY - $e.touches[0].clientY, $e.touches[1].clientX - $e.touches[0].clientX) - this.lastSwipeRot) * 180 / Math.PI;
                    }
                    else {
                        evt = new InteractiveEvent(InteractiveEvent.Move);
                    }
                    point.x = $e.pageX;
                    point.y = $e.pageY;
                }
                if ($e.touches.length) {
                    for (var i = 0; i < $e.touches.length; i++) {
                        point.x = $e.touches[i].clientX;
                        point.y = $e.touches[i].clientY;
                    }
                }
            }
            ////console.log(point.x, point.y);
            this.mouseEvetData(evt, point);
        };
        LayUIManager.prototype.disMoveNnum = function (v2d, $num) {
            return Vector2D.distance(v2d, this.lastMousePos) < $num;
        };
        LayUIManager.prototype.mouseEvetData = function (evt, point) {
            UIManager.cando = true;
            if (Scene_data.verticalScene) {
                evt.x = point.y;
                evt.y = Scene_data.stageHeight - point.x;
            }
            else {
                evt.x = point.x;
                evt.y = point.y;
            }
            var tf = false;
            if (!tf) {
                for (var i = this._uiList.length - 1; i >= 0; i--) {
                    if (this._uiList[i]) {
                        if (this._uiList[i] && this._uiList[i].interactiveEvent(evt)) {
                            tf = true;
                            break;
                        }
                    }
                }
            }
            return tf;
            /*
        
  
            */
        };
        return LayUIManager;
    }());
    win.LayUIManager = LayUIManager;
})(win || (win = {}));
//# sourceMappingURL=LayUIManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var Rectangle = Pan3d.Rectangle;
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite() {
            var _this = _super.call(this) || this;
            _this.rect = new Rectangle(0, 0, 250, 250);
            _this.children = [];
            return _this;
        }
        Object.defineProperty(Sprite.prototype, "rect", {
            get: function () {
                return this._rect;
            },
            set: function (value) {
                this._rect = value;
            },
            enumerable: true,
            configurable: true
        });
        Sprite.prototype.onAdd = function () { };
        Sprite.prototype.onRemove = function () { };
        Sprite.prototype.addChild = function (value) {
            value.perent = this;
            value.onAdd();
            this.children.push(value);
        };
        Sprite.prototype.removeChild = function (value) {
            var idx = this.children.indexOf(value);
            if (idx != -1) {
                value.onRemove();
                this.children.splice(idx, 1);
            }
        };
        Sprite.prototype.update = function () {
            _super.prototype.update.call(this);
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].update();
            }
        };
        Sprite.prototype.resize = function () {
            _super.prototype.resize.call(this);
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].resize();
            }
        };
        Object.defineProperty(Sprite.prototype, "x", {
            get: function () {
                return this.rect.x;
            },
            set: function (value) {
                this.rect.x = value;
                this.changeSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "y", {
            get: function () {
                return this.rect.y;
            },
            set: function (value) {
                this.rect.y = value;
                this.changeSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "width", {
            get: function () {
                return this.rect.width;
            },
            set: function (value) {
                this.rect.width = value;
                this.changeSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "height", {
            get: function () {
                return this.rect.height;
            },
            set: function (value) {
                this.rect.height = value;
                this.changeSize();
            },
            enumerable: true,
            configurable: true
        });
        Sprite.prototype.getObjectsUnderPoint = function (evt) {
            for (var i = this.children.length - 1; i >= 0; i--) {
                var temp = this.children[i].getObjectsUnderPoint(evt);
                if (temp) {
                    return temp;
                }
            }
            for (var j = this.uiList.length - 1; j >= 0; j--) {
                if (this.uiList[j]) {
                    if (this.uiList[j] && this.uiList[j].insetUi(evt)) {
                        return this.uiList[j].insetUi(evt);
                    }
                }
            }
            return null;
        };
        Sprite.prototype.mouseEvetData = function (evt, point) {
            for (var i = this.children.length - 1; i >= 0; i--) {
                var temp = this.children[i].mouseEvetData(evt, point);
                if (temp) {
                    return temp;
                }
            }
            return _super.prototype.mouseEvetData.call(this, evt, point);
        };
        Sprite.prototype.changeSize = function () {
        };
        return Sprite;
    }(win.LayUIManager));
    win.Sprite = Sprite;
})(win || (win = {}));
//# sourceMappingURL=Sprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var LayoutbaseBg = /** @class */ (function (_super) {
        __extends(LayoutbaseBg, _super);
        function LayoutbaseBg() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LayoutbaseBg.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.setUiListVisibleByItem([this.a_scroll_bar, this.a_scroll_bar_bg], false);
            this.setUiListVisibleByItem([this.e_panel_1], false);
        };
        return LayoutbaseBg;
    }(win.BaseWindow));
    win.LayoutbaseBg = LayoutbaseBg;
})(win || (win = {}));
//# sourceMappingURL=LayoutbaseBg.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var win;
(function (win) {
    var Panel = /** @class */ (function (_super) {
        __extends(Panel, _super);
        function Panel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.layer = 0;
            return _this;
        }
        return Panel;
    }(win.Sprite));
    win.Panel = Panel;
})(win || (win = {}));
//# sourceMappingURL=Panel.js.map
var win;
(function (win) {
    var Scene_data = Pan3d.Scene_data;
    var GameUIInstance = /** @class */ (function () {
        function GameUIInstance() {
        }
        return GameUIInstance;
    }());
    win.GameUIInstance = GameUIInstance;
    var LayerManager = /** @class */ (function () {
        function LayerManager() {
        }
        LayerManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new LayerManager();
            }
            return this._instance;
        };
        LayerManager.prototype.initData = function () {
            this.children = [];
        };
        LayerManager.prototype.addPanel = function ($panel, $level, $isOnly) {
            if ($isOnly === void 0) { $isOnly = false; }
            $panel.layer = $level;
            if ($isOnly) {
                for (var i = this.children.length - 1; i >= 0; i--) {
                    if (this.children[i].layer == $level) {
                        this.removePanel(this.children[i]);
                    }
                }
            }
            var index = this.children.indexOf($panel);
            if (index == -1) {
                this.children.push($panel);
                this.children.sort(function (aa, bb) {
                    return aa.layer - bb.layer;
                });
            }
        };
        LayerManager.prototype.removePanel = function ($panel) {
            var index = this.children.indexOf($panel);
            if (index != -1) {
                this.children.splice(index, 1);
            }
        };
        LayerManager.prototype.update = function () {
            Pan3d.Scene_data.context3D.setDepthTest(false);
            for (var i = 0; this.children && i < this.children.length; i++) {
                this.children[i].update();
            }
        };
        LayerManager.prototype.resize = function () {
            for (var i = 0; this.children && i < this.children.length; i++) {
                this.children[i].resize();
            }
        };
        LayerManager.prototype.getObjectsUnderPoint = function (evt) {
            for (var i = this.children.length - 1; i >= 0; i--) {
                var temp = this.children[i].getObjectsUnderPoint(evt);
                if (temp) {
                    return temp;
                }
            }
            return null;
        };
        LayerManager.prototype.mouseEvetData = function (evt, point) {
            if (LayerManager.isHideMouseEvent) {
                return;
            }
            var tf = false;
            for (var i = this.children.length - 1; i >= 0; i--) {
                if (!tf) {
                    tf = this.children[i].mouseEvetData(evt, point);
                }
            }
            var $uistageTemp = Scene_data.uiStage.interactiveEvent(evt);
            if (!tf) {
                Scene_data.uiBlankStage.interactiveEvent(evt);
                return $uistageTemp;
            }
            else {
                return true;
            }
        };
        return LayerManager;
    }());
    win.LayerManager = LayerManager;
})(win || (win = {}));
//# sourceMappingURL=LayerManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Object3D = Pan3d.Object3D;
    var MouseVO = /** @class */ (function (_super) {
        __extends(MouseVO, _super);
        function MouseVO() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._mouseDown = false;
            _this.last_mouse_x = 0;
            _this.last_mouse_y = 0;
            _this.oldPosx = 0;
            _this.oldPosy = 0;
            _this.oldPosz = 0;
            _this.old_rotation_x = 0;
            _this.old_rotation_y = 0;
            return _this;
        }
        return MouseVO;
    }(Object3D));
    xyz.MouseVO = MouseVO;
})(xyz || (xyz = {}));
//# sourceMappingURL=MouseVO.js.map
var xyz;
(function (xyz) {
    var Matrix3D = Pan3d.Matrix3D;
    var TooXyzPosData = /** @class */ (function () {
        function TooXyzPosData() {
            this.oldscale_x = 1;
            this.oldscale_y = 1;
            this.oldscale_z = 1;
        }
        TooXyzPosData.prototype.changeModelMatrix3d = function () {
            this.updateMatrix();
        };
        TooXyzPosData.prototype.updateMatrix = function () {
            if (!this.modeMatrx3D) {
                this.modeMatrx3D = new Matrix3D;
            }
            this.modeMatrx3D.identity();
            // this.modeMatrx3D.appendScale(this.scaleX, this.scaleY, this.scaleZ);
            this.modeMatrx3D.appendRotation(this.rotationX, Vector3D.X_AXIS);
            this.modeMatrx3D.appendRotation(this.rotationY, Vector3D.Y_AXIS);
            this.modeMatrx3D.appendRotation(this.rotationZ, Vector3D.Z_AXIS);
            this.modeMatrx3D.appendTranslation(this.x, this.y, this.z);
        };
        TooXyzPosData.getTemapXyzPosData = function (_id, _x, _y, _z) {
            var tempXyz = new TooXyzPosData();
            tempXyz.id = _id;
            tempXyz.x = _x;
            tempXyz.y = _y;
            tempXyz.z = _z;
            tempXyz.type = 1;
            return tempXyz;
        };
        TooXyzPosData.prototype.getEulerAngles = function (quat) {
            var x, y, z, qx, qy, qz, qw, a2;
            qx = quat[0];
            qy = quat[1];
            qz = quat[2];
            qw = quat[3];
            a2 = 2 * (qw * qy - qx * qz);
            if (a2 <= -0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = -Math.PI / 2;
                z = 0;
            }
            else if (a2 >= 0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = Math.PI / 2;
                z = 0;
            }
            else {
                x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
                y = Math.asin(a2);
                z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
            }
            return [x, y, z];
        };
        TooXyzPosData.prototype.upRootMatrix3DToItem = function () {
            this.updateMatrix();
            for (var i = 0; i < this.spriteItem.length; i++) {
                this.spriteItem[i].scaleX = this.dataItem[i].scaleX * this.scaleX;
                this.spriteItem[i].scaleY = this.dataItem[i].scaleY * this.scaleY;
                this.spriteItem[i].scaleZ = this.dataItem[i].scaleZ * this.scaleZ;
                //var a: Matrix3D = this.baseMatrix3D.clone();
                //var b: Matrix3D = this.modeMatrx3D.clone();
                //a.invert();
                //var c: Matrix3D = b.clone();
                //c.prepend(a)
                //c.prepend(this.dataItem[i].baseMatrix3D)
                var M = this.modeMatrx3D.clone();
                this.spriteItem[i].x = M.position.x;
                this.spriteItem[i].y = M.position.y;
                this.spriteItem[i].z = M.position.z;
                var r = M.toEulerAngles(); //欧拉角
                this.spriteItem[i].rotationX = r.x;
                this.spriteItem[i].rotationY = r.y;
                this.spriteItem[i].rotationZ = r.z;
                this.dataUpDate();
            }
            console.log("--------------");
        };
        /*
        public upRootMatrix3DToItem(): void {

             this.updateMatrix();
        
            for (var i: number = 0; i < this.spriteItem.length; i++) {
    
                var a: Matrix3D = this.baseMatrix3D.clone();
                var b: Matrix3D = this.modeMatrx3D.clone();
                a.invert();
                var c: Matrix3D = b.clone();
                c.prepend(a)
                c.prepend(this.dataItem[i].baseMatrix3D)

                var M = this.modeMatrx3D.clone();
                var s: Vector3D = M.getScaling();
                this.spriteItem[i].scaleX = s.x
                this.spriteItem[i].scaleY = s.y
                this.spriteItem[i].scaleZ = s.z

                this.spriteItem[i].x = M.position.x;
                this.spriteItem[i].y = M.position.y;
                this.spriteItem[i].z = M.position.z;

                var MR: Matrix3D = M.clone();
        
                MR.appendScale(1/s.x, 1/s.y, 1/s.z);
                MR.appendTranslation(-M.position.x, -M.position.y, -M.position.z)
       
                var r: Vector3D = MR.toEulerAngles(); //欧拉角
                this.spriteItem[i].rotationX = r.x
                this.spriteItem[i].rotationY = r.y
                this.spriteItem[i].rotationZ = r.z
       
 

              this.spriteItem[i].posMatrix = this.modeMatrx3D.clone();

                 this.dataUpDate();
            }
            console.log("--------------")

           
        }

        */
        TooXyzPosData.getBase = function ($arr, isCenten) {
            if (isCenten === void 0) { isCenten = false; }
            var rootData = new TooXyzPosData();
            rootData.scaleX = 1;
            rootData.scaleY = 1;
            rootData.scaleZ = 1;
            rootData.dataItem = [];
            rootData.spriteItem = [];
            //第一个对象
            rootData.x = $arr[0].x;
            rootData.y = $arr[0].y;
            rootData.z = $arr[0].z;
            rootData.scaleX = $arr[0].scaleX;
            rootData.scaleY = $arr[0].scaleY;
            rootData.scaleZ = $arr[0].scaleZ;
            rootData.rotationX = $arr[0].rotationX;
            rootData.rotationY = $arr[0].rotationY;
            rootData.rotationZ = $arr[0].rotationZ;
            //rootData.x = 10
            //rootData.y =10
            //rootData.z =10
            //rootData.scaleX = $arr[0].scaleX
            //rootData.scaleY = $arr[0].scaleY
            //rootData.scaleZ = $arr[0].scaleZ
            //rootData.rotationX =40
            //rootData.rotationY = 40
            //rootData.rotationZ = 40
            rootData.updateMatrix();
            rootData.baseMatrix3D = rootData.modeMatrx3D.clone();
            var inM = rootData.modeMatrx3D.clone();
            inM.invert();
            for (var j = 0; j < $arr.length; j++) {
                var tempData = new TooXyzPosData;
                //  tempData.modeMatrx3D = $arr[j].posMatrix.clone(); //存放相对
                // tempData.modeMatrx3D.prepend(inM);
                tempData.baseMatrix3D = $arr[j].posMatrix.clone();
                tempData.scaleX = $arr[j].scaleX / rootData.scaleX;
                tempData.scaleY = $arr[j].scaleY / rootData.scaleY;
                tempData.scaleZ = $arr[j].scaleZ / rootData.scaleZ;
                tempData.x = $arr[j].x;
                tempData.y = $arr[j].y;
                tempData.z = $arr[j].z;
                tempData.rotationX = $arr[j].rotationX;
                tempData.rotationY = $arr[j].rotationY;
                tempData.rotationZ = $arr[j].rotationZ;
                rootData.dataItem.push(tempData);
                rootData.spriteItem.push($arr[j]);
            }
            return rootData;
        };
        return TooXyzPosData;
    }());
    xyz.TooXyzPosData = TooXyzPosData;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooXyzMoveData.js.map
var xyz;
(function (xyz) {
    var Vector2D = Pan3d.Vector2D;
    var Matrix3D = Pan3d.Matrix3D;
    var TestTriangle = Pan3d.TestTriangle;
    var Engine = Pan3d.Engine;
    var TooMathHitModel = /** @class */ (function () {
        function TooMathHitModel() {
        }
        TooMathHitModel.getViewMatrx3D = function (cam) {
            var viewMatrx3D = new Matrix3D;
            viewMatrx3D.perspectiveFieldOfViewLH(Engine.sceneCamScale, 1, 1, 1000);
            viewMatrx3D.appendScale(1, cam.cavanRect.width / cam.cavanRect.height, 1);
            return viewMatrx3D;
        };
        TooMathHitModel.testHitModel = function (display3D, scene, mouseV2) {
            if (!display3D || !display3D.objData) {
                return 0;
            }
            var objData = display3D.objData;
            var clik3dVect = TooMathHitModel.getCamFontDistent(scene, mouseV2, 100); //鼠标前面的3D坐标
            var mat = scene.cam3D.cameraMatrix.clone();
            var viewMatrx3D = scene.viewMatrx3D.clone();
            mat.append(viewMatrx3D);
            for (var i = 0; i < objData.indexs.length / 3; i++) {
                var a = objData.indexs[i * 3 + 0];
                var b = objData.indexs[i * 3 + 1];
                var c = objData.indexs[i * 3 + 2];
                var A = new Vector3D(objData.vertices[a * 3 + 0], objData.vertices[a * 3 + 1], objData.vertices[a * 3 + 2]);
                var B = new Vector3D(objData.vertices[b * 3 + 0], objData.vertices[b * 3 + 1], objData.vertices[b * 3 + 2]);
                var C = new Vector3D(objData.vertices[c * 3 + 0], objData.vertices[c * 3 + 1], objData.vertices[c * 3 + 2]);
                A = display3D.posMatrix.transformVector(A);
                B = display3D.posMatrix.transformVector(B);
                C = display3D.posMatrix.transformVector(C);
                if (Vector3D.distance(A, B) == 0 || Vector3D.distance(A, C) == 0 || Vector3D.distance(B, C) == 0) {
                    console.log("有为零的点");
                    continue;
                }
                TestTriangle.baseTri.p1 = this.math3DWorldtoDisplay2DPos(A, mat, scene.cam3D.cavanRect);
                TestTriangle.baseTri.p2 = this.math3DWorldtoDisplay2DPos(B, mat, scene.cam3D.cavanRect);
                TestTriangle.baseTri.p3 = this.math3DWorldtoDisplay2DPos(C, mat, scene.cam3D.cavanRect);
                if (TestTriangle.baseTri.checkPointIn(mouseV2)) {
                    var camPos = new Vector3D(scene.cam3D.x, scene.cam3D.y, scene.cam3D.z);
                    var hitPos = Pan3d.MathUtil.getLinePlaneInterectPointByTri(camPos, clik3dVect, [A, B, C]);
                    A = scene.cam3D.cameraMatrix.transformVector(A);
                    B = scene.cam3D.cameraMatrix.transformVector(B);
                    C = scene.cam3D.cameraMatrix.transformVector(C);
                    if (A.z < 0 || B.z < 0 || C.z < 0) {
                        continue;
                    }
                    hitPos = scene.cam3D.cameraMatrix.transformVector(hitPos);
                    var deph = hitPos.z;
                    if (deph > 0) {
                        return deph;
                    }
                }
            }
            return 0;
        };
        //获取镜头前指定距离3D坐标点
        TooMathHitModel.getCamFontDistent = function (scene, mouseV2, $depht) {
            var mat = scene.cam3D.cameraMatrix.clone();
            var viewMatrx3D = scene.viewMatrx3D.clone();
            mat.append(viewMatrx3D);
            var v3d = this.mathDisplay2Dto3DWorldPos(mouseV2, scene);
            var camv3d = new Vector3D(scene.cam3D.x, scene.cam3D.y, scene.cam3D.z);
            var nrmV3d = v3d.subtract(camv3d);
            nrmV3d.normalize();
            nrmV3d.scaleBy($depht);
            camv3d = camv3d.add(nrmV3d);
            return camv3d;
        };
        TooMathHitModel.math3DWorldtoDisplay2DPos = function ($pos, mat, rect) {
            var p = mat.transformVector($pos);
            var b = new Vector2D;
            b.x = ((p.x / p.w) + 1) * (rect.width / 2);
            b.y = ((-p.y / p.w) + 1) * (rect.height / 2);
            return b;
        };
        TooMathHitModel.mathDisplay2Dto3DWorldPos = function ($point, scene) {
            var cameraMatrixInvert = scene.cam3D.cameraMatrix.clone();
            var viewMatrx3DInvert = scene.viewMatrx3D.clone();
            cameraMatrixInvert.invert();
            viewMatrx3DInvert.invert();
            var a = new Vector3D();
            a.x = $point.x;
            a.y = $point.y;
            a.x = a.x * 2 / scene.cam3D.cavanRect.width - 1;
            a.y = 1 - a.y * 2 / scene.cam3D.cavanRect.height;
            a.w = 1;
            a.x = a.x * a.w;
            a.y = a.y * a.w;
            a = viewMatrx3DInvert.transformVector(a);
            a.z = 1;
            a = cameraMatrixInvert.transformVector(a);
            return a;
        };
        return TooMathHitModel;
    }());
    xyz.TooMathHitModel = TooMathHitModel;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooMathHitModel.js.map
var xyz;
(function (xyz) {
    var TooMathMoveUint = /** @class */ (function () {
        function TooMathMoveUint() {
        }
        TooMathMoveUint.MOVE_NULL = 0;
        TooMathMoveUint.MOVE_XYZ = 1;
        TooMathMoveUint.MOVE_SCALE = 2;
        TooMathMoveUint.MOVE_ROUTATION = 3;
        return TooMathMoveUint;
    }());
    xyz.TooMathMoveUint = TooMathMoveUint;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooMathMoveUint.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Object3D = Pan3d.Object3D;
    var TooObjectHitBox = /** @class */ (function (_super) {
        __extends(TooObjectHitBox, _super);
        function TooObjectHitBox($x, $y, $z) {
            if ($x === void 0) { $x = 0; }
            if ($y === void 0) { $y = 0; }
            if ($z === void 0) { $z = 0; }
            var _this = _super.call(this, $x, $y, $z) || this;
            _this.beginx = -10;
            _this.beginy = -10;
            _this.beginz = -10;
            _this.endx = 10;
            _this.endy = 10;
            _this.endz = 10;
            return _this;
        }
        return TooObjectHitBox;
    }(Object3D));
    xyz.TooObjectHitBox = TooObjectHitBox;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooObjectHitBox.js.map
var xyz;
(function (xyz) {
    var TooXyzRotationMath = /** @class */ (function () {
        function TooXyzRotationMath() {
        }
        return TooXyzRotationMath;
    }());
    xyz.TooXyzRotationMath = TooXyzRotationMath;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooXyzRotationMath.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Display3D = Pan3d.Display3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Scene_data = Pan3d.Scene_data;
    var Vector3D = Pan3d.Vector3D;
    var LineDisplayShader = Pan3d.LineDisplayShader;
    var TooLineDisplaySprite = /** @class */ (function (_super) {
        __extends(TooLineDisplaySprite, _super);
        function TooLineDisplaySprite() {
            var _this = _super.call(this) || this;
            _this.baseColor = new Vector3D(1, 0, 1, 1);
            _this.objData = new ObjData;
            _this.shader = ProgrmaManager.getInstance().getProgram(LineDisplayShader.LineShader);
            _this.program = _this.shader.program;
            _this.makeLineMode(new Vector3D(0, 0, 0), new Vector3D(30, 0, 0), new Vector3D(1, 0, 1));
            _this.upToGpu();
            return _this;
        }
        TooLineDisplaySprite.prototype.makeLineMode = function (a, b, $color) {
            if ($color === void 0) { $color = null; }
            if (!this.lineVecPos || !this.lineIndex) {
                this.clear();
            }
            if ($color) {
                this.baseColor = $color;
            }
            this.lineVecPos.push(a.x, a.y, a.z);
            this.lineVecPos.push(b.x, b.y, b.z);
            this.lineColor.push(this.baseColor.x, this.baseColor.y, this.baseColor.z);
            this.lineColor.push(this.baseColor.x, this.baseColor.y, this.baseColor.z);
            this.lineIndex.push(this.lineIndex.length + 0, this.lineIndex.length + 1);
        };
        TooLineDisplaySprite.prototype.clear = function () {
            this.lineVecPos = new Array;
            this.lineIndex = new Array;
            this.lineColor = new Array;
            if (this.objData.indexBuffer) {
                this.objData.indexBuffer = null;
            }
        };
        TooLineDisplaySprite.prototype.upToGpu = function () {
            if (this.lineIndex.length) {
                //console.log("A星长度", this.lineIndex.length)
                this.objData.treNum = this.lineIndex.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.lineVecPos);
                this.objData.normalsBuffer = Scene_data.context3D.uploadBuff3D(this.lineColor);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.lineIndex);
            }
        };
        TooLineDisplaySprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 3, this.objData.normalsBuffer);
                Scene_data.context3D.drawLine(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return TooLineDisplaySprite;
    }(Display3D));
    xyz.TooLineDisplaySprite = TooLineDisplaySprite;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooLineDisplaySprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Shader3D = Pan3d.Shader3D;
    var Display3D = Pan3d.Display3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Scene_data = Pan3d.Scene_data;
    var TooBoxDisplay3DShader = /** @class */ (function (_super) {
        __extends(TooBoxDisplay3DShader, _super);
        function TooBoxDisplay3DShader() {
            return _super.call(this) || this;
        }
        TooBoxDisplay3DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
        };
        TooBoxDisplay3DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "uniform vec4 baseColorVect4;" +
                "varying vec4 colorv4;\n" +
                "void main(void)" +
                "{" +
                "   colorv4 = baseColorVect4 ;" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TooBoxDisplay3DShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "varying vec4 colorv4;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor =colorv4;\n" +
                "}";
            return $str;
        };
        TooBoxDisplay3DShader.TooBoxDisplay3DShader = "TooBoxDisplay3DShader";
        return TooBoxDisplay3DShader;
    }(Shader3D));
    xyz.TooBoxDisplay3DShader = TooBoxDisplay3DShader;
    var TooBoxDisplay3DSprite = /** @class */ (function (_super) {
        __extends(TooBoxDisplay3DSprite, _super);
        function TooBoxDisplay3DSprite() {
            var _this = _super.call(this) || this;
            _this.initData();
            _this.colorVect = new Vector3D(1, 1, 1, 1);
            return _this;
        }
        TooBoxDisplay3DSprite.prototype.initData = function () {
            ProgrmaManager.getInstance().registe(TooBoxDisplay3DShader.TooBoxDisplay3DShader, new TooBoxDisplay3DShader);
            this.shader = ProgrmaManager.getInstance().getProgram(TooBoxDisplay3DShader.TooBoxDisplay3DShader);
            this.program = this.shader.program;
            this.objData = new ObjData;
            this.objData = this.makeBoxTampData(0.1);
            this.upToGpu();
        };
        TooBoxDisplay3DSprite.prototype.makeBoxTampData = function (scale) {
            if (scale === void 0) { scale = 1; }
            var tempObj = new ObjData;
            var Vitem = new Array();
            var bx = -10 * scale;
            var by = -10 * scale;
            var bz = -10 * scale;
            var ex = 10 * scale;
            var ey = 10 * scale;
            var ez = 10 * scale;
            //手工写入一个盒子的模型
            Vitem.push(new Vector3D(bx, by, ez));
            Vitem.push(new Vector3D(bx, by, bz));
            Vitem.push(new Vector3D(ex, by, bz));
            Vitem.push(new Vector3D(ex, by, ez));
            Vitem.push(new Vector3D(bx, ey, ez));
            Vitem.push(new Vector3D(bx, ey, bz));
            Vitem.push(new Vector3D(ex, ey, bz));
            Vitem.push(new Vector3D(ex, ey, ez));
            //不考虑是否是正面
            var Iitem = new Array();
            Iitem.push(0, 1, 2);
            Iitem.push(0, 2, 3);
            Iitem.push(4, 6, 5);
            Iitem.push(4, 7, 6);
            Iitem.push(5, 2, 1);
            Iitem.push(5, 6, 2);
            Iitem.push(6, 3, 2);
            Iitem.push(6, 7, 3);
            Iitem.push(4, 1, 0);
            Iitem.push(4, 5, 1);
            Iitem.push(4, 0, 3);
            Iitem.push(4, 3, 7);
            tempObj.vertices = new Array;
            tempObj.indexs = new Array;
            for (var i = 0; i < Iitem.length; i++) {
                var P = Vitem[Iitem[i]];
                tempObj.vertices.push(P.x, P.y, P.z);
                tempObj.indexs.push(i);
            }
            return tempObj;
        };
        TooBoxDisplay3DSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        TooBoxDisplay3DSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Scene_data.context3D.cullFaceBack(false);
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVc4fv(this.shader, "baseColorVect4", [this.colorVect.x, this.colorVect.y, this.colorVect.z, this.colorVect.w]);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return TooBoxDisplay3DSprite;
    }(Display3D));
    xyz.TooBoxDisplay3DSprite = TooBoxDisplay3DSprite;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooBoxDisplay3DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Shader3D = Pan3d.Shader3D;
    var Display3D = Pan3d.Display3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TooJianTouDisplay3DShader = /** @class */ (function (_super) {
        __extends(TooJianTouDisplay3DShader, _super);
        function TooJianTouDisplay3DShader() {
            return _super.call(this) || this;
        }
        TooJianTouDisplay3DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
        };
        TooJianTouDisplay3DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "uniform vec4 baseColorVect4;" +
                "varying vec4 colorv4;\n" +
                "void main(void)" +
                "{" +
                "   colorv4 = baseColorVect4 ;" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TooJianTouDisplay3DShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "varying vec4 colorv4;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor =colorv4;\n" +
                "}";
            return $str;
        };
        TooJianTouDisplay3DShader.TooJianTouDisplay3DShader = "TooJianTouDisplay3DShader";
        return TooJianTouDisplay3DShader;
    }(Shader3D));
    xyz.TooJianTouDisplay3DShader = TooJianTouDisplay3DShader;
    var TooJianTouDisplay3DSprite = /** @class */ (function (_super) {
        __extends(TooJianTouDisplay3DSprite, _super);
        function TooJianTouDisplay3DSprite() {
            var _this = _super.call(this) || this;
            _this.initData();
            _this.colorVect = new Vector3D(1, 1, 1, 1);
            return _this;
        }
        TooJianTouDisplay3DSprite.prototype.initData = function () {
            ProgrmaManager.getInstance().registe(TooJianTouDisplay3DShader.TooJianTouDisplay3DShader, new TooJianTouDisplay3DShader);
            this.shader = ProgrmaManager.getInstance().getProgram(TooJianTouDisplay3DShader.TooJianTouDisplay3DShader);
            this.program = this.shader.program;
            this.objData = new ObjData;
            var numLen = 0.2;
            var $num50 = 2 * (numLen) * 2;
            var $wSize = 5 * (numLen) * 2;
            this.makeObjData(this.objData, new Vector3D(+$wSize, 0, 0), new Vector3D(-$wSize, $num50, 0), Vector3D.X_AXIS, 12);
            this.upToGpu();
        };
        TooJianTouDisplay3DSprite.prototype.makeObjData = function ($objData, A, B, $axis, $colorId) {
            var $m = new Matrix3D;
            var $p0;
            var $p1;
            var $num;
            for (var i = 0; i < 359; i++) {
                $m.identity();
                $m.appendRotation(i, $axis);
                $p0 = $m.transformVector(A);
                $p1 = $m.transformVector(B);
                $objData.vertices.push($p0.x, $p0.y, $p0.z);
                $objData.vertices.push($p1.x, $p1.y, $p1.z);
                $objData.uvs.push($colorId, $colorId);
                $objData.uvs.push($colorId, $colorId);
                if (i != 0) {
                    $num = i - 1;
                    $objData.indexs.push($num * 2 + 2, $num * 2 + 1, $num * 2 + 3);
                }
            }
        };
        TooJianTouDisplay3DSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        TooJianTouDisplay3DSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVc4fv(this.shader, "baseColorVect4", [this.colorVect.x, this.colorVect.y, this.colorVect.z, this.colorVect.w]);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return TooJianTouDisplay3DSprite;
    }(Display3D));
    xyz.TooJianTouDisplay3DSprite = TooJianTouDisplay3DSprite;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooJianTouDisplay3DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var cctv;
(function (cctv) {
    var Shader3D = Pan3d.Shader3D;
    var Display3D = Pan3d.Display3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TooJianTouDisplay3DShader = /** @class */ (function (_super) {
        __extends(TooJianTouDisplay3DShader, _super);
        function TooJianTouDisplay3DShader() {
            return _super.call(this) || this;
        }
        TooJianTouDisplay3DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
        };
        TooJianTouDisplay3DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "uniform vec4 baseColorVect4;" +
                "varying vec4 colorv4;\n" +
                "void main(void)" +
                "{" +
                "   colorv4 = baseColorVect4 ;" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TooJianTouDisplay3DShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "varying vec4 colorv4;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor =colorv4;\n" +
                "}";
            return $str;
        };
        TooJianTouDisplay3DShader.TooJianTouDisplay3DShader = "TooJianTouDisplay3DShader";
        return TooJianTouDisplay3DShader;
    }(Shader3D));
    cctv.TooJianTouDisplay3DShader = TooJianTouDisplay3DShader;
    var TooRotationDisplay3DSprite = /** @class */ (function (_super) {
        __extends(TooRotationDisplay3DSprite, _super);
        function TooRotationDisplay3DSprite() {
            var _this = _super.call(this) || this;
            _this.initData();
            _this.colorVect = new Vector3D(1, 1, 1, 1);
            return _this;
        }
        TooRotationDisplay3DSprite.prototype.initData = function () {
            ProgrmaManager.getInstance().registe(TooJianTouDisplay3DShader.TooJianTouDisplay3DShader, new TooJianTouDisplay3DShader);
            this.shader = ProgrmaManager.getInstance().getProgram(TooJianTouDisplay3DShader.TooJianTouDisplay3DShader);
            this.program = this.shader.program;
            this.objData = new ObjData;
            var numLen = 0.2;
            var $num50 = 2 * (numLen) * 2;
            var $wSize = 5 * (numLen) * 2;
            this.objData = this.mathRoundTri(2);
            this.upToGpu();
        };
        TooRotationDisplay3DSprite.prototype.mathRoundTri = function ($scale) {
            if ($scale === void 0) { $scale = 1; }
            var $objData = new ObjData;
            $objData.vertices = [];
            $objData.uvs = [];
            $objData.indexs = [];
            var $num50 = 10;
            var _disNum360 = 360;
            var $wSize = 1 * ($num50 / 50) * $scale;
            var A = new Vector3D(+$wSize, $num50, 0);
            var B = new Vector3D(-$wSize, $num50, 0);
            var $m = new Matrix3D;
            var $p0;
            var $p1;
            var $num;
            var $indexLen = 0;
            for (var i = 0; i < _disNum360; i++) {
                $m.identity();
                $m.appendRotation(i, Vector3D.X_AXIS);
                $p0 = $m.transformVector(A);
                $p1 = $m.transformVector(B);
                $objData.vertices.push($p0.x, $p0.y, $p0.z);
                $objData.vertices.push($p1.x, $p1.y, $p1.z);
                $objData.uvs.push(0, 0);
                $objData.uvs.push(0, 0);
                if (i != 0) {
                    $num = i - 1;
                    $objData.indexs.push($indexLen + $num * 2 + 0, $indexLen + $num * 2 + 1, $indexLen + $num * 2 + 2);
                    $objData.indexs.push($indexLen + $num * 2 + 2, $indexLen + $num * 2 + 1, $indexLen + $num * 2 + 3);
                }
            }
            return $objData;
        };
        TooRotationDisplay3DSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        TooRotationDisplay3DSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVc4fv(this.shader, "baseColorVect4", [this.colorVect.x, this.colorVect.y, this.colorVect.z, this.colorVect.w]);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return TooRotationDisplay3DSprite;
    }(Display3D));
    cctv.TooRotationDisplay3DSprite = TooRotationDisplay3DSprite;
})(cctv || (cctv = {}));
//# sourceMappingURL=TooRotationDisplay3DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Shader3D = Pan3d.Shader3D;
    var Display3D = Pan3d.Display3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Scene_data = Pan3d.Scene_data;
    var TooLineTri3DShader = /** @class */ (function (_super) {
        __extends(TooLineTri3DShader, _super);
        function TooLineTri3DShader() {
            return _super.call(this) || this;
        }
        TooLineTri3DShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "nrmPosition");
        };
        TooLineTri3DShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec3 nrmPosition;" +
                "uniform mat4 viewMatrix3D;" +
                "uniform mat4 camMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec3 v3_nrm;" +
                "void main(void)" +
                "{" +
                "   v3_nrm = nrmPosition;" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = camMatrix3D * vt0;" +
                "   vt0 = viewMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TooLineTri3DShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "varying vec3 v3_nrm;" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor =vec4(v3_nrm,1.0);\n" +
                "}";
            return $str;
        };
        TooLineTri3DShader.TooLineTri3DShader = "TooLineTri3DShader";
        return TooLineTri3DShader;
    }(Shader3D));
    xyz.TooLineTri3DShader = TooLineTri3DShader;
    var TooLineTri3DSprite = /** @class */ (function (_super) {
        __extends(TooLineTri3DSprite, _super);
        function TooLineTri3DSprite() {
            var _this = _super.call(this) || this;
            _this.initData();
            _this.updateMatrix;
            return _this;
        }
        TooLineTri3DSprite.prototype.initData = function () {
            ProgrmaManager.getInstance().registe(TooLineTri3DShader.TooLineTri3DShader, new TooLineTri3DShader);
            this.shader = ProgrmaManager.getInstance().getProgram(TooLineTri3DShader.TooLineTri3DShader);
            this.program = this.shader.program;
            this.objData = new ObjData;
            var hitBox = new xyz.TooObjectHitBox(0, 0, 0);
            var size = 0.1;
            hitBox.beginx = -0;
            hitBox.beginy = -size;
            hitBox.beginz = -size;
            hitBox.endx = 20;
            hitBox.endy = size;
            hitBox.endz = size;
            this.objData = this.makeBoxTampData(hitBox, 1);
            //this.makeBoxObjdata(new Vector3D(1,1,1))
            this.upToGpu();
        };
        TooLineTri3DSprite.prototype.makeBoxObjdata = function (color) {
            this.objData.vertices = new Array();
            this.objData.vertices.push(0, 0, 0);
            this.objData.vertices.push(100, 0, 0);
            this.objData.vertices.push(100, 0, 100);
            this.objData.normals = new Array();
            this.objData.normals.push(color.x, color.y, color.z);
            this.objData.normals.push(color.x, color.y, color.z);
            this.objData.normals.push(color.x, color.y, color.z);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 1, 2);
        };
        TooLineTri3DSprite.prototype.makeBoxTampData = function (hitbox, scale) {
            if (scale === void 0) { scale = 1; }
            var tempObj = new ObjData;
            var Vitem = new Array();
            var w = Math.max(Math.abs(hitbox.beginx), Math.abs(hitbox.endx)) * scale;
            var h = Math.max(Math.abs(hitbox.beginz), Math.abs(hitbox.endz)) * scale;
            var bx = -10;
            var by = -10;
            var bz = -10;
            var ex = 10;
            var ey = 10;
            var ez = 10;
            bx = hitbox.beginx;
            ex = hitbox.endx;
            by = hitbox.beginy;
            ey = hitbox.endy;
            bz = hitbox.beginz;
            ez = hitbox.endz;
            //手工写入一个盒子的模型
            Vitem.push(new Vector3D(bx, by, ez));
            Vitem.push(new Vector3D(bx, by, bz));
            Vitem.push(new Vector3D(ex, by, bz));
            Vitem.push(new Vector3D(ex, by, ez));
            Vitem.push(new Vector3D(bx, ey, ez));
            Vitem.push(new Vector3D(bx, ey, bz));
            Vitem.push(new Vector3D(ex, ey, bz));
            Vitem.push(new Vector3D(ex, ey, ez));
            //不考虑是否是正面
            var Iitem = new Array();
            Iitem.push(0, 1, 2);
            Iitem.push(0, 2, 3);
            Iitem.push(4, 5, 6);
            Iitem.push(4, 6, 7);
            Iitem.push(5, 1, 2);
            Iitem.push(5, 2, 6);
            Iitem.push(6, 2, 3);
            Iitem.push(6, 3, 7);
            Iitem.push(4, 0, 1);
            Iitem.push(4, 1, 5);
            Iitem.push(4, 3, 0);
            Iitem.push(4, 7, 3);
            tempObj.vertices = new Array;
            tempObj.normals = new Array;
            tempObj.indexs = new Array;
            for (var i = 0; i < Iitem.length; i++) {
                var P = Vitem[Iitem[i]];
                tempObj.vertices.push(P.x, P.y, P.z);
                tempObj.normals.push(1, 1, 0);
                tempObj.indexs.push(i);
            }
            return tempObj;
        };
        TooLineTri3DSprite.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.normalsBuffer = Scene_data.context3D.uploadBuff3D(this.objData.normals);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        TooLineTri3DSprite.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer) {
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", Scene_data.viewMatrx3D.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "camMatrix3D", Scene_data.cam3D.cameraMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 3, this.objData.normalsBuffer);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return TooLineTri3DSprite;
    }(Display3D));
    xyz.TooLineTri3DSprite = TooLineTri3DSprite;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooLineTri3DSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Display3D = Pan3d.Display3D;
    var TooBaseModelLevel = /** @class */ (function (_super) {
        __extends(TooBaseModelLevel, _super);
        function TooBaseModelLevel(value) {
            var _this = _super.call(this) || this;
            _this.parent = value;
            return _this;
        }
        TooBaseModelLevel.prototype.isHit = function (mouseVect2d) {
        };
        TooBaseModelLevel.prototype.onMouseDown = function (mouseVect2d) {
        };
        TooBaseModelLevel.prototype.onMouseUp = function (mouseVect2d) {
        };
        TooBaseModelLevel.prototype.onMouseMove = function (mouseVect2d) {
        };
        TooBaseModelLevel.prototype.testHitTemp = function (display3D, v2d, vec) {
            var hit = xyz.TooMathHitModel.testHitModel(display3D, this._scene, v2d);
            display3D.colorVect = hit ? vec[0] : vec[1];
        };
        TooBaseModelLevel.prototype.update = function () {
            this.posMatrix.identity();
            var dis = this.parent.lookLenToFocu / 100;
            this.posMatrix.appendScale(dis, dis, dis);
        };
        return TooBaseModelLevel;
    }(Display3D));
    xyz.TooBaseModelLevel = TooBaseModelLevel;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooBaseModelLevel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TooMoveLevel = /** @class */ (function (_super) {
        __extends(TooMoveLevel, _super);
        function TooMoveLevel(value) {
            var _this = _super.call(this, value) || this;
            _this._boxA = new xyz.TooJianTouDisplay3DSprite();
            _this._boxB = new xyz.TooJianTouDisplay3DSprite();
            _this._boxC = new xyz.TooJianTouDisplay3DSprite();
            _this._lineA = new xyz.TooLineTri3DSprite();
            _this._lineB = new xyz.TooLineTri3DSprite();
            _this._lineC = new xyz.TooLineTri3DSprite();
            _this._boxA.colorVect = new Vector3D(1, 0, 0);
            _this._boxB.colorVect = new Vector3D(0, 1, 0);
            _this._boxC.colorVect = new Vector3D(0, 0, 1);
            return _this;
        }
        TooMoveLevel.prototype.isHit = function (mouseVect2d) {
            this.testHitTemp(this._boxA, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(1, 0, 0)]);
            this.testHitTemp(this._boxB, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 1, 0)]);
            this.testHitTemp(this._boxC, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 0, 1)]);
        };
        TooMoveLevel.prototype.onMouseDown = function (mouseVect2d) {
            if (xyz.TooMathHitModel.testHitModel(this._boxA, this._scene, mouseVect2d)) {
                this.selectId = 1;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._boxB, this._scene, mouseVect2d)) {
                this.selectId = 2;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._boxC, this._scene, mouseVect2d)) {
                this.selectId = 3;
            }
            if (this.selectId > 0) {
                var A = new Vector3D(0, 0, 0);
                var B;
                var C;
                switch (this.selectId) {
                    case 1:
                        B = new Vector3D(100, 0, 0);
                        C = new Vector3D(0, 0, 100);
                        break;
                    case 2:
                        B = new Vector3D(100, 0, 0);
                        C = new Vector3D(0, 100, 0);
                        break;
                    case 3:
                        B = new Vector3D(0, 0, 100);
                        C = new Vector3D(0, 100, 0);
                        break;
                    default:
                        break;
                }
                A = this.parent.xyzMoveData.modeMatrx3D.transformVector(A);
                B = this.parent.xyzMoveData.modeMatrx3D.transformVector(B);
                C = this.parent.xyzMoveData.modeMatrx3D.transformVector(C);
                this.pointItem = [A, B, C];
                this.lastMatrix3d = this.parent.xyzMoveData.modeMatrx3D.clone();
                this.lastMousePosV3d = this.getMouseHitPanelPos(mouseVect2d);
            }
        };
        TooMoveLevel.prototype.onMouseUp = function (mouseVect2d) {
            this.lastMousePosV3d = null;
            this.selectId = 0;
        };
        TooMoveLevel.prototype.getMouseHitPanelPos = function (mouseVect2d) {
            var clik3dVect = xyz.TooMathHitModel.getCamFontDistent(this._scene, mouseVect2d, 100); //鼠标前面的3D坐标
            var cam3d = new Vector3D(this._scene.cam3D.x, this._scene.cam3D.y, this._scene.cam3D.z);
            var pos = Pan3d.MathUtil.getLinePlaneInterectPointByTri(cam3d, clik3dVect, this.pointItem);
            var $m = this.lastMatrix3d.clone();
            $m.invert();
            pos = $m.transformVector(pos);
            return pos;
        };
        TooMoveLevel.prototype.onMouseMove = function (mouseVect2d) {
            var isTrue; //是否有执行
            if (this.selectId > 0) {
                if (this.lastMousePosV3d) {
                    var pos = this.getMouseHitPanelPos(mouseVect2d);
                    var addPos = new Vector3D();
                    switch (this.selectId) {
                        case 1:
                            addPos.x = pos.x - this.lastMousePosV3d.x;
                            isTrue = true;
                            break;
                        case 2:
                            addPos.y = pos.y - this.lastMousePosV3d.y;
                            isTrue = true;
                            break;
                        case 3:
                            addPos.z = pos.z - this.lastMousePosV3d.z;
                            isTrue = true;
                            break;
                        default:
                            isTrue = false;
                            break;
                    }
                    var $m = this.lastMatrix3d.clone();
                    $m.prependTranslation(addPos.x, addPos.y, addPos.z);
                    var pos = $m.position;
                    this.parent.xyzMoveData.x = pos.x;
                    this.parent.xyzMoveData.y = pos.y;
                    this.parent.xyzMoveData.z = pos.z;
                }
            }
            return isTrue;
        };
        TooMoveLevel.prototype.getMouseHitPos = function (mouseVect2d) {
            var pos = xyz.TooMathHitModel.getCamFontDistent(this._scene, mouseVect2d, 100);
            var A = new Vector3D(0, 0, 0);
            var B;
            var C;
            switch (this.selectId) {
                case 1:
                    B = new Vector3D(1, 0, 0);
                    C = new Vector3D(0, 0, 1);
                    break;
                case 2:
                    B = new Vector3D(0, 1, 0);
                    C = new Vector3D(0, 0, 1);
                    break;
                case 3:
                    B = new Vector3D(0, 0, 1);
                    C = new Vector3D(1, 0, 0);
                    break;
                default:
                    break;
            }
            return Vector3D.getPointPedalInPlane(pos, A, B, C);
        };
        TooMoveLevel.prototype.update = function () {
            _super.prototype.update.call(this);
            var line50 = 20;
            ;
            if (this.parent.xyzMoveData) {
                this.posMatrix.identity();
                var perentM = this.parent.xyzMoveData.modeMatrx3D.clone();
                perentM = new Matrix3D;
                perentM.appendRotation(this.parent.xyzMoveData.rotationX, Vector3D.X_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationY, Vector3D.Y_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationZ, Vector3D.Z_AXIS);
                perentM.appendTranslation(this.parent.xyzMoveData.x, this.parent.xyzMoveData.y, this.parent.xyzMoveData.z);
                var dis = Vector3D.distance(perentM.position, this._scene.cam3D);
                dis = this._scene.cam3D.cameraMatrix.transformVector(perentM.position).z;
                perentM.prependScale(dis / 80, dis / 80, dis / 80);
                this.posMatrix.append(perentM);
            }
            // this.posMatrix.identityScale()
            //this.modelItem[i].x = M.position.x;
            // this.modelItem[i].y = M.position.y;
            // this.modelItem[i].z = M.position.z;
            // var ro: Vector3D = M.toEulerAngles();
            // this.modelItem[i].rotationX = ro.x * 180 / Math.PI;
            // this.modelItem[i].rotationY = ro.y * 180 / Math.PI;
            // this.modelItem[i].rotationZ = ro.z * 180 / Math.PI;
            this._boxA.posMatrix = this.posMatrix.clone();
            this._boxA.posMatrix.prependTranslation(line50, 0, 0);
            this._boxB.posMatrix = this.posMatrix.clone();
            this._boxB.posMatrix.prependTranslation(0, line50, 0);
            this._boxB.posMatrix.prependRotation(90, Vector3D.Z_AXIS);
            ;
            this._boxC.posMatrix = this.posMatrix.clone();
            this._boxC.posMatrix.prependTranslation(0, 0, line50);
            this._boxC.posMatrix.prependRotation(-90, Vector3D.Y_AXIS);
            this._lineA.posMatrix = this.posMatrix.clone();
            this._lineB.posMatrix = this.posMatrix.clone();
            this._lineB.posMatrix.prependRotation(90, Vector3D.Z_AXIS);
            this._lineC.posMatrix = this.posMatrix.clone();
            this._lineC.posMatrix.prependRotation(-90, Vector3D.Y_AXIS);
            Scene_data.context3D.cullFaceBack(false);
            Scene_data.context3D.setWriteDepth(true);
            Scene_data.context3D.setDepthTest(true);
            this._boxA.update();
            this._boxB.update();
            this._boxC.update();
            this._lineA.update();
            this._lineB.update();
            this._lineC.update();
        };
        return TooMoveLevel;
    }(xyz.TooBaseModelLevel));
    xyz.TooMoveLevel = TooMoveLevel;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooMoveLevel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TooRotationDisplay3DSprite = cctv.TooRotationDisplay3DSprite;
    var TooRotationLevel = /** @class */ (function (_super) {
        __extends(TooRotationLevel, _super);
        function TooRotationLevel(value) {
            var _this = _super.call(this, value) || this;
            _this._roundA = new TooRotationDisplay3DSprite();
            _this._roundB = new TooRotationDisplay3DSprite();
            _this._roundC = new TooRotationDisplay3DSprite();
            _this._roundA.colorVect = new Vector3D(1, 0, 0);
            _this._roundB.colorVect = new Vector3D(0, 1, 0);
            _this._roundC.colorVect = new Vector3D(0, 0, 1);
            return _this;
        }
        TooRotationLevel.prototype.isHit = function (mouseVect2d) {
            this.testHitTemp(this._roundA, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(1, 0, 0)]);
            this.testHitTemp(this._roundB, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 1, 0)]);
            this.testHitTemp(this._roundC, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 0, 1)]);
        };
        TooRotationLevel.prototype.onMouseDown = function (mouseVect2d) {
            if (xyz.TooMathHitModel.testHitModel(this._roundA, this._scene, mouseVect2d)) {
                this.selectId = 1;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._roundB, this._scene, mouseVect2d)) {
                this.selectId = 2;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._roundC, this._scene, mouseVect2d)) {
                this.selectId = 3;
            }
            if (this.selectId) {
                var a, b, c;
                switch (this.selectId) {
                    case 1:
                        a = new Vector3D(0, -100, +50);
                        b = new Vector3D(0, -100, -50);
                        c = new Vector3D(0, 100, +50);
                        break;
                    case 2:
                        a = new Vector3D(-100, 0, +50);
                        b = new Vector3D(-100, 0, -50);
                        c = new Vector3D(+100, 0, +50);
                        break;
                    case 3:
                        a = new Vector3D(-100, +50, 0);
                        b = new Vector3D(-100, -50, 0);
                        c = new Vector3D(+100, +50, 0);
                        break;
                    default:
                        break;
                }
                console.log("旋转轴", this.selectId);
                this.showYaix(a, b, c);
                this.lastDis = this.testInfo(this._linePosinA, this._linePosinB, mouseVect2d);
            }
        };
        TooRotationLevel.prototype.showYaix = function (a, b, c) {
            var scene = this._scene;
            var mat = scene.cam3D.cameraMatrix.clone();
            var viewMatrx3D = scene.viewMatrx3D.clone();
            mat.append(viewMatrx3D);
            var _xyzMoveData = this.parent.xyzMoveData;
            a = _xyzMoveData.modeMatrx3D.transformVector(a);
            b = _xyzMoveData.modeMatrx3D.transformVector(b);
            c = _xyzMoveData.modeMatrx3D.transformVector(c);
            var $triNrm = Vector3D.calTriNormal(a, b, c, true); //获取平面法线
            var centen2d = xyz.TooMathHitModel.math3DWorldtoDisplay2DPos(_xyzMoveData.modeMatrx3D.position, mat, scene.cam3D.cavanRect);
            var outPos2d = xyz.TooMathHitModel.math3DWorldtoDisplay2DPos($triNrm.add(_xyzMoveData.modeMatrx3D.position), mat, scene.cam3D.cavanRect);
            this._linePosinA = centen2d;
            this._linePosinB = outPos2d;
        };
        TooRotationLevel.prototype.onMouseUp = function (mouseVect2d) {
            this.selectId = 0;
            this.lastDis = null;
        };
        TooRotationLevel.prototype.testInfo = function (A, B, C) {
            var a = new Vector2D(0, 0);
            var b = new Vector2D(-1, 1);
            var c = new Vector2D(10, 10);
            a = A;
            b = B;
            c = C;
            var r = Math.atan2(b.y - a.y, b.x - a.x);
            var m = new Matrix3D();
            m.appendRotation(90 - (r * 180 / Math.PI), Vector3D.Z_AXIS);
            var d = m.transformVector(new Vector3D(c.x, c.y, 0));
            return d.x;
        };
        TooRotationLevel.prototype.onMouseMove = function (mouseVect2d) {
            var isTrue; //是否有执行
            if (this.selectId > 0) {
                var dis = this.testInfo(this._linePosinA, this._linePosinB, mouseVect2d);
                if (!isNaN(this.lastDis)) {
                    var addRotation = dis - this.lastDis;
                    var _xyzMoveData = this.parent.xyzMoveData;
                    var $m = new Matrix3D;
                    $m.appendRotation(_xyzMoveData.rotationX, Vector3D.X_AXIS);
                    $m.appendRotation(_xyzMoveData.rotationY, Vector3D.Y_AXIS);
                    $m.appendRotation(_xyzMoveData.rotationZ, Vector3D.Z_AXIS);
                    var $addM = new Matrix3D();
                    switch (this.selectId) {
                        case 1:
                            $addM.appendRotation(addRotation, Vector3D.X_AXIS);
                            break;
                        case 2:
                            $addM.appendRotation(-addRotation, Vector3D.Y_AXIS);
                            break;
                        case 3:
                            $addM.appendRotation(addRotation, Vector3D.Z_AXIS);
                            break;
                        default:
                            break;
                    }
                    $m.prepend($addM);
                    var outVec3d = $m.toEulerAngles();
                    //   console.log(outVec3d)
                    _xyzMoveData.rotationX = outVec3d.x;
                    _xyzMoveData.rotationY = outVec3d.y;
                    _xyzMoveData.rotationZ = outVec3d.z;
                    isTrue = true;
                }
                else {
                    console.log("开始");
                }
                this.lastDis = dis;
            }
            return isTrue;
        };
        TooRotationLevel.prototype.update = function () {
            _super.prototype.update.call(this);
            this.posMatrix.identity();
            if (this.parent.xyzMoveData) {
                var perentM = this.parent.xyzMoveData.modeMatrx3D.clone();
                perentM = new Matrix3D;
                perentM.appendRotation(this.parent.xyzMoveData.rotationX, Vector3D.X_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationY, Vector3D.Y_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationZ, Vector3D.Z_AXIS);
                perentM.appendTranslation(this.parent.xyzMoveData.x, this.parent.xyzMoveData.y, this.parent.xyzMoveData.z);
                var dis = Vector3D.distance(perentM.position, this._scene.cam3D);
                dis = this._scene.cam3D.cameraMatrix.transformVector(perentM.position).z;
                perentM.prependScale(dis / 80, dis / 80, dis / 80);
                this.posMatrix.append(perentM);
            }
            this._roundA.posMatrix = this.posMatrix.clone();
            this._roundB.posMatrix = this.posMatrix.clone();
            this._roundB.posMatrix.prependRotation(90, Vector3D.Z_AXIS);
            this._roundC.posMatrix = this.posMatrix.clone();
            this._roundC.posMatrix.prependRotation(-90, Vector3D.Y_AXIS);
            Scene_data.context3D.renderContext.enable(Scene_data.context3D.renderContext.CULL_FACE);
            Scene_data.context3D.renderContext.cullFace(Scene_data.context3D.renderContext.BACK);
            Scene_data.context3D.setWriteDepth(true);
            Scene_data.context3D.setDepthTest(true);
            this._roundA.update();
            this._roundB.update();
            this._roundC.update();
        };
        return TooRotationLevel;
    }(xyz.TooBaseModelLevel));
    xyz.TooRotationLevel = TooRotationLevel;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooRotationLevel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TooScaleLevel = /** @class */ (function (_super) {
        __extends(TooScaleLevel, _super);
        function TooScaleLevel(value) {
            var _this = _super.call(this, value) || this;
            _this._boxA = new xyz.TooBoxDisplay3DSprite();
            _this._boxB = new xyz.TooBoxDisplay3DSprite();
            _this._boxC = new xyz.TooBoxDisplay3DSprite();
            _this._lineA = new xyz.TooLineTri3DSprite();
            _this._lineB = new xyz.TooLineTri3DSprite();
            _this._lineC = new xyz.TooLineTri3DSprite();
            _this._boxA.colorVect = new Vector3D(1, 0, 0);
            _this._boxB.colorVect = new Vector3D(0, 1, 0);
            _this._boxC.colorVect = new Vector3D(0, 0, 1);
            return _this;
        }
        TooScaleLevel.prototype.isHit = function (mouseVect2d) {
            this.testHitTemp(this._boxA, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(1, 0, 0)]);
            this.testHitTemp(this._boxB, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 1, 0)]);
            this.testHitTemp(this._boxC, mouseVect2d, [new Vector3D(1, 1, 1), new Vector3D(0, 0, 1)]);
        };
        TooScaleLevel.prototype.onMouseDown = function (mouseVect2d) {
            if (xyz.TooMathHitModel.testHitModel(this._boxA, this._scene, mouseVect2d)) {
                this.selectId = 1;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._boxB, this._scene, mouseVect2d)) {
                this.selectId = 2;
            }
            else if (xyz.TooMathHitModel.testHitModel(this._boxC, this._scene, mouseVect2d)) {
                this.selectId = 3;
            }
            if (this.selectId > 0) {
                var A = new Vector3D(0, 0, 0);
                var B;
                var C;
                switch (this.selectId) {
                    case 1:
                        B = new Vector3D(100, 0, 0);
                        C = new Vector3D(0, 0, 100);
                        break;
                    case 2:
                        B = new Vector3D(100, 0, 0);
                        C = new Vector3D(0, 100, 0);
                        break;
                    case 3:
                        B = new Vector3D(0, 0, 100);
                        C = new Vector3D(0, 100, 0);
                        break;
                    default:
                        break;
                }
                A = this.parent.xyzMoveData.modeMatrx3D.transformVector(A);
                B = this.parent.xyzMoveData.modeMatrx3D.transformVector(B);
                C = this.parent.xyzMoveData.modeMatrx3D.transformVector(C);
                this.pointItem = [A, B, C];
                this.lastMatrix3d = this.parent.xyzMoveData.modeMatrx3D.clone();
                this.lastMousePosV3d = this.getMouseHitPanelPos(mouseVect2d);
                this.lastScaleV3d = new Vector3D(this.parent.xyzMoveData.scaleX, this.parent.xyzMoveData.scaleY, this.parent.xyzMoveData.scaleZ);
            }
        };
        TooScaleLevel.prototype.onMouseUp = function (mouseVect2d) {
            this.lastMousePosV3d = null;
            this.selectId = 0;
        };
        TooScaleLevel.prototype.getMouseHitPanelPos = function (mouseVect2d) {
            var clik3dVect = xyz.TooMathHitModel.getCamFontDistent(this._scene, mouseVect2d, 100); //鼠标前面的3D坐标
            var cam3d = new Vector3D(this._scene.cam3D.x, this._scene.cam3D.y, this._scene.cam3D.z);
            var pos = Pan3d.MathUtil.getLinePlaneInterectPointByTri(cam3d, clik3dVect, this.pointItem);
            var $m = this.lastMatrix3d.clone();
            $m.invert();
            pos = $m.transformVector(pos);
            return pos;
        };
        TooScaleLevel.prototype.onMouseMove = function (mouseVect2d) {
            var isTrue; //是否有执行
            if (this.selectId > 0) {
                if (this.lastMousePosV3d) {
                    var pos = this.getMouseHitPanelPos(mouseVect2d);
                    var addPos = new Vector3D();
                    switch (this.selectId) {
                        case 1:
                            addPos.x = pos.x - this.lastMousePosV3d.x;
                            isTrue = true;
                            break;
                        case 2:
                            addPos.y = pos.y - this.lastMousePosV3d.y;
                            isTrue = true;
                            break;
                        case 3:
                            addPos.z = pos.z - this.lastMousePosV3d.z;
                            isTrue = true;
                            break;
                        default:
                            isTrue = false;
                            break;
                    }
                    console.log(addPos);
                    this.parent.xyzMoveData.scaleX = this.lastScaleV3d.x + addPos.x / 10;
                    this.parent.xyzMoveData.scaleY = this.lastScaleV3d.y + addPos.y / 10;
                    this.parent.xyzMoveData.scaleZ = this.lastScaleV3d.z + addPos.z / 10;
                    /*
                    var $m: Matrix3D = this.lastMatrix3d.clone()
                    $m.prependTranslation(addPos.x, addPos.y, addPos.z)
                    var pos: Vector3D = $m.position
                    this.parent.xyzMoveData.x = pos.x
                    this.parent.xyzMoveData.y = pos.y
                    this.parent.xyzMoveData.z = pos.z

                    */
                }
            }
            return isTrue;
        };
        TooScaleLevel.prototype.getMouseHitPos = function (mouseVect2d) {
            var pos = xyz.TooMathHitModel.getCamFontDistent(this._scene, mouseVect2d, 100);
            var A = new Vector3D(0, 0, 0);
            var B;
            var C;
            switch (this.selectId) {
                case 1:
                    B = new Vector3D(1, 0, 0);
                    C = new Vector3D(0, 0, 1);
                    break;
                case 2:
                    B = new Vector3D(0, 1, 0);
                    C = new Vector3D(0, 0, 1);
                    break;
                case 3:
                    B = new Vector3D(0, 0, 1);
                    C = new Vector3D(1, 0, 0);
                    break;
                default:
                    break;
            }
            return Vector3D.getPointPedalInPlane(pos, A, B, C);
        };
        TooScaleLevel.prototype.update = function () {
            _super.prototype.update.call(this);
            var line50 = 20;
            ;
            if (this.parent.xyzMoveData) {
                this.posMatrix.identity();
                var perentM = this.parent.xyzMoveData.modeMatrx3D.clone();
                perentM = new Matrix3D;
                perentM.appendRotation(this.parent.xyzMoveData.rotationX, Vector3D.X_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationY, Vector3D.Y_AXIS);
                perentM.appendRotation(this.parent.xyzMoveData.rotationZ, Vector3D.Z_AXIS);
                perentM.appendTranslation(this.parent.xyzMoveData.x, this.parent.xyzMoveData.y, this.parent.xyzMoveData.z);
                var dis = Vector3D.distance(perentM.position, this._scene.cam3D);
                dis = this._scene.cam3D.cameraMatrix.transformVector(perentM.position).z;
                perentM.prependScale(dis / 80, dis / 80, dis / 80);
                this.posMatrix.append(perentM);
            }
            // this.posMatrix.identityScale()
            //this.modelItem[i].x = M.position.x;
            // this.modelItem[i].y = M.position.y;
            // this.modelItem[i].z = M.position.z;
            // var ro: Vector3D = M.toEulerAngles();
            // this.modelItem[i].rotationX = ro.x * 180 / Math.PI;
            // this.modelItem[i].rotationY = ro.y * 180 / Math.PI;
            // this.modelItem[i].rotationZ = ro.z * 180 / Math.PI;
            this._boxA.posMatrix = this.posMatrix.clone();
            this._boxA.posMatrix.prependTranslation(line50, 0, 0);
            this._boxB.posMatrix = this.posMatrix.clone();
            this._boxB.posMatrix.prependTranslation(0, line50, 0);
            this._boxB.posMatrix.prependRotation(90, Vector3D.Z_AXIS);
            ;
            this._boxC.posMatrix = this.posMatrix.clone();
            this._boxC.posMatrix.prependTranslation(0, 0, line50);
            this._boxC.posMatrix.prependRotation(-90, Vector3D.Y_AXIS);
            this._lineA.posMatrix = this.posMatrix.clone();
            this._lineB.posMatrix = this.posMatrix.clone();
            this._lineB.posMatrix.prependRotation(90, Vector3D.Z_AXIS);
            this._lineC.posMatrix = this.posMatrix.clone();
            this._lineC.posMatrix.prependRotation(-90, Vector3D.Y_AXIS);
            Scene_data.context3D.cullFaceBack(false);
            Scene_data.context3D.setWriteDepth(true);
            Scene_data.context3D.setDepthTest(true);
            this._boxA.update();
            this._boxB.update();
            this._boxC.update();
            this._lineA.update();
            this._lineB.update();
            this._lineC.update();
        };
        return TooScaleLevel;
    }(xyz.TooBaseModelLevel));
    xyz.TooScaleLevel = TooScaleLevel;
})(xyz || (xyz = {}));
//# sourceMappingURL=TooScaleLevel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var Display3D = Pan3d.Display3D;
    var Matrix3D = Pan3d.Matrix3D;
    var MoveScaleRotationLevel = /** @class */ (function (_super) {
        __extends(MoveScaleRotationLevel, _super);
        function MoveScaleRotationLevel() {
            var _this = _super.call(this) || this;
            _this._statceType = xyz.TooMathMoveUint.MOVE_NULL;
            _this._tooMoveLevel = new xyz.TooMoveLevel(_this);
            _this._tooRotationLevel = new xyz.TooRotationLevel(_this);
            _this._tooScaleLevel = new xyz.TooScaleLevel(_this);
            return _this;
        }
        MoveScaleRotationLevel.prototype.update = function () {
            var focuV3d = new Vector3D;
            if (this._xyzMoveData) {
                this._xyzMoveData.modeMatrx3D.identity();
                this._xyzMoveData.changeModelMatrix3d();
                //console.log(this._xyzMoveData.x, this._xyzMoveData.y, this._xyzMoveData.z)
                this.lookLenToFocu = Vector3D.distance(this._scene.cam3D, this._xyzMoveData);
            }
            switch (this._statceType) {
                case xyz.TooMathMoveUint.MOVE_XYZ:
                    this._tooMoveLevel.update();
                    break;
                case xyz.TooMathMoveUint.MOVE_ROUTATION:
                    this._tooRotationLevel.update();
                    break;
                case xyz.TooMathMoveUint.MOVE_SCALE:
                    this._tooScaleLevel.update();
                    break;
                default:
                    break;
            }
        };
        MoveScaleRotationLevel.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            this._tooMoveLevel._scene = this._scene;
            this._tooRotationLevel._scene = this._scene;
            this._tooScaleLevel._scene = this._scene;
        };
        MoveScaleRotationLevel.prototype.dataUpDate = function () {
        };
        Object.defineProperty(MoveScaleRotationLevel.prototype, "xyzMoveData", {
            get: function () {
                return this._xyzMoveData;
            },
            set: function (value) {
                this._xyzMoveData = value;
                if (this._xyzMoveData == null) {
                    this._statceType = xyz.TooMathMoveUint.MOVE_NULL;
                    return;
                }
                else {
                    this._statceType = xyz.TooMathMoveUint.MOVE_XYZ;
                }
                this._xyzMoveData.modeMatrx3D = new Matrix3D;
                this._xyzMoveData.changeModelMatrix3d();
            },
            enumerable: true,
            configurable: true
        });
        MoveScaleRotationLevel.prototype.onMouseMove = function ($e) {
            var mouseVect2d = new Vector2D($e.x - this._scene.cam3D.cavanRect.x, $e.y - this._scene.cam3D.cavanRect.y);
            if ($e.buttons == 0) {
                switch (this._statceType) {
                    case xyz.TooMathMoveUint.MOVE_XYZ:
                        this._tooMoveLevel.isHit(mouseVect2d);
                        break;
                    case xyz.TooMathMoveUint.MOVE_ROUTATION:
                        this._tooRotationLevel.isHit(mouseVect2d);
                        break;
                    case xyz.TooMathMoveUint.MOVE_SCALE:
                        this._tooScaleLevel.isHit(mouseVect2d);
                        break;
                    default:
                        break;
                }
            }
            else {
                if ($e.buttons == 1) {
                    var needUpData = false;
                    switch (this._statceType) {
                        case xyz.TooMathMoveUint.MOVE_XYZ:
                            needUpData = this._tooMoveLevel.onMouseMove(mouseVect2d);
                            break;
                        case xyz.TooMathMoveUint.MOVE_ROUTATION:
                            needUpData = this._tooRotationLevel.onMouseMove(mouseVect2d);
                            break;
                        case xyz.TooMathMoveUint.MOVE_SCALE:
                            needUpData = this._tooScaleLevel.onMouseMove(mouseVect2d);
                            break;
                        default:
                            break;
                    }
                    if (needUpData) {
                        this.upChange();
                    }
                }
            }
        };
        MoveScaleRotationLevel.prototype.upChange = function () {
            if (this.xyzMoveData) {
                this.xyzMoveData.upRootMatrix3DToItem();
                this.xyzMoveData.dataUpDate && this.xyzMoveData.dataUpDate();
            }
        };
        MoveScaleRotationLevel.prototype.onMouseUp = function ($e) {
            var mouseVect2d = new Vector2D($e.x - this._scene.cam3D.cavanRect.x, $e.y - this._scene.cam3D.cavanRect.y);
            switch (this._statceType) {
                case xyz.TooMathMoveUint.MOVE_XYZ:
                    this._tooMoveLevel.onMouseUp(mouseVect2d);
                    break;
                case xyz.TooMathMoveUint.MOVE_ROUTATION:
                    this._tooRotationLevel.onMouseUp(mouseVect2d);
                    break;
                case xyz.TooMathMoveUint.MOVE_SCALE:
                    this._tooScaleLevel.onMouseUp(mouseVect2d);
                    break;
                default:
                    break;
            }
        };
        MoveScaleRotationLevel.prototype.onMouseDown = function ($e) {
            if (!this._xyzMoveData) {
                return;
            }
            this._xyzMoveData.oldx = this._xyzMoveData.x;
            this._xyzMoveData.oldy = this._xyzMoveData.y;
            this._xyzMoveData.oldz = this._xyzMoveData.z;
            this._xyzMoveData.oldscale_x = this._xyzMoveData.scaleX;
            this._xyzMoveData.oldscale_y = this._xyzMoveData.scaleY;
            this._xyzMoveData.oldscale_z = this._xyzMoveData.scaleZ;
            this._xyzMoveData.oldangle_x = this._xyzMoveData.rotationX;
            this._xyzMoveData.oldangle_y = this._xyzMoveData.rotationY;
            this._xyzMoveData.oldangle_z = this._xyzMoveData.rotationZ;
            var mouseVect2d = new Vector2D($e.x - this._scene.cam3D.cavanRect.x, $e.y - this._scene.cam3D.cavanRect.y);
            if ($e.button == 0) {
                switch (this._statceType) {
                    case xyz.TooMathMoveUint.MOVE_XYZ:
                        this._tooMoveLevel.onMouseDown(mouseVect2d);
                        break;
                    case xyz.TooMathMoveUint.MOVE_ROUTATION:
                        this._tooRotationLevel.onMouseDown(mouseVect2d);
                        break;
                    case xyz.TooMathMoveUint.MOVE_SCALE:
                        this._tooScaleLevel.onMouseDown(mouseVect2d);
                        break;
                    default:
                        break;
                }
            }
        };
        return MoveScaleRotationLevel;
    }(Display3D));
    xyz.MoveScaleRotationLevel = MoveScaleRotationLevel;
})(xyz || (xyz = {}));
//# sourceMappingURL=MoveScaleRotationLevel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var xyz;
(function (xyz) {
    var BaseEvent = Pan3d.BaseEvent;
    var Vector3D = Pan3d.Vector3D;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var MouseType = Pan3d.MouseType;
    var Matrix3D = Pan3d.Matrix3D;
    var MathUtil = Pan3d.MathUtil;
    var Object3D = Pan3d.Object3D;
    var Quaternion = Pan3d.Quaternion;
    var Display3D = Pan3d.Display3D;
    var KeyboardType = Pan3d.KeyboardType;
    var MoveScaleRotatioinEvent = /** @class */ (function (_super) {
        __extends(MoveScaleRotatioinEvent, _super);
        function MoveScaleRotatioinEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MoveScaleRotatioinEvent.INIT_MOVE_SCALE_ROTATION = "INIT_MOVE_SCALE_ROTATION";
        MoveScaleRotatioinEvent.INIT_UICONTAINER_TO_XYZ = "INIT_UICONTAINER_TO_XYZ"; //设置Panel
        MoveScaleRotatioinEvent.MAKE_DTAT_ITEM_TO_CHANGE = "MAKE_DTAT_ITEM_TO_CHANGE";
        MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA = "CLEAR_XYZ_MOVE_DATA";
        return MoveScaleRotatioinEvent;
    }(BaseEvent));
    xyz.MoveScaleRotatioinEvent = MoveScaleRotatioinEvent;
    var MoveScaleRotatioinModule = /** @class */ (function (_super) {
        __extends(MoveScaleRotatioinModule, _super);
        function MoveScaleRotatioinModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MoveScaleRotatioinModule.prototype.getModuleName = function () {
            return "MoveScaleRotatioinModule";
        };
        MoveScaleRotatioinModule.prototype.listProcessors = function () {
            return [new MoveScaleRotatioinProcessor()];
        };
        return MoveScaleRotatioinModule;
    }(Module));
    xyz.MoveScaleRotatioinModule = MoveScaleRotatioinModule;
    var MoveScaleRotatioinProcessor = /** @class */ (function (_super) {
        __extends(MoveScaleRotatioinProcessor, _super);
        function MoveScaleRotatioinProcessor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.mouseInfo = new xyz.MouseVO;
            _this.A = new Matrix3D;
            _this.B = new Matrix3D;
            _this.C = new Matrix3D;
            _this.disMatrix3D = new Matrix3D;
            return _this;
        }
        MoveScaleRotatioinProcessor.prototype.getName = function () {
            return "MoveScaleRotatioinProcessor";
        };
        MoveScaleRotatioinProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof MoveScaleRotatioinEvent) {
                switch ($event.type) {
                    case MoveScaleRotatioinEvent.INIT_MOVE_SCALE_ROTATION:
                        this.moveScaleRotationLevel = new xyz.MoveScaleRotationLevel();
                        this.selectScene = $event.data;
                        this.selectScene.addDisplay(this.moveScaleRotationLevel);
                        this.addEvents();
                        break;
                    case MoveScaleRotatioinEvent.INIT_UICONTAINER_TO_XYZ:
                        this.uiContainer = $event.data;
                        break;
                    case MoveScaleRotatioinEvent.MAKE_DTAT_ITEM_TO_CHANGE:
                        // this.moveScaleRotationLevel.xyzMoveData = this.makeBaseData();
                        this.moveScaleRotationLevel.xyzMoveData = $event.data;
                        break;
                    case MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA:
                        this.moveScaleRotationLevel.xyzMoveData = null;
                        break;
                    default:
                        break;
                }
            }
        };
        MoveScaleRotatioinProcessor.prototype.makeBaseData = function () {
            var a = new Display3D();
            a.x = 0;
            a.y = 0;
            a.z = 0;
            a.rotationX = 0;
            a.rotationY = 0;
            a.rotationZ = 0;
            return xyz.TooXyzPosData.getBase([a]);
        };
        MoveScaleRotatioinProcessor.prototype.addEvents = function () {
            var _this = this;
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
                this.onMouseDownFun = function ($evt) { _this.onMouseDown($evt); };
                this.onMouseMoveFun = function ($evt) { _this.onMouseMove($evt); };
                this.onMouseUpFun = function ($evt) { _this.onMouseUp($evt); };
                this.onKeyDownFun = function ($evt) { _this.onKeyDown($evt); };
                this.onKeyUpFun = function ($evt) { _this.onKeyUp($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.addEventListener(MouseType.MouseDown, this.onMouseDownFun);
            document.addEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.addEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.addEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.addEventListener(MouseType.KeyUp, this.onKeyUpFun);
            document.addEventListener("contextmenu", function (event) {
                event.preventDefault();
            });
        };
        MoveScaleRotatioinProcessor.prototype.removeEvents = function () {
            document.removeEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.removeEventListener(MouseType.MouseDown, this.onMouseDownFun);
            document.removeEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.removeEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.removeEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.removeEventListener(MouseType.KeyUp, this.onKeyUpFun);
        };
        MoveScaleRotatioinProcessor.prototype.getCamData = function (tempMatrix3D) {
            var $Minvert = tempMatrix3D.clone();
            $Minvert.invert();
            var $motherAct = new Object3D;
            $motherAct.x = -$Minvert.position.x;
            $motherAct.y = -$Minvert.position.y;
            $motherAct.z = -$Minvert.position.z;
            return $motherAct;
        };
        Object.defineProperty(MoveScaleRotatioinProcessor.prototype, "isCanToDo", {
            get: function () {
                return AppData.sceneEidtType == 1;
            },
            enumerable: true,
            configurable: true
        });
        MoveScaleRotatioinProcessor.prototype.onMouseMove = function ($e) {
            if (!this.isCanToDo) {
                return;
            }
            this.moveScaleRotationLevel.onMouseMove($e);
            if ($e.altKey) {
                switch ($e.buttons) {
                    case 4:
                        if (this.baseCamData) {
                            var nx = -($e.x - this.mouseInfo.last_mouse_x);
                            var ny = -($e.y - this.mouseInfo.last_mouse_y);
                            var $m = this.B.clone();
                            var $Cinvert = this.C.clone();
                            $Cinvert.invert();
                            $m.appendRotation(nx, Vector3D.Y_AXIS);
                            $m.append(this.C);
                            $m.appendRotation(ny, Vector3D.X_AXIS);
                            $m.append($Cinvert);
                            $m.append(this.disMatrix3D);
                            var obj = this.getCamData($m);
                            this.selectScene.cam3D.x = -obj.x;
                            this.selectScene.cam3D.y = -obj.y;
                            this.selectScene.cam3D.z = -obj.z;
                            this.selectScene.cam3D.rotationX = this.baseCamData.rotationX + ny;
                            this.selectScene.cam3D.rotationY = this.baseCamData.rotationY + nx;
                            MathUtil.MathCam(this.selectScene.cam3D);
                        }
                        break;
                    default:
                        break;
                }
            }
            else {
                switch ($e.buttons) {
                    case 4:
                        if (!this.cancalAltKey) { //防止刚才是中键锁定旋转，忽然跳转到中键盘移动
                            var $v = this.mouseHitInWorld3D(new Vector2D($e.x, $e.y));
                            this.selectScene.cam3D.x = this.mouseInfo.oldPosx + (this._middleMoveVe.x - $v.x);
                            this.selectScene.cam3D.y = this.mouseInfo.oldPosy + (this._middleMoveVe.y - $v.y);
                            this.selectScene.cam3D.z = this.mouseInfo.oldPosz + (this._middleMoveVe.z - $v.z);
                            MathUtil.MathCam(this.selectScene.cam3D);
                        }
                        break;
                    case 2:
                        this.selectScene.cam3D.rotationX = this.mouseInfo.old_rotation_x - ($e.y - this.mouseInfo.last_mouse_y);
                        this.selectScene.cam3D.rotationY = this.mouseInfo.old_rotation_y - ($e.x - this.mouseInfo.last_mouse_x);
                        MathUtil.MathCam(this.selectScene.cam3D);
                        break;
                    default:
                        //  console.log($e.buttons)
                        break;
                }
            }
        };
        MoveScaleRotatioinProcessor.prototype.mouseHitInWorld3D = function ($p) {
            var stageHeight = this.selectScene.cam3D.cavanRect.width;
            var stageWidth = this.selectScene.cam3D.cavanRect.height;
            var $v = new Vector3D();
            $v.x = $p.x - stageWidth / 2;
            $v.y = stageHeight / 2 - $p.y;
            $v.z = 100 * 2;
            var $m = new Matrix3D;
            $m.appendRotation(-this.selectScene.cam3D.rotationX, Vector3D.X_AXIS);
            $m.appendRotation(-this.selectScene.cam3D.rotationY, Vector3D.Y_AXIS);
            return $m.transformVector($v);
        };
        MoveScaleRotatioinProcessor.prototype.onMouseDown = function ($e) {
            if (!this.isCanToDo) {
                return;
            }
            this.moveScaleRotationLevel.onMouseDown($e);
            this.middleMovetType = ($e.button == 1);
            this.mouseInfo.last_mouse_x = $e.x;
            this.mouseInfo.last_mouse_y = $e.y;
            this.mouseInfo.oldPosx = this.selectScene.cam3D.x;
            this.mouseInfo.oldPosy = this.selectScene.cam3D.y;
            this.mouseInfo.oldPosz = this.selectScene.cam3D.z;
            this.mouseInfo.old_rotation_x = this.selectScene.cam3D.rotationX;
            this.mouseInfo.old_rotation_y = this.selectScene.cam3D.rotationY;
            switch ($e.button) {
                case 0:
                    break;
                case 1:
                    if ($e.altKey) {
                        this.cancalAltKey = true; //设置如果是中建移动，ALT取消后，不执行中键移动
                    }
                    else {
                        this.cancalAltKey = false;
                    }
                    this._middleMoveVe = this.mouseHitInWorld3D(new Vector2D($e.x, $e.y)); //中键按下的3D坐标
                    this.selectVec = new Vector3D(0, 0, 0);
                    if (this.moveScaleRotationLevel.xyzMoveData) {
                        this.selectVec.x = this.moveScaleRotationLevel.xyzMoveData.x;
                        this.selectVec.y = this.moveScaleRotationLevel.xyzMoveData.y;
                        this.selectVec.z = this.moveScaleRotationLevel.xyzMoveData.z;
                    }
                    this.baseCamData = this.getCamData(this.selectScene.cam3D.cameraMatrix);
                    this.baseCamData.rotationX = this.selectScene.cam3D.rotationX;
                    this.baseCamData.rotationY = this.selectScene.cam3D.rotationY;
                    this.A.identity();
                    this.B.identity();
                    this.C.identity();
                    this.A = this.selectScene.cam3D.cameraMatrix.clone();
                    this.B.appendTranslation(-this.selectVec.x, -this.selectVec.y, -this.selectVec.z);
                    var $q = new Quaternion;
                    $q.fromMatrix(this.selectScene.cam3D.cameraMatrix);
                    this.C = $q.toMatrix3D();
                    this.disMatrix3D = this.A.clone();
                    var $Binvert = this.B.clone();
                    $Binvert.invert();
                    this.disMatrix3D.prepend($Binvert);
                    break;
                default:
                    break;
            }
        };
        MoveScaleRotatioinProcessor.prototype.onMouseUp = function ($e) {
            if (!this.isCanToDo) {
                return;
            }
            this.moveScaleRotationLevel.onMouseUp($e);
        };
        MoveScaleRotatioinProcessor.prototype.onKeyDown = function ($e) {
            if (!this.isCanToDo) {
                return;
            }
            switch ($e.keyCode) {
                case KeyboardType.W:
                    this.moveScaleRotationLevel._statceType = xyz.TooMathMoveUint.MOVE_XYZ;
                    break;
                case KeyboardType.E:
                    this.moveScaleRotationLevel._statceType = xyz.TooMathMoveUint.MOVE_ROUTATION;
                    break;
                case KeyboardType.R:
                    this.moveScaleRotationLevel._statceType = xyz.TooMathMoveUint.MOVE_SCALE;
                    break;
                case KeyboardType.Q:
                    this.moveScaleRotationLevel.xyzMoveData = null;
                    break;
                default:
                    break;
            }
        };
        MoveScaleRotatioinProcessor.prototype.onKeyUp = function ($e) {
            if (!this.isCanToDo) {
                return;
            }
            if ($e.keyCode == 4) {
                this.cancalAltKey = true;
            }
        };
        MoveScaleRotatioinProcessor.prototype.onMouseWheel = function ($evt) {
            if (!this.isCanToDo) {
                return;
            }
            if ($evt.x > AppData.centenPanel.x && $evt.x < AppData.rightPanel.x) {
                var $slectUi = win.LayerManager.getInstance().getObjectsUnderPoint(new Vector2D($evt.x, $evt.y));
                if (!$slectUi) {
                    var $p = this.getCamForntPos($evt.wheelDelta * 0.1);
                    this.selectScene.cam3D.x = $p.x;
                    this.selectScene.cam3D.y = $p.y;
                    this.selectScene.cam3D.z = $p.z;
                    MathUtil.MathCam(this.selectScene.cam3D);
                }
            }
        };
        MoveScaleRotatioinProcessor.prototype.getCamForntPos = function (dis) {
            var $p = new Vector3D(0, 0, dis);
            var $m = new Matrix3D;
            $m.appendRotation(-this.selectScene.cam3D.rotationX, Vector3D.X_AXIS);
            $m.appendRotation(-this.selectScene.cam3D.rotationY, Vector3D.Y_AXIS);
            $p = $m.transformVector($p);
            $p.x = this.selectScene.cam3D.x + $p.x;
            $p.y = this.selectScene.cam3D.y + $p.y;
            $p.z = this.selectScene.cam3D.z + $p.z;
            return $p;
        };
        MoveScaleRotatioinProcessor.prototype.listenModuleEvents = function () {
            return [
                new MoveScaleRotatioinEvent(MoveScaleRotatioinEvent.INIT_MOVE_SCALE_ROTATION),
                new MoveScaleRotatioinEvent(MoveScaleRotatioinEvent.INIT_UICONTAINER_TO_XYZ),
                new MoveScaleRotatioinEvent(MoveScaleRotatioinEvent.MAKE_DTAT_ITEM_TO_CHANGE),
                new MoveScaleRotatioinEvent(MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA),
            ];
        };
        return MoveScaleRotatioinProcessor;
    }(BaseProcessor));
    xyz.MoveScaleRotatioinProcessor = MoveScaleRotatioinProcessor;
})(xyz || (xyz = {}));
//# sourceMappingURL=MoveScaleRotatioinProcessor.js.map
var ObjData = Pan3d.ObjData;
var Vector3D = Pan3d.Vector3D;
var Vector2D = Pan3d.Vector2D;
var TBNUtils = /** @class */ (function () {
    function TBNUtils() {
    }
    TBNUtils.processTBN = function (_objData, normalV4) {
        if (normalV4 === void 0) { normalV4 = false; }
        var normals = _objData.normals;
        var vectices = _objData.vertices;
        var uvs = _objData.uvs;
        var indexs = _objData.indexs;
        var triNum = _objData.vertices.length / 3;
        var tangentsAry = new Array;
        var tangentsNumAry = new Array;
        var bitangentsAry = new Array;
        var bitangentsNumAry = new Array;
        for (var j = 0; j < triNum; j++) {
            tangentsAry.push(new Vector3D);
            tangentsNumAry.push(0);
            bitangentsAry.push(new Vector3D);
            bitangentsNumAry.push(0);
        }
        var normalsAry = new Array;
        var normalFlag = normalV4 ? 4 : 3;
        for (var i = 0; i < normals.length; i += normalFlag) {
            var n = new Vector3D(normals[i], normals[i + 1], normals[i + 2]);
            normalsAry.push(n);
        }
        for (i = 0; i < indexs.length; i += 3) {
            var v0 = new Vector3D(vectices[indexs[i] * 3], vectices[indexs[i] * 3 + 1], vectices[indexs[i] * 3 + 2]);
            var v1 = new Vector3D(vectices[indexs[i + 1] * 3], vectices[indexs[i + 1] * 3 + 1], vectices[indexs[i + 1] * 3 + 2]);
            var v2 = new Vector3D(vectices[indexs[i + 2] * 3], vectices[indexs[i + 2] * 3 + 1], vectices[indexs[i + 2] * 3 + 2]);
            var uv0 = new Vector2D(uvs[indexs[i] * 2], uvs[indexs[i] * 2 + 1]);
            var uv1 = new Vector2D(uvs[indexs[i + 1] * 2], uvs[indexs[i + 1] * 2 + 1]);
            var uv2 = new Vector2D(uvs[indexs[i + 2] * 2], uvs[indexs[i + 2] * 2 + 1]);
            var deltaPos1 = v1.subtract(v0);
            var deltaPos2 = v2.subtract(v0);
            var deltaUV1 = uv1.subtract(uv0);
            var deltaUV2 = uv2.subtract(uv0);
            var r = 1 / (deltaUV1.x * deltaUV2.y - deltaUV1.y * deltaUV2.x);
            var pos1 = deltaPos1.clone();
            pos1.scaleBy(deltaUV2.y);
            var pos2 = deltaPos2.clone();
            pos2.scaleBy(deltaUV1.y);
            var tangent = pos1.subtract(pos2); //(deltaPos1 * deltaUV2.Y - deltaPos2 * deltaUV1.Y)*r;
            tangent.scaleBy(r);
            tangent.normalize();
            pos1 = deltaPos1.clone();
            pos1.scaleBy(deltaUV2.x);
            pos2 = deltaPos2.clone();
            pos2.scaleBy(deltaUV1.x);
            var bitangent = pos1.subtract(pos2); //(deltaPos2 * deltaUV1.X - deltaPos1 * deltaUV2.X)*r;
            bitangent.scaleBy(r);
            bitangent.normalize();
            tangentsAry[indexs[i]] = tangentsAry[indexs[i]].add(tangent);
            tangentsAry[indexs[i + 1]] = tangentsAry[indexs[i + 1]].add(tangent);
            tangentsAry[indexs[i + 2]] = tangentsAry[indexs[i + 2]].add(tangent);
            tangentsNumAry[indexs[i]] += 1;
            tangentsNumAry[indexs[i + 1]] += 1;
            tangentsNumAry[indexs[i + 2]] += 1;
            bitangentsAry[indexs[i]] = bitangentsAry[indexs[i]].add(bitangent);
            bitangentsAry[indexs[i + 1]] = bitangentsAry[indexs[i + 1]].add(bitangent);
            bitangentsAry[indexs[i + 2]] = bitangentsAry[indexs[i + 1]].add(bitangent);
            bitangentsNumAry[indexs[i]] += 1;
            bitangentsNumAry[indexs[i + 1]] += 1;
            bitangentsNumAry[indexs[i + 2]] += 1;
        }
        for (i = 0; i < triNum; i++) {
            tangentsAry[i].scaleBy(1 / tangentsNumAry[i]);
            bitangentsAry[i].scaleBy(1 / bitangentsNumAry[i]);
        }
        for (i = 0; i < triNum; i++) {
            n = normalsAry[i];
            var t = tangentsAry[i];
            var b = bitangentsAry[i];
            var temp = n.clone();
            temp.scaleBy(temp.dot(t));
            t = t.subtract(temp);
            t.normalize();
            temp = n.cross(t);
            if (temp.dot(b) < 0) {
                t.scaleBy(-1);
            }
        }
        ;
        var tangents = new Array;
        var bitangents = new Array;
        for (i = 0; i < triNum; i++) {
            tangentsAry[i].normalize();
            bitangentsAry[i].normalize();
            tangents.push(tangentsAry[i].x);
            tangents.push(tangentsAry[i].y);
            tangents.push(tangentsAry[i].z);
            bitangents.push(bitangentsAry[i].x);
            bitangents.push(bitangentsAry[i].y);
            bitangents.push(bitangentsAry[i].z);
            if (normalV4) {
                tangents.push(0);
                bitangents.push(0);
            }
        }
        _objData.tangents = tangents;
        _objData.bitangents = bitangents;
    };
    return TBNUtils;
}());
//# sourceMappingURL=TBNUtils.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var left;
(function (left) {
    var Md5MoveSprite = md5list.Md5MoveSprite;
    var Md5animAnalysis = md5list.Md5animAnalysis;
    var Md5Analysis = md5list.Md5Analysis;
    var MeshImportSort = md5list.MeshImportSort;
    var MeshToObjUtils = md5list.MeshToObjUtils;
    var LocalMd5MoveSprite = /** @class */ (function (_super) {
        __extends(LocalMd5MoveSprite, _super);
        function LocalMd5MoveSprite() {
            var _this = _super.call(this) || this;
            _this.meshItem = new Array;
            return _this;
        }
        LocalMd5MoveSprite.prototype.addLocalMeshByStr = function ($str) {
            this.md5MeshData = new Md5Analysis().addMesh($str);
            new MeshImportSort().processMesh(this.md5MeshData);
            this.md5objData = new MeshToObjUtils().getObj(this.md5MeshData);
            var $temp = new Md5MoveSprite();
            $temp.md5MeshData = this.md5MeshData;
            $temp.md5objData = this.md5objData;
            this.meshItem.push($temp);
        };
        LocalMd5MoveSprite.prototype.addLocalAdimByStr = function ($str) {
            var $matrixAry = new Md5animAnalysis().addAnim($str);
            this.frameQuestArr = new Array;
            for (var i = 0; i < $matrixAry.length; i++) {
                var $frameAry = $matrixAry[i];
                for (var j = 0; j < $frameAry.length; j++) {
                    $frameAry[j].prepend(this.md5objData.invertAry[j]);
                }
                this.frameQuestArr.push(this.makeDualQuatFloat32Array($matrixAry[i]));
            }
        };
        LocalMd5MoveSprite.prototype.update = function () {
            if (this.md5objData && this.frameQuestArr) {
                for (var i = 0; i < this.meshItem.length; i++) {
                    this.md5MeshData = this.meshItem[i].md5MeshData;
                    this.md5objData = this.meshItem[i].md5objData;
                    this.updateMaterialMeshCopy();
                }
            }
        };
        LocalMd5MoveSprite.prototype.loadBodyMesh = function () {
        };
        LocalMd5MoveSprite.prototype.loadAnimFrame = function () {
        };
        return LocalMd5MoveSprite;
    }(Md5MoveSprite));
    left.LocalMd5MoveSprite = LocalMd5MoveSprite;
})(left || (left = {}));
//# sourceMappingURL=LocalMd5MoveSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
class MaterialModelShader extends Shader3D {
    static MaterialModelShader: string = "MaterialModelShader";
    constructor() {
        super();
    }
    binLocation($context: WebGLRenderingContext): void {
        $context.bindAttribLocation(this.program, 0, "v3Position");
        $context.bindAttribLocation(this.program, 1, "v2CubeTexST");
    }
    getVertexShaderString(): string {
        var $str: string =
            "attribute vec3 v3Position;" +
            "attribute vec2 v2CubeTexST;" +
            "uniform mat4 vpMatrix3D;" +
            "uniform mat4 posMatrix3D;" +
            "varying vec2 v_texCoord;" +
            "void main(void)" +
            "{" +
            "   v_texCoord = vec2(v2CubeTexST.x, v2CubeTexST.y);" +
            "   vec4 vt0= vec4(v3Position, 1.0);" +
            "   vt0 = posMatrix3D * vt0;" +
            "   vt0 = vpMatrix3D * vt0;" +
            "   gl_Position = vt0;" +
            "}"
        return $str


    }
    getFragmentShaderString(): string {
        var $str: string =
            "precision mediump float;\n" +
            "uniform sampler2D fs0;\n" +
            "varying vec2 v_texCoord;\n" +
            "void main(void)\n" +
            "{\n" +
                "vec4 infoUv = texture2D(fs0, v_texCoord.xy);\n" +
                "gl_FragColor =vec4(1.0,0.0,0.0,1.0);\n" +
            "}"
        return $str

    }

}
*/
var left;
(function (left) {
    var Display3DSprite = Pan3d.Display3DSprite;
    var Scene_data = Pan3d.Scene_data;
    var TexItem = Pan3d.TexItem;
    var ObjData = Pan3d.ObjData;
    var TimeUtil = Pan3d.TimeUtil;
    var MaterialModelSprite = /** @class */ (function (_super) {
        __extends(MaterialModelSprite, _super);
        function MaterialModelSprite() {
            return _super.call(this) || this;
        }
        MaterialModelSprite.prototype.setMaterialVc = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            var $materialTree = $material;
            Scene_data.context3D.setBlendParticleFactors($materialTree.blendMode);
            Scene_data.context3D.setDepthTest($materialTree.zbuff);
            Scene_data.context3D.setWriteDepth($materialTree.writeZbuffer);
            if ($materialTree.hasTime) {
                var timeLen = ($materialTree.timeValue.x * 1000);
                var t = (TimeUtil.getTimer() - this.time) % timeLen; //时间间隔
                t /= timeLen;
                t *= $materialTree.timeValue.y; //数值比例
                Scene_data.context3D.setuniform1f($material.shader, "time", t);
            }
            Scene_data.context3D.setuniform3f($material.shader, "cam3DPos", Scene_data.cam3D.x, Scene_data.cam3D.y, Scene_data.cam3D.z);
            $material.update(t);
            if ($mp) {
                $mp.update();
            }
            Scene_data.context3D.setVc4fv($material.shader, "fc", $material.fcData);
        };
        MaterialModelSprite.prototype.setMaterialTexture = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].texture) {
                    if (texVec[i].type == TexItem.CUBEMAP) {
                        Scene_data.context3D.setRenderTextureCube($material.shader.program, texVec[i].name, texVec[i].texture, texVec[i].id);
                    }
                    else {
                        Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, texVec[i].texture, texVec[i].id);
                    }
                }
                else {
                    console.log("还没加载好");
                }
            }
            if ($mp) {
                for (i = 0; i < $mp.dynamicTexList.length; i++) {
                    if ($mp.dynamicTexList[i].target && $mp.dynamicTexList[i].texture) {
                        Scene_data.context3D.setRenderTexture($material.shader, $mp.dynamicTexList[i].target.name, $mp.dynamicTexList[i].texture, $mp.dynamicTexList[i].target.id);
                    }
                }
            }
        };
        MaterialModelSprite.prototype.setMaterialVaIndependent = function () {
            Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
            Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
            var id = 2;
            if (this.material.useLightUv) {
                Scene_data.context3D.setVa(id++, 2, this.objData.lightUvBuffer);
            }
            if (this.material.useNormal) {
                Scene_data.context3D.setVa(id++, 3, this.objData.tangentBuffer);
                Scene_data.context3D.setVa(id++, 3, this.objData.bitangentBuffer);
                Scene_data.context3D.setVa(id++, 3, this.objData.normalsBuffer);
            }
        };
        MaterialModelSprite.prototype.setBaseMaterialVc = function ($material) {
            var t = 0;
            if ($material.hasTime) {
                t = (TimeUtil.getTimer() - this.time) % 100000 * 0.001;
            }
            $material.updateTime(t);
        };
        MaterialModelSprite.prototype.readTxtToModel = function ($str) {
            var objstr = JSON.parse($str);
            var $objdata = new ObjData();
            $objdata.vertices = objstr.vertices;
            $objdata.normals = objstr.normals;
            $objdata.uvs = objstr.uvs;
            $objdata.lightuvs = objstr.lightuvs;
            $objdata.indexs = objstr.indexs;
            $objdata.treNum = $objdata.indexs.length;
            TBNUtils.processTBN($objdata);
            $objdata.vertexBuffer = Scene_data.context3D.uploadBuff3D($objdata.vertices);
            $objdata.uvBuffer = Scene_data.context3D.uploadBuff3D($objdata.uvs);
            $objdata.lightUvBuffer = Scene_data.context3D.uploadBuff3D($objdata.lightuvs);
            $objdata.tangentBuffer = Scene_data.context3D.uploadBuff3D($objdata.tangents);
            $objdata.bitangentBuffer = Scene_data.context3D.uploadBuff3D($objdata.bitangents);
            $objdata.normalsBuffer = Scene_data.context3D.uploadBuff3D($objdata.normals);
            $objdata.indexBuffer = Scene_data.context3D.uploadIndexBuff3D($objdata.indexs);
            this.objData = $objdata;
        };
        Object.defineProperty(MaterialModelSprite.prototype, "isTextureLoadFinish", {
            get: function () {
                if (this.material) {
                    if (this.material.texList) {
                        for (var i = 0; i < this.material.texList.length; i++) {
                            if (!this.material.texList[i].texture) {
                                return false;
                            }
                        }
                        return true;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        MaterialModelSprite.prototype.update = function () {
            if (this.isTextureLoadFinish && this.sceneVisible) {
                if (this.material) {
                    var $materialTree = this.material;
                    $materialTree.shader = $materialTree.modelShader;
                }
                _super.prototype.update.call(this);
            }
        };
        return MaterialModelSprite;
    }(Display3DSprite));
    left.MaterialModelSprite = MaterialModelSprite;
})(left || (left = {}));
//# sourceMappingURL=MaterialModelSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var left;
(function (left) {
    var MaterialShader = Pan3d.MaterialShader;
    var BuildMaterialShader = /** @class */ (function (_super) {
        __extends(BuildMaterialShader, _super);
        function BuildMaterialShader() {
            var _this = _super.call(this) || this;
            _this.name = "BuildMaterialShader";
            return _this;
        }
        BuildMaterialShader.prototype.buildParamAry = function ($material) {
            this.paramAry = [$material.useUv, $material.useNormal, $material.useLightUv];
        };
        BuildMaterialShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "v2CubeTexST");
            var useUv = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var useLightUv = this.paramAry[2];
            var id = 2;
            if (useLightUv) {
                $context.bindAttribLocation(this.program, id++, "v2Lightuv");
            }
            if (useNormal) {
                $context.bindAttribLocation(this.program, id++, "v3Tangent");
                $context.bindAttribLocation(this.program, id++, "v3Bitangent");
                $context.bindAttribLocation(this.program, id++, "v3Normal");
            }
        };
        BuildMaterialShader.prototype.getVertexShaderString = function () {
            var useUv = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var useLightUv = this.paramAry[2];
            var $str = "attribute vec3 v3Position;\n" +
                "attribute vec2 v2CubeTexST;\n" +
                "varying vec2 v0;\n";
            if (useLightUv) {
                $str += "attribute vec2 v2Lightuv;\n";
                $str += "varying vec2 lightuv;\n";
            }
            if (useUv) {
                $str += "varying vec2 uvpos;\n";
            }
            if (useNormal) {
                $str +=
                    "attribute vec3 v3Tangent;\n" +
                        "attribute vec3 v3Bitangent;\n" +
                        "attribute vec3 v3Normal;\n" +
                        "varying vec3 T;\n" +
                        "varying vec3 B;\n" +
                        "varying vec3 N;\n";
            }
            $str +=
                "uniform mat4 vpMatrix3D;\n" +
                    "uniform mat4 posMatrix3D;\n" +
                    "uniform mat3 rotationMatrix3D;\n";
            $str +=
                "varying highp vec3 vPos;\n";
            $str +=
                "void main(void){\n" +
                    "v0 = vec2(v2CubeTexST.x, v2CubeTexST.y);\n" +
                    "vec4 vt0= vec4(v3Position, 1.0);\n" +
                    "vt0 = posMatrix3D * vt0;\n";
            if (useUv) {
                $str += "uvpos = v2CubeTexST;\n";
            }
            if (useLightUv) {
                $str += "lightuv = v2Lightuv;\n";
            }
            if (useNormal) {
                $str +=
                    "T = v3Tangent;\n" +
                        "B = v3Bitangent;\n" +
                        "N = v3Normal;\n";
            }
            $str += "vt0 = vpMatrix3D * vt0;\n";
            $str += "gl_Position = vt0;\n";
            $str += "vPos = v3Position;\n";
            $str += "}";
            return $str;
        };
        BuildMaterialShader.BuildMaterialShader = "BuildMaterialShader";
        return BuildMaterialShader;
    }(MaterialShader));
    left.BuildMaterialShader = BuildMaterialShader;
})(left || (left = {}));
//# sourceMappingURL=BuildMaterialShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var left;
(function (left) {
    var MaterialAnimShader = Pan3d.MaterialAnimShader;
    var RoleMaterialShader = /** @class */ (function (_super) {
        __extends(RoleMaterialShader, _super);
        function RoleMaterialShader() {
            var _this = _super.call(this) || this;
            _this.name = "RoleMaterialShader";
            return _this;
        }
        RoleMaterialShader.prototype.buildParamAry = function ($material) {
            this.paramAry = [$material.usePbr, $material.useNormal, $material.hasFresnel,
                $material.useDynamicIBL, $material.lightProbe, $material.directLight,
                $material.noLight, $material.fogMode];
        };
        RoleMaterialShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "pos");
            $context.bindAttribLocation(this.program, 1, "v2Uv");
            $context.bindAttribLocation(this.program, 2, "boneID");
            $context.bindAttribLocation(this.program, 3, "boneWeight");
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            if (useNormal) {
                $context.bindAttribLocation(this.program, 4, "v3Tangent");
                $context.bindAttribLocation(this.program, 5, "v3Bitangent");
                $context.bindAttribLocation(this.program, 6, "v3Normal");
            }
        };
        RoleMaterialShader.getMd5M44Str = function () {
            var str = "vec4 qdv(vec4 q,vec3 d, vec3 v ){\n" +
                "vec3 t = 2.0 * cross(q.xyz, v);\n" +
                "vec3 f = v + q.w * t + cross(q.xyz, t);\n" +
                "return  vec4(f.x+d.x,f.y+d.y,f.z+d.z,1.0);\n" +
                " }\n" +
                "vec4 getQDdata(vec3 vdata){\n" +
                "vec4 tempnum = qdv(boneQ[int(boneID.x)],boneD[int(boneID.x)],vdata) * boneWeight.x;\n" +
                "tempnum += qdv(boneQ[int(boneID.y)],boneD[int(boneID.y)],vdata) * boneWeight.y;\n" +
                "tempnum += qdv(boneQ[int(boneID.z)],boneD[int(boneID.z)],vdata)* boneWeight.z;\n" +
                "tempnum += qdv(boneQ[int(boneID.w)],boneD[int(boneID.w)],vdata) * boneWeight.w;\n" +
                "tempnum.x = tempnum.x*-1.0;\n" +
                "return  tempnum;\n" +
                " }\n";
            return str;
        };
        RoleMaterialShader.getMd5M44NrmStr = function () {
            var str = "vec4 qdvNrm(vec4 q, vec3 v ){\n" +
                "vec3 t = 2.0 * cross(q.xyz, v);\n" +
                "vec3 f = v + q.w * t + cross(q.xyz, t);\n" +
                "return  vec4(f.x,f.y,f.z,1.0);\n" +
                " }\n" +
                "vec4 getQDdataNrm(vec3 vdata){\n" +
                "vec4 tempnum = qdvNrm(boneQ[int(boneID.x)],vdata) * boneWeight.x;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.y)],vdata) * boneWeight.y;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.z)],vdata)* boneWeight.z;\n" +
                "tempnum += qdvNrm(boneQ[int(boneID.w)],vdata) * boneWeight.w;\n" +
                "tempnum.x = tempnum.x*-1.0;\n" +
                "tempnum.xyz = normalize(tempnum.xyz);\n" +
                "return  tempnum;\n" +
                " }\n";
            return str;
        };
        RoleMaterialShader.prototype.getVertexShaderString = function () {
            var usePbr = this.paramAry[0];
            var useNormal = this.paramAry[1];
            var hasFresnel = this.paramAry[2];
            var useDynamicIBL = this.paramAry[3];
            var lightProbe = this.paramAry[4];
            var directLight = this.paramAry[5];
            var noLight = this.paramAry[6];
            var $str = "attribute vec3 pos;\n" +
                "attribute vec2 v2Uv;\n" +
                "attribute vec4 boneID;\n" +
                "attribute vec4 boneWeight;\n" +
                "varying vec2 v0;\n" +
                "uniform vec4 boneQ[54];\n" +
                "uniform vec3 boneD[54];\n" +
                "uniform mat4 vpMatrix3D;\n" +
                "uniform mat4 posMatrix3D;\n";
            $str += "varying highp vec3 vPos;\n";
            if (noLight) {
            }
            else {
                $str +=
                    "varying vec2 v2;\n";
            }
            if (useNormal) {
                $str +=
                    "attribute vec3 v3Tangent;\n" +
                        "attribute vec3 v3Bitangent;\n" +
                        "attribute vec3 v3Normal;\n";
                $str += "varying vec3 T;\n";
                $str += "varying vec3 B;\n";
                $str += "varying vec3 N;\n";
            }
            $str +=
                MaterialAnimShader.getMd5M44Str() +
                    MaterialAnimShader.getMd5M44NrmStr() +
                    "void main(void){\n" +
                    "v0 = v2Uv;\n" +
                    "vec4 vt0 = getQDdata(vec3(pos.x,pos.y,pos.z));\n" +
                    "vPos =vt0.xyz ;\n" +
                    "vt0.xyz = vt0.xyz*1.0;\n" +
                    "vt0 = posMatrix3D * vt0;\n";
            if (usePbr) {
                $str +=
                    "v1 = vec3(vt0.x,vt0.y,vt0.z);\n";
            }
            $str +=
                //"vt0 = camMatrix3D * vt0;\n" +
                //"vt0 = viewMatrix3D * vt0;\n" +
                "vt0 = vpMatrix3D * vt0;\n" +
                    "gl_Position = vt0;\n";
            if (usePbr) {
                if (!useNormal) {
                    $str +=
                        //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                        //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                        //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                        //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                        "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = vec3(vt0.x,vt0.y,vt0.z);\n";
                }
                else {
                    $str +=
                        //"vec4 vt2 = bone[int(boneID.x)] * tangent * boneWeight.x;\n" +
                        //"vt2 += bone[int(boneID.y)] * tangent * boneWeight.y;\n" +
                        //"vt2 += bone[int(boneID.z)] * tangent * boneWeight.z;\n" +
                        //"vt2 += bone[int(boneID.w)] * tangent * boneWeight.w;\n" +
                        "vec4 vt2 = getQDdataNrm(vec3(tangent.x,tangent.y,tangent.z));\n" +
                            "vt2 = rotationMatrix3D * vt2;\n" +
                            "vt2.xyz = normalize(vt2.xyz);\n" +
                            //"vec4 vt1 = bone[int(boneID.x)] * bitangent * boneWeight.x;\n" +
                            //"vt1 += bone[int(boneID.y)] * bitangent * boneWeight.y;\n" +
                            //"vt1 += bone[int(boneID.z)] * bitangent * boneWeight.z;\n" +
                            //"vt1 += bone[int(boneID.w)] * bitangent * boneWeight.w;\n" +
                            "vec4 vt1 = getQDdataNrm(vec3(bitangent.x,bitangent.y,bitangent.z));\n" +
                            "vt1 = rotationMatrix3D * vt1;\n" +
                            "vt1.xyz = normalize(vt1.xyz);\n" +
                            //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                            //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                            //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                            //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                            "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                            "vt0 = rotationMatrix3D * vt0;\n" +
                            "vt0.xyz = normalize(vt0.xyz);\n" +
                            "v4 = mat3(vec3(vt2.x,vt2.y,vt2.z),vec3(vt1.x,vt1.y,vt1.z),vec3(vt0.x,vt0.y,vt0.z));\n";
                }
            }
            else if (lightProbe || directLight) {
                $str +=
                    //"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\n" +
                    //"vt0 += bone[int(boneID.y)] * normal * boneWeight.y;\n" +
                    //"vt0 += bone[int(boneID.z)] * normal * boneWeight.z;\n" +
                    //"vt0 += bone[int(boneID.w)] * normal * boneWeight.w;\n" +
                    "vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\n" +
                        "vt0 = rotationMatrix3D * vt0;\n" +
                        "vt0.xyz = normalize(vt0.xyz);\n";
                //"vt0 = vec4(0,1,0,1);\n";
            }
            if (lightProbe) {
                $str +=
                    "vec3 lpb = sh[0] * 0.28209479177387814;\n" +
                        "lpb += sh[1] * (vt0.y * -0.4886025119029199);\n" +
                        "lpb += sh[2] * (vt0.z * 0.4886025119029199);\n" +
                        "lpb += sh[3] * (vt0.x * -0.4886025119029199);\n" +
                        "lpb += sh[4] * (vt0.x * vt0.y * 1.0925484305920792);\n" +
                        "lpb += sh[5] * (vt0.z * vt0.y * -1.0925484305920792);\n" +
                        "lpb += sh[6] * ((3.0 * vt0.z * vt0.z - 1.0) * 0.31539156525252005);\n" +
                        "lpb += sh[7] * (vt0.z * vt0.x * -1.0925484305920792);\n" +
                        "lpb += sh[8] * ((vt0.x * vt0.x - vt0.y * vt0.y) * 0.5462742152960396);\n" +
                        "v2 = lpb;\n";
            }
            else if (directLight) {
                $str +=
                    "float suncos = dot(vt0.xyz,sunDirect.xyz);\n" +
                        "suncos = clamp(suncos,0.0,1.0);\n" +
                        "v2 = sunColor * suncos + ambientColor;";
                // "v2 += vec3(1.0,1.0,1.0);" 
            }
            else if (noLight) {
            }
            else {
                $str +=
                    "v2 = v2Uv;\n";
            }
            if (useNormal) {
                $str +=
                    "T =  getQDdataNrm(v3Tangent).xyz;\n" +
                        "B =  getQDdataNrm(v3Bitangent).xyz;\n" +
                        "N =  getQDdataNrm(v3Normal).xyz;\n";
            }
            $str += "}";
            //if (usePbr) {
            //    if (!useNormal) {
            //        $str += "v4 = vec3(v3Normal.x,v3Normal.y,v3Normal.z);\n";
            //    } else {
            //        $str += 
            //        "v4 = mat3(v3Tangent,v3Bitangent,v3Normal);\n"
            //    }
            //}
            return $str;
        };
        RoleMaterialShader.prototype.getFragmentShaderString = function () {
            var $str = 
            //"#ifdef GL_FRAGMENT_PRECISION_HIGH\n" +
            //"precision highp float;\n" +
            //" #else\n" +
            //" precision mediump float;\n" +
            //" #endif\n" +
            "uniform sampler2D s_texture1;\n" +
                //"uniform sampler2D light_texture;\n" +
                "uniform vec4 testconst;" +
                "varying vec2 v_texCoord;\n" +
                //"varying vec2 v_texLight;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                //"if (infoUv.a <= 0.9) {\n" +
                //"     discard;\n" +
                //"}\n" +
                //"vec4 infoLight = texture2D(light_texture, v_texLight);\n" +
                //"vec4 test = vec4(0.5,0,0,1);\n" +
                "infoUv.xyz = testconst.xyz * infoUv.xyz;\n" +
                //"info.rgb = info.rgb / 0.15;\n" +
                "gl_FragColor = infoUv;\n" +
                "}";
            return $str;
        };
        RoleMaterialShader.RoleMaterialShader = "RoleMaterialShader";
        return RoleMaterialShader;
    }(MaterialAnimShader));
    left.RoleMaterialShader = RoleMaterialShader;
})(left || (left = {}));
//# sourceMappingURL=RoleMaterialShader.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var left;
(function (left) {
    var Display3dMovie = Pan3d.Display3dMovie;
    var MeshData = Pan3d.MeshData;
    var TexItem = Pan3d.TexItem;
    var AnimData = Pan3d.AnimData;
    var SkinMesh = Pan3d.SkinMesh;
    var BaseEvent = Pan3d.BaseEvent;
    var Scene_data = Pan3d.Scene_data;
    var Dictionary = Pan3d.Dictionary;
    var MaterialRoleSprite = /** @class */ (function (_super) {
        __extends(MaterialRoleSprite, _super);
        function MaterialRoleSprite() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialRoleSprite.prototype.update = function () {
            if (this.sceneVisible) {
                _super.prototype.update.call(this);
            }
        };
        Object.defineProperty(MaterialRoleSprite.prototype, "skinMesh", {
            get: function () {
                return this._skinMesh;
            },
            set: function (value) {
                this._skinMesh = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialRoleSprite.prototype, "animDic", {
            get: function () {
                return this._animDic;
            },
            set: function (value) {
                this._animDic = value;
            },
            enumerable: true,
            configurable: true
        });
        MaterialRoleSprite.prototype.updateFrame = function (t) {
            this._actionTime += t;
            var actionKey;
            if (this.curentAction && this._animDic[this.curentAction]) {
                actionKey = this.curentAction;
            }
            else if (this._animDic[this._defaultAction]) {
                actionKey = this._defaultAction;
            }
            else {
                return;
            }
            var animData = this._animDic[actionKey];
            var cutLen;
            for (var i = 0; i < this._skinMesh.meshAry.length; i++) {
                cutLen = animData.getBoneQPAryByMesh(this._skinMesh.meshAry[i])[0].length;
            }
            this._curentFrame = float2int(this._actionTime / (Scene_data.frameTime * 2));
            if (this._curentFrame >= cutLen) {
                if (this._completeState == 0) {
                    this._actionTime = 0;
                    this._curentFrame = 0;
                }
                else if (this._completeState == 1) {
                    this._curentFrame = cutLen - 1;
                }
                else if (this._completeState == 2) {
                    //this.play(this._defaultAction);
                    this._curentFrame = 0;
                    this._completeState = 0;
                    this.changeAction(this.curentAction);
                }
                else if (this._completeState == 3) {
                }
            }
        };
        MaterialRoleSprite.prototype.setVcMatrix = function ($mesh) {
            Scene_data.context3D.setuniform3f($mesh.material.shader, "cam3DPos", Scene_data.cam3D.x, Scene_data.cam3D.y, Scene_data.cam3D.z);
            _super.prototype.setVcMatrix.call(this, $mesh);
        };
        MaterialRoleSprite.prototype.updateMaterialMesh = function ($mesh) {
            if ($mesh && $mesh.material) {
                var $materialTree = $mesh.material;
                $materialTree.shader = $materialTree.roleShader;
            }
            _super.prototype.updateMaterialMesh.call(this, $mesh);
        };
        MaterialRoleSprite.prototype.setMaterialTexture = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            var texVec = $material.texList;
            for (var i = 0; i < texVec.length; i++) {
                if (texVec[i].texture) {
                    if (texVec[i].type == TexItem.CUBEMAP) {
                        Scene_data.context3D.setRenderTextureCube($material.shader.program, texVec[i].name, texVec[i].texture, texVec[i].id);
                    }
                    else {
                        Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, texVec[i].texture, texVec[i].id);
                    }
                }
                else {
                    console.log("还没加载好");
                }
            }
            if ($mp) {
                for (i = 0; i < $mp.dynamicTexList.length; i++) {
                    if ($mp.dynamicTexList[i].target && $mp.dynamicTexList[i].texture) {
                        Scene_data.context3D.setRenderTexture($material.shader, $mp.dynamicTexList[i].target.name, $mp.dynamicTexList[i].texture, $mp.dynamicTexList[i].target.id);
                    }
                }
            }
        };
        MaterialRoleSprite.prototype.playSkill = function ($skill) {
            var $scene = this._scene;
            this._walkPath = null;
            $scene.skillManager.playSkill($skill);
            this.skillVo = $skill;
        };
        MaterialRoleSprite.prototype.setVaCompress = function ($mesh) {
            var tf = Scene_data.context3D.pushVa($mesh.vertexBuffer);
            if (tf) {
                ////console.log('cccccc')
                return;
            }
            Scene_data.context3D.setVaOffset(0, 3, $mesh.stride, 0);
            Scene_data.context3D.setVaOffset(1, 2, $mesh.stride, $mesh.uvsOffsets);
            Scene_data.context3D.setVaOffset(2, 4, $mesh.stride, $mesh.boneIDOffsets);
            Scene_data.context3D.setVaOffset(3, 4, $mesh.stride, $mesh.boneWeightOffsets);
            if ($mesh.material.useNormal) {
                // Scene_data.context3D.setVcMatrix4fv($mesh.material.shader, "rotationMatrix3D", this._rotationMatrix.m);
                Scene_data.context3D.setVaOffset(4, 3, $mesh.stride, $mesh.tangentsOffsets);
                Scene_data.context3D.setVaOffset(5, 3, $mesh.stride, $mesh.bitangentsOffsets);
                Scene_data.context3D.setVaOffset(6, 3, $mesh.stride, $mesh.normalsOffsets);
            }
        };
        MaterialRoleSprite.prototype.changeRoleWeb = function (dis) {
            var $skinMesh = new SkinMesh();
            $skinMesh.meshAry = new Array();
            for (var i = 0; i < 1; i++) {
                var $meshData = new MeshData();
                $meshData.vertices = dis.md5objData.vertices;
                $meshData.uvs = dis.md5objData.uvs;
                $meshData.tangents = dis.md5objData.vertices;
                $meshData.bitangents = dis.md5objData.vertices;
                $meshData.normals = dis.md5objData.vertices;
                $meshData.boneIDAry = dis.md5MeshData.boneIDAry;
                $meshData.boneWeightAry = dis.md5MeshData.boneWeightAry;
                $meshData.indexs = dis.md5objData.indexs;
                $meshData.treNum = dis.md5MeshData.treNum;
                $meshData.uid = 0;
                $meshData.stride = 64;
                $meshData.uvsOffsets = 12;
                $meshData.tangentsOffsets = 32;
                $meshData.bitangentsOffsets = 44;
                $meshData.normalsOffsets = 20;
                $meshData.boneIDOffsets = 20;
                $meshData.boneWeightOffsets = 36;
                pack.RoleChangeModel.getInstance().makeBufToRole($meshData);
                $meshData.compressBuffer = true;
                $skinMesh.meshAry.push($meshData);
            }
            var $animDic = {};
            var $animData = new AnimData;
            $animData.meshBoneQPAryDic = this.getmeshBoneQPAryDic(dis.frameQuestArr);
            $animDic["stand"] = $animData;
            this.skinMesh = $skinMesh;
            this.animDic = $animDic;
        };
        MaterialRoleSprite.prototype.getmeshBoneQPAryDic = function ($arr) {
            var item = new Dictionary([]);
            var a1 = new Array;
            a1.push($arr);
            item[0] = a1;
            return item;
        };
        MaterialRoleSprite.prototype.setRoleZwwUrl = function (url) {
            var _this = this;
            pack.PackRoleManager.getInstance().getRoleZzwByUrl(url, function (value) {
                _this.roleStaticMesh = value;
                _this.skinMesh = _this.roleStaticMesh.skinMesh;
                _this.animDic = _this.roleStaticMesh.animDic;
                _this.material = _this.roleStaticMesh.material;
                _this.roleStaticMesh.addEventListener(BaseEvent.COMPLETE, _this.meshParamInfo, _this);
                _this.meshParamInfo();
            });
        };
        MaterialRoleSprite.prototype.meshParamInfo = function () {
            for (var i = 0; i < this.skinMesh.meshAry.length; i++) {
                if (this.skinMesh.meshAry[i].material && this.skinMesh.meshAry[i].paramInfo) {
                    this.skinMesh.meshAry[i].materialParam = new Pan3d.MaterialBaseParam;
                    this.skinMesh.meshAry[i].materialParam.material = this.skinMesh.meshAry[i].material;
                    pack.PackPrefabManager.getInstance().makeMaterialBaseParam(this.skinMesh.meshAry[i].materialParam, this.skinMesh.meshAry[i].paramInfo);
                }
            }
            this.play(this.roleStaticMesh.animPlayKey, 0);
        };
        return MaterialRoleSprite;
    }(Display3dMovie));
    left.MaterialRoleSprite = MaterialRoleSprite;
})(left || (left = {}));
//# sourceMappingURL=MaterialRoleSprite.js.map
var left;
(function (left) {
    var Scene_data = Pan3d.Scene_data;
    var FBO = Pan3d.FBO;
    var MathClass = Pan3d.MathClass;
    var Engine = Pan3d.Engine;
    var SceneRenderToTextrue = /** @class */ (function () {
        function SceneRenderToTextrue() {
            this.fw = 1024;
            this.fh = 1024;
            this.viweLHnumber = 1000;
        }
        SceneRenderToTextrue.getInstance = function () {
            if (!this._instance) {
                this._instance = new SceneRenderToTextrue();
            }
            return this._instance;
        };
        SceneRenderToTextrue.prototype.getFBO = function () {
            this.fw = 2048;
            this.fh = 2048;
            this.renderContext = Scene_data.context3D.renderContext;
            var gl = Scene_data.context3D.renderContext;
            var fbo = new FBO();
            fbo.texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, fbo.texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.fw, this.fh, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            fbo.frameBuffer = gl.createFramebuffer();
            fbo.depthBuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.depthBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.fw, this.fh);
            return fbo;
        };
        SceneRenderToTextrue.prototype.updateDepthTexture = function (fbo) {
            var gl = Scene_data.context3D.renderContext;
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.frameBuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbo.texture, 0);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, fbo.depthBuffer);
        };
        SceneRenderToTextrue.prototype.resetViewMatrx3D = function () {
            Scene_data.viewMatrx3D.identity();
            Scene_data.viewMatrx3D.perspectiveFieldOfViewLH(Engine.sceneCamScale, 1, 1, this.viweLHnumber);
        };
        SceneRenderToTextrue.prototype.renderToTexture = function ($item) {
            if (!this.fbo) {
                this.fbo = this.getFBO(); //512*512
            }
            this.updateDepthTexture(this.fbo);
            this.renderContext.viewport(0, 0, this.fw, this.fh);
            this.renderContext.clearColor(20 / 255, 20 / 255, 20 / 255, 1.0);
            this.renderContext.clearDepth(1.0);
            this.renderContext.clearStencil(0.0);
            this.renderContext.depthMask(true);
            this.renderContext.frontFace(this.renderContext.CW);
            this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT | this.renderContext.DEPTH_BUFFER_BIT | this.renderContext.STENCIL_BUFFER_BIT);
            this.resetViewMatrx3D();
            MathClass.getCamView(Scene_data.cam3D, Scene_data.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            for (var i = 0; i < $item.length; i++) {
                $item[i].update();
            }
            var gl = Scene_data.context3D.renderContext;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            Engine.resetSize();
        };
        return SceneRenderToTextrue;
    }());
    left.SceneRenderToTextrue = SceneRenderToTextrue;
})(left || (left = {}));
//# sourceMappingURL=SceneRenderToTextrue.js.map
var left;
(function (left) {
    var Scene_data = Pan3d.Scene_data;
    var TimeUtil = Pan3d.TimeUtil;
    var MaterialShader = Pan3d.MaterialShader;
    var ModelShowModel = /** @class */ (function () {
        function ModelShowModel() {
        }
        ModelShowModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new ModelShowModel();
            }
            return this._instance;
        };
        ModelShowModel.prototype.addBaseModel = function () {
            var _this = this;
            Scene_data.cam3D.distance = 150;
            this.modelSprite = new left.MaterialModelSprite();
            this.roleSprite = new left.MaterialRoleSprite();
            this.selectShowDisp = this.modelSprite;
            TimeUtil.addFrameTick(function (t) { _this.update(t); });
            this.makeMd5MoveSprite();
        };
        ModelShowModel.prototype.changeWebModel = function () {
            this.roleSprite.changeRoleWeb(this.webmd5Sprite);
        };
        ModelShowModel.prototype.makeMd5MoveSprite = function () {
            this.webmd5Sprite = new left.LocalMd5MoveSprite();
            this.webmd5Sprite.setMd5url("2/body.md5mesh", "2/stand.md5anim", "white.jpg");
        };
        ModelShowModel.prototype.update = function (t) {
            if (this._bigPic && this._bigPic.textureRes) {
                if (this.selectShowDisp instanceof left.MaterialRoleSprite) {
                    this.selectShowDisp.updateFrame(t);
                    Scene_data.focus3D.y = 20;
                }
                else {
                    Scene_data.focus3D.y = 0;
                }
                left.SceneRenderToTextrue.getInstance().renderToTexture([this.selectShowDisp, this.webmd5Sprite]);
                if (left.SceneRenderToTextrue.getInstance().fbo) {
                    this._bigPic.textureRes.texture = left.SceneRenderToTextrue.getInstance().fbo.texture;
                }
            }
        };
        ModelShowModel.prototype.readTxtToModelBy = function (value) {
            this.modelSprite.readTxtToModel(value);
            var maxVec = new Vector3D();
            for (var i = 0; i < this.modelSprite.objData.vertices.length / 3; i++) {
                maxVec.x = Math.max(maxVec.x, Math.abs(this.modelSprite.objData.vertices[i * 3 + 0]));
                maxVec.y = Math.max(maxVec.y, Math.abs(this.modelSprite.objData.vertices[i * 3 + 1]));
                maxVec.z = Math.max(maxVec.z, Math.abs(this.modelSprite.objData.vertices[i * 3 + 2]));
            }
            left.SceneRenderToTextrue.getInstance().viweLHnumber = Math.max(maxVec.x, maxVec.y, maxVec.z) * 4;
            Scene_data.cam3D.distance = Math.max(maxVec.x, maxVec.y, maxVec.z) * 2;
            this.selectShowDisp = this.modelSprite;
        };
        ModelShowModel.prototype.changeRoleUrl = function (value) {
            var $role = new left.MaterialRoleSprite();
            $role.setRoleUrl(value);
            this.selectShowDisp = $role;
        };
        ModelShowModel.prototype.makeRoleShader = function ($treeMater) {
            var $roleShader = new left.RoleMaterialShader();
            $roleShader.buildParamAry($treeMater);
            $roleShader.vertex = $roleShader.getVertexShaderString();
            $roleShader.fragment = $treeMater.shaderStr;
            $roleShader.encode();
            console.log("----------vertex------------");
            console.log($roleShader.vertex);
            console.log("----------fragment------------");
            console.log($roleShader.fragment);
            console.log("----------roleShader------------");
            var $temp = $treeMater.clone();
            $temp.roleShader = $roleShader;
            this.selectShowDisp.material = $temp;
        };
        ModelShowModel.prototype.makeBuldShader = function ($treeMater) {
            var $buildShader = new left.BuildMaterialShader();
            $buildShader.buildParamAry($treeMater);
            $treeMater.shader.paramAry = $buildShader.paramAry;
            $buildShader.vertex = $buildShader.getVertexShaderString();
            $buildShader.fragment = $treeMater.shaderStr;
            $buildShader.encode();
            var $temp = $treeMater.clone();
            $temp.modelShader = $buildShader;
            console.log("----------vertex------------");
            console.log($buildShader.vertex);
            console.log("----------fragment------------");
            console.log($buildShader.fragment);
            console.log("----------buildShader------------");
            //将本来材质对象设置为新的效果
            this.selectShowDisp.material = $temp;
        };
        ModelShowModel.prototype.outShaderStr = function ($treeMater) {
            if (this.selectShowDisp instanceof left.MaterialModelSprite) {
                this.makeBuldShader($treeMater);
            }
            if (this.selectShowDisp instanceof left.MaterialRoleSprite) {
                this.makeRoleShader($treeMater);
            }
        };
        ModelShowModel.prototype.getMaterialProgram = function (key, shaderCls, $material, paramAry, parmaByFragmet) {
            if (paramAry === void 0) { paramAry = null; }
            if (parmaByFragmet === void 0) { parmaByFragmet = false; }
            var keyStr = key + "_" + $material.url;
            if (paramAry) {
                for (var i = 0; i < paramAry.length; i++) {
                    keyStr += "_" + paramAry[i];
                }
                if (parmaByFragmet) {
                    keyStr += "true_";
                }
                else {
                    keyStr += "false_";
                }
            }
            if (parmaByFragmet) {
                paramAry = [$material.usePbr, $material.useNormal, $material.hasFresnel,
                    $material.useDynamicIBL, $material.lightProbe, $material.directLight,
                    $material.noLight, $material.fogMode];
            }
            var shader = new MaterialShader();
            shader.paramAry = paramAry;
            shader.fragment = $material.shaderStr;
            var encodetf = shader.encode();
            shader.useNum++;
            return shader;
        };
        return ModelShowModel;
    }());
    left.ModelShowModel = ModelShowModel;
})(left || (left = {}));
//# sourceMappingURL=ModelShowModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pack;
(function (pack) {
    var RoleRes = Pan3d.RoleRes;
    var SkinMesh = Pan3d.SkinMesh;
    var BaseRes = Pan3d.BaseRes;
    var MeshData = Pan3d.MeshData;
    var AnimData = Pan3d.AnimData;
    var Dictionary = Pan3d.Dictionary;
    var DualQuatFloat32Array = Pan3d.DualQuatFloat32Array;
    var MeshDataManager = Pan3d.MeshDataManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var MeshDataChangeManager = /** @class */ (function (_super) {
        __extends(MeshDataChangeManager, _super);
        function MeshDataChangeManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MeshDataChangeManager.prototype.readData = function (byte, $batchNum, $url, $version) {
            var $SkinMesh = _super.prototype.readData.call(this, byte, $batchNum, $url, $version);
            return $SkinMesh;
        };
        MeshDataChangeManager.prototype.readMesh2OneBuffer = function (byte, meshData) {
            var len = byte.readInt();
            var typeItem = new Array;
            var dataWidth = 0;
            for (var i = 0; i < 5; i++) {
                var tf = byte.readBoolean();
                typeItem.push(tf);
                if (tf) {
                    if (i == 1) {
                        dataWidth += 2;
                    }
                    else {
                        dataWidth += 3;
                    }
                }
            }
            dataWidth += 8;
            len *= dataWidth * 4;
            var uvsOffsets = 3; // 1
            var normalsOffsets = uvsOffsets + 2; // 2
            var tangentsOffsets = normalsOffsets + 3; //3
            var bitangentsOffsets = tangentsOffsets + 3; //4
            var boneIDOffsets;
            if (typeItem[2]) { //normal
                if (typeItem[4]) {
                    boneIDOffsets = bitangentsOffsets + 3;
                }
                else {
                    boneIDOffsets = normalsOffsets + 3;
                }
            }
            else {
                boneIDOffsets = uvsOffsets + 2;
            }
            var boneWeightOffsets = boneIDOffsets + 4;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            this.readBytes2ArrayBuffer(byte, data, 3, 0, dataWidth); //vertices
            this.readBytes2ArrayBuffer(byte, data, 2, uvsOffsets, dataWidth); //uvs
            this.readBytes2ArrayBuffer(byte, data, 3, normalsOffsets, dataWidth); //normals
            this.readBytes2ArrayBuffer(byte, data, 3, tangentsOffsets, dataWidth); //tangents
            this.readBytes2ArrayBuffer(byte, data, 3, bitangentsOffsets, dataWidth); //bitangents
            this.readBytes2ArrayBuffer(byte, data, 4, boneIDOffsets, dataWidth, 2); //boneIDAry
            this.readBytes2ArrayBuffer(byte, data, 4, boneWeightOffsets, dataWidth, 1); //boneWeightAry
            meshData.vertices = this.readChangeBuff(data, 3, 0, dataWidth); //vertices
            meshData.uvs = this.readChangeBuff(data, 2, uvsOffsets, dataWidth); //uvs
            if (typeItem[2]) { //normal  //如果没有就先用顶点顶上
                meshData.normals = this.readChangeBuff(data, 3, normalsOffsets, dataWidth); //normals
            }
            else {
                meshData.normals = meshData.vertices;
            }
            if (typeItem[3]) {
                meshData.tangents = this.readChangeBuff(data, 3, tangentsOffsets, dataWidth); //tangents
            }
            else {
                meshData.tangents = meshData.normals;
            }
            if (typeItem[4]) {
                meshData.bitangents = this.readChangeBuff(data, 3, bitangentsOffsets, dataWidth); //bitangents
            }
            else {
                meshData.bitangents = meshData.normals;
            }
            meshData.boneIDAry = this.readChangeBuff(data, 4, boneIDOffsets, dataWidth); //boneIDAry
            meshData.boneWeightAry = this.readChangeBuff(data, 4, boneWeightOffsets, dataWidth); //boneWeightAry
            BaseRes.readIntForTwoByte(byte, meshData.indexs);
            BaseRes.readIntForTwoByte(byte, meshData.boneNewIDAry);
            meshData.compressBuffer = true;
            meshData.uvsOffsets = uvsOffsets * 4;
            meshData.normalsOffsets = normalsOffsets * 4;
            meshData.tangentsOffsets = tangentsOffsets * 4;
            meshData.bitangentsOffsets = bitangentsOffsets * 4;
            meshData.boneIDOffsets = boneIDOffsets * 4;
            meshData.boneWeightOffsets = boneWeightOffsets * 4;
            meshData.stride = 16 * 4; //这里强制设置 原来 dataWidth;
            meshData.vertexBuffer = Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            meshData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(meshData.indexs);
        };
        MeshDataChangeManager.prototype.readChangeBuff = function (data, $dataWidth, $offset, $stride) {
            var $arr = new Array;
            var len = data.byteLength / (4 * $stride);
            for (var i = 0; i < len; i++) {
                var pos = $stride * i + $offset;
                for (var j = 0; j < $dataWidth; j++) {
                    var id = (pos + j) * 4;
                    var num = data.getFloat32(id, true);
                    data.setFloat32(id, num, true);
                    $arr.push(num);
                }
            }
            return $arr;
        };
        MeshDataChangeManager.prototype.readBytes2ArrayBuffer = function ($byte, $data, $dataWidth, $offset, $stride, $readType) {
            if ($readType === void 0) { $readType = 0; }
            var verLength = $byte.readInt();
            if (verLength <= 0) {
                return;
            }
            var scaleNum;
            if ($readType == 0) {
                scaleNum = $byte.readFloat();
            }
            var readNum = verLength / $dataWidth;
            for (var i = 0; i < readNum; i++) {
                var pos = $stride * i + $offset;
                for (var j = 0; j < $dataWidth; j++) {
                    if ($readType == 0) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloatTwoByte(scaleNum), true);
                    }
                    else if ($readType == 1) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloatOneByte(), true);
                    }
                    else if ($readType == 2) {
                        $data.setFloat32((pos + j) * 4, $byte.readByte(), true);
                    }
                    else if ($readType == 3) {
                        $data.setFloat32((pos + j) * 4, ($byte.readByte() + 128) / 255, true);
                    }
                    else if ($readType == 4) {
                        $data.setFloat32((pos + j) * 4, $byte.readFloat(), true);
                    }
                }
            }
        };
        return MeshDataChangeManager;
    }(MeshDataManager));
    pack.MeshDataChangeManager = MeshDataChangeManager;
    var RoleChangeRes = /** @class */ (function (_super) {
        __extends(RoleChangeRes, _super);
        function RoleChangeRes() {
            var _this = _super.call(this) || this;
            _this.meshDataChangeManager = new MeshDataChangeManager();
            return _this;
        }
        RoleChangeRes.prototype.readNext = function () {
            this.read(); //readmaterial
            this.read(); //readparticle;
        };
        RoleChangeRes.prototype.readMesh = function () {
            this.roleUrl = this._byte.readUTF();
            if (this.version >= 16) { //环境参数
                this.ambientLightColor = new Vector3D;
                this.sunLigthColor = new Vector3D;
                this.nrmDircet = new Vector3D;
                this.ambientLightColor.x = this._byte.readFloat();
                this.ambientLightColor.y = this._byte.readFloat();
                this.ambientLightColor.z = this._byte.readFloat();
                this.ambientLightIntensity = this._byte.readFloat();
                this.ambientLightColor.scaleBy(this.ambientLightIntensity);
                this.sunLigthColor.x = this._byte.readFloat();
                this.sunLigthColor.y = this._byte.readFloat();
                this.sunLigthColor.z = this._byte.readFloat();
                this.sunLigthIntensity = this._byte.readFloat();
                this.sunLigthColor.scaleBy(this.sunLigthIntensity);
                this.nrmDircet.x = this._byte.readFloat();
                this.nrmDircet.y = this._byte.readFloat();
                this.nrmDircet.z = this._byte.readFloat();
            }
            this.meshDataChangeManager.readData(this._byte, this.meshBatchNum, this.roleUrl, this.version);
            this.readAction();
        };
        return RoleChangeRes;
    }(RoleRes));
    pack.RoleChangeRes = RoleChangeRes;
    var RoleChangeModel = /** @class */ (function () {
        function RoleChangeModel() {
        }
        RoleChangeModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new RoleChangeModel();
            }
            return this._instance;
        };
        RoleChangeModel.prototype.changeRoleModel = function (zzwUrl, roleDis) {
            this.materialRoleSprite = roleDis;
            this.loadWebRole(zzwUrl);
        };
        RoleChangeModel.prototype.loadLocalFile = function (arrayBuffer, roleDis) {
            this.materialRoleSprite = roleDis;
            var $roleRes = new RoleChangeRes();
            $roleRes.loadComplete(arrayBuffer);
            this.makeMeshData($roleRes);
            this.loatMaterialTree("base.material");
        };
        RoleChangeModel.prototype.makeBufToRole = function (meshData) {
            var len = (meshData.vertices.length / 3) * meshData.stride;
            var arybuff = new ArrayBuffer(len);
            var data = new DataView(arybuff);
            this.pushToBuff(data, meshData.vertices, 3, 0, meshData.stride); //vertices
            this.pushToBuff(data, meshData.uvs, 2, meshData.uvsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.tangents, 3, meshData.tangentsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.bitangents, 3, meshData.bitangentsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.normals, 3, meshData.normalsOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.boneIDAry, 4, meshData.boneIDOffsets, meshData.stride); //vertices
            this.pushToBuff(data, meshData.boneWeightAry, 4, meshData.boneWeightOffsets, meshData.stride); //vertices
            meshData.vertexBuffer = Scene_data.context3D.uploadBuff3DArrayBuffer(arybuff);
            meshData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(meshData.indexs);
        };
        RoleChangeModel.prototype.pushToBuff = function (data, arr, dataWidth, offset, stride) {
            var $len = data.byteLength / stride;
            var arrId = 0;
            for (var i = 0; i < $len; i++) {
                var pos = i * stride + offset;
                for (var j = 0; j < dataWidth; j++) {
                    var $num = arr[arrId++];
                    data.setFloat32(pos + j * 4, $num, true);
                }
            }
        };
        RoleChangeModel.prototype.makeMeshData = function ($roleRes) {
            //比较差的方法存放并修改模型文件
            var $mesh = $roleRes.meshDataChangeManager.getMeshDataByLocalUrl($roleRes.roleUrl);
            var url = $roleRes.roleUrl;
            //  $mesh.loadMaterial();
            $mesh.setAction($roleRes.actionAry, url);
            $mesh.url = url;
            if ($roleRes.ambientLightColor) {
                $mesh.lightData = [[$roleRes.ambientLightColor.x, $roleRes.ambientLightColor.y, $roleRes.ambientLightColor.z],
                    [$roleRes.nrmDircet.x, $roleRes.nrmDircet.y, $roleRes.nrmDircet.z],
                    [$roleRes.sunLigthColor.x, $roleRes.sunLigthColor.y, $roleRes.sunLigthColor.z]];
            }
            $mesh.ready = true;
            this.meshAnimDic($mesh.animDic);
            for (var i = 0; i < $mesh.meshAry.length; i++) {
                var $meshData = new MeshData();
                this.makeBufToRole($mesh.meshAry[i]);
                $meshData.compressBuffer = true;
                $meshData.vertexBuffer = $mesh.meshAry[i].vertexBuffer;
                $meshData.indexBuffer = $mesh.meshAry[i].indexBuffer;
                $meshData.uid = $mesh.meshAry[i].uid;
                $meshData.stride = $mesh.meshAry[i].stride;
                $meshData.treNum = $mesh.meshAry[i].treNum;
                $meshData.uvsOffsets = $mesh.meshAry[i].uvsOffsets;
                $meshData.tangentsOffsets = $mesh.meshAry[i].tangentsOffsets;
                $meshData.bitangentsOffsets = $mesh.meshAry[i].bitangentsOffsets;
                $meshData.normalsOffsets = $mesh.meshAry[i].normalsOffsets;
                $meshData.boneIDOffsets = $mesh.meshAry[i].boneIDOffsets;
                $meshData.boneWeightOffsets = $mesh.meshAry[i].boneWeightOffsets;
            }
            this.materialRoleSprite.skinMesh = $mesh;
        };
        RoleChangeModel.prototype.meshAnimDic = function (animDic) {
            var $dic = {};
            for (var key in animDic) {
                var $temp = animDic[key];
                var $animData = new AnimData;
                $animData.meshBoneQPAryDic = $temp.meshBoneQPAryDic;
                $dic[key] = $animData;
            }
            this.materialRoleSprite.animDic = $dic;
        };
        RoleChangeModel.prototype.getChangeRoleStr = function () {
            if (this.materialRoleSprite.skinMesh) {
                var temp = {};
                temp.meshAry = this.materialRoleSprite.skinMesh.meshAry;
                temp.animDic = this.materialRoleSprite.animDic;
                for (var i = 0; i < temp.meshAry.length; i++) {
                    temp.meshAry[i].materialUrl = "assets/base/base.material";
                }
                var $str = JSON.stringify(temp);
                return $str;
            }
            else {
                return null;
            }
        };
        RoleChangeModel.prototype.getFloat32ArrayByArr = function (obj) {
            var numarr = new Array;
            for (var key in obj) {
                numarr.push(obj[key]);
            }
            var temp = new Float32Array(numarr.length);
            for (var i = 0; i < numarr.length; i++) {
                temp[i] = numarr[i];
            }
            return temp;
        };
        RoleChangeModel.prototype.getmeshBoneQPAryDic = function ($arr) {
            var item = new Dictionary([]);
            for (var key in $arr) {
                var a1 = new Array;
                for (var j = 0; j < $arr[key].length; j++) {
                    var a2 = $arr[key][j];
                    var a3 = new Array();
                    for (var k = 0; k < a2.length; k++) {
                        var a4 = a2[k];
                        var $dbq = new DualQuatFloat32Array();
                        $dbq.quat = this.getFloat32ArrayByArr(a4.quat);
                        $dbq.pos = this.getFloat32ArrayByArr(a4.pos);
                        a3.push($dbq);
                    }
                    a1.push(a3);
                }
                item[key] = a1;
            }
            return item;
        };
        RoleChangeModel.prototype.loatMaterialTree = function (textureurl) {
            var _this = this;
            pack.PackMaterialManager.getInstance().getMaterialByUrl(textureurl, function (materialTree) {
                materialTree.shader = materialTree.roleShader;
                //     materialTree.program = materialTree.shader.program;
                _this.materialRoleSprite.material = materialTree;
            });
        };
        RoleChangeModel.prototype.loadWebRole = function (zzwUrl) {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + zzwUrl, LoadManager.XML_TYPE, function ($str) {
                var temp = JSON.parse($str);
                console.log(temp);
                var $skinMesh = new SkinMesh();
                $skinMesh.meshAry = new Array();
                for (var i = 0; i < temp.meshAry.length; i++) {
                    var $meshData = new MeshData();
                    $meshData.vertices = temp.meshAry[i].vertices;
                    $meshData.uvs = temp.meshAry[i].uvs;
                    $meshData.tangents = temp.meshAry[i].tangents;
                    $meshData.bitangents = temp.meshAry[i].bitangents;
                    $meshData.boneIDAry = temp.meshAry[i].boneIDAry;
                    $meshData.boneWeightAry = temp.meshAry[i].boneWeightAry;
                    $meshData.normals = temp.meshAry[i].normals;
                    $meshData.indexs = temp.meshAry[i].indexs;
                    $meshData.stride = temp.meshAry[i].stride;
                    $meshData.uid = temp.meshAry[i].uid;
                    $meshData.treNum = temp.meshAry[i]._treNum;
                    //   $meshData.treNum =400*3
                    $meshData.uvsOffsets = temp.meshAry[i].uvsOffsets;
                    $meshData.tangentsOffsets = temp.meshAry[i].tangentsOffsets;
                    $meshData.bitangentsOffsets = temp.meshAry[i].bitangentsOffsets;
                    $meshData.normalsOffsets = temp.meshAry[i].normalsOffsets;
                    $meshData.boneIDOffsets = temp.meshAry[i].boneIDOffsets;
                    $meshData.boneWeightOffsets = temp.meshAry[i].boneWeightOffsets;
                    _this.makeBufToRole($meshData);
                    $meshData.compressBuffer = true;
                    // this.materialRoleSprite.skinMesh.meshAry[i] = $meshData;
                    $skinMesh.meshAry.push($meshData);
                }
                var $animDic = {};
                for (var key in temp.animDic) {
                    // var $temp: AnimData = temp.animDic[key];
                    var $animData = new AnimData;
                    $animData.meshBoneQPAryDic = _this.getmeshBoneQPAryDic(temp.animDic[key].meshBoneQPAryDic);
                    $animDic[key] = $animData;
                }
                _this.materialRoleSprite.skinMesh = $skinMesh;
                _this.materialRoleSprite.animDic = $animDic;
                _this.loatMaterialTree(temp.textureurl);
            });
        };
        return RoleChangeModel;
    }());
    pack.RoleChangeModel = RoleChangeModel;
})(pack || (pack = {}));
//# sourceMappingURL=RoleChangeModel.js.map
var editscene;
(function (editscene) {
    var UIManager = Pan3d.UIManager;
    var MouseType = Pan3d.MouseType;
    var ChangeNameModel = /** @class */ (function () {
        function ChangeNameModel() {
            var _this = this;
            this.onMouseDownFun = function ($evt) { _this.onMouseDown($evt); };
            this.changFun = function (cevt) { _this.changeInputTxt(cevt); };
        }
        ChangeNameModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new ChangeNameModel();
            }
            return this._instance;
        };
        Object.defineProperty(ChangeNameModel.prototype, "chatHtmlInput", {
            get: function () {
                return this._chatHtmlInput;
            },
            set: function (value) {
                console.log("value", value);
                this._chatHtmlInput = value;
            },
            enumerable: true,
            configurable: true
        });
        ChangeNameModel.prototype.setInputTxtPos = function () {
            if (!this.chatHtmlInput) {
                this.chatHtmlInput = document.createElement("input");
                this.chatHtmlInput.style.position = "absolute";
                this.chatHtmlInput.style["z-index"] = 100;
                document.body.appendChild(this.chatHtmlInput);
                //    this.chatHtmlInput.addEventListener("change", this.changFun);
                document.addEventListener(MouseType.MouseDown, this.onMouseDownFun);
            }
        };
        ChangeNameModel.prototype.changeInputTxt = function (evt) {
            if (this.chatHtmlInput) {
                this.changeBfun(this.chatHtmlInput.value);
                win.LayerManager.isHideMouseEvent = false;
                document.removeEventListener(MouseType.MouseDown, this.onMouseDownFun);
                if (this.chatHtmlInput.parentElement) {
                    document.body.removeChild(this.chatHtmlInput);
                }
                this.chatHtmlInput = null;
            }
        };
        ChangeNameModel.prototype.getTextMetrics = function ($str, fontsize) {
            if (fontsize === void 0) { fontsize = 12; }
            var $ctx = UIManager.getInstance().getContext2D(100, 100, false);
            $ctx.font = fontsize + "px serif";
            return $ctx.measureText($str);
        };
        ChangeNameModel.prototype.changeName = function (rect, str, bfun) {
            var _this = this;
            this.changeBfun = bfun;
            this.setInputTxtPos();
            win.LayerManager.isHideMouseEvent = true;
            this.chatHtmlInput.style.left = rect.x + "px";
            this.chatHtmlInput.style.top = rect.y + "px";
            this.chatHtmlInput.style.fontSize = String(12) + "px";
            this.chatHtmlInput.style.width = String(rect.width) + "px";
            this.chatHtmlInput.style.height = String(rect.height) + "px";
            this.chatHtmlInput.value = str;
            setTimeout(function () { _this.chatHtmlInput.focus(); }, 1);
        };
        ChangeNameModel.prototype.onMouseDown = function ($e) {
            if ($e.target != this.chatHtmlInput) {
                this.changeInputTxt(null);
            }
            else {
                console.log("还在");
            }
        };
        return ChangeNameModel;
    }());
    editscene.ChangeNameModel = ChangeNameModel;
})(editscene || (editscene = {}));
//# sourceMappingURL=ChangeNameModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIManager = Pan3d.UIManager;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var TextureManager = Pan3d.TextureManager;
    var Rectangle = Pan3d.Rectangle;
    var UIAtlas = Pan3d.UIAtlas;
    var ByteArray = Pan3d.Pan3dByteArray;
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var Dis2DUIContianerPanel = Pan3d.Dis2DUIContianerPanel;
    var MenuListData = /** @class */ (function () {
        function MenuListData($label, $key) {
            if ($key === void 0) { $key = null; }
            this.select = false;
            this.label = $label;
            this.key = $key;
        }
        return MenuListData;
    }());
    editscene.MenuListData = MenuListData;
    var LabelTxtVo = /** @class */ (function (_super) {
        __extends(LabelTxtVo, _super);
        function LabelTxtVo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.uiScale = 0.5;
            return _this;
        }
        LabelTxtVo.prototype.makeData = function () {
            if (this.rightTabInfoVo) {
                this.ui.width = this.ui.baseRec.width * this.uiScale;
                this.ui.height = this.ui.baseRec.height * this.uiScale;
                var $menuListData = this.rightTabInfoVo;
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 0, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                var colorFont = $menuListData.select ? "[ffffff]" : "[9c9c9c]";
                var tx;
                switch ($menuListData.level) {
                    case 0:
                        if ($menuListData.select) {
                            this.drawToUiAtlasToCtx(this.parent.uiAtlas.ctx, LabelTxtVo.shareUiAtlas, MenuListData.showSon ? "S_menu_down_bg" : "S_menu_bg", new Rectangle(0, 0, $uiRec.pixelWitdh + 1, $uiRec.pixelHeight + 1));
                        }
                        colorFont = $menuListData.select ? "#ffffff" : "#ffffff";
                        tx = 40;
                        break;
                    case 1:
                        colorFont = $menuListData.select ? "#ffffff" : "#000000";
                        var colorBg = $menuListData.select ? "#000000" : "#ffffff";
                        this.parent.uiAtlas.ctx.fillStyle = colorBg; // text color
                        this.parent.uiAtlas.ctx.fillRect(0, 0, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                        tx = 10;
                        break;
                    default:
                        colorFont = $menuListData.select ? "[ffffff]" : "[9c9c9c]";
                        break;
                }
                var ctx = this.parent.uiAtlas.ctx;
                ctx.font = "24px Helvetica";
                ctx.fillStyle = colorFont;
                ctx.lineWidth = 0;
                ctx.fillText($menuListData.label, tx, 15);
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        LabelTxtVo.prototype.drawToUiAtlasToCtx = function ($ctx, $fromuiAtlas, $shareName, $posRect) {
            var imgUseRect = $fromuiAtlas.getRec($shareName);
            $ctx.drawImage($fromuiAtlas.useImg, imgUseRect.pixelX, imgUseRect.pixelY, imgUseRect.pixelWitdh, imgUseRect.pixelHeight, $posRect.x, $posRect.y, $posRect.width, $posRect.height);
        };
        return LabelTxtVo;
    }(Disp2DBaseText));
    editscene.LabelTxtVo = LabelTxtVo;
    var EditTopMenuPanel = /** @class */ (function (_super) {
        __extends(EditTopMenuPanel, _super);
        function EditTopMenuPanel() {
            var _this = _super.call(this, LabelTxtVo, new Rectangle(0, 0, 140, 48), 50) || this;
            _this.meneType = 0;
            _this._bottomRender = new UIRenderComponent();
            _this._bottomRender.uiAtlas = new UIAtlas();
            _this._bottomRender.uiAtlas.setInfo("ui/window/window.txt", "ui/window/window.png", function () { _this.loadConfigCom(); });
            _this.addRenderAt(_this._bottomRender, 0);
            AppData.topPanel.addUIContainer(_this);
            return _this;
        }
        EditTopMenuPanel.getInstance = function () {
            if (!this._instance) {
                this._instance = new EditTopMenuPanel();
            }
            return this._instance;
        };
        EditTopMenuPanel.prototype.loadConfigCom = function () {
            LabelTxtVo.shareUiAtlas = this._bottomRender.uiAtlas;
            this.winBg = this.addChild(this._bottomRender.getComponent("e_topmenu_bg"));
            this.uiLoadComplete = true;
            if (this.uiLoadComplete) {
                if (this.meneType == 0) {
                    this.makeSceneTopMenu();
                }
                if (this.meneType == 1) {
                    this.makeTextureTopMenu();
                }
            }
            this.resize();
        };
        EditTopMenuPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.uiLoadComplete) {
                this.winBg.x = 0;
                this.winBg.y = 0;
                this.winBg.width = Scene_data.stageWidth;
                this.winBg.height = 29;
            }
        };
        EditTopMenuPanel.prototype.initMenuData = function (value) {
            this.clearAll();
            this.menuXmlItem = value.menuXmlItem;
            meshFunSon(this.menuXmlItem, 0);
            function meshFunSon(subMenu, level) {
                for (var i = 0; subMenu && i < subMenu.length; i++) {
                    subMenu[i].level = level;
                    meshFunSon(subMenu[i].subMenu, level + 1);
                }
            }
        };
        EditTopMenuPanel.prototype.getMenu0 = function () {
            var $vo = new MenuListData("菜单", "1");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("保存场景", "11"));
            $vo.subMenu.push(new MenuListData("清理场景", "12"));
            return $vo;
        };
        EditTopMenuPanel.prototype.getMenu1 = function () {
            var $vo = new MenuListData("窗口", "2");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("场景属性", "21"));
            $vo.subMenu.push(new MenuListData("测试导入场景", "22"));
            $vo.subMenu.push(new MenuListData("文件列表", "23"));
            return $vo;
        };
        EditTopMenuPanel.prototype.getMenu2 = function () {
            var $vo = new MenuListData("导入", "3");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("导入场景", "31"));
            $vo.subMenu.push(new MenuListData("导入模型", "32"));
            $vo.subMenu.push(new MenuListData("导入特效", "33"));
            $vo.subMenu.push(new MenuListData("临时修改", "34"));
            return $vo;
        };
        EditTopMenuPanel.prototype.makeSceneTopMenu = function () {
            var _this = this;
            this.meneType = 0;
            if (this.uiLoadComplete) {
                var temp = {};
                var menuA = new Array();
                menuA.push(this.getMenu0());
                menuA.push(this.getMenu1());
                menuA.push(this.getMenu2());
                menuA.push(new MenuListData("系统", "3"));
                temp.menuXmlItem = menuA;
                this.bfun = function (value, evt) { _this.menuBfun(value, evt); };
                this.initMenuData(temp);
                this.showMainUi();
            }
        };
        EditTopMenuPanel.prototype.makeTextureTopMenu = function () {
            var _this = this;
            this.meneType = 1;
            if (this.uiLoadComplete) {
                var temp = {};
                var menuB = new Array();
                menuB.push(new MenuListData("保存材质", "1001"));
                menuB.push(new MenuListData("编译材质", "1002"));
                menuB.push(new MenuListData("关闭材质窗口", "1003"));
                menuB.push(new MenuListData("返回场景", "1004"));
                temp.menuXmlItem = menuB;
                this.bfun = function (value, evt) { _this.menuBfun(value, evt); };
                this.initMenuData(temp);
                this.showMainUi();
            }
        };
        EditTopMenuPanel.prototype.menuBfun = function (value, evt) {
            var _this = this;
            console.log(value.key);
            switch (value.key) {
                case "11":
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SAVE_SCENE_MAP_TO_SEVER));
                    break;
                case "12":
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.CLEAR_SCENE_MAP_ALL));
                    break;
                case "21":
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SHOW_SCENE_POJECT_MESH_VIEW));
                    break;
                case "22":
                    break;
                case "23":
                    break;
                case "31":
                    //解析地图
                    pack.FileOssModel.upTempFileToOss(function ($file) {
                        var idx = AppData.mapOpenUrl.lastIndexOf(".");
                        if (idx != -1) {
                            var mapDic = AppData.mapOpenUrl.substring(0, idx) + "/";
                            inputres.ImputGameResModel.getInstance().inputSceneFile($file, mapDic);
                        }
                    });
                    break;
                case "32":
                    pack.FileOssModel.upTempFileToOss(function ($file) {
                        _this.inputH5roleRes($file);
                    });
                    break;
                case "34":
                    break;
                case "1001":
                    ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SAVE_MATERIA_PANEL));
                    break;
                case "1002":
                    ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
                    break;
                case "1003":
                    break;
                case "1004":
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SHOW_MAIN_EDITOR_PANEL));
                    break;
                default:
                    break;
            }
        };
        EditTopMenuPanel.prototype.isRoleFile = function (arrayBuffer) {
            var $byte = new ByteArray(arrayBuffer);
            $byte.position = 0;
            var $version = $byte.readInt();
            var $url = $byte.readUTF();
            if ($url.indexOf("role/") != -1) {
                return true;
            }
            else {
                return false;
            }
        };
        EditTopMenuPanel.prototype.inputH5roleRes = function (soureFile) {
            var _this = this;
            var $reader = new FileReader();
            $reader.readAsArrayBuffer(soureFile);
            $reader.onload = function ($temp) {
                if (_this.isRoleFile($reader.result)) {
                    var role = new left.MaterialRoleSprite();
                    maineditor.MainEditorProcessor.edItorSceneManager.addMovieDisplay(role);
                    pack.RoleChangeModel.getInstance().loadLocalFile($reader.result, role);
                    var $roleStr = pack.RoleChangeModel.getInstance().getChangeRoleStr();
                    if ($roleStr) {
                        var $file = new File([$roleStr], "ossfile.txt");
                        console.log(soureFile.name);
                        var baseRoot = AppData.getPerentPath(AppData.rootFilePath);
                        console.log(baseRoot);
                        var pathurl = baseRoot + soureFile.name.replace(".txt", ".zzw");
                        pack.FileOssModel.upOssFile($file, pathurl, function () {
                            console.log("上传成功", pathurl);
                        });
                    }
                    else {
                        console.log("没有可上传mesh数据");
                    }
                }
                else {
                    alert("不确定类型,需要角色文件role/");
                }
            };
        };
        EditTopMenuPanel.prototype.changeZZW = function () {
            var $url = "pefab/role_base.zzw";
            LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($str) {
                var temp = JSON.parse($str);
                temp.textureurl = "base.material";
                var $file = new File([JSON.stringify(temp)], "ossfile.txt");
                var pathUrl = Pan3d.Scene_data.fileRoot + $url;
                var pathurl = pathUrl.replace(Pan3d.Scene_data.ossRoot, "");
                pack.FileOssModel.upOssFile($file, pathurl, function () {
                    console.log("上传成功");
                });
            });
        };
        EditTopMenuPanel.prototype.showMainUi = function () {
            this.clearAll();
            Pan3d.Scene_data.uiBlankStage.addEventListener(InteractiveEvent.Up, this.onStageMouseUp, this);
            this.showSon(this.menuXmlItem, 20, 0);
        };
        EditTopMenuPanel.prototype.onStageMouseUp = function ($evt) {
            var needOut = true;
            for (var i = 0; i < this._uiItem.length; i++) {
                var menuListData = this._uiItem[i].rightTabInfoVo;
                if (menuListData && this._uiItem[i].ui.testPoint($evt.x, $evt.y)) {
                    needOut = false;
                }
            }
            if (needOut) {
                for (var i = 0; i < this._uiItem.length; i++) {
                    var menuListData = this._uiItem[i].rightTabInfoVo;
                    if (menuListData && menuListData.select) {
                        menuListData.select = false;
                        this._uiItem[i].makeData();
                    }
                }
                this.removeOtherSonMenu(0);
            }
        };
        EditTopMenuPanel.prototype.showTempMenu = function ($data, i, tx, ty) {
            var temp = _super.prototype.showTemp.call(this, $data);
            if ($data.level == 0) {
                temp.ui.x = i * 70 + 5;
                temp.ui.y = 1;
            }
            else {
                temp.ui.x = tx + 4;
                temp.ui.y = i * 20 + ty - 4;
            }
            temp.ui.addEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.addEventListener(InteractiveEvent.Down, this.onMouseUp, this);
            return temp;
        };
        //清理单元内的内容并需要将对象移出显示队例
        EditTopMenuPanel.prototype.clearTemp = function ($data) {
            var temp = this.getVoByData($data);
            temp.ui.removeEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.removeEventListener(InteractiveEvent.Down, this.onMouseUp, this);
            _super.prototype.clearTemp.call(this, $data);
        };
        EditTopMenuPanel.prototype.setColorByLevel = function (value) {
            for (var i = 0; i < this._uiItem.length; i++) {
                var menuListData = this._uiItem[i].rightTabInfoVo;
                if (menuListData && menuListData.level == value) {
                    menuListData.select = false;
                    this._uiItem[i].makeData();
                }
            }
        };
        EditTopMenuPanel.prototype.removeOtherSonMenu = function (level) {
            console.log("removeOtherSonMenu");
            for (var i = this._uiItem.length - 1; i >= 0; i--) {
                var $menuListData = this._uiItem[i].rightTabInfoVo;
                if ($menuListData && $menuListData.level > level) {
                    $menuListData.select = false;
                    this.clearTemp($menuListData);
                }
            }
        };
        EditTopMenuPanel.prototype.butMove = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                var menuListData = temp.rightTabInfoVo;
                this.setColorByLevel(menuListData.level);
                menuListData.select = true;
                temp.makeData();
                if (MenuListData.showSon) {
                    this.removeOtherSonMenu(menuListData.level);
                    this.showSon(menuListData.subMenu, temp.ui.x, temp.ui.y + temp.ui.height);
                }
            }
        };
        EditTopMenuPanel.prototype.onMouseUp = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                this.bfun(temp.rightTabInfoVo, evt);
                if (MenuListData.showSon) {
                    this.removeOtherSonMenu(0);
                    MenuListData.showSon = false;
                }
                else {
                    MenuListData.showSon = true;
                    this.butMove(evt);
                }
            }
        };
        EditTopMenuPanel.prototype.showSon = function (subMenu, tx, ty) {
            for (var i = 0; subMenu && i < subMenu.length; i++) {
                var labelTxtVo = this.getVoByData(subMenu[i]);
                if (!labelTxtVo) {
                    this.showTempMenu(subMenu[i], i, tx, ty);
                }
            }
        };
        return EditTopMenuPanel;
    }(Dis2DUIContianerPanel));
    editscene.EditTopMenuPanel = EditTopMenuPanel;
})(editscene || (editscene = {}));
//# sourceMappingURL=EditTopMenuPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var Rectangle = Pan3d.Rectangle;
    var Sprite = win.Sprite;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Vector2D = Pan3d.Vector2D;
    var Scene_data = Pan3d.Scene_data;
    var TempSceneLine = /** @class */ (function (_super) {
        __extends(TempSceneLine, _super);
        function TempSceneLine() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.hideItemDic = {};
            _this._leftSpeed = 1;
            _this._rightSpeed = 1;
            _this._bottomSpeed = 1;
            _this.leftWidthNum = 300; //左边宽度；
            _this.rightWidthNum = 300; //右边宽度；
            _this.bottomHeightNum = 300; //底下宽度；
            _this.menuHeight = 28;
            return _this;
        }
        TempSceneLine.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.leftLine = this._baseTopRender.getComponent("a_empty");
            this.rightLine = this._baseTopRender.getComponent("a_empty");
            this.bottomLine = this._baseTopRender.getComponent("a_empty");
            this.setUiListVisibleByItem([this.leftLine], true);
            this.setUiListVisibleByItem([this.rightLine], true);
            this.setUiListVisibleByItem([this.bottomLine], true);
            this.leftLineMin = this._baseTopRender.getComponent("b_line_pixe_point");
            this.rightLineMin = this._baseTopRender.getComponent("b_line_pixe_point");
            this.bottomLineMin = this._baseTopRender.getComponent("b_line_pixe_point");
            this.closeLeftBut = this.addEvntButUp("e_left_close_but", this._baseTopRender);
            this.closeRightBut = this.addEvntButUp("e_right_close_but", this._baseTopRender);
            this.closeBottomBut = this.addEvntButUp("e_bottom_close_but", this._baseTopRender);
            //this.closeLeftBut.width = 10
            //this.closeLeftBut.height = 60
            //this.closeRightBut.width = 10
            //this.closeRightBut.height = 60
            //this.closeBottomBut.width = 60
            //this.closeBottomBut.height = 10
            this.setUiListVisibleByItem([this.leftLineMin], true);
            this.setUiListVisibleByItem([this.rightLineMin], true);
            this.setUiListVisibleByItem([this.bottomLineMin], true);
            this.leftLine.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.rightLine.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.bottomLine.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.setRect(new Rectangle(0, 0, Scene_data.stageWidth, Scene_data.stageHeight));
            this.resize();
            //     console.log("ui布局完成")
        };
        TempSceneLine.prototype.butClik = function (evt) {
            switch (evt.target) {
                case this.closeLeftBut:
                    this.hideItemDic["left"] = !this.hideItemDic["left"];
                    this.leftSpeed = 0;
                    TweenLite.to(this, 0.2, { leftSpeed: 1 });
                    break;
                case this.closeRightBut:
                    this.hideItemDic["right"] = !this.hideItemDic["right"];
                    this.rightSpeed = 0;
                    TweenLite.to(this, 0.2, { rightSpeed: 1 });
                    break;
                case this.closeBottomBut:
                    this.hideItemDic["bottom"] = !this.hideItemDic["bottom"];
                    this.bottomSpeed = 0;
                    TweenLite.to(this, 0.2, { bottomSpeed: 1 });
                    break;
                default:
            }
        };
        Object.defineProperty(TempSceneLine.prototype, "leftSpeed", {
            get: function () {
                return this._leftSpeed;
            },
            set: function (value) {
                this._leftSpeed = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TempSceneLine.prototype, "rightSpeed", {
            get: function () {
                return this._rightSpeed;
            },
            set: function (value) {
                this._rightSpeed = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TempSceneLine.prototype, "bottomSpeed", {
            get: function () {
                return this._bottomSpeed;
            },
            set: function (value) {
                this._bottomSpeed = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        TempSceneLine.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.bottomLine) {
                var leftNum = this.leftWidthNum;
                var rightNum = this.rightWidthNum;
                var bottomNum = this.bottomHeightNum;
                if (this.hideItemDic["left"]) { //左边关关闭
                    leftNum = (1 - this._leftSpeed) * this.leftWidthNum;
                }
                else {
                    leftNum = this._leftSpeed * this.leftWidthNum;
                }
                if (this.hideItemDic["right"]) { //左边关关闭
                    rightNum = (1 - this._rightSpeed) * this.rightWidthNum;
                }
                else {
                    rightNum = this._rightSpeed * this.rightWidthNum;
                }
                if (this.hideItemDic["bottom"]) { //左边关关闭
                    bottomNum = 20;
                    bottomNum = (1 - this._bottomSpeed) * this.bottomHeightNum + 20;
                }
                else {
                    bottomNum = this._bottomSpeed * this.bottomHeightNum;
                }
                this.leftLine.x = leftNum - 5;
                this.leftLine.y = 0;
                this.leftLine.width = 10;
                this.leftLine.height = Scene_data.stageHeight - bottomNum;
                this.closeLeftBut.x = this.leftLine.x + 4;
                this.closeLeftBut.y = this.leftLine.height / 2 - this.closeLeftBut.height / 2;
                this.rightLine.x = Scene_data.stageWidth - rightNum - 6;
                this.rightLine.y = 0;
                this.rightLine.width = 10;
                this.rightLine.height = Scene_data.stageHeight;
                this.closeRightBut.x = this.rightLine.x - 6;
                this.closeRightBut.y = this.closeLeftBut.y;
                this.bottomLine.x = 0;
                this.bottomLine.y = Scene_data.stageHeight - bottomNum - 5;
                this.bottomLine.width = Scene_data.stageWidth - rightNum;
                this.bottomLine.height = 10;
                this.closeBottomBut.x = leftNum + (this.bottomLine.width - leftNum) / 2 - this.closeBottomBut.width / 2;
                this.closeBottomBut.y = this.bottomLine.y - 5;
                this.leftLineMin.x = this.leftLine.x + 5;
                this.leftLineMin.y = this.leftLine.y;
                this.leftLineMin.width = 2;
                this.leftLineMin.height = this.leftLine.height;
                this.rightLineMin.x = this.rightLine.x + 5;
                this.rightLineMin.y = this.rightLine.y;
                this.rightLineMin.width = 2;
                this.rightLineMin.height = this.rightLine.height;
                this.bottomLineMin.x = this.bottomLine.x;
                this.bottomLineMin.y = this.bottomLine.y + 5;
                this.bottomLineMin.width = this.bottomLine.width;
                this.bottomLineMin.height = 2;
                editscene.EditLeftPanel.leftPanel.y = this.menuHeight;
                AppData.centenPanel.y = this.menuHeight;
                AppData.rightPanel.y = this.menuHeight;
                if (this.hideItemDic["left"]) { //左边关关闭
                    editscene.EditLeftPanel.leftPanel.x = -this.leftWidthNum * this._leftSpeed;
                }
                else {
                    editscene.EditLeftPanel.leftPanel.x = this.leftWidthNum * (this._leftSpeed - 1);
                }
                editscene.EditLeftPanel.leftPanel.height = Scene_data.stageHeight - bottomNum - this.menuHeight;
                editscene.EditLeftPanel.leftPanel.width = this.leftWidthNum;
                editscene.EditLeftPanel.leftPanel.resize();
                AppData.rightPanel.x = Scene_data.stageWidth - rightNum;
                AppData.rightPanel.height = Scene_data.stageHeight - this.menuHeight;
                AppData.rightPanel.width = rightNum;
                AppData.rightPanel.resize();
                AppData.centenPanel.x = leftNum;
                AppData.centenPanel.height = Scene_data.stageHeight - bottomNum - this.menuHeight;
                AppData.centenPanel.width = Scene_data.stageWidth - leftNum - rightNum;
                AppData.centenPanel.width = Scene_data.stageWidth - leftNum - rightNum;
                AppData.centenPanel.resize();
                var rect = new Rectangle(0, Scene_data.stageHeight - bottomNum + 2, Scene_data.stageWidth - rightNum, bottomNum);
                Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.EDITSCENE_RESET_SIZE), rect);
                Pan3d.ModuleEventManager.dispatchEvent(new editscene.EditSceneEvent(editscene.EditSceneEvent.EDITE_SCENE_RESIZE), rect);
                prop.PropModel.getInstance().resize();
            }
        };
        TempSceneLine.prototype.tittleMouseDown = function (evt) {
            this.mouseMoveTaget = evt.target;
            this.lastMousePos = new Vector2D(evt.x, evt.y);
            switch (this.mouseMoveTaget) {
                case this.leftLine:
                case this.rightLine:
                case this.bottomLine:
                    this.lastPagePos = new Vector2D(evt.target.x, evt.target.y);
                    this.lastLaoutVec = new Vector3D(this.leftWidthNum, this.rightWidthNum, this.bottomHeightNum);
                    break;
                default:
                    break;
            }
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.mouseOnTittleMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.tittleMouseUp, this);
        };
        TempSceneLine.prototype.mouseOnTittleMove = function (evt) {
            switch (this.mouseMoveTaget) {
                case this.leftLine:
                    this.leftWidthNum = this.lastLaoutVec.x + (evt.x - this.lastMousePos.x);
                    this.leftWidthNum = Math.min((Scene_data.stageWidth - this.rightWidthNum) - 100, this.leftWidthNum);
                    this.leftWidthNum = Math.max(300, this.leftWidthNum);
                    break;
                case this.rightLine:
                    this.rightWidthNum = this.lastLaoutVec.y - (evt.x - this.lastMousePos.x);
                    this.rightWidthNum = Math.min((Scene_data.stageWidth - this.leftWidthNum) - 100, this.rightWidthNum);
                    this.rightWidthNum = Math.max(100, this.rightWidthNum);
                    break;
                case this.bottomLine:
                    this.bottomHeightNum = this.lastLaoutVec.z - (evt.y - this.lastMousePos.y);
                    this.bottomHeightNum = Math.min(Scene_data.stageHeight - 100, this.bottomHeightNum);
                    this.bottomHeightNum = Math.max(100, this.bottomHeightNum);
                    break;
                default:
                    console.log("nonono");
                    break;
            }
            this.resize();
        };
        return TempSceneLine;
    }(win.BaseWindow));
    editscene.TempSceneLine = TempSceneLine;
    var EditSceneLine = /** @class */ (function (_super) {
        __extends(EditSceneLine, _super);
        function EditSceneLine(has) {
            if (has === void 0) { has = true; }
            var _this = _super.call(this) || this;
            _this.winBg = new TempSceneLine();
            _this.addUIContainer(_this.winBg);
            _this.changeSize();
            return _this;
        }
        return EditSceneLine;
    }(Sprite));
    editscene.EditSceneLine = EditSceneLine;
})(editscene || (editscene = {}));
//# sourceMappingURL=EditSceneLine.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var Panel = win.Panel;
    var EditLeftPanel = /** @class */ (function (_super) {
        __extends(EditLeftPanel, _super);
        function EditLeftPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EditLeftPanel.prototype.addUIContainer = function ($container) {
            if ($container["only"]) { //唯一标记
                this.removeNeedRemove();
            }
            _super.prototype.addUIContainer.call(this, $container);
            if ($container["propPanle"]) { //特殊添加组件面板
                this.addChild($container["propPanle"]);
            }
        };
        EditLeftPanel.prototype.removeNeedRemove = function () {
            for (var i = (this._containerList.length - 1); i >= 0; i--) {
                if (this._containerList[i]["only"]) { //标记需要移除，不能同时存在的面板
                    this.removeUIContainer(this._containerList[i]);
                }
            }
        };
        EditLeftPanel.prototype.removeUIContainer = function ($container) {
            if ($container["propPanle"]) { //特殊添加组件面板
                this.removeChild($container["propPanle"]);
            }
            _super.prototype.removeUIContainer.call(this, $container);
        };
        EditLeftPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].resize();
            }
        };
        return EditLeftPanel;
    }(Panel));
    editscene.EditLeftPanel = EditLeftPanel;
})(editscene || (editscene = {}));
//# sourceMappingURL=EditLeftPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var Rectangle = Pan3d.Rectangle;
    var TextureManager = Pan3d.TextureManager;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var UIData = Pan3d.UIData;
    var Panel = win.Panel;
    var RightTabInfoVo = /** @class */ (function () {
        function RightTabInfoVo() {
        }
        return RightTabInfoVo;
    }());
    editscene.RightTabInfoVo = RightTabInfoVo;
    var RightTabText = /** @class */ (function (_super) {
        __extends(RightTabText, _super);
        function RightTabText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RightTabText.prototype, "select", {
            get: function () {
                return this._select;
            },
            set: function (value) {
                this._select = value;
                this.makeData();
            },
            enumerable: true,
            configurable: true
        });
        RightTabText.prototype.makeData = function () {
            if (this.rightTabInfoVo) {
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                var nameStr = this.rightTabInfoVo.label;
                if (this._select) {
                    nameStr = "[ffffff]" + nameStr;
                }
                else {
                    nameStr = "[9c9c9c]" + nameStr;
                }
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, nameStr, 24, 1, 1, TextAlign.LEFT);
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        return RightTabText;
    }(Disp2DBaseText));
    editscene.RightTabText = RightTabText;
    var RightOpenList = /** @class */ (function () {
        function RightOpenList(value, render) {
            this.perent = value;
            this.topRender = render;
            this.tabItemArr = [];
            //this.pushPathUrl("角色/新场景.scene")
            //this.pushPathUrl("完美的开始.map")
        }
        RightOpenList.prototype.tabBgClik = function (evt) {
            var tabVo = evt.target.data;
            var ui = evt.target;
            if ((evt.x - ui.absoluteX) < (ui.absoluteWidth - 20)) {
                this.selectRightTabInfoVo = tabVo.rightTabInfoVo;
                var tempMeshView = tabVo.rightTabInfoVo.view;
                tempMeshView.replayUiList();
                prop.PropModel.getInstance().showOtherMeshView(tabVo.rightTabInfoVo.view);
            }
            else {
                this.removePathUrl(tabVo.rightTabInfoVo);
            }
            this.refrishTabUiSelect();
        };
        RightOpenList.prototype.removePathUrl = function (value) {
            for (var i = 0; i < this.tabItemArr.length; i++) {
                if (this.tabItemArr[i].rightTabInfoVo == value) {
                    var tabVo = this.tabItemArr[i];
                    this.perent.removeChild(tabVo.bgUi);
                    tabVo.bgUi.removeEventListener(InteractiveEvent.Down, this.tabBgClik, this);
                    this.perent.clearTemp(tabVo.rightTabInfoVo);
                    this.tabItemArr.splice(i, 1);
                }
            }
        };
        RightOpenList.prototype.changeVoBg = function (vo, value) {
            var skinName = "e_edit_select_bg_1";
            if (value) {
                skinName = "e_edit_select_bg_2";
            }
            else {
                skinName = "e_edit_select_bg_1";
            }
            var tempui = this.perent.addChild(this.topRender.getComponent(skinName));
            if (vo.bgUi) {
                tempui.x = vo.bgUi.x;
                tempui.y = vo.bgUi.y;
                tempui.width = vo.bgUi.width;
                tempui.height = vo.bgUi.height;
                vo.bgUi.removeEventListener(InteractiveEvent.Down, this.tabBgClik, this);
                this.perent.removeChild(vo.bgUi);
            }
            vo.bgUi = tempui; //换上最新的
            vo.bgUi.addEventListener(InteractiveEvent.Down, this.tabBgClik, this);
            vo.bgUi.data = vo;
            vo.select = value;
        };
        RightOpenList.prototype.refrishTabUiSelect = function () {
            var tx = 2;
            for (var i = 0; i < this.tabItemArr.length; i++) {
                var tabVo = this.tabItemArr[i];
                if (this.tabItemArr[i].rightTabInfoVo == this.selectRightTabInfoVo) {
                    this.tabItemArr[i].select = true;
                    this.changeVoBg(this.tabItemArr[i], true);
                }
                else {
                    this.tabItemArr[i].select = false;
                    this.changeVoBg(this.tabItemArr[i], false);
                }
                tabVo.bgUi.x = tx - 1;
                tabVo.bgUi.y = 13;
                tabVo.bgUi.width = Math.floor(tabVo.textMetrics.width) + 0 + 25;
                tabVo.bgUi.height = 22;
                tabVo.bgUi.data = tabVo;
                tx += tabVo.bgUi.width;
                tabVo.ui.x = tabVo.bgUi.x + 10;
                tabVo.ui.y = tabVo.bgUi.y + 5;
                tabVo.ui.width = 256;
                tabVo.ui.height = 20;
            }
            this.topRender.applyObjData();
        };
        RightOpenList.prototype.testIsNeedAdd = function (value) {
            for (var i = 0; i < this.tabItemArr.length; i++) {
                var tempMeshView = this.tabItemArr[i].rightTabInfoVo.view;
                console.log("--");
                if (tempMeshView.data == value.view.data || ((tempMeshView.type == value.view.type) && value.view.type)) {
                    return false;
                }
            }
            return true;
        };
        RightOpenList.prototype.pushPathUrl = function (value) {
            var needAdd = this.testIsNeedAdd(value);
            //for (var i: number = 0; i < this.tabItemArr.length; i++) {
            //    if (this.tabItemArr[i].rightTabInfoVo.view.data == value.view.data) {
            //        needAdd = false;
            //        this.selectRightTabInfoVo = this.tabItemArr[i].rightTabInfoVo;
            //    }
            //}
            if (needAdd) {
                var $ctx = UIManager.getInstance().getContext2D(100, 100, false);
                $ctx.font = "13px " + UIData.font;
                var tabVo = this.perent.showTemp(value.label);
                tabVo.rightTabInfoVo = value;
                this.selectRightTabInfoVo = tabVo.rightTabInfoVo;
                tabVo.textMetrics = new Rectangle(0, 0, 40, 20);
                this.changeVoBg(tabVo, false);
                this.tabItemArr.unshift(tabVo);
                // this.tabItemArr.push(tabVo);
            }
            this.refrishTabUiSelect();
        };
        return RightOpenList;
    }());
    editscene.RightOpenList = RightOpenList;
    var MainRightBaseWin = /** @class */ (function (_super) {
        __extends(MainRightBaseWin, _super);
        function MainRightBaseWin() {
            var _this = _super.call(this, RightTabText, new Rectangle(0, 0, 512, 40), 10) || this;
            _this.skilNum = 0;
            return _this;
        }
        MainRightBaseWin.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.setUiListVisibleByItem([this.e_panel_1], true);
            this.e_file_list_path_bg = this.addChild(this._baseMidRender.getComponent("e_file_list_path_bg"));
            this.rightOpenList = new RightOpenList(this, this._baseTopRender);
            //  this.rightOpenList.pushPathUrl(this.getTempTabInfo("场景"));
        };
        MainRightBaseWin.prototype.pushViewToTab = function (value) {
            var vo = new RightTabInfoVo();
            //  vo.label = "属性" + this.skilNum++;
            if (value instanceof filelist.FileMeshView) {
                vo.label = "文件";
                value.type = "文件";
            }
            else if (value instanceof filelist.PrefabMeshView) {
                vo.label = "模型";
                value.type = "模型";
            }
            else if (value instanceof filelist.RoleMeshView) {
                vo.label = "角色";
                value.type = "角色";
            }
            else if (value instanceof filelist.SkillMeshView) {
                vo.label = "技能";
                value.type = "技能";
            }
            else if (value instanceof maineditor.ScenePojectMeshView) {
                vo.label = "场景";
                value.type = "场景";
            }
            else {
                console.log("没有设置胡对象", value);
                vo.label = value.type;
            }
            vo.view = value;
            this.rightOpenList.pushPathUrl(vo);
        };
        MainRightBaseWin.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.uiLoadComplete && this.e_file_list_path_bg) {
                this.e_file_list_path_bg.x = 0;
                this.e_file_list_path_bg.y = 12;
                this.e_file_list_path_bg.height = 22;
                this.e_file_list_path_bg.width = this.pageRect.width - this.e_file_list_path_bg.x;
                this._baseMidRender.applyObjData();
            }
        };
        return MainRightBaseWin;
    }(win.Dis2dBaseWindow));
    editscene.MainRightBaseWin = MainRightBaseWin;
    var MainRightPanel = /** @class */ (function (_super) {
        __extends(MainRightPanel, _super);
        function MainRightPanel(has) {
            if (has === void 0) { has = true; }
            var _this = _super.call(this) || this;
            if (has) {
                _this.winBg = new MainRightBaseWin();
                _this.addUIContainer(_this.winBg);
                _this.changeSize();
            }
            return _this;
        }
        Object.defineProperty(MainRightPanel.prototype, "mainRightBaseWin", {
            get: function () {
                return this.winBg;
            },
            enumerable: true,
            configurable: true
        });
        MainRightPanel.prototype.changeSize = function () {
            if (this.winBg) {
                this.winBg.setRect(this.rect);
            }
        };
        return MainRightPanel;
    }(Panel));
    editscene.MainRightPanel = MainRightPanel;
})(editscene || (editscene = {}));
//# sourceMappingURL=MainRightPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var Panel = win.Panel;
    var CentenPanel = /** @class */ (function (_super) {
        __extends(CentenPanel, _super);
        function CentenPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CentenPanel.prototype.addUIContainer = function ($container) {
            while (this._containerList.length) {
                this.removeUIContainer(this._containerList[0]);
            }
            if ($container) {
                _super.prototype.addUIContainer.call(this, $container);
            }
        };
        return CentenPanel;
    }(Panel));
    editscene.CentenPanel = CentenPanel;
    var EditScenePanel = /** @class */ (function (_super) {
        __extends(EditScenePanel, _super);
        function EditScenePanel() {
            var _this = _super.call(this) || this;
            _this.addCenten();
            _this.addRight();
            _this.addLeft();
            _this.addSceneLaoutLinePane();
            _this.addTop();
            _this.resize();
            return _this;
        }
        EditScenePanel.prototype.addSceneLaoutLinePane = function () {
            this._sceneLaoutLinePane = new editscene.EditSceneLine;
            this._sceneLaoutLinePane.x = 0;
            this._sceneLaoutLinePane.y = 0;
            this.addChild(this._sceneLaoutLinePane);
        };
        EditScenePanel.prototype.addCenten = function () {
            var temp = new CentenPanel();
            temp.x = 600;
            temp.y = 0;
            temp.width = 450;
            temp.height = 10;
            this.addChild(temp);
            AppData.centenPanel = temp;
        };
        EditScenePanel.prototype.addRight = function () {
            var temp = new editscene.MainRightPanel(true);
            temp.x = 1000;
            temp.y = 0;
            temp.width = 450;
            temp.height = 500;
            this.addChild(temp);
            AppData.rightPanel = temp;
        };
        EditScenePanel.prototype.addTop = function () {
            var tempPanel = new Panel();
            tempPanel.x = 0;
            tempPanel.y = 0;
            tempPanel.width = 450;
            tempPanel.height = 30;
            this.addChild(tempPanel);
            AppData.topPanel = tempPanel;
        };
        EditScenePanel.prototype.addLeft = function () {
            var temp = new editscene.EditLeftPanel();
            temp.x = 0;
            temp.y = 50;
            temp.width = 450;
            temp.height = 500;
            this.addChild(temp);
            editscene.EditLeftPanel.leftPanel = temp;
        };
        return EditScenePanel;
    }(Panel));
    editscene.EditScenePanel = EditScenePanel;
})(editscene || (editscene = {}));
//# sourceMappingURL=EditScenePanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editscene;
(function (editscene) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var EditSceneEvent = /** @class */ (function (_super) {
        __extends(EditSceneEvent, _super);
        function EditSceneEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EditSceneEvent.SHOW_EDITSCENE_PANEL = "SHOW_EDITSCENE_PANEL";
        EditSceneEvent.EDITE_SCENE_RESIZE = "EDITE_SCENE_RESIZE";
        EditSceneEvent.SHOW_HIDE_EDIT_TEMP_PANEL = "SHOW_HIDE_EDIT_TEMP_PANEL";
        EditSceneEvent.EDITE_SCENE_UI_LOAD_COMPLETE = "EDITE_SCENE_UI_LOAD_COMPLETE";
        return EditSceneEvent;
    }(BaseEvent));
    editscene.EditSceneEvent = EditSceneEvent;
    var EditSceneModule = /** @class */ (function (_super) {
        __extends(EditSceneModule, _super);
        function EditSceneModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EditSceneModule.prototype.getModuleName = function () {
            return "EditSceneModule";
        };
        EditSceneModule.prototype.listProcessors = function () {
            return [new EditSceneProcessor()];
        };
        return EditSceneModule;
    }(Module));
    editscene.EditSceneModule = EditSceneModule;
    var EditSceneProcessor = /** @class */ (function (_super) {
        __extends(EditSceneProcessor, _super);
        function EditSceneProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EditSceneProcessor.prototype.getName = function () {
            return "EditSceneProcessor";
        };
        EditSceneProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof EditSceneEvent) {
                var $editSceneEvent = $event;
                if ($editSceneEvent.type == EditSceneEvent.SHOW_EDITSCENE_PANEL) {
                    this._editScenePanel = new editscene.EditScenePanel;
                    this._editScenePanel.x = 300;
                    this._editScenePanel.y = 300;
                    this._editScenePanel.width = 450;
                    this._editScenePanel.height = 500;
                    win.LayerManager.getInstance().addPanel(this._editScenePanel, 100);
                }
                if ($editSceneEvent.type == EditSceneEvent.EDITE_SCENE_UI_LOAD_COMPLETE) {
                    this.initSceneData();
                }
            }
        };
        EditSceneProcessor.prototype.initSceneData = function () {
            var $nameKey = "scene.map";
            if (localStorage.getItem("mapurl")) {
                $nameKey = localStorage.getItem("mapurl");
            }
            if (getUrlParam("mapurl")) {
                $nameKey = getUrlParam("mapurl");
                console.log($nameKey);
            }
            maineditor.EditorModel.getInstance().openFileByUrl($nameKey);
            //if ($nameKey.indexOf(".material") != -1) {
            //    Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL), $nameKey);//加载材质
            //}
            //if ($nameKey.indexOf(".map") != -1) {
            //    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.LOAD_SCENE_MAP), $nameKey); //加载场景
            //}
        };
        EditSceneProcessor.prototype.listenModuleEvents = function () {
            return [
                new EditSceneEvent(EditSceneEvent.SHOW_EDITSCENE_PANEL),
                new EditSceneEvent(EditSceneEvent.SHOW_HIDE_EDIT_TEMP_PANEL),
                new EditSceneEvent(EditSceneEvent.EDITE_SCENE_UI_LOAD_COMPLETE),
            ];
        };
        return EditSceneProcessor;
    }(BaseProcessor));
    editscene.EditSceneProcessor = EditSceneProcessor;
})(editscene || (editscene = {}));
//# sourceMappingURL=EditSceneProcessor.js.map
var drag;
(function (drag) {
    var DragSource = /** @class */ (function () {
        function DragSource() {
        }
        return DragSource;
    }());
    drag.DragSource = DragSource;
})(drag || (drag = {}));
//# sourceMappingURL=DragSource.js.map
var drag;
(function (drag) {
    var TempDrawManager = /** @class */ (function () {
        function TempDrawManager() {
        }
        TempDrawManager.prototype.doDrag = function (dragInitiator, dragSource, mouseEvent) {
            console.log(dragInitiator, dragSource, mouseEvent);
        };
        return TempDrawManager;
    }());
    drag.TempDrawManager = TempDrawManager;
    var DragManager = /** @class */ (function () {
        function DragManager() {
        }
        DragManager.doDragdoDrag = function (dragInitiator, node) {
            this.dragSource = node;
            Pan3d.ModuleEventManager.dispatchEvent(new drag.PanDragEvent(drag.PanDragEvent.DRAG_SHOW));
        };
        DragManager.NONE = "none";
        DragManager.COPY = "copy";
        DragManager.MOVE = "move";
        DragManager.LINK = "link";
        return DragManager;
    }());
    drag.DragManager = DragManager;
})(drag || (drag = {}));
//# sourceMappingURL=DragManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var drag;
(function (drag) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var UIManager = Pan3d.UIManager;
    var UIConatiner = Pan3d.UIConatiner;
    var UIAtlas = Pan3d.UIAtlas;
    var TextureManager = Pan3d.TextureManager;
    var DragPanel = /** @class */ (function (_super) {
        __extends(DragPanel, _super);
        function DragPanel(w, h) {
            var _this = _super.call(this) || this;
            _this.tempUiName = "tempui";
            _this._bRender = new UIRenderComponent();
            _this.addRender(_this._bRender);
            _this._bRender.uiAtlas = new UIAtlas();
            var $uiAtlas = _this._bRender.uiAtlas;
            $uiAtlas.configData = [];
            $uiAtlas.configData.push($uiAtlas.getObject(_this.tempUiName, 0, 0, w, h, w, h));
            _this.ui = _this._bRender.creatBaseComponent(_this.tempUiName);
            _this.ui.width = w;
            _this.ui.height = h;
            _this.addChild(_this.ui);
            _this._bRender.uiAtlas.ctx = UIManager.getInstance().getContext2D(w, h, false);
            _this._bRender.uiAtlas.textureRes = TextureManager.getInstance().getCanvasTexture(_this._bRender.uiAtlas.ctx);
            return _this;
        }
        DragPanel.prototype.setData = function (value) {
            if (value.icon) {
                this.ui.uiRender.uiAtlas.upDataPicToTexture(value.icon, this.ui.skinName);
            }
        };
        return DragPanel;
    }(UIConatiner));
    drag.DragPanel = DragPanel;
})(drag || (drag = {}));
//# sourceMappingURL=DragPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var drag;
(function (drag) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var Vector2D = Pan3d.Vector2D;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var Panel = win.Panel;
    var PanDragEvent = /** @class */ (function (_super) {
        __extends(PanDragEvent, _super);
        function PanDragEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PanDragEvent.DRAG_SHOW = "DRAG_SHOW";
        PanDragEvent.DRAG_ENTER = "DRAG_ENTER";
        PanDragEvent.DRAG_DROP = "DRAG_DROP";
        return PanDragEvent;
    }(BaseEvent));
    drag.PanDragEvent = PanDragEvent;
    var DragModule = /** @class */ (function (_super) {
        __extends(DragModule, _super);
        function DragModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DragModule.prototype.getModuleName = function () {
            return "DragModule";
        };
        DragModule.prototype.listProcessors = function () {
            return [new DragProcessor()];
        };
        return DragModule;
    }(Module));
    drag.DragModule = DragModule;
    var DragProcessor = /** @class */ (function (_super) {
        __extends(DragProcessor, _super);
        function DragProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DragProcessor.prototype.getName = function () {
            return "DragProcessor";
        };
        DragProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof PanDragEvent) {
                if ($event.type == PanDragEvent.DRAG_SHOW) {
                    if (!this._dragPanel) {
                        this._dragPanel = new drag.DragPanel(64, 64);
                    }
                    this.addUIContainer(this._dragPanel);
                    this._dragPanel.setData(drag.DragManager.dragSource);
                    console.log("开始");
                }
            }
        };
        DragProcessor.prototype.addUIContainer = function (value) {
            if (!this.topDrag) {
                this.topDrag = new Panel();
                win.LayerManager.getInstance().addPanel(this.topDrag, 200);
            }
            this.topDrag.addUIContainer(value);
            this.addStageMoveEvets();
        };
        DragProcessor.prototype.addStageMoveEvets = function () {
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.onUp, this);
        };
        DragProcessor.prototype.onMove = function ($e) {
            var $ui = this.getObjectsUnderPoint(new Vector2D($e.x, $e.y));
            if ($ui) {
                $ui.dispatchEvent(new PanDragEvent(PanDragEvent.DRAG_DROP));
            }
            this._dragPanel.left = $e.x - 32;
            this._dragPanel.top = $e.y - 32;
        };
        DragProcessor.prototype.getObjectsUnderPoint = function (evt) {
            var children = win.LayerManager.getInstance().children;
            for (var i = children.length - 1; i >= 0; i--) {
                if (children[i] != this.topDrag) {
                    var temp = children[i].getObjectsUnderPoint(evt);
                    if (temp) {
                        return temp;
                    }
                }
            }
            return null;
        };
        DragProcessor.prototype.onUp = function ($e) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Up, this.onUp, this);
            var $ui = this.getObjectsUnderPoint(new Vector2D($e.x, $e.y));
            if ($ui) {
                var tempEvent = new PanDragEvent(PanDragEvent.DRAG_ENTER);
                tempEvent.data = $e;
                $ui.dispatchEvent(tempEvent);
            }
            this._dragPanel.left = 10000;
            this._dragPanel.top = 10000;
        };
        DragProcessor.prototype.listenModuleEvents = function () {
            return [
                new PanDragEvent(PanDragEvent.DRAG_SHOW),
                new PanDragEvent(PanDragEvent.DRAG_DROP),
                new PanDragEvent(PanDragEvent.DRAG_ENTER),
            ];
        };
        return DragProcessor;
    }(BaseProcessor));
    drag.DragProcessor = DragProcessor;
})(drag || (drag = {}));
//# sourceMappingURL=DragProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var menutwo;
(function (menutwo) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Rectangle = Pan3d.Rectangle;
    var Dis2DUIContianerPanel = Pan3d.Dis2DUIContianerPanel;
    var ComboTwoBoxMenu = /** @class */ (function (_super) {
        __extends(ComboTwoBoxMenu, _super);
        function ComboTwoBoxMenu() {
            return _super.call(this, menutwo.LabelTxtVo, new Rectangle(0, 0, 70, 20), 20) || this;
        }
        ComboTwoBoxMenu.prototype.showComboBoxList = function ($comboxData, $comBoxFun) {
            this._comboxData = $comboxData;
            this._comBoxFun = $comBoxFun;
            this.clearAll();
            for (var i = 0; i < this._comboxData.length; i++) {
                // console.log(this._comboxData)
                var vo = new menutwo.MenuListData(String(this._comboxData[i].name), String(this._comboxData[i].type));
                this.showTempMenu(vo, i);
            }
        };
        ComboTwoBoxMenu.prototype.showTempMenu = function ($data, i) {
            var temp = _super.prototype.showTemp.call(this, $data);
            temp.ui.x = 0;
            temp.ui.y = i * 20;
            temp.ui.addEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.addEventListener(InteractiveEvent.Up, this.onMouseUp, this);
            return temp;
        };
        ComboTwoBoxMenu.prototype.butMove = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                var menuListData = temp.rightTabInfoVo;
                this.setColorByLevel(menuListData.level);
                menuListData.select = true;
                temp.makeData();
            }
        };
        ComboTwoBoxMenu.prototype.setColorByLevel = function (value) {
            for (var i = 0; i < this._uiItem.length; i++) {
                var menuListData = this._uiItem[i].rightTabInfoVo;
                if (menuListData && menuListData.level == value) {
                    menuListData.select = false;
                    this._uiItem[i].makeData();
                }
            }
        };
        ComboTwoBoxMenu.prototype.clearAll = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].rightTabInfoVo) {
                    this.clearTemp(this._uiItem[i].rightTabInfoVo);
                }
            }
        };
        //清理单元内的内容并需要将对象移出显示队例
        ComboTwoBoxMenu.prototype.clearTemp = function ($data) {
            var temp = this.getVoByData($data);
            temp.ui.removeEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.removeEventListener(InteractiveEvent.Up, this.onMouseUp, this);
            _super.prototype.clearTemp.call(this, $data);
        };
        ComboTwoBoxMenu.prototype.onMouseUp = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                // console.log(temp.data, evt)
                this._comBoxFun(Number(temp.rightTabInfoVo.key));
                this.clearAll();
            }
        };
        return ComboTwoBoxMenu;
    }(Dis2DUIContianerPanel));
    menutwo.ComboTwoBoxMenu = ComboTwoBoxMenu;
})(menutwo || (menutwo = {}));
//# sourceMappingURL=ComboTwoBoxMenu.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var menutwo;
(function (menutwo) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var TextureManager = Pan3d.TextureManager;
    var Rectangle = Pan3d.Rectangle;
    var Dis2DUIContianerPanel = Pan3d.Dis2DUIContianerPanel;
    var MenuListData = /** @class */ (function () {
        function MenuListData($label, $key) {
            if ($key === void 0) { $key = null; }
            this.select = false;
            this.label = $label;
            this.key = $key;
        }
        return MenuListData;
    }());
    menutwo.MenuListData = MenuListData;
    var LabelTxtVo = /** @class */ (function (_super) {
        __extends(LabelTxtVo, _super);
        function LabelTxtVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LabelTxtVo.prototype.makeData = function () {
            if (this.rightTabInfoVo) {
                var $menuListData = this.rightTabInfoVo;
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                var colorBg = $menuListData.select ? "#6c6c6c" : "#555555";
                var colorFont = $menuListData.select ? "[ffffff]" : "[9c9c9c]";
                this.parent.uiAtlas.ctx.fillStyle = colorBg; // text color
                this.parent.uiAtlas.ctx.fillRect(0, 0, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, colorFont + $menuListData.label, 12, 5, 5, TextAlign.LEFT);
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        return LabelTxtVo;
    }(Disp2DBaseText));
    menutwo.LabelTxtVo = LabelTxtVo;
    var MenuTwoPanel = /** @class */ (function (_super) {
        __extends(MenuTwoPanel, _super);
        function MenuTwoPanel() {
            var _this = _super.call(this, LabelTxtVo, new Rectangle(0, 0, 70, 20), 50) || this;
            _this.skipNum = 0;
            return _this;
        }
        MenuTwoPanel.prototype.initMenuData = function (value) {
            for (var $key in value.info) {
                this[$key] = value.info[$key];
            }
            this.menuXmlItem = value.menuXmlItem;
            meshFunSon(this.menuXmlItem, 0);
            function meshFunSon(subMenu, level) {
                for (var i = 0; subMenu && i < subMenu.length; i++) {
                    subMenu[i].level = level;
                    meshFunSon(subMenu[i].subMenu, level + 1);
                }
            }
        };
        MenuTwoPanel.prototype.showMainUi = function () {
            this.clearAll();
            Pan3d.Scene_data.uiBlankStage.addEventListener(InteractiveEvent.Up, this.onStageMouseUp, this);
            this.showSon(this.menuXmlItem, 0);
        };
        MenuTwoPanel.prototype.onStageMouseUp = function (evt) {
            this.clearAll();
        };
        MenuTwoPanel.prototype.showTempMenu = function ($data, i, ty) {
            var temp = _super.prototype.showTemp.call(this, $data);
            temp.ui.x = $data.level * 70;
            temp.ui.y = i * 20 + ty;
            temp.ui.addEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.addEventListener(InteractiveEvent.Down, this.onMouseUp, this);
            return temp;
        };
        //清理单元内的内容并需要将对象移出显示队例
        MenuTwoPanel.prototype.clearTemp = function ($data) {
            var temp = this.getVoByData($data);
            temp.ui.removeEventListener(InteractiveEvent.Move, this.butMove, this);
            temp.ui.removeEventListener(InteractiveEvent.Down, this.onMouseUp, this);
            _super.prototype.clearTemp.call(this, $data);
        };
        MenuTwoPanel.prototype.setColorByLevel = function (value) {
            for (var i = 0; i < this._uiItem.length; i++) {
                var menuListData = this._uiItem[i].rightTabInfoVo;
                if (menuListData && menuListData.level == value) {
                    menuListData.select = false;
                    this._uiItem[i].makeData();
                }
            }
        };
        MenuTwoPanel.prototype.removeOtherSonMenu = function (level) {
            for (var i = this._uiItem.length - 1; i >= 0; i--) {
                var $menuListData = this._uiItem[i].rightTabInfoVo;
                if ($menuListData && $menuListData.level > level) {
                    this.clearTemp($menuListData);
                }
            }
        };
        MenuTwoPanel.prototype.butMove = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                var menuListData = temp.rightTabInfoVo;
                this.setColorByLevel(menuListData.level);
                this.removeOtherSonMenu(menuListData.level);
                menuListData.select = true;
                temp.makeData();
                this.showSon(menuListData.subMenu, temp.ui.y);
            }
        };
        MenuTwoPanel.prototype.onMouseUp = function (evt) {
            var temp = this.getVoByUi(evt.target);
            if (temp && temp.rightTabInfoVo) {
                this.bfun(temp.rightTabInfoVo, evt);
                this.clearAll();
            }
        };
        MenuTwoPanel.prototype.showSon = function (subMenu, ty) {
            for (var i = 0; subMenu && i < subMenu.length; i++) {
                var labelTxtVo = this.getVoByData(subMenu[i]);
                if (!labelTxtVo) {
                    this.showTempMenu(subMenu[i], i, ty);
                }
            }
        };
        return MenuTwoPanel;
    }(Dis2DUIContianerPanel));
    menutwo.MenuTwoPanel = MenuTwoPanel;
})(menutwo || (menutwo = {}));
//# sourceMappingURL=MenuTwoPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var menutwo;
(function (menutwo) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var UIData = Pan3d.UIData;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var Panel = win.Panel;
    var MenuTwoEvent = /** @class */ (function (_super) {
        __extends(MenuTwoEvent, _super);
        function MenuTwoEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MenuTwoEvent.SHOW_RIGHT_MENU = "SHOW_RIGHT_MENU";
        MenuTwoEvent.SHOW_COMBOX_MENU = "SHOW_COMBOX_MENU";
        return MenuTwoEvent;
    }(BaseEvent));
    menutwo.MenuTwoEvent = MenuTwoEvent;
    var MenuTwoModule = /** @class */ (function (_super) {
        __extends(MenuTwoModule, _super);
        function MenuTwoModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MenuTwoModule.prototype.getModuleName = function () {
            return "MenuTwoModule";
        };
        MenuTwoModule.prototype.listProcessors = function () {
            return [new MenuTwoProcessor()];
        };
        return MenuTwoModule;
    }(Module));
    menutwo.MenuTwoModule = MenuTwoModule;
    var MenuTwoProcessor = /** @class */ (function (_super) {
        __extends(MenuTwoProcessor, _super);
        function MenuTwoProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MenuTwoProcessor.prototype.getName = function () {
            return "MenuTwoProcessor";
        };
        MenuTwoProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof MenuTwoEvent) {
                var $materialEvent = $event;
                if ($materialEvent.type == MenuTwoEvent.SHOW_RIGHT_MENU) {
                    this.showMenuPanel($materialEvent.data);
                }
                if ($materialEvent.type == MenuTwoEvent.SHOW_COMBOX_MENU) {
                    console.log("有键菜单");
                    this.showComboBoxMenuPanel($materialEvent);
                }
            }
        };
        MenuTwoProcessor.prototype.showComboBoxMenuPanel = function (evt) {
            if (!this._comboBoxMenuPanel) {
                this._comboBoxMenuPanel = new menutwo.ComboTwoBoxMenu();
            }
            var posv2d = evt.posv2d;
            console.log("posv2d", posv2d);
            this._comboBoxMenuPanel.left = posv2d.x;
            this._comboBoxMenuPanel.top = posv2d.y;
            this._comboBoxMenuPanel.showComboBoxList(evt.comboxData, evt.comboxFun);
            this.addUIContainer(this._comboBoxMenuPanel);
        };
        MenuTwoProcessor.prototype.showMenuPanel = function (value) {
            if (!this._MenuTwoPanel) {
                this._MenuTwoPanel = new menutwo.MenuTwoPanel();
            }
            var posv2d = value.mouse;
            this._MenuTwoPanel.left = posv2d.x / UIData.Scale;
            this._MenuTwoPanel.top = posv2d.y / UIData.Scale;
            this.addUIContainer(this._MenuTwoPanel);
            this._MenuTwoPanel.initMenuData(value);
            this._MenuTwoPanel.showMainUi();
            Scene_data.uiStage.addEventListener(InteractiveEvent.Down, this.onMouseDown, this);
        };
        MenuTwoProcessor.prototype.addUIContainer = function (value) {
            if (!this.topMenuPanel) {
                this.topMenuPanel = new Panel();
                win.LayerManager.getInstance().addPanel(this.topMenuPanel, 200);
            }
            this.topMenuPanel.addUIContainer(value);
        };
        MenuTwoProcessor.prototype.removeUIContainer = function (value) {
            if (this.topMenuPanel) {
                this.topMenuPanel.removeUIContainer(value);
            }
        };
        MenuTwoProcessor.prototype.onMouseDown = function ($evt) {
        };
        MenuTwoProcessor.prototype.listenModuleEvents = function () {
            return [
                new MenuTwoEvent(MenuTwoEvent.SHOW_RIGHT_MENU),
                new MenuTwoEvent(MenuTwoEvent.SHOW_COMBOX_MENU),
            ];
        };
        return MenuTwoProcessor;
    }(BaseProcessor));
    menutwo.MenuTwoProcessor = MenuTwoProcessor;
})(menutwo || (menutwo = {}));
//# sourceMappingURL=MenuTwoProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var colorview;
(function (colorview) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var UIAtlas = Pan3d.UIAtlas;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var Vector3D = Pan3d.Vector3D;
    var ColorType = Pan3d.ColorType;
    var UIManager = Pan3d.UIManager;
    var TextureManager = Pan3d.TextureManager;
    var Vector2D = Pan3d.Vector2D;
    var UIData = Pan3d.UIData;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIPanel = win.UIPanel;
    var ColorPanel = /** @class */ (function (_super) {
        __extends(ColorPanel, _super);
        function ColorPanel() {
            var _this = _super.call(this) || this;
            _this.maincary = [0xFF0000, 0xFFFF00, 0x00FF00, 0x00FFFF, 0x0000FF, 0xFF00FF, 0xFF0000];
            _this.layer = 2000;
            _this.left = 400;
            _this.top = 200;
            _this.width = 300;
            _this.height = 300;
            _this._bottomRender = new UIRenderComponent;
            _this.addRender(_this._bottomRender);
            _this._midRender = new UIRenderComponent;
            _this.addRender(_this._midRender);
            _this._topRender = new UIRenderComponent;
            _this.addRender(_this._topRender);
            _this._topRender.uiAtlas = new UIAtlas();
            return _this;
        }
        ColorPanel.prototype.applyLoad = function () {
            var _this = this;
            this._topRender.uiAtlas.setInfo("pan/marmoset/uilist/colorview/colorview.xml", "pan/marmoset/uilist/colorview/colorview.png", function () { _this.loadConfigCom(); });
        };
        ColorPanel.prototype.loadConfigCom = function () {
            this._bottomRender.uiAtlas = this._topRender.uiAtlas;
            this._midRender.uiAtlas = this._topRender.uiAtlas;
            this.c_tittle = this.addEvntBut("c_tittle", this._bottomRender);
            this.addChild(this._bottomRender.getComponent("c_bg"));
            this.c_color_txt_bg = this.addChild(this._midRender.getComponent("c_color_txt_bg"));
            this.c_main_color = this.addEvntBut("c_main_color", this._midRender);
            this.c_panel_color = this.addEvntBut("c_panel_color", this._midRender);
            this.c_close = this.addEvntBut("c_close", this._topRender);
            this.c_mainper = this.addChild(this._topRender.getComponent("c_mainper"));
            this.c_pickImg = this.addChild(this._topRender.getComponent("c_pickImg"));
            this.c_out_color = this.addChild(this._topRender.getComponent("c_out_color"));
            this.c_text_info = this.addChild(this._topRender.getComponent("c_text_info"));
            this.c_text_a = this.addChild(this._topRender.getComponent("c_text_a"));
            this.c_text_b = this.addChild(this._topRender.getComponent("c_text_b"));
            this.c_text_g = this.addChild(this._topRender.getComponent("c_text_g"));
            this.c_text_r = this.addChild(this._topRender.getComponent("c_text_r"));
            this.drawMainColor();
            // this.initColor();
            this.c_main_color.addEventListener(InteractiveEvent.Move, this.onMainColorMove, this);
            this.c_panel_color.addEventListener(InteractiveEvent.Move, this.onPanelColorMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.onUiStageUp, this);
            this.applyLoadComplete();
        };
        ColorPanel.prototype.initColor = function (value, $bfun) {
            this.changeFun = $bfun;
            var $baseColorV3d = new Vector3D(random(255), random(255), random(255));
            if (value) {
                $baseColorV3d = value;
            }
            var hsb = this.rgb2hsb($baseColorV3d);
            if (isNaN(hsb.x)) {
                hsb.x = 0;
            }
            this._currentMainPer = hsb.x / 360;
            this.changePanelColor(this._currentMainPer);
            this._perX = hsb.y;
            this._perY = 1 - hsb.z;
            this.showColor(this._perX, this._perY);
            this.showColorTxt(this._perX, this._perY);
        };
        ColorPanel.prototype.showColor = function ($perx, $pery) {
            this.c_pickImg.x = 150 * $perx + this.c_panel_color.x - 10;
            this.c_pickImg.y = 150 * $pery + this.c_panel_color.y - 10;
        };
        ColorPanel.prototype.showColorTxt = function ($perx, $pery) {
            this._perX = $perx;
            this._perY = $pery;
            var cx = (255 * (1 - $perx) + this.mainColor.x * $perx) * (1 - $pery);
            var cy = (255 * (1 - $perx) + this.mainColor.y * $perx) * (1 - $pery);
            var cz = (255 * (1 - $perx) + this.mainColor.z * $perx) * (1 - $pery);
            this.drawStrToUi(this.c_text_r, String(Math.floor(cx)));
            this.drawStrToUi(this.c_text_g, String(Math.floor(cy)));
            this.drawStrToUi(this.c_text_b, String(Math.floor(cz)));
            this.drawStrToUi(this.c_text_a, String(Math.floor(100)));
            this.drawStrToUi(this.c_text_info, "#ff99cc");
            this.drawOutColor(new Vector3D(cx, cy, cz));
        };
        ColorPanel.prototype.getHtxColor = function (value) {
            return "";
        };
        ColorPanel.prototype.drawStrToUi = function ($ui, $str) {
            this._topRender.uiAtlas.writeSingleLabel($ui.skinName, ColorType.Whiteffffff + $str);
        };
        ColorPanel.prototype.drawOutColor = function ($vcolor) {
            if ($vcolor === void 0) { $vcolor = null; }
            var $UIAtlas = this._topRender.uiAtlas;
            var rec = $UIAtlas.getRec(this.c_out_color.skinName);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $imgData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            for (var i = 0; i < $imgData.data.length / 4; i++) {
                $imgData.data[i * 4 + 0] = $vcolor.x;
                $imgData.data[i * 4 + 1] = $vcolor.y;
                $imgData.data[i * 4 + 2] = $vcolor.z;
                $imgData.data[i * 4 + 3] = 255;
            }
            ctx.putImageData($imgData, 0, 0);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            this._outColorVect = $vcolor;
        };
        ColorPanel.prototype.onUiStageUp = function (evt) {
            this.c_main_color.data = false;
            this.c_panel_color.data = false;
        };
        ColorPanel.prototype.onMainColorMove = function (evt) {
            if (this.c_main_color.data) {
                var $cur = ((evt.x - this.left) - this.c_main_color.x) / this.c_main_color.width;
                $cur = Math.max(Math.min(1, $cur), 0);
                this.changePanelColor($cur);
                this.showColorTxt(this._perX, this._perY);
                this.changeFun && this.changeFun(this._outColorVect);
            }
        };
        ColorPanel.prototype.onPanelColorMove = function (evt) {
            if (this.c_panel_color.data) {
                var $curX = ((evt.x - this.left) - this.c_panel_color.x) / this.c_panel_color.width;
                var $curY = ((evt.y - this.top) - this.c_panel_color.y) / this.c_panel_color.height;
                this._perX = $curX;
                this._perY = $curY;
                this.showColor(this._perX, this._perY);
                this.showColorTxt(this._perX, this._perY);
                this.changeFun && this.changeFun(this._outColorVect);
            }
        };
        ColorPanel.prototype.rgb2hsb = function (color) {
            var rgbR = Math.floor(color.x);
            var rgbG = Math.floor(color.y);
            var rgbB = Math.floor(color.z);
            var rgb = [rgbR, rgbG, rgbB];
            rgb.sort(function (aa, bb) {
                return aa - bb;
            });
            var max = rgb[2];
            var min = rgb[0];
            var hsbB = max / 255.0;
            var hsbS = max == 0 ? 0 : (max - min) / max;
            var hsbH = 0;
            if (max == rgbR && rgbG >= rgbB) {
                hsbH = (rgbG - rgbB) * 60 / (max - min) + 0;
            }
            else if (max == rgbR && rgbG < rgbB) {
                hsbH = (rgbG - rgbB) * 60 / (max - min) + 360;
            }
            else if (max == rgbG) {
                hsbH = (rgbB - rgbR) * 60 / (max - min) + 120;
            }
            else if (max == rgbB) {
                hsbH = (rgbR - rgbG) * 60 / (max - min) + 240;
            }
            return new Vector3D(hsbH, hsbS, hsbB);
        };
        ColorPanel.prototype.changePanelColor = function ($per) {
            this.c_mainper.x = this.c_main_color.x + this.c_main_color.width * $per - this.c_mainper.width / 2;
            this.c_mainper.y = this.c_main_color.y - 10;
            var per = $per * 6;
            var index = Math.floor(per);
            per = per - index;
            var color1 = hexToArgb(this.maincary[index], false);
            var color2 = hexToArgb(this.maincary[index + 1], false);
            color1.scaleBy(1 - per);
            color2.scaleBy(per);
            color1 = color1.add(color2);
            this.mainColor = color1;
            var num = this.argbToHex16(color1.x, color1.y, color1.z);
            this.drawPanelColor(color1);
        };
        ColorPanel.prototype.argbToHex16 = function (r, g, b) {
            var color = r << 16 | g << 8 | b;
            return color;
        };
        ColorPanel.prototype.drawPanelColor = function ($vcolor) {
            if ($vcolor === void 0) { $vcolor = null; }
            var $UIAtlas = this._topRender.uiAtlas;
            var rec = $UIAtlas.getRec(this.c_panel_color.skinName);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            ctx.clearRect(0, 0, rec.pixelWitdh, rec.pixelHeight);
            var $imgData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            var beColor = new Vector3D(255, 255, 255, 255);
            var toColor = new Vector3D(255, 0, 0, 255);
            if ($vcolor) {
                toColor = $vcolor;
            }
            var adColor = new Vector3D(toColor.x - beColor.x, toColor.y - beColor.y, toColor.z - beColor.z);
            for (var i = 0; i < $imgData.width; i++) {
                for (var j = 0; j < $imgData.width; j++) {
                    var $slot = (i * $imgData.width + j) * 4;
                    var $speed = (j / $imgData.width);
                    $imgData.data[$slot + 0] = beColor.x + adColor.x * $speed;
                    $imgData.data[$slot + 1] = beColor.x + adColor.y * $speed;
                    $imgData.data[$slot + 2] = beColor.x + adColor.z * $speed;
                    $imgData.data[$slot + 0] *= 1 - (i / $imgData.height);
                    $imgData.data[$slot + 1] *= 1 - (i / $imgData.height);
                    $imgData.data[$slot + 2] *= 1 - (i / $imgData.height);
                    $imgData.data[$slot + 3] = 255;
                }
            }
            ctx.putImageData($imgData, 0, 0);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
        };
        ColorPanel.prototype.drawMainColor = function () {
            var $UIAtlas = this._topRender.uiAtlas;
            var rec = $UIAtlas.getRec(this.c_main_color.skinName);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var grad = (ctx.createLinearGradient(0, 0, rec.pixelWitdh, rec.pixelHeight));
            for (var i = 0; i < this.maincary.length; i++) {
                var $p = hexToArgb(this.maincary[i], false);
                grad.addColorStop(i / (this.maincary.length - 1), "rgb(" + $p.x + "," + $p.y + ", " + $p.z + ")"); //   
            }
            ctx.fillStyle = grad;
            ctx.rect(0, 0, rec.pixelWitdh, rec.pixelHeight);
            ctx.fill();
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
        };
        ColorPanel.prototype.butClik = function (evt) {
            switch (evt.target) {
                case this.c_tittle:
                    this.addStageMoveEvets(evt);
                    break;
                case this.c_main_color:
                    this.c_main_color.data = true;
                    break;
                case this.c_panel_color:
                    this.c_panel_color.data = true;
                    break;
                case this.c_close:
                    ModuleEventManager.dispatchEvent(new colorview.ColorEvent(colorview.ColorEvent.HIDE_COLOR_PANEL));
                    break;
                default:
                    break;
            }
        };
        ColorPanel.prototype.addStageMoveEvets = function ($e) {
            this.lastPanelPos = new Vector2D(this.left, this.top);
            this.mouseXY = new Vector2D($e.x, $e.y);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.onUp, this);
        };
        ColorPanel.prototype.onMove = function ($e) {
            this.left = this.lastPanelPos.x + ($e.x - this.mouseXY.x) / UIData.Scale;
            this.top = this.lastPanelPos.y + ($e.y - this.mouseXY.y) / UIData.Scale;
            this.resize();
        };
        ColorPanel.prototype.onUp = function ($e) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Up, this.onUp, this);
        };
        return ColorPanel;
    }(UIPanel));
    colorview.ColorPanel = ColorPanel;
})(colorview || (colorview = {}));
//# sourceMappingURL=ColorPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var colorview;
(function (colorview) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var ColorEvent = /** @class */ (function (_super) {
        __extends(ColorEvent, _super);
        function ColorEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ColorEvent.SHOW_COLOR_PANEL = "SHOW_COLOR_PANEL";
        ColorEvent.HIDE_COLOR_PANEL = "HIDE_COLOR_PANEL";
        return ColorEvent;
    }(BaseEvent));
    colorview.ColorEvent = ColorEvent;
    var ColorModule = /** @class */ (function (_super) {
        __extends(ColorModule, _super);
        function ColorModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ColorModule.prototype.getModuleName = function () {
            return "ColorModule";
        };
        ColorModule.prototype.listProcessors = function () {
            return [new ColorProcessor()];
        };
        return ColorModule;
    }(Module));
    colorview.ColorModule = ColorModule;
    var ColorProcessor = /** @class */ (function (_super) {
        __extends(ColorProcessor, _super);
        function ColorProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ColorProcessor.prototype.getName = function () {
            return "ColorProcessor";
        };
        ColorProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof ColorEvent) {
                var $colorEvent = $event;
                if ($colorEvent.type == ColorEvent.SHOW_COLOR_PANEL) {
                    this.showColorPanel($colorEvent.v3dColor, $colorEvent.bfun);
                }
                if ($colorEvent.type == ColorEvent.HIDE_COLOR_PANEL) {
                    this.hideColorPanel();
                }
            }
        };
        ColorProcessor.prototype.hideColorPanel = function () {
            if (this.colorPanel) {
                this.colorWinPanel.removeUIContainer(this.colorPanel);
                this.colorPanel = null;
            }
        };
        ColorProcessor.prototype.showColorPanel = function ($v3d, $bfun) {
            var _this = this;
            if (!this.colorWinPanel) {
                this.colorWinPanel = new win.Panel();
                win.LayerManager.getInstance().addPanel(this.colorWinPanel, 500);
            }
            if (!this.colorPanel) {
                this.colorPanel = new colorview.ColorPanel;
                this.colorPanel.load(function () {
                    _this.colorPanel.initColor($v3d, $bfun);
                });
            }
            this.colorWinPanel.addUIContainer(this.colorPanel);
        };
        ColorProcessor.prototype.listenModuleEvents = function () {
            return [
                new ColorEvent(ColorEvent.SHOW_COLOR_PANEL),
                new ColorEvent(ColorEvent.HIDE_COLOR_PANEL),
            ];
        };
        return ColorProcessor;
    }(BaseProcessor));
    colorview.ColorProcessor = ColorProcessor;
})(colorview || (colorview = {}));
//# sourceMappingURL=ColorProcessor.js.map
var prop;
(function (prop) {
    var TextureManager = Pan3d.TextureManager;
    var UIManager = Pan3d.UIManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var BaseReflComponent = /** @class */ (function () {
        function BaseReflComponent(value) {
            this._width = 1;
            this._height = 1;
            this._x = 0;
            this._y = 0;
            this.KeyStep = 1;
            this.propPanle = value;
            this.width = 100;
            this.height = 100;
            this.initView();
        }
        Object.defineProperty(BaseReflComponent.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseReflComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        BaseReflComponent.prototype.setTarget = function (obj) {
            this.target = obj;
            this.refreshViewValue();
        };
        BaseReflComponent.prototype.refreshViewValue = function () {
        };
        BaseReflComponent.prototype.initView = function () {
        };
        BaseReflComponent.prototype.destory = function () {
        };
        BaseReflComponent.prototype.resize = function () {
        };
        BaseReflComponent.prototype.drawOutColor = function (ui, $vcolor) {
            var $UIAtlas = ui.uiRender.uiAtlas;
            var $textureStr = ui.skinName;
            var rec = $UIAtlas.getRec($textureStr);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $imgData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            for (var i = 0; i < $imgData.data.length / 4; i++) {
                $imgData.data[i * 4 + 0] = $vcolor.x;
                $imgData.data[i * 4 + 1] = $vcolor.y;
                $imgData.data[i * 4 + 2] = $vcolor.z;
                $imgData.data[i * 4 + 3] = 255;
            }
            ctx.putImageData($imgData, 0, 0);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
        };
        BaseReflComponent.prototype.drawUrlImgToUi = function (ui, url) {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileRoot + url, LoadManager.IMG_TYPE, function ($img) {
                _this.drawImgToUi(ui, $img);
            });
        };
        BaseReflComponent.prototype.drawImgToUi = function (ui, $img) {
            var $UIAtlas = ui.uiRender.uiAtlas;
            var $textureStr = ui.skinName;
            var rec = $UIAtlas.getRec($textureStr);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            ctx.drawImage($img, 0, 0, rec.pixelWitdh, rec.pixelHeight);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
        };
        return BaseReflComponent;
    }());
    prop.BaseReflComponent = BaseReflComponent;
})(prop || (prop = {}));
//# sourceMappingURL=BaseReflComponent.js.map
var prop;
(function (prop) {
    var ReflectionData = /** @class */ (function () {
        function ReflectionData() {
        }
        ReflectionData.Key_Type = "Type";
        ReflectionData.Key_GetFun = "GetFun";
        ReflectionData.Key_SetFun = "SetFun";
        ReflectionData.Key_GetView = "GetView";
        ReflectionData.Key_Data = "Data";
        ReflectionData.Key_Label = "Label";
        ReflectionData.Key_Category = "Category";
        ReflectionData.Key_Suffix = "Suffix";
        ReflectionData.Key_Step = "Step";
        ReflectionData.Key_MaxNum = "MaxNum";
        ReflectionData.Key_MinNum = "MinNum";
        ReflectionData.Key_Tip = "Tip";
        ReflectionData.Key_GetMaxNumFun = "GetMaxNumFun";
        ReflectionData.Key_GetMinNumFun = "GetMinNumFun";
        ReflectionData.Key_SelectIndex = "SelectIndex";
        ReflectionData.NumberInput = "NumberInput";
        ReflectionData.CaptureIdUi = "CaptureIdUi";
        ReflectionData.TEXT = "Txt";
        ReflectionData.Num = "Number";
        ReflectionData.Input = "Input";
        ReflectionData.ComboBox = "ComboBox";
        ReflectionData.ColorPick = "ColorPick";
        ReflectionData.CheckBox = "CheckBox";
        ReflectionData.Line = "Line";
        ReflectionData.Vec3 = "Vec3";
        ReflectionData.Vec2 = "Vec2";
        ReflectionData.Btn = "Btn";
        ReflectionData.Texturue2DUI = "Texturue2DUI";
        ReflectionData.MaterialPicUi = "MaterialPicUi";
        ReflectionData.RoleMesh2DUI = "RoleMesh2DUI";
        ReflectionData.RoleAnim2DUI = "RoleAnim2DUI";
        ReflectionData.MeshScene2DUI = "MeshScene2DUI";
        ReflectionData.MaterialFunContentUI = "MaterialFunContentUI";
        ReflectionData.MeshMaterialLeft2DUI = "MeshMaterialLeft2DUI";
        ReflectionData.AgalFunUI = "AgalFunUI";
        ReflectionData.Vec3Color = "Vec3Color";
        ReflectionData.Vec2Prama = "Vec2Prama";
        ReflectionData.UserView = "userView";
        ReflectionData.FunKey = "FunKey";
        ReflectionData.ClikEventKey = "ClikEventKey";
        ReflectionData.Number = "Number";
        return ReflectionData;
    }());
    prop.ReflectionData = ReflectionData;
})(prop || (prop = {}));
//# sourceMappingURL=ReflectionData.js.map
var prop;
(function (prop) {
    var MetaDataView = /** @class */ (function () {
        function MetaDataView(value) {
            this.x = 0;
            this.y = 0;
            this._top = 0;
            this._width = 100;
            this._height = 100;
            this.categoryKey = {};
            this.hideCategoryKey = {};
            this.propPanle = value;
            this.creat(this.getView());
        }
        MetaDataView.prototype.getMeshInfo = function () {
            var obj = {};
            obj.class = this;
            obj.data = this.data;
            return obj;
        };
        MetaDataView.prototype.onAdd = function () {
            console.log("onRemove");
            for (var i = 0; this.ui && i < this.ui.length; i++) {
                this.ui[i].visible = true;
            }
        };
        MetaDataView.prototype.onRemove = function () {
            console.log("onRemove");
            for (var i = 0; this.ui && i < this.ui.length; i++) {
                this.ui[i].visible = false;
            }
        };
        Object.defineProperty(MetaDataView.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (value) {
                this._top = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaDataView.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                this._width = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaDataView.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                this._height = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        MetaDataView.prototype.replayUiList = function () {
            this.destory(); //复活UI
            this.creat(this.getView());
        };
        MetaDataView.prototype.getView = function () {
            var ary = [];
            return ary;
        };
        Object.defineProperty(MetaDataView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        MetaDataView.prototype.creat = function (data) {
            this.ui = new Array;
            this.categoryKey = {};
            for (var i = 0; i < data.length; i++) {
                if (data[i].Category && !this.categoryKey[data[i].Category]) {
                    if (!this.hideCategory) {
                        this.hideCategory = data[i].Category;
                    }
                    if (this.hideCategory != data[i].Category) {
                        this.categoryKey[data[i].Category] = true;
                        var tempCategory2DUI = this.getCategoryUI(data[i].Category);
                        tempCategory2DUI.data = this.hideCategoryKey[data[i].Category];
                        this.ui.push(tempCategory2DUI);
                    }
                }
                if (!Boolean(this.hideCategoryKey[data[i].Category])) {
                    var tempUi = this.creatComponent(data[i]);
                    tempUi.Category = data[i].Category;
                    this.ui.push(tempUi);
                }
            }
            this.resize();
        };
        MetaDataView.prototype.categoryClikUp = function (value) {
            this.hideCategoryKey[value] = !this.hideCategoryKey[value];
            if (this.hideCategoryKey[value]) {
                for (var i = this.ui.length - 1; i >= 0; i--) {
                    var $ui = this.ui[i];
                    if ($ui.Category == value) {
                        $ui.destory();
                        this.ui.splice(i, 1);
                    }
                }
            }
            else {
                var data = this.getView();
                var indx = this.getUiIndxByCategory(value);
                for (var i = 0; i < data.length; i++) {
                    if (data[i].Category == value) {
                        if (!Boolean(this.hideCategoryKey[data[i].Category])) {
                            var tempUi = this.creatComponent(data[i]);
                            tempUi.Category = data[i].Category;
                            this.ui.splice(indx++, 0, tempUi);
                            tempUi.refreshViewValue();
                        }
                    }
                }
            }
            this.resize();
            this.categoryFun && this.categoryFun();
        };
        MetaDataView.prototype.getUiIndxByCategory = function (value) {
            for (var i = 0; i < this.ui.length; i++) {
                var $ui = this.ui[i];
                if ($ui instanceof prop.Category2DUI) {
                    if ($ui.label == value) {
                        return i + 1;
                    }
                }
            }
            console.log("必须找到标签，显示这行说明就错。不应该到这里");
        };
        MetaDataView.prototype.resize = function () {
            var ty = this._top;
            for (var i = 0; this.ui && i < this.ui.length; i++) {
                this.ui[i].y = ty;
                this.ui[i].x = 20;
                this.ui[i].width = this.width;
                this.ui[i].resize();
                ty += this.ui[i].height;
            }
            this._height = ty - this._top;
        };
        MetaDataView.prototype.eventKey = function (value) {
        };
        MetaDataView.prototype.creatComponent = function (obj) {
            var type = obj[prop.ReflectionData.Key_Type];
            if (type == prop.ReflectionData.NumberInput) {
                return this.getNumComponent(obj);
            }
            if (type == prop.ReflectionData.AgalFunUI) {
                return this.getAgalFunComponent(obj);
            }
            if (type == prop.ReflectionData.Texturue2DUI) {
                return this.getTexturue2DUI(obj);
            }
            if (type == prop.ReflectionData.MaterialPicUi) {
                return this.getMaterialPicUi(obj);
            }
            if (type == prop.ReflectionData.RoleMesh2DUI) {
                return this.getRoleMesh2DUI(obj);
            }
            if (type == prop.ReflectionData.RoleAnim2DUI) {
                return this.getRoleAnimi2DUI(obj);
            }
            if (type == prop.ReflectionData.ComboBox) {
                return this.getComboBox(obj);
            }
            if (type == prop.ReflectionData.CheckBox) {
                return this.getCheckBox(obj);
            }
            if (type == prop.ReflectionData.Vec3Color) {
                return this.getVec3Color(obj);
            }
            if (type == prop.ReflectionData.Vec3) {
                return this.getVec3(obj);
            }
            if (type == prop.ReflectionData.Vec2) {
                return this.getVec2(obj);
            }
            if (type == prop.ReflectionData.TEXT) {
                return this.getTextField2DUI(obj);
            }
            if (type == prop.ReflectionData.MeshScene2DUI) {
                return this.getMeshScene2DUI(obj);
            }
            if (type == prop.ReflectionData.MeshMaterialLeft2DUI) {
                return this.getMeshMaterialLeft2DUI(obj);
            }
            if (type == prop.ReflectionData.MaterialFunContentUI) {
                return this.getMaterialFunContentUI(obj);
            }
            return null;
        };
        MetaDataView.prototype.getMaterialFunContentUI = function ($obj) {
            var temp = new prop.MaterialFunContentUI(this.propPanle);
            temp.label = $obj[prop.ReflectionData.Key_Label];
            temp.FunKey = $obj[prop.ReflectionData.FunKey];
            temp.target = this;
            return temp;
        };
        MetaDataView.prototype.getMeshMaterialLeft2DUI = function ($obj) {
            var temp = new prop.MeshMaterialLfetView2DUI(this.propPanle);
            temp.label = $obj[prop.ReflectionData.Key_Label];
            temp.FunKey = $obj[prop.ReflectionData.FunKey];
            temp.suffix = $obj[prop.ReflectionData.Key_Suffix];
            temp.target = this;
            return temp;
        };
        MetaDataView.prototype.getMeshScene2DUI = function ($obj) {
            var temp = new prop.MeshSceneView2DUI(this.propPanle);
            temp.label = $obj[prop.ReflectionData.Key_Label];
            temp.FunKey = $obj[prop.ReflectionData.FunKey];
            temp.target = this;
            return temp;
        };
        MetaDataView.prototype.getCategoryUI = function (value) {
            var _this = this;
            var $category2DUI = new prop.Category2DUI(this.propPanle);
            $category2DUI.label = value;
            $category2DUI.changFun = function (value) { _this.categoryClikUp(value); };
            return $category2DUI;
        };
        MetaDataView.prototype.getTextField2DUI = function ($obj) {
            var $textCtrlInput = new prop.TextField2DUI(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            $textCtrlInput.clikEvent = $obj[prop.ReflectionData.ClikEventKey];
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.getVec3 = function ($obj) {
            var $textCtrlInput = new prop.Vec3dCtrlUI(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            if ($obj[prop.ReflectionData.Key_Step]) {
                $textCtrlInput.KeyStep = $obj[prop.ReflectionData.Key_Step];
            }
            else {
                $textCtrlInput.KeyStep = 1;
            }
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.getVec2 = function ($obj) {
            var $textCtrlInput = new prop.Vec2PrameCtrlUI(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            if ($obj[prop.ReflectionData.Key_Step]) {
                $textCtrlInput.KeyStep = $obj[prop.ReflectionData.Key_Step];
            }
            else {
                $textCtrlInput.KeyStep = 1;
            }
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.getVec3Color = function ($obj) {
            var $textCtrlInput = new prop.Vec3ColorCtrlUI(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            if ($obj[prop.ReflectionData.Key_Step]) {
                $textCtrlInput.KeyStep = $obj[prop.ReflectionData.Key_Step];
            }
            else {
                $textCtrlInput.KeyStep = 0.01;
            }
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.getComboBox = function ($obj) {
            var $ComBoBoxCtrl2D = new prop.ComBoBoxCtrl2D(this.propPanle);
            $ComBoBoxCtrl2D.label = $obj[prop.ReflectionData.Key_Label];
            $ComBoBoxCtrl2D.FunKey = $obj[prop.ReflectionData.FunKey];
            $ComBoBoxCtrl2D.data = $obj[prop.ReflectionData.Key_Data];
            $ComBoBoxCtrl2D.target = this;
            return $ComBoBoxCtrl2D;
        };
        MetaDataView.prototype.getCheckBox = function ($obj) {
            var $ComBoBoxCtrl2D = new prop.CheckBox2DUI(this.propPanle);
            $ComBoBoxCtrl2D.label = $obj[prop.ReflectionData.Key_Label];
            $ComBoBoxCtrl2D.FunKey = $obj[prop.ReflectionData.FunKey];
            $ComBoBoxCtrl2D.target = this;
            return $ComBoBoxCtrl2D;
        };
        MetaDataView.prototype.getTexturue2DUI = function ($obj) {
            var $texturue2DUI = new prop.Texturue2DUI(this.propPanle);
            $texturue2DUI.label = $obj[prop.ReflectionData.Key_Label];
            $texturue2DUI.suffix = $obj[prop.ReflectionData.Key_Suffix];
            $texturue2DUI.FunKey = $obj[prop.ReflectionData.FunKey];
            $texturue2DUI.target = this;
            return $texturue2DUI;
        };
        MetaDataView.prototype.getMaterialPicUi = function ($obj) {
            var $texturue2DUI = new prop.Material2DUI(this.propPanle);
            $texturue2DUI.label = $obj[prop.ReflectionData.Key_Label];
            $texturue2DUI.suffix = $obj[prop.ReflectionData.Key_Suffix];
            $texturue2DUI.FunKey = $obj[prop.ReflectionData.FunKey];
            $texturue2DUI.changFun = $obj["changFun"];
            $texturue2DUI.target = this;
            return $texturue2DUI;
        };
        MetaDataView.prototype.getRoleMesh2DUI = function ($obj) {
            var $texturue2DUI = new prop.RoleMesh2DUI(this.propPanle);
            $texturue2DUI.label = $obj[prop.ReflectionData.Key_Label];
            //   $texturue2DUI.suffix = $obj[ReflectionData.Key_Suffix];
            $texturue2DUI.FunKey = $obj[prop.ReflectionData.FunKey];
            $texturue2DUI.changFun = $obj["changFun"];
            $texturue2DUI.target = this;
            return $texturue2DUI;
        };
        MetaDataView.prototype.getRoleAnimi2DUI = function ($obj) {
            var $roleAnimi2DUI = new prop.RoleAnimi2DUI(this.propPanle);
            $roleAnimi2DUI.label = $obj[prop.ReflectionData.Key_Label];
            //   $texturue2DUI.suffix = $obj[ReflectionData.Key_Suffix];
            $roleAnimi2DUI.FunKey = $obj[prop.ReflectionData.FunKey];
            $roleAnimi2DUI.changFun = $obj["changFun"];
            $roleAnimi2DUI.target = this;
            return $roleAnimi2DUI;
        };
        MetaDataView.prototype.getNumComponent = function ($obj) {
            var $textCtrlInput = new prop.TextCtrlInput(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            $textCtrlInput.KeyStep = $obj[prop.ReflectionData.Key_Step];
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.getAgalFunComponent = function ($obj) {
            var $textCtrlInput = new prop.AgalFunUI(this.propPanle);
            $textCtrlInput.label = $obj[prop.ReflectionData.Key_Label];
            $textCtrlInput.FunKey = $obj[prop.ReflectionData.FunKey];
            $textCtrlInput.KeyStep = $obj[prop.ReflectionData.Key_Step];
            $textCtrlInput.target = this;
            return $textCtrlInput;
        };
        MetaDataView.prototype.refreshViewValue = function () {
            for (var i = 0; i < this.ui.length; i++) {
                this.ui[i].refreshViewValue();
            }
            this.resize();
        };
        MetaDataView.prototype.destory = function () {
            while (this.ui.length) {
                var $ui = this.ui.pop();
                $ui.destory();
            }
        };
        return MetaDataView;
    }());
    prop.MetaDataView = MetaDataView;
})(prop || (prop = {}));
//# sourceMappingURL=MetaDataView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Vector2D = Pan3d.Vector2D;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var ComBoBoxCtrl2D = /** @class */ (function (_super) {
        __extends(ComBoBoxCtrl2D, _super);
        function ComBoBoxCtrl2D() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComBoBoxCtrl2D.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI();
            this.comboBoxUi = new prop.ComboBoxUi();
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.comboBoxUi);
            this.comboBoxUi.addEventListener(InteractiveEvent.Down, this.comboBoxUiDown, this);
            this.height = 30;
        };
        ComBoBoxCtrl2D.prototype.destory = function () {
            this.textLabelUI.destory();
            this.comboBoxUi.destory();
        };
        Object.defineProperty(ComBoBoxCtrl2D.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.comboxListTxt = this._data;
            },
            enumerable: true,
            configurable: true
        });
        ComBoBoxCtrl2D.prototype.comboBoxUiDown = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_COMBOX_MENU);
            $rightMenuEvet.posv2d = new Vector2D(this.comboBoxUi.ui.absoluteX, this.comboBoxUi.ui.absoluteY + 20);
            $rightMenuEvet.comboxData = this.data;
            $rightMenuEvet.comboxFun = function (value) { _this.selectFun(value); };
            ModuleEventManager.dispatchEvent($rightMenuEvet);
        };
        ComBoBoxCtrl2D.prototype.selectFun = function (value) {
            this.target[this.FunKey] = value;
            this.refreshViewValue();
        };
        ComBoBoxCtrl2D.prototype.refreshViewValue = function () {
            if (this.FunKey) {
                var $i = this.target[this.FunKey];
                if (this.comboxListTxt[$i]) {
                    this.comboBoxUi.text = this.comboxListTxt[$i].name;
                }
            }
        };
        Object.defineProperty(ComBoBoxCtrl2D.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.comboBoxUi.x = this._x + 75;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComBoBoxCtrl2D.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y + 4;
                this.comboBoxUi.y = this._y + 6;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComBoBoxCtrl2D.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return ComBoBoxCtrl2D;
    }(prop.BaseReflComponent));
    prop.ComBoBoxCtrl2D = ComBoBoxCtrl2D;
})(prop || (prop = {}));
//# sourceMappingURL=ComBoBoxCtrl2D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var CombineReflectionView = /** @class */ (function (_super) {
        __extends(CombineReflectionView, _super);
        function CombineReflectionView(value) {
            var _this = _super.call(this, value) || this;
            _this.list = [];
            return _this;
        }
        CombineReflectionView.prototype.getMeshInfo = function () {
            var obj = {};
            obj.class = this;
            obj.data = [];
            for (var i = 0; i < this.list.length; i++) {
                obj.data.push(this.list[i].getMeshInfo());
            }
            return obj;
        };
        CombineReflectionView.prototype.replayUiList = function () {
            this.destory(); //复活UI
            for (var i = 0; this.list && i < this.list.length; i++) {
                this.list[i].replayUiList();
            }
        };
        CombineReflectionView.prototype.addView = function ($view) {
            var _this = this;
            this.list.push($view);
            $view.categoryFun = function () {
                _this.refreshViewValue();
            };
        };
        CombineReflectionView.prototype.refreshViewValue = function () {
            var ty = this.top;
            for (var i = 0; i < this.list.length; i++) {
                this.list[i].top = ty;
                ty += this.list[i].height;
                this.list[i].refreshViewValue();
            }
            _super.prototype.refreshViewValue.call(this);
        };
        CombineReflectionView.prototype.destory = function () {
            for (var i = 0; i < this.list.length; i++) {
                this.list[i].destory();
            }
        };
        CombineReflectionView.prototype.resize = function () {
            _super.prototype.resize.call(this);
            for (var i = 0; this.list && i < this.list.length; i++) {
                this.list[i].width = this.width;
                this.list[i].resize();
            }
        };
        return CombineReflectionView;
    }(prop.MetaDataView));
    prop.CombineReflectionView = CombineReflectionView;
})(prop || (prop = {}));
//# sourceMappingURL=CombineReflectionView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var TextCtrlInput = /** @class */ (function (_super) {
        __extends(TextCtrlInput, _super);
        function TextCtrlInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextCtrlInput.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI();
            this.inputTextUi = new prop.InputTextUi();
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.inputTextUi);
            this.inputTextUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.onChangeInput, this);
            this.height = 20;
        };
        TextCtrlInput.prototype.destory = function () {
            this.textLabelUI.destory();
            this.inputTextUi.destory();
        };
        Object.defineProperty(TextCtrlInput.prototype, "visible", {
            set: function (value) {
                this.inputTextUi.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextCtrlInput.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        TextCtrlInput.prototype.onChangeInput = function ($evt) {
            this.target[this.FunKey] = Number($evt.data);
            this.changFun && this.changFun(this);
            this.refreshViewValue();
        };
        TextCtrlInput.prototype.refreshViewValue = function () {
            this.inputTextUi.text = this.getNumStr(this.target[this.FunKey]);
        };
        TextCtrlInput.prototype.getNumStr = function (num) {
            return num.toString();
        };
        Object.defineProperty(TextCtrlInput.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.inputTextUi.x = this._x + 75;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextCtrlInput.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.inputTextUi.y = this._y + 5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextCtrlInput.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return TextCtrlInput;
    }(prop.BaseReflComponent));
    prop.TextCtrlInput = TextCtrlInput;
})(prop || (prop = {}));
//# sourceMappingURL=TextCtrlInput.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var MaterialParamUi = /** @class */ (function (_super) {
        __extends(MaterialParamUi, _super);
        function MaterialParamUi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialParamUi.prototype.initView = function () {
            this.height = 100;
            this.uiItem = [];
        };
        MaterialParamUi.prototype.setData = function (item) {
            var _this = this;
            this.destory();
            var $changFun = function (value) { _this.changeDataEvtFun(value); };
            for (var i = 0; i < item.length; i++) {
                var tempBaseReflComponent;
                if (item[i].type == materialui.NodeTree.TEX) {
                    var texturue2DUI = new prop.Texturue2DUI(this.propPanle);
                    texturue2DUI.suffix = "jpg|png";
                    tempBaseReflComponent = texturue2DUI;
                }
                if (item[i].type == materialui.NodeTree.VEC3) {
                    tempBaseReflComponent = new prop.Vec3ColorCtrlUI(this.propPanle);
                    tempBaseReflComponent.KeyStep = 0.01;
                    if (isNaN(item[i].data.x) || isNaN(item[i].data.y) || isNaN(item[i].data.z)) {
                        item[i].data = new Vector3D();
                    }
                }
                if (item[i].type == materialui.NodeTree.VEC2) {
                    tempBaseReflComponent = new prop.Vec2PrameCtrlUI(this.propPanle);
                    tempBaseReflComponent.KeyStep = 0.01;
                    if (isNaN(item[i].data.x) || isNaN(item[i].data.y)) {
                        item[i].data = new Vector2D();
                    }
                }
                if (item[i].type == materialui.NodeTree.FLOAT) {
                    tempBaseReflComponent = new prop.TextCtrlInput(this.propPanle);
                    if (isNaN(item[i].data)) {
                        item[i].data = 1;
                    }
                }
                if (tempBaseReflComponent) {
                    tempBaseReflComponent.FunKey = "data";
                    tempBaseReflComponent.target = item[i];
                    tempBaseReflComponent.label = item[i].paramName;
                    tempBaseReflComponent.changFun = $changFun;
                    this.uiItem.push(tempBaseReflComponent);
                }
            }
            this.refreshViewValue();
        };
        MaterialParamUi.prototype.changeDataEvtFun = function (temp) {
            var infoArr = [];
            for (var i = 0; i < this.uiItem.length; i++) {
                infoArr.push(this.uiItem[i].target);
            }
            this.changFun(infoArr);
        };
        MaterialParamUi.prototype.refreshViewValue = function () {
            for (var i = 0; i < this.uiItem.length; i++) {
                this.uiItem[i].refreshViewValue();
            }
        };
        MaterialParamUi.prototype.destory = function () {
            for (var i = 0; i < this.uiItem.length; i++) {
                this.uiItem[i].destory();
            }
            this.uiItem = [];
        };
        MaterialParamUi.prototype.resize = function () {
            _super.prototype.resize.call(this);
            for (var i = 0; i < this.uiItem.length; i++) {
                this.uiItem[i].resize();
            }
        };
        Object.defineProperty(MaterialParamUi.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialParamUi.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialParamUi.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                var ty = 10;
                this.height = 50;
                for (var i = 0; i < this.uiItem.length; i++) {
                    this.uiItem[i].y = this.y + ty;
                    if (this.uiItem[i] instanceof prop.Vec3ColorCtrlUI) {
                        ty += 50;
                        this.uiItem[i].x = 50;
                        this.height += 50;
                    }
                    if (this.uiItem[i] instanceof prop.Vec2PrameCtrlUI) {
                        ty += 50;
                        this.uiItem[i].x = 50;
                        this.height += 50;
                    }
                    if (this.uiItem[i] instanceof prop.TextCtrlInput) {
                        ty += 50;
                        this.uiItem[i].x = 50;
                        this.height += 50;
                    }
                    if (this.uiItem[i] instanceof prop.Texturue2DUI) {
                        ty += 100;
                        this.uiItem[i].x = 50;
                        this.height += 100;
                    }
                }
                this.height += 10;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialParamUi.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        return MaterialParamUi;
    }(prop.BaseReflComponent));
    prop.MaterialParamUi = MaterialParamUi;
})(prop || (prop = {}));
//# sourceMappingURL=MaterialParamUi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Texturue2DUI = /** @class */ (function (_super) {
        __extends(Texturue2DUI, _super);
        function Texturue2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Texturue2DUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI(64, 16);
            this.textureUrlText = new prop.TextLabelUI(200, 16);
            this.texturePicUi = new prop.TexturePicUi();
            this.searchIcon = new prop.BaseMeshUi(20, 20);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.textureUrlText);
            this.propPanle.addBaseMeshUi(this.texturePicUi);
            this.propPanle.addBaseMeshUi(this.searchIcon);
            this.drawUrlImgToUi(this.searchIcon.ui, "icon/search.png");
            this.texturePicUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.onChangePicurl, this);
            this.searchIcon.ui.addEventListener(InteractiveEvent.Up, this.searchClik, this);
            this.height = 100;
        };
        Texturue2DUI.prototype.searchClik = function (evt) {
            this.searchFileByPath(this.target[this.FunKey]);
        };
        Texturue2DUI.prototype.searchFileByPath = function (value) {
            var pathurl = Pan3d.Scene_data.fileRoot + value;
            Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
        };
        Texturue2DUI.prototype.getPerentPath = function (value) {
            var idex = value.lastIndexOf("/");
            if (idex != -1) {
                value = value.substr(0, idex + 1);
            }
            else {
                value = "";
            }
            return value;
        };
        Texturue2DUI.prototype.onChangePicurl = function ($evt) {
            var _this = this;
            if ($evt.data instanceof File) {
                this.makeNewTextureByFile($evt.data);
            }
            else {
                if (this.texturePicUi.url.indexOf(".material") != -1) {
                    console.log("是材质");
                    pack.PackMaterialManager.getInstance().getMaterialByUrl(this.texturePicUi.url, function ($materialTree) {
                        console.log($materialTree);
                        //是地址
                        _this.target[_this.FunKey] = $materialTree;
                        _this.changFun && _this.changFun();
                        _this.refreshViewValue();
                    });
                }
                else {
                    //是地址
                    this.target[this.FunKey] = this.texturePicUi.url;
                    this.changFun && this.changFun();
                    this.refreshViewValue();
                }
            }
        };
        Texturue2DUI.prototype.makeNewTextureByFile = function (simpleFile) {
            var _this = this;
            var reader = new FileReader();
            reader.readAsDataURL(simpleFile);
            reader.onload = function () {
                var img = makeImage();
                img.onload = function () {
                    TextureManager.getInstance().addImgRes(Scene_data.fileRoot + simpleFile.name, img);
                    _this.target[_this.FunKey] = simpleFile.name;
                    _this.refreshViewValue();
                };
                img.src = reader.result;
            };
        };
        Texturue2DUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.textureUrlText.destory();
            this.texturePicUi.destory();
            this.searchIcon.destory();
        };
        Object.defineProperty(Texturue2DUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        Texturue2DUI.prototype.refreshViewValue = function () {
            var $url = String(this.target[this.FunKey]);
            this.texturePicUi.url = $url;
            var $arr = $url.split("/");
            this.textureUrlText.label = $arr[$arr.length - 1];
        };
        Object.defineProperty(Texturue2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.texturePicUi.x = this._x + 60;
                this.textureUrlText.x = this._x + 60;
                this.searchIcon.x = this._x + 150;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texturue2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.texturePicUi.y = this._y;
                this.textureUrlText.y = this._y + 75;
                this.searchIcon.y = this._y + 10;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texturue2DUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texturue2DUI.prototype, "suffix", {
            get: function () {
                return this._suffix;
            },
            set: function (value) {
                this._suffix = value;
                this.texturePicUi.suffix = value;
            },
            enumerable: true,
            configurable: true
        });
        return Texturue2DUI;
    }(prop.BaseReflComponent));
    prop.Texturue2DUI = Texturue2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=Texturue2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TimeUtil = Pan3d.TimeUtil;
    var MouseType = Pan3d.MouseType;
    var LineDisplayShader = Pan3d.LineDisplayShader;
    var GridLineSprite = Pan3d.GridLineSprite;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Camera3D = Pan3d.Camera3D;
    var Rectangle = Pan3d.Rectangle;
    //import MaterialRoleSprite = left.MaterialRoleSprite;
    //import ModelSprite = maineditor.ModelSprite;
    //import SkillSpriteDisplay = maineditor.SkillSpriteDisplay;
    //import LyfSpriteDisplay = maineditor.LyfSpriteDisplay;
    //import EdItorSceneManager = maineditor.EdItorSceneManager;
    var MeshSceneView2DUI = /** @class */ (function (_super) {
        __extends(MeshSceneView2DUI, _super);
        function MeshSceneView2DUI() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.modelKey = {};
            return _this;
        }
        MeshSceneView2DUI.prototype.initView = function () {
            var _this = this;
            this.textLabelUI = new prop.TextLabelUI(64, 16);
            this.textureUrlText = new prop.TextLabelUI(200, 16);
            this.texturePicUi = new prop.TexturePicUi(128, 128);
            this.texturePicUi.haveDoubleCilk = false;
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.textureUrlText);
            this.propPanle.addBaseMeshUi(this.texturePicUi);
            //  this.texturePicUi.textureContext.ui.isU = true
            this.texturePicUi.textureContext.ui.isV = true;
            this.texturePicUi.textureContext.ui.uiRender.applyObjData();
            // this.texturePicUi.url = "icon/base.jpg"
            this.texturePicUi.ui.addEventListener(InteractiveEvent.Down, this.butClik, this);
            this.wheelEventFun = function ($evt) { _this.onMouseWheel($evt); };
            document.addEventListener(MouseType.MouseWheel, this.wheelEventFun);
            this.height = 220;
            this.texturePicUi.ui.width = 200;
            this.texturePicUi.ui.height = 200;
            this.texturePicUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.texturePicUiChange, this);
            this.initScene();
        };
        MeshSceneView2DUI.prototype.texturePicUiChange = function ($evt) {
        };
        Object.defineProperty(MeshSceneView2DUI.prototype, "suffix", {
            get: function () {
                return this._suffix;
            },
            set: function (value) {
                this._suffix = value;
                this.texturePicUi.suffix = value;
            },
            enumerable: true,
            configurable: true
        });
        MeshSceneView2DUI.prototype.onMouseWheel = function ($evt) {
            if (this.texturePicUi.ui.testPoint($evt.x, $evt.y)) {
                this.sceneManager.cam3D.distance += ($evt.wheelDelta * Scene_data.cam3D.distance) / 1000;
            }
        };
        MeshSceneView2DUI.prototype.butClik = function (evt) {
            switch (evt.target) {
                case this.texturePicUi.ui:
                    this.lastRotationY = this.sceneManager.focus3D.rotationY;
                    this.mouseDonwPos = new Vector2D(evt.x, evt.y);
                    this.addStagetMouseMove();
                    break;
                default:
                    break;
            }
        };
        MeshSceneView2DUI.prototype.addStagetMouseMove = function () {
            Scene_data.uiBlankStage.addEventListener(InteractiveEvent.Up, this.onStageMouseUp, this);
            Scene_data.uiBlankStage.addEventListener(InteractiveEvent.Move, this.onStageMouseMove, this);
        };
        MeshSceneView2DUI.prototype.removeStagetMouseMove = function () {
            Scene_data.uiBlankStage.removeEventListener(InteractiveEvent.Up, this.onStageMouseUp, this);
            Scene_data.uiBlankStage.removeEventListener(InteractiveEvent.Move, this.onStageMouseMove, this);
        };
        MeshSceneView2DUI.prototype.onStageMouseMove = function ($evt) {
            console.log("move");
            if (this.mouseDonwPos) {
                this.sceneManager.focus3D.rotationY = this.lastRotationY - ($evt.x - this.mouseDonwPos.x);
            }
        };
        MeshSceneView2DUI.prototype.onStageMouseUp = function ($evt) {
            console.log("up");
            this.removeStagetMouseMove();
        };
        MeshSceneView2DUI.prototype.initScene = function () {
            var _this = this;
            ProgrmaManager.getInstance().registe(LineDisplayShader.LineShader, new LineDisplayShader);
            this.sceneManager = new maineditor.EdItorSceneManager();
            this.sceneManager.addDisplay(new GridLineSprite());
            //  this.sceneManager.addDisplay(new BaseDiplay3dSprite())
            this.sceneManager.ready = true;
            this.sceneManager.cam3D = new Camera3D();
            this.sceneManager.cam3D.cavanRect = new Rectangle(0, 0, 256, 256);
            this.sceneManager.cam3D.distance = 200;
            this.sceneManager.focus3D.rotationX = -45;
            this.upDataFun = function () { _this.oneByFrame(); };
            TimeUtil.addFrameTick(this.upDataFun);
        };
        MeshSceneView2DUI.prototype.oneByFrame = function () {
            if (this.texturePicUi && this.texturePicUi.textureContext && this.texturePicUi.textureContext.hasStage) {
                Pan3d.MathClass.getCamView(this.sceneManager.cam3D, this.sceneManager.focus3D); //一定要角色帧渲染后再重置镜头矩阵
                this.sceneManager.renderToTexture();
                var $uiRender = this.texturePicUi.textureContext.ui.uiRender;
                $uiRender.uiAtlas.textureRes.texture = this.sceneManager.fbo.texture;
                var maxNum = Math.min(this.texturePicUi.textureContext.ui.width, this.texturePicUi.textureContext.ui.height);
                this.sceneManager.cam3D.cavanRect = new Rectangle(0, 0, maxNum, maxNum);
            }
        };
        MeshSceneView2DUI.prototype.destory = function () {
            this.texturePicUi.ui.removeEventListener(InteractiveEvent.Down, this.butClik, this);
            document.removeEventListener(MouseType.MouseWheel, this.wheelEventFun);
            this.textLabelUI.destory();
            this.textureUrlText.destory();
            this.texturePicUi.destory();
            this.texturePicUi = null;
            this.sceneManager.clearScene();
            TimeUtil.removeTimeTick(this.upDataFun);
        };
        Object.defineProperty(MeshSceneView2DUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        MeshSceneView2DUI.prototype.addUrlToView = function (value) {
            if (!this.modelKey[value]) {
                if (value.indexOf(".prefab") != -1) {
                    var prefabSprite_1 = new maineditor.ModelSprite();
                    prefabSprite_1.setPreFabUrl(value, function () {
                        prefabSprite_1.scale = 10 / prefabSprite_1.prefab.objData.getMaxSize();
                    });
                    this.sceneManager.addDisplay(prefabSprite_1);
                }
                if (value.indexOf(".zzw") != -1) {
                    var roleSprite = new left.MaterialRoleSprite();
                    roleSprite.setRoleZwwUrl(value);
                    this.sceneManager.addMovieDisplay(roleSprite);
                }
                if (value.indexOf(".skill") != -1) {
                    var skillsprite = new maineditor.SkillSpriteDisplay();
                    skillsprite.addSkillByUrl(value);
                    this.sceneManager.addDisplay(skillsprite);
                }
                if (value.indexOf(".lyf") != -1) {
                    var lyfSprite = new maineditor.LyfSpriteDisplay();
                    lyfSprite.addLyfByUrl(value);
                    this.sceneManager.addDisplay(lyfSprite);
                }
                if (value.indexOf(".objs") != -1) {
                    var objsSprite_1 = new maineditor.ModelSprite();
                    this.sceneManager.addDisplay(objsSprite_1);
                    var tempPrefab = new pack.PrefabStaticMesh();
                    tempPrefab.url = value;
                    tempPrefab.objsurl = value;
                    tempPrefab.textureurl = "assets/base/base.material";
                    objsSprite_1.prefab = tempPrefab;
                    pack.PackObjDataManager.getInstance().getObjDataByUrl(tempPrefab.objsurl, function (value) {
                        objsSprite_1.scale = 10 / value.getMaxSize();
                    });
                }
                this.modelKey[value] = true;
            }
        };
        MeshSceneView2DUI.prototype.refreshViewValue = function () {
            var $url = String(this.target[this.FunKey]);
            this.texturePicUi.url = "icon/base.jpg";
            this.addUrlToView($url);
            var $arr = $url.split("/");
            this.textureUrlText.label = $arr[$arr.length - 1];
        };
        Object.defineProperty(MeshSceneView2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.texturePicUi.x = this._x + 50;
                this.textureUrlText.x = this._x + 60;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MeshSceneView2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.texturePicUi.y = this._y + 0;
                this.textureUrlText.y = this._y + 200;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MeshSceneView2DUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return MeshSceneView2DUI;
    }(prop.BaseReflComponent));
    prop.MeshSceneView2DUI = MeshSceneView2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=MeshSceneView2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var MaterialFunContentUI = /** @class */ (function (_super) {
        __extends(MaterialFunContentUI, _super);
        function MaterialFunContentUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialFunContentUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI(64, 16);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.inputFunTextUi = new prop.InputFunTextUi(512, 512);
            this.propPanle.addBaseMeshUi(this.inputFunTextUi);
            this.inputFunTextUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.texturePicUiChange, this);
            this.height = 100;
        };
        MaterialFunContentUI.prototype.texturePicUiChange = function (evt) {
            console.log("更新变化了", evt.data);
            var $agalStr = evt.data;
            var temp = this.nodeUi.nodeTree;
            if (materialui.NodeTreeFun.isNeedChangePanel($agalStr, temp.funStr)) {
                this.nodeUi.inPutFunStr($agalStr);
            }
            else {
                temp.funStr = $agalStr;
                Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
            }
        };
        MaterialFunContentUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.inputFunTextUi.destory();
            _super.prototype.destory.call(this);
        };
        MaterialFunContentUI.prototype.resize = function () {
            _super.prototype.resize.call(this);
            this.inputFunTextUi.width = this.width - 20;
            this.inputFunTextUi.height = this.height - 20;
            this.inputFunTextUi.resize();
        };
        Object.defineProperty(MaterialFunContentUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        MaterialFunContentUI.prototype.refreshViewValue = function () {
            this.nodeUi = this.target[this.FunKey];
            this.inputFunTextUi.text = this.nodeUi.nodeTree.funStr;
        };
        Object.defineProperty(MaterialFunContentUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.inputFunTextUi.x = this._x + 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialFunContentUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.inputFunTextUi.y = this._y + 20;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MaterialFunContentUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return MaterialFunContentUI;
    }(prop.BaseReflComponent));
    prop.MaterialFunContentUI = MaterialFunContentUI;
})(prop || (prop = {}));
//# sourceMappingURL=MaterialFunContentUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Rectangle = Pan3d.Rectangle;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var TexItem = Pan3d.TexItem;
    var LaterOtherDiplay3dSprite = /** @class */ (function (_super) {
        __extends(LaterOtherDiplay3dSprite, _super);
        function LaterOtherDiplay3dSprite() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LaterOtherDiplay3dSprite.prototype.setMaterialTexture = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            _super.prototype.setMaterialTexture.call(this, $material, $mp);
            var texVec = $material.texList;
            for (var i = 0; this.outTexture && i < texVec.length; i++) {
                if (texVec[i].texture && texVec[i].isDynamic) {
                    if (texVec[i].type != TexItem.CUBEMAP) {
                        Scene_data.context3D.setRenderTexture($material.shader, texVec[i].name, this.outTexture, texVec[i].id);
                    }
                }
            }
        };
        LaterOtherDiplay3dSprite.prototype.maketRectMaterial = function (temp) {
            var cloneMaterialTree = temp.clone();
            var $buildShader = new left.BuildMaterialShader();
            $buildShader.fragment = temp.modelShader.fragment;
            $buildShader.paramAry = temp.modelShader.paramAry;
            //需要换定点着色器
            var agalStr = "attribute vec3 v3Position;\n" +
                "attribute vec2 v2CubeTexST;\n" +
                "varying vec2 v0;\n" +
                "uniform mat4 vpMatrix3D;\n" +
                "uniform mat4 posMatrix3D;\n" +
                "uniform mat3 rotationMatrix3D;\n" +
                "varying highp vec3 vPos;\n" +
                "void main(void){\n" +
                "v0 = vec2(v2CubeTexST.x, v2CubeTexST.y);\n" +
                "gl_Position = vec4(v3Position, 1.0);\n" +
                "vPos = v3Position;\n" +
                "} ";
            $buildShader.encode(agalStr);
            cloneMaterialTree.modelShader = $buildShader;
            this.material = cloneMaterialTree;
        };
        LaterOtherDiplay3dSprite.prototype.makeRectObjData = function () {
            this.objData = new ObjData;
            this.objData.vertices = new Array();
            var scale = 1;
            this.objData.vertices.push(-1 * scale, -1 * scale, 0.0);
            this.objData.vertices.push(1 * scale, -1 * scale, 0.0);
            this.objData.vertices.push(1 * scale, 1 * scale, 0.0);
            this.objData.vertices.push(-1 * scale, 1 * scale, 0.0);
            this.objData.uvs = new Array();
            this.objData.uvs.push(0, 0);
            this.objData.uvs.push(1, 0);
            this.objData.uvs.push(1, 1);
            this.objData.uvs.push(0, 1);
            this.objData.indexs = new Array();
            this.objData.indexs.push(0, 2, 1);
            this.objData.indexs.push(0, 3, 2);
            this.objData.treNum = this.objData.indexs.length;
            this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
            this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
            this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
        };
        return LaterOtherDiplay3dSprite;
    }(left.MaterialModelSprite));
    prop.LaterOtherDiplay3dSprite = LaterOtherDiplay3dSprite;
    var MeshMaterialLfetView2DUI = /** @class */ (function (_super) {
        __extends(MeshMaterialLfetView2DUI, _super);
        function MeshMaterialLfetView2DUI(value) {
            var _this = _super.call(this, value) || this;
            _this.defFileUrl = "assets/objs/ball.objs";
            return _this;
        }
        MeshMaterialLfetView2DUI.prototype.initView = function () {
            _super.prototype.initView.call(this);
            this.iconItem = [];
            for (var i = 0; i < 5; i++) {
                var tempUi = new prop.TexturePicUi(24, 24);
                this.propPanle.addBaseMeshUi(tempUi);
                this.drawUrlImgToUi(tempUi.ui, "icon/modelicon/" + (i + 1) + ".png");
                tempUi.ui.addEventListener(InteractiveEvent.Down, this.butClik, this);
                this.iconItem.push(tempUi);
            }
        };
        MeshMaterialLfetView2DUI.prototype.butClik = function (evt) {
            _super.prototype.butClik.call(this, evt);
            for (var i = 0; i < this.iconItem.length; i++) {
                if (this.iconItem[i].ui == evt.target) {
                    switch (i) {
                        case 0:
                            this.setObjUrlToSprite("assets/objs/box.objs");
                            break;
                        case 1:
                            this.setObjUrlToSprite("assets/objs/cylinder.objs");
                            break;
                        case 2:
                            this.setObjUrlToSprite("assets/objs/plant.objs");
                            break;
                        case 3:
                            this.setObjUrlToSprite("assets/objs/ball.objs");
                            break;
                        case 4:
                            this.setObjUrlToSprite("assets/objs/tuzhi.objs");
                            break;
                        default:
                            break;
                    }
                }
            }
        };
        Object.defineProperty(MeshMaterialLfetView2DUI.prototype, "x", {
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 100000;
                this.texturePicUi.x = this._x + 10;
                this.textureUrlText.x = this._x + 10000;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        MeshMaterialLfetView2DUI.prototype.resize = function () {
            if (this._width && this.texturePicUi) {
                //this._x = (this._width - 200) / 2;
                //this.texturePicUi.x = this._x;
                //this.texturePicUi.y = this._y + 5
                this._height = this._width;
                var showSize = this._width - 2;
                this.texturePicUi.ui.width = showSize;
                this.texturePicUi.ui.height = showSize;
                this._x = (this._width - showSize) / 2;
                this.texturePicUi.x = this._x + 0;
                this.texturePicUi.y = this._y + 0;
                for (var i = 0; i < this.iconItem.length; i++) {
                    this.iconItem[i].x = this._x + 3 + 30 * i;
                    this.iconItem[i].y = this._y + 2;
                }
            }
            this.destory;
        };
        MeshMaterialLfetView2DUI.prototype.destory = function () {
            while (this.iconItem.length) {
                var tempUi = this.iconItem.pop();
                tempUi.destory();
            }
            _super.prototype.destory.call(this);
        };
        MeshMaterialLfetView2DUI.prototype.texturePicUiChange = function ($evt) {
            var temp = this.target[this.FunKey];
            temp.showurl = this.texturePicUi.url;
            this.refrishShowMaterialModel(temp);
        };
        MeshMaterialLfetView2DUI.prototype.refrishShowMaterialModel = function (material) {
            var _this = this;
            var fileUrl = material.showurl;
            if (!fileUrl) {
                fileUrl = this.defFileUrl;
            }
            var tempArr = fileUrl.split(".");
            var stuffstr = tempArr[tempArr.length - 1];
            switch (stuffstr) {
                case "prefab":
                    pack.PackPrefabManager.getInstance().getPrefabByUrl(fileUrl, function (prefabStaticMesh) {
                        _this.setObjUrlToSprite(prefabStaticMesh.objsurl);
                    });
                    break;
                case "objs":
                    this.setObjUrlToSprite(fileUrl);
                    break;
                default:
                    console.log("没有处理的类型", stuffstr);
                    this.setZzwUrlToRole(fileUrl);
                    break;
            }
        };
        MeshMaterialLfetView2DUI.prototype.initScene = function () {
            _super.prototype.initScene.call(this);
            this.latersceneManager = new maineditor.EdItorSceneManager();
            this.latersceneManager.ready = true;
            this.latersceneManager.cam3D.cavanRect = new Rectangle(0, 0, 256, 256);
            this.ktvSprite = new LaterOtherDiplay3dSprite();
            this.latersceneManager.addDisplay(this.ktvSprite);
        };
        MeshMaterialLfetView2DUI.prototype.setZzwUrlToRole = function (zzwUrl) {
            var _this = this;
            if (!this.roleSprite) {
                this.roleSprite = new left.MaterialRoleSprite();
                this.sceneManager.addMovieDisplay(this.roleSprite);
            }
            pack.PackRoleManager.getInstance().getRoleZzwByUrl(zzwUrl, function (value) {
                _this.roleSprite.animDic = value.animDic;
                _this.roleSprite.skinMesh = value.skinMesh.clone();
                var temp = _this.target[_this.FunKey];
                for (var i = 0; i < _this.roleSprite.skinMesh.meshAry.length; i++) {
                    _this.roleSprite.skinMesh.meshAry[i].material = temp;
                    _this.roleSprite.skinMesh.meshAry[i].materialParam = null;
                }
                _this.roleSprite.curentAction = "walk";
                _this.roleSprite.sceneVisible = true;
                if (_this.modelSprite) {
                    _this.modelSprite.sceneVisible = false;
                }
            });
        };
        MeshMaterialLfetView2DUI.prototype.oneByFrame = function () {
            if (this.texturePicUi && this.texturePicUi.textureContext && this.texturePicUi.textureContext.hasStage) {
                var $uiRender = this.texturePicUi.textureContext.ui.uiRender;
                Pan3d.MathClass.getCamView(this.sceneManager.cam3D, this.sceneManager.focus3D); //一定要角色帧渲染后再重置镜头矩阵
                this.sceneManager.renderToTexture();
                $uiRender.uiAtlas.textureRes.texture = this.sceneManager.fbo.texture;
                if (this.ktvSprite.material) { //如果有后期材质，
                    this.ktvSprite.outTexture = this.sceneManager.fbo.texture;
                    this.latersceneManager.renderToTexture();
                    $uiRender.uiAtlas.textureRes.texture = this.latersceneManager.fbo.texture;
                    this.latersceneManager.cam3D.cavanRect = this.sceneManager.cam3D.cavanRect.clone();
                }
                var maxNum = Math.min(this.texturePicUi.textureContext.ui.width, this.texturePicUi.textureContext.ui.height);
                this.sceneManager.cam3D.cavanRect = new Rectangle(0, 0, maxNum, maxNum);
            }
        };
        Object.defineProperty(MeshMaterialLfetView2DUI.prototype, "width", {
            set: function (value) {
                this._width = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        MeshMaterialLfetView2DUI.prototype.setObjUrlToSprite = function (objurl) {
            var _this = this;
            if (!this.modelSprite) {
                this.modelSprite = new left.MaterialModelSprite();
                this.sceneManager.addDisplay(this.modelSprite);
            }
            this.lastObjUrl = objurl;
            pack.PackObjDataManager.getInstance().getObjDataByUrl(objurl, function (value) {
                console.log("更新模型", objurl);
                if (!_this.modelSprite.objData || _this.lastObjUrl == objurl) {
                    _this.modelSprite.objData = value;
                    _this.modelSprite.scale = 10 / _this.modelSprite.objData.getMaxSize();
                }
                _this.modelSprite.sceneVisible = true;
                if (_this.roleSprite) {
                    _this.roleSprite.sceneVisible = false;
                }
            });
        };
        MeshMaterialLfetView2DUI.prototype.refreshViewValue = function () {
            var _this = this;
            var temp = this.target[this.FunKey];
            this.texturePicUi.url = "icon/base.jpg";
            this.setObjUrlToSprite(this.defFileUrl); //选给默认对象
            this.modelSprite.material = temp;
            this.refrishShowMaterialModel(temp);
            if (temp.laterTextureurl) {
                pack.PackMaterialManager.getInstance().getMaterialByUrl(temp.laterTextureurl, function ($laterTexture) {
                    _this.ktvSprite.makeRectObjData();
                    _this.ktvSprite.maketRectMaterial($laterTexture);
                });
            }
            else {
                this.ktvSprite.material = null;
            }
        };
        return MeshMaterialLfetView2DUI;
    }(prop.MeshSceneView2DUI));
    prop.MeshMaterialLfetView2DUI = MeshMaterialLfetView2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=MeshMaterialLfetView2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Material2DUI = /** @class */ (function (_super) {
        __extends(Material2DUI, _super);
        function Material2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Material2DUI.prototype.initView = function () {
            _super.prototype.initView.call(this);
            this.height = 300;
        };
        Material2DUI.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this._materialTreeMc) {
                this._materialTreeMc.destory();
                this._materialTreeMc = null;
            }
        };
        Object.defineProperty(Material2DUI.prototype, "data", {
            set: function (value) {
                this._data = value;
                //  console.log("data", value)
            },
            enumerable: true,
            configurable: true
        });
        Material2DUI.prototype.refreshViewValue = function () {
            this.textureTree = this.target[this.FunKey];
            if (this.textureTree) {
                this.texturePicUi.url = this.textureTree.url;
                var $arr = this.textureTree.url.split("/");
                this.textureUrlText.label = $arr[$arr.length - 1];
                this.showMaterialParamUi();
            }
            else {
                this.texturePicUi.url = "icon/base.jpg";
                this.textureUrlText.label = "无材质";
            }
        };
        Material2DUI.prototype.paramChange = function (item) {
            this.changFun(item);
        };
        Material2DUI.prototype.showMaterialParamUi = function () {
            var _this = this;
            if (!this._materialTreeMc) {
                console.log(this.propPanle == prop.PropModel.getInstance().propPanle);
                this._materialTreeMc = new prop.MaterialParamUi(this.propPanle);
                this._materialTreeMc.changFun = function (value) { _this.paramChange(value); };
            }
            this.textureTree = this.target[this.FunKey];
            this._materialTreeMc.setData(this.makeTempInfo(this.textureTree));
            this._materialTreeMc.y = this._y + 100;
            this.height = 100 + this._materialTreeMc.height;
        };
        Material2DUI.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this._materialTreeMc) {
                this._materialTreeMc.resize();
                this._materialTreeMc.y = this._y + 100;
                this.height = 100 + this._materialTreeMc.height;
            }
        };
        Material2DUI.prototype.searchClik = function (evt) {
            console.log(this.textureTree.url);
            this.searchFileByPath(this.textureTree.url);
        };
        Material2DUI.prototype.makeTempInfo = function ($materialTree) {
            var item = [];
            for (var i = 0; i < $materialTree.data.length; i++) {
                if ($materialTree.data[i].data.isDynamic) {
                    var temp;
                    if ($materialTree.data[i].type == materialui.NodeTree.TEX) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.url;
                    }
                    if ($materialTree.data[i].type == materialui.NodeTree.VEC3) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.constValue;
                    }
                    if ($materialTree.data[i].type == materialui.NodeTree.FLOAT) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.constValue;
                    }
                    if (temp) {
                        temp.type = $materialTree.data[i].type;
                        temp.paramName = $materialTree.data[i].data.paramName;
                        var tempValue = this.target.getParamItem(temp.paramName); //如果有对象替换纹理中的
                        if (tempValue) {
                            temp.data = tempValue;
                        }
                        item.push(temp);
                    }
                }
            }
            return item;
        };
        return Material2DUI;
    }(prop.Texturue2DUI));
    prop.Material2DUI = Material2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=Material2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var RoleAnimi2DUI = /** @class */ (function (_super) {
        __extends(RoleAnimi2DUI, _super);
        function RoleAnimi2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RoleAnimi2DUI.prototype.initView = function () {
            _super.prototype.initView.call(this);
            this.textLabelUI = new prop.TextLabelUI();
            this.comboBoxUi = new prop.ComboBoxUi(80, 20);
            this.deleIcon = new prop.BaseMeshUi(16, 16);
            this.md5animUrlText = new prop.TextLabelUI(100, 16);
            this.md5animPicUi = new prop.TexturePicUi();
            this.md5animPicUi.suffix = "md5anim";
            this.md5animPicUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.drawInAnimUrl, this);
            this.md5searchIcon = new prop.BaseMeshUi(20, 20);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.comboBoxUi);
            this.propPanle.addBaseMeshUi(this.deleIcon);
            this.propPanle.addBaseMeshUi(this.md5animUrlText);
            this.propPanle.addBaseMeshUi(this.md5animPicUi);
            this.propPanle.addBaseMeshUi(this.md5searchIcon);
            this.drawUrlImgToUi(this.md5searchIcon.ui, "icon/search.png");
            this.drawUrlImgToUi(this.deleIcon.ui, "icon/deleticon.png");
            this.comboBoxUi.addEventListener(InteractiveEvent.Down, this.comboBoxUiDown, this);
            this.deleIcon.ui.addEventListener(InteractiveEvent.Down, this.deleIconDown, this);
            this.md5searchIcon.ui.addEventListener(InteractiveEvent.Up, this.md5searchIconClik, this);
            this.height = 150;
        };
        RoleAnimi2DUI.prototype.md5searchIconClik = function (evt) {
            var vo = this.target.data;
            console.log(vo.animPlayKey);
            // var pathurl: string = Pan3d_me.Scene_data.fileRoot + value;
            //  Pan3d_me.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d_me.Scene_data.ossRoot, ""))
        };
        RoleAnimi2DUI.prototype.drawInAnimUrl = function () {
            var _this = this;
            var meshUrl; //需要mesh信息才能编译动作
            var vo = this.target.data;
            if (vo && vo.skinMesh && vo.skinMesh.meshAry && vo.skinMesh.meshAry.length) {
                for (var i = 0; i < vo.skinMesh.meshAry.length; i++) {
                    meshUrl = vo.skinMesh.meshAry[i].md5meshurl;
                }
            }
            if (meshUrl) {
                LoadManager.getInstance().load(Scene_data.fileRoot + meshUrl, LoadManager.XML_TYPE, function ($meshstr) {
                    var $md5Srite = new left.LocalMd5MoveSprite();
                    $md5Srite.addLocalMeshByStr($meshstr);
                    LoadManager.getInstance().load(Scene_data.fileRoot + _this.md5animPicUi.url, LoadManager.XML_TYPE, function (anistr) {
                        $md5Srite.addLocalAdimByStr(anistr);
                        var animfilename = AppData.getFileName(_this.md5animPicUi.url);
                        animfilename = animfilename.split(".")[0];
                        var rolesprite = new left.MaterialRoleSprite();
                        rolesprite.changeRoleWeb($md5Srite);
                        for (var keyStr in rolesprite.animDic) { //只会有一个关键动作。  stand .需要优化可读性
                            vo.animDic[animfilename] = rolesprite.animDic[keyStr];
                        }
                        vo.animPlayKey = animfilename;
                        _this.refreshViewValue();
                        _this.changFun();
                        console.log("准备获取新的动作数据", vo.animPlayKey);
                    });
                });
            }
            else {
                alert("需要先有md5mesh文件");
            }
            /*
            LoadManager.getInstance().load(Scene_data.fileRoot + meshUrl, LoadManager.XML_TYPE, ($meshstr: any) => {
                var $md5Srite: left.LocalMd5MoveSprite = new left.LocalMd5MoveSprite()
                $md5Srite.addLocalMeshByStr($meshstr)
                LoadManager.getInstance().load(Scene_data.fileRoot + this.md5animPicUi.url, LoadManager.XML_TYPE, (anistr: any) => {
                    $md5Srite.addLocalAdimByStr(anistr)
                    var animfilename: string = AppData.getFileName(this.md5animPicUi.url)
                    animfilename = animfilename.split(".")[0]
                    var rolesprite: left.MaterialRoleSprite = new left.MaterialRoleSprite();
                    rolesprite.changeRoleWeb($md5Srite);
             
                    for (var keyStr in rolesprite.animDic) { //只会有一个关键动作。  stand .需要优化可读性
                        vo.animDic[animfilename] = rolesprite.animDic[keyStr]
                    }
                    vo.animPlayKey = animfilename;
                    this.refreshViewValue()
                    this.changFun()
                    console.log("准备获取新的动作数据", vo.animPlayKey);
                });
            });
            */
        };
        RoleAnimi2DUI.prototype.deleIconDown = function ($evt) {
            var vo = this.target.data;
            if (this.getObjKeyLen(vo.animDic) > 1) {
                if (vo.animDic[vo.animPlayKey]) {
                    var truthBeTold = window.confirm("是否确定要删除动作" + vo.animPlayKey);
                    if (truthBeTold) {
                        delete (vo.animDic[vo.animPlayKey]);
                        vo.animPlayKey = null;
                        this.refreshViewValue();
                    }
                }
            }
            else {
                alert("最后一个动作不可以删除");
            }
        };
        RoleAnimi2DUI.prototype.getObjKeyLen = function (obj) {
            var len = 0;
            for (var keyStr in obj) {
                len++;
            }
            return len;
        };
        RoleAnimi2DUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.comboBoxUi.destory();
            this.deleIcon.destory();
            this.md5animUrlText.destory();
            this.md5animPicUi.destory();
            this.md5searchIcon.destory();
            _super.prototype.destory.call(this);
        };
        Object.defineProperty(RoleAnimi2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.comboBoxUi.x = this._x + 75;
                this.deleIcon.x = this._x + 150;
                this.md5animUrlText.x = this._x + 60;
                this.md5animPicUi.x = this._x + 60;
                this.md5searchIcon.x = this._x + 150;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoleAnimi2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y + 4;
                this.comboBoxUi.y = this._y + 6;
                this.deleIcon.y = this._y + 6;
                this.md5animUrlText.y = this._y + 100;
                this.md5animPicUi.y = this._y + 35;
                this.md5searchIcon.y = this._y + 40;
            },
            enumerable: true,
            configurable: true
        });
        RoleAnimi2DUI.prototype.comboBoxUiDown = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_COMBOX_MENU);
            $rightMenuEvet.posv2d = new Vector2D(this.comboBoxUi.ui.absoluteX, this.comboBoxUi.ui.absoluteY + 20);
            var arrItem = [];
            for (var keyStr in this._animDic) {
                arrItem.push({ name: keyStr, type: arrItem.length });
            }
            $rightMenuEvet.comboxData = arrItem;
            $rightMenuEvet.comboxFun = function (value) { _this.selectFun(value); };
            ModuleEventManager.dispatchEvent($rightMenuEvet);
        };
        RoleAnimi2DUI.prototype.selectFun = function (value) {
            var skipId = 0;
            var vo = this.target.data;
            for (var keyStr in this._animDic) {
                vo.animPlayKey = keyStr;
                if (skipId == value) {
                    break;
                }
                skipId++;
            }
            this.changFun();
            //vo.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE))
            this.refreshViewValue();
        };
        //   private selectAnimKey: string
        RoleAnimi2DUI.prototype.refreshViewValue = function () {
            if (this.FunKey) {
                this._animDic = this.target[this.FunKey];
                var vo = this.target.data;
                if (!vo.animPlayKey) {
                    for (var keyStr in this._animDic) {
                        vo.animPlayKey = keyStr;
                        break;
                    }
                }
                if (this._animDic[vo.animPlayKey]) {
                    if (!this._animDic[vo.animPlayKey].url) {
                        this._animDic[vo.animPlayKey].url = vo.animPlayKey + ".md5anim";
                    }
                    this.textLabelUI.label = "部分";
                    this.comboBoxUi.text = vo.animPlayKey;
                    this.md5animPicUi.url = "icon/txt_64x.png";
                    this.md5animUrlText.label = this._animDic[vo.animPlayKey].url;
                }
                else {
                    console.log("没有动作对象");
                }
            }
        };
        return RoleAnimi2DUI;
    }(prop.BaseReflComponent));
    prop.RoleAnimi2DUI = RoleAnimi2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=RoleAnimi2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var RoleMesh2DUI = /** @class */ (function (_super) {
        __extends(RoleMesh2DUI, _super);
        function RoleMesh2DUI() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.selectMeshId = 0;
            return _this;
        }
        RoleMesh2DUI.prototype.initView = function () {
            _super.prototype.initView.call(this);
            this.textLabelUI = new prop.TextLabelUI();
            this.comboBoxUi = new prop.ComboBoxUi();
            this.deleIcon = new prop.BaseMeshUi(16, 16);
            this.md5meshUrlText = new prop.TextLabelUI(200, 16);
            this.md5meshPicUi = new prop.TexturePicUi();
            this.md5meshPicUi.suffix = "md5mesh";
            this.md5meshPicUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.drawInMeshUrl, this);
            this.md5searchIcon = new prop.BaseMeshUi(20, 20);
            this.textureUrlText = new prop.TextLabelUI(200, 16);
            this.texturePicUi = new prop.TexturePicUi();
            this.texturePicUi.suffix = "material";
            this.texturePicUi.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.drawInTextureUrl, this);
            this.texturesearchIcon = new prop.BaseMeshUi(20, 20);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.comboBoxUi);
            this.propPanle.addBaseMeshUi(this.deleIcon);
            this.propPanle.addBaseMeshUi(this.md5meshUrlText);
            this.propPanle.addBaseMeshUi(this.md5meshPicUi);
            this.propPanle.addBaseMeshUi(this.md5searchIcon);
            this.propPanle.addBaseMeshUi(this.textureUrlText);
            this.propPanle.addBaseMeshUi(this.texturePicUi);
            this.propPanle.addBaseMeshUi(this.texturesearchIcon);
            this.drawUrlImgToUi(this.md5searchIcon.ui, "icon/search.png");
            this.drawUrlImgToUi(this.texturesearchIcon.ui, "icon/search.png");
            this.drawUrlImgToUi(this.deleIcon.ui, "icon/deleticon.png");
            this.comboBoxUi.addEventListener(InteractiveEvent.Down, this.comboBoxUiDown, this);
            this.deleIcon.ui.addEventListener(InteractiveEvent.Down, this.deleIconDown, this);
            this.height = 200;
        };
        RoleMesh2DUI.prototype.deleIconDown = function ($evt) {
            this._skinMesh.meshAry.splice(this.selectMeshId, 1);
            this.changFun();
        };
        RoleMesh2DUI.prototype.drawInTextureUrl = function () {
            var tempObj = this._skinMesh.meshAry[this.selectMeshId];
            if (tempObj) {
                console.log(tempObj);
                tempObj.materialUrl = this.texturePicUi.url;
                this.refreshViewValue();
                this.changFun();
            }
        };
        RoleMesh2DUI.prototype.drawInMeshUrl = function () {
            var _this = this;
            var meshUrl = this.md5meshPicUi.url;
            LoadManager.getInstance().load(Scene_data.fileRoot + meshUrl, LoadManager.XML_TYPE, function ($meshstr) {
                var $md5Srite = new left.LocalMd5MoveSprite();
                $md5Srite.addLocalMeshByStr($meshstr);
                var rolesprite = new left.MaterialRoleSprite();
                rolesprite.changeRoleWeb($md5Srite);
                var tempMesh = rolesprite.skinMesh.meshAry[0];
                tempMesh.materialUrl = "base.material"; //设计默认
                tempMesh.md5meshurl = meshUrl;
                pack.PackMaterialManager.getInstance().getMaterialByUrl(tempMesh.materialUrl, function ($materialTree) {
                    $materialTree.shader = $materialTree.roleShader;
                    // $materialTree.program = $materialTree.shader.program;
                    tempMesh.material = $materialTree;
                    _this._skinMesh.meshAry.push(tempMesh);
                    _this.refreshViewValue();
                });
            });
        };
        RoleMesh2DUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.comboBoxUi.destory();
            this.deleIcon.destory();
            this.md5meshUrlText.destory();
            this.md5meshPicUi.destory();
            this.md5searchIcon.destory();
            this.textureUrlText.destory();
            this.texturePicUi.destory();
            this.texturesearchIcon.destory();
            if (this._materialTreeMc) {
                this._materialTreeMc.destory();
            }
            _super.prototype.destory.call(this);
        };
        Object.defineProperty(RoleMesh2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.comboBoxUi.x = this._x + 75;
                this.deleIcon.x = this._x + 150;
                this.md5meshUrlText.x = this._x + 60;
                this.md5meshPicUi.x = this._x + 60;
                this.md5searchIcon.x = this._x + 150;
                this.texturePicUi.x = this._x + 60;
                this.textureUrlText.x = this._x + 60;
                this.texturesearchIcon.x = this._x + 150;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoleMesh2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y + 4;
                this.comboBoxUi.y = this._y + 6;
                this.deleIcon.y = this._y + 6;
                this.md5meshUrlText.y = this._y + 100;
                this.md5meshPicUi.y = this._y + 35;
                this.md5searchIcon.y = this._y + 40;
                this.texturePicUi.y = this._y + 35 + 110;
                this.textureUrlText.y = this._y + 105 + 110;
                this.texturesearchIcon.y = this._y + 40 + 110;
            },
            enumerable: true,
            configurable: true
        });
        RoleMesh2DUI.prototype.comboBoxUiDown = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_COMBOX_MENU);
            $rightMenuEvet.posv2d = new Vector2D(this.comboBoxUi.ui.absoluteX, this.comboBoxUi.ui.absoluteY + 20);
            var arrItem = [];
            for (var i = 0; i < this._skinMesh.meshAry.length; i++) {
                arrItem.push({ name: "mesh_" + i, type: i });
            }
            $rightMenuEvet.comboxData = arrItem;
            $rightMenuEvet.comboxFun = function (value) { _this.selectFun(value); };
            ModuleEventManager.dispatchEvent($rightMenuEvet);
        };
        RoleMesh2DUI.prototype.selectFun = function (value) {
            this.selectMeshId = value;
            this.refreshViewValue();
        };
        Object.defineProperty(RoleMesh2DUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        RoleMesh2DUI.prototype.refreshViewValue = function () {
            if (this.FunKey) {
                this._skinMesh = this.target[this.FunKey];
                this.textLabelUI.label = "部分";
                this.comboBoxUi.text = "mesh_" + this.selectMeshId;
                this.md5meshPicUi.url = "icon/txt_64x.png";
                var tempObj = this._skinMesh.meshAry[this.selectMeshId];
                if (tempObj) {
                    this.md5meshUrlText.label = tempObj.md5meshurl;
                    this.texturePicUi.url = tempObj.materialUrl;
                    this.textureUrlText.label = tempObj.materialUrl;
                    this.textureTree = tempObj.material;
                    this.showMaterialParamUi();
                }
            }
        };
        RoleMesh2DUI.prototype.paramChange = function (item) {
            var tempObj = this._skinMesh.meshAry[this.selectMeshId];
            if (tempObj) {
                tempObj.paramInfo = item;
            }
            this.changFun(item);
        };
        RoleMesh2DUI.prototype.showMaterialParamUi = function () {
            var _this = this;
            if (!this._materialTreeMc) {
                this._materialTreeMc = new prop.MaterialParamUi(prop.PropModel.getInstance().propPanle);
                this._materialTreeMc.changFun = function (value) { _this.paramChange(value); };
            }
            this._materialTreeMc.setData(this.makeTempInfo(this.textureTree));
            this._materialTreeMc.y = this._y + 240;
            this.height = 240 + this._materialTreeMc.height;
        };
        RoleMesh2DUI.prototype.getParamItem = function (value) {
            var tempObj = this._skinMesh.meshAry[this.selectMeshId];
            if (tempObj) {
                for (var i = 0; tempObj.paramInfo && i < tempObj.paramInfo.length; i++) {
                    if (tempObj.paramInfo[i].paramName == value) {
                        return tempObj.paramInfo[i].data;
                    }
                }
            }
            return null;
        };
        RoleMesh2DUI.prototype.makeTempInfo = function ($materialTree) {
            var item = [];
            for (var i = 0; i < $materialTree.data.length; i++) {
                if ($materialTree.data[i].data.isDynamic) {
                    var temp;
                    if ($materialTree.data[i].type == materialui.NodeTree.TEX) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.url;
                    }
                    if ($materialTree.data[i].type == materialui.NodeTree.VEC3) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.constValue;
                    }
                    if ($materialTree.data[i].type == materialui.NodeTree.FLOAT) {
                        temp = {};
                        temp.data = $materialTree.data[i].data.constValue;
                    }
                    if (temp) {
                        temp.type = $materialTree.data[i].type;
                        temp.paramName = $materialTree.data[i].data.paramName;
                        var tempValue = this.getParamItem(temp.paramName); //如果有对象替换纹理中的
                        if (tempValue) {
                            temp.data = tempValue;
                        }
                        item.push(temp);
                    }
                }
            }
            return item;
        };
        return RoleMesh2DUI;
    }(prop.BaseReflComponent));
    prop.RoleMesh2DUI = RoleMesh2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=RoleMesh2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextField2DUI = /** @class */ (function (_super) {
        __extends(TextField2DUI, _super);
        function TextField2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextField2DUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI(128, 32);
            this.infoLabelUi = new prop.TextLabelUI(256, 32);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.infoLabelUi);
            this.height = 20;
        };
        TextField2DUI.prototype.clikMouseUp = function (evt) {
            this.target.eventKey(this.clikEventInfo);
        };
        Object.defineProperty(TextField2DUI.prototype, "clikEvent", {
            set: function (value) {
                if (value) {
                    this.clikEventInfo = value;
                    this.infoLabelUi.ui.addEventListener(InteractiveEvent.Up, this.clikMouseUp, this);
                }
            },
            enumerable: true,
            configurable: true
        });
        TextField2DUI.prototype.destory = function () {
            if (this.clikEventInfo) {
                this.infoLabelUi.ui.removeEventListener(InteractiveEvent.Up, this.clikMouseUp, this);
            }
            this.textLabelUI.destory();
            this.infoLabelUi.destory();
        };
        Object.defineProperty(TextField2DUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        TextField2DUI.prototype.refreshViewValue = function () {
            this.infoLabelUi.label = this.target[this.FunKey];
        };
        TextField2DUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        Object.defineProperty(TextField2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.infoLabelUi.x = this._x + 75;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.infoLabelUi.y = this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField2DUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return TextField2DUI;
    }(prop.BaseReflComponent));
    prop.TextField2DUI = TextField2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=TextField2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Category2DUI = /** @class */ (function (_super) {
        __extends(Category2DUI, _super);
        function Category2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Category2DUI.prototype.initView = function () {
            this.categoryBgUi = new prop.BaseMeshUi();
            this.categoryIcon = new prop.BaseMeshUi(16, 16);
            this.categoryOpen = new prop.BaseMeshUi(16, 16);
            this.textLabelUI = new prop.TextLabelUI();
            this.propPanle.addBaseMeshUi(this.categoryBgUi);
            this.propPanle.addBaseMeshUi(this.categoryIcon);
            this.propPanle.addBaseMeshUi(this.categoryOpen);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.height = 25;
            this.categoryBgUi.ui.width = 400;
            this.categoryBgUi.ui.height = this.height - 2;
            this.drawOutColor(this.categoryBgUi.ui, new Vector3D(60, 60, 60));
            this.drawUrlImgToUi(this.categoryIcon.ui, "icon/profeb_16.png");
            this.categoryBgUi.ui.addEventListener(InteractiveEvent.Up, this.clikMouseUp, this);
        };
        Category2DUI.prototype.clikMouseUp = function (evt) {
            this.changFun(this.label);
            this.data = !this.data;
        };
        Category2DUI.prototype.resize = function () {
            this.categoryBgUi.ui.width = this.width;
        };
        Category2DUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.categoryBgUi.destory();
            this.categoryIcon.destory();
            this.categoryOpen.destory();
        };
        Object.defineProperty(Category2DUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                if (this._data) {
                    this.drawUrlImgToUi(this.categoryOpen.ui, "icon/icon_PanUp.png");
                }
                else {
                    this.drawUrlImgToUi(this.categoryOpen.ui, "icon/icon_PanRight.png");
                }
            },
            enumerable: true,
            configurable: true
        });
        Category2DUI.prototype.refreshViewValue = function () {
        };
        Object.defineProperty(Category2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 50;
                this.categoryBgUi.x = 0;
                this.categoryOpen.x = 10;
                this.categoryIcon.x = 40;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Category2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y + 5;
                this.categoryBgUi.y = this._y;
                this.categoryIcon.y = this._y + 5;
                this.categoryOpen.y = this._y + 5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Category2DUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return Category2DUI;
    }(prop.BaseReflComponent));
    prop.Category2DUI = Category2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=Category2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var CheckBox2DUI = /** @class */ (function (_super) {
        __extends(CheckBox2DUI, _super);
        function CheckBox2DUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CheckBox2DUI.prototype.initView = function () {
            this.boxIcon = new prop.BaseMeshUi(18, 18);
            this.textLabelUI = new prop.TextLabelUI();
            this.propPanle.addBaseMeshUi(this.boxIcon);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.height = 25;
            this.boxIcon.ui.addEventListener(InteractiveEvent.Up, this.clikMouseUp, this);
        };
        CheckBox2DUI.prototype.clikMouseUp = function (evt) {
            this.target[this.FunKey] = !this.target[this.FunKey];
            this.refreshViewValue();
        };
        CheckBox2DUI.prototype.destory = function () {
            this.boxIcon.ui.removeEventListener(InteractiveEvent.Up, this.clikMouseUp, this);
            this.textLabelUI.destory();
            this.boxIcon.destory();
        };
        CheckBox2DUI.prototype.refreshViewValue = function () {
            if (this.target[this.FunKey]) {
                this.drawUrlImgToUi(this.boxIcon.ui, "icon/checkbox_down.png");
            }
            else {
                this.drawUrlImgToUi(this.boxIcon.ui, "icon/checkbox_up.png");
            }
        };
        Object.defineProperty(CheckBox2DUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x;
                this.boxIcon.x = 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox2DUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y + 5;
                this.boxIcon.y = this._y + 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox2DUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return CheckBox2DUI;
    }(prop.BaseReflComponent));
    prop.CheckBox2DUI = CheckBox2DUI;
})(prop || (prop = {}));
//# sourceMappingURL=CheckBox2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Vec2PrameCtrlUI = /** @class */ (function (_super) {
        __extends(Vec2PrameCtrlUI, _super);
        function Vec2PrameCtrlUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Vec2PrameCtrlUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI();
            this.textX = new prop.TextLabelUI(50, 30);
            this.textY = new prop.TextLabelUI(50, 30);
            this.textX.label = "X:";
            this.textY.label = "Y:";
            this.inputTextUiX = new prop.InputTextUi(100, 30);
            this.inputTextUiY = new prop.InputTextUi(100, 30);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.textX);
            this.propPanle.addBaseMeshUi(this.textY);
            this.propPanle.addBaseMeshUi(this.inputTextUiX);
            this.propPanle.addBaseMeshUi(this.inputTextUiY);
            this.inputTextUiX.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.inputTextUiXchange, this);
            this.inputTextUiY.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.inputTextUiYchange, this);
            this.height = 30;
        };
        Vec2PrameCtrlUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.inputTextUiX.destory();
            this.inputTextUiY.destory();
            this.textX.destory();
            this.textY.destory();
        };
        Object.defineProperty(Vec2PrameCtrlUI.prototype, "visible", {
            set: function (value) {
                this.inputTextUiX.visible = value;
                this.inputTextUiY.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec2PrameCtrlUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this._v2d = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Vec2PrameCtrlUI.prototype.inputTextUiXchange = function ($evt) {
            this._v2d.x = Number($evt.data);
            this.changeV3d();
        };
        Vec2PrameCtrlUI.prototype.inputTextUiYchange = function ($evt) {
            this._v2d.y = Number($evt.data);
            this.changeV3d();
        };
        Vec2PrameCtrlUI.prototype.changeV3d = function () {
            this.target[this.FunKey] = this._v2d;
            this.changFun && this.changFun(this);
            this.refreshViewValue();
        };
        Vec2PrameCtrlUI.prototype.colorPickUIchange = function ($evt) {
            var $vec = ($evt.data);
            this.target[this.FunKey] = $vec;
            this.changFun && this.changFun(this);
            this.refreshViewValue();
        };
        Vec2PrameCtrlUI.prototype.refreshViewValue = function () {
            this._v2d = this.target[this.FunKey];
            this.inputTextUiX.text = this.getNumStr(this._v2d.x);
            this.inputTextUiY.text = this.getNumStr(this._v2d.y);
        };
        Vec2PrameCtrlUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        Object.defineProperty(Vec2PrameCtrlUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x - 0;
                this.textX.x = this._x + 55;
                this.textY.x = this._x + 125;
                this.inputTextUiX.x = this._x + 85;
                this.inputTextUiY.x = this._x + 155;
            },
            enumerable: true,
            configurable: true
        });
        Vec2PrameCtrlUI.prototype.resize = function () {
            _super.prototype.resize.call(this);
            this.inputTextUiX.resize();
            this.inputTextUiY.resize();
        };
        Object.defineProperty(Vec2PrameCtrlUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value + 5;
                this.textLabelUI.y = this._y;
                this.textX.y = this._y;
                this.textY.y = this._y;
                this.inputTextUiX.y = this._y;
                this.inputTextUiY.y = this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec2PrameCtrlUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return Vec2PrameCtrlUI;
    }(prop.BaseReflComponent));
    prop.Vec2PrameCtrlUI = Vec2PrameCtrlUI;
})(prop || (prop = {}));
//# sourceMappingURL=Vec2PrameCtrlUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Vec3dCtrlUI = /** @class */ (function (_super) {
        __extends(Vec3dCtrlUI, _super);
        function Vec3dCtrlUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Vec3dCtrlUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI();
            this.textX = new prop.TextLabelUI(50, 30);
            this.textY = new prop.TextLabelUI(50, 30);
            this.textZ = new prop.TextLabelUI(50, 30);
            this.textX.label = "X:";
            this.textY.label = "Y:";
            this.textZ.label = "Z:";
            this.inputTextUiX = new prop.InputTextUi(100, 30);
            this.inputTextUiY = new prop.InputTextUi(100, 30);
            this.inputTextUiZ = new prop.InputTextUi(100, 30);
            this.propPanle.addBaseMeshUi(this.textLabelUI);
            this.propPanle.addBaseMeshUi(this.textX);
            this.propPanle.addBaseMeshUi(this.textY);
            this.propPanle.addBaseMeshUi(this.textZ);
            this.propPanle.addBaseMeshUi(this.inputTextUiX);
            this.propPanle.addBaseMeshUi(this.inputTextUiY);
            this.propPanle.addBaseMeshUi(this.inputTextUiZ);
            this.inputTextUiX.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.inputTextUiXchange, this);
            this.inputTextUiY.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.inputTextUiYchange, this);
            this.inputTextUiZ.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.inputTextUiZchange, this);
            this.height = 30;
        };
        Vec3dCtrlUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.inputTextUiX.destory();
            this.inputTextUiY.destory();
            this.inputTextUiZ.destory();
            this.textX.destory();
            this.textY.destory();
            this.textZ.destory();
        };
        Object.defineProperty(Vec3dCtrlUI.prototype, "visible", {
            set: function (value) {
                this.inputTextUiX.visible = value;
                this.inputTextUiY.visible = value;
                this.inputTextUiZ.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec3dCtrlUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this._v3d = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Vec3dCtrlUI.prototype.inputTextUiXchange = function ($evt) {
            this._v3d.x = Number($evt.data);
            this.changeV3d();
        };
        Vec3dCtrlUI.prototype.inputTextUiYchange = function ($evt) {
            this._v3d.y = Number($evt.data);
            this.changeV3d();
        };
        Vec3dCtrlUI.prototype.inputTextUiZchange = function ($evt) {
            this._v3d.z = Number($evt.data);
            this.changeV3d();
        };
        Vec3dCtrlUI.prototype.changeV3d = function () {
            this.target[this.FunKey] = this._v3d;
            this.changFun && this.changFun(this);
            this.refreshViewValue();
        };
        Vec3dCtrlUI.prototype.colorPickUIchange = function ($evt) {
            var $vec = ($evt.data);
            this.target[this.FunKey] = $vec;
            this.changFun && this.changFun(this);
            this.refreshViewValue();
        };
        Vec3dCtrlUI.prototype.refreshViewValue = function () {
            this._v3d = this.target[this.FunKey];
            this.inputTextUiX.text = this.getNumStr(this._v3d.x);
            this.inputTextUiY.text = this.getNumStr(this._v3d.y);
            this.inputTextUiZ.text = this.getNumStr(this._v3d.z);
        };
        Vec3dCtrlUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        Object.defineProperty(Vec3dCtrlUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x - 0;
                this.textX.x = this._x + 55;
                this.textY.x = this._x + 125;
                this.textZ.x = this._x + 195;
                this.inputTextUiX.x = this._x + 85;
                this.inputTextUiY.x = this._x + 155;
                this.inputTextUiZ.x = this._x + 225;
            },
            enumerable: true,
            configurable: true
        });
        Vec3dCtrlUI.prototype.resize = function () {
            _super.prototype.resize.call(this);
            this.inputTextUiX.resize();
            this.inputTextUiY.resize();
            this.inputTextUiZ.resize();
        };
        Object.defineProperty(Vec3dCtrlUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value + 5;
                this.textLabelUI.y = this._y;
                this.textX.y = this._y;
                this.textY.y = this._y;
                this.textZ.y = this._y;
                this.inputTextUiX.y = this._y;
                this.inputTextUiY.y = this._y;
                this.inputTextUiZ.y = this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec3dCtrlUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return Vec3dCtrlUI;
    }(prop.BaseReflComponent));
    prop.Vec3dCtrlUI = Vec3dCtrlUI;
    var Vec3ColorCtrlUI = /** @class */ (function (_super) {
        __extends(Vec3ColorCtrlUI, _super);
        function Vec3ColorCtrlUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Vec3ColorCtrlUI.prototype, "x", {
            set: function (value) {
                this._x = value + 10;
                this.textLabelUI.x = this._x - 20;
                this.textX.x = this._x + 55;
                this.textY.x = this._x + 125;
                this.textZ.x = this._x + 195;
                this.inputTextUiX.x = this._x + 85;
                this.inputTextUiY.x = this._x + 155;
                this.inputTextUiZ.x = this._x + 225;
                this.colorPickUI.x = this._x + 37;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec3ColorCtrlUI.prototype, "y", {
            set: function (value) {
                this._y = value + 5;
                this.textLabelUI.y = this._y;
                this.textX.y = this._y;
                this.textY.y = this._y;
                this.textZ.y = this._y;
                this.inputTextUiX.y = this._y;
                this.inputTextUiY.y = this._y;
                this.inputTextUiZ.y = this._y;
                this.colorPickUI.y = this._y + 2;
            },
            enumerable: true,
            configurable: true
        });
        Vec3ColorCtrlUI.prototype.refreshViewValue = function () {
            _super.prototype.refreshViewValue.call(this);
            this.colorPickUI.vec3d = this._v3d;
        };
        Vec3ColorCtrlUI.prototype.initView = function () {
            _super.prototype.initView.call(this);
            this.colorPickUI = new prop.ColorPickUI(12, 12);
            this.colorPickUI.addEventListener(prop.ReflectionEvet.CHANGE_DATA, this.colorPickUIchange, this);
            this.propPanle.addBaseMeshUi(this.colorPickUI);
        };
        Vec3ColorCtrlUI.prototype.destory = function () {
            _super.prototype.destory.call(this);
            this.colorPickUI.destory();
        };
        return Vec3ColorCtrlUI;
    }(Vec3dCtrlUI));
    prop.Vec3ColorCtrlUI = Vec3ColorCtrlUI;
})(prop || (prop = {}));
//# sourceMappingURL=Vec3ColorCtrlUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var BaseEvent = Pan3d.BaseEvent;
    var ReflectionEvet = /** @class */ (function (_super) {
        __extends(ReflectionEvet, _super);
        function ReflectionEvet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReflectionEvet.CHANGE_DATA = "CHANGE_DATA";
        return ReflectionEvet;
    }(BaseEvent));
    prop.ReflectionEvet = ReflectionEvet;
})(prop || (prop = {}));
//# sourceMappingURL=ReflectionEvet.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var LabelTextFont = Pan3d.LabelTextFont;
    var EventDispatcher = Pan3d.EventDispatcher;
    var UIManager = Pan3d.UIManager;
    var TextAlign = Pan3d.TextAlign;
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var UIConatiner = Pan3d.UIConatiner;
    var UIAtlas = Pan3d.UIAtlas;
    var TextureManager = Pan3d.TextureManager;
    var TextureContext = /** @class */ (function (_super) {
        __extends(TextureContext, _super);
        function TextureContext(w, h) {
            var _this = _super.call(this) || this;
            _this.tempUiName = "tempui";
            _this.uiViewScale = 0.5;
            w /= _this.uiViewScale;
            h /= _this.uiViewScale;
            _this._bRender = new UIRenderComponent();
            _this.addRender(_this._bRender);
            _this._bRender.uiAtlas = new UIAtlas();
            var $uiAtlas = _this._bRender.uiAtlas;
            $uiAtlas.configData = [];
            var kkwA = Math.pow(2, Math.ceil(Math.log(w) / Math.log(2)));
            var kkhB = Math.pow(2, Math.ceil(Math.log(h) / Math.log(2)));
            _this._bRender.uiAtlas.ctx = UIManager.getInstance().getContext2D(kkwA, kkhB, false);
            _this._bRender.uiAtlas.textureRes = TextureManager.getInstance().getCanvasTexture(_this._bRender.uiAtlas.ctx, 0, 1, 0);
            $uiAtlas.configData.push($uiAtlas.getObject(_this.tempUiName, 0, 0, w, h, kkwA, kkhB));
            _this.ui = _this._bRender.creatBaseComponent(_this.tempUiName);
            _this.ui.width = w * _this.uiViewScale;
            _this.ui.height = h * _this.uiViewScale;
            _this.addChild(_this.ui);
            return _this;
            //  this.ui.uiRender.uiAtlas.upDataPicToTexture("b.jpg", this.ui.skinName);
        }
        return TextureContext;
    }(UIConatiner));
    prop.TextureContext = TextureContext;
    var BaseMeshUi = /** @class */ (function (_super) {
        __extends(BaseMeshUi, _super);
        function BaseMeshUi(w, h) {
            if (w === void 0) { w = 64; }
            if (h === void 0) { h = 64; }
            var _this = _super.call(this) || this;
            _this._x = 0;
            _this._y = 0;
            _this.textureContext = new TextureContext(w, h);
            _this.ui = _this.textureContext.ui;
            return _this;
        }
        Object.defineProperty(BaseMeshUi.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        BaseMeshUi.prototype.destory = function () {
            var layUIManager = this.textureContext.perent;
            if (layUIManager) {
                layUIManager.removeUIContainer(this.textureContext);
            }
        };
        BaseMeshUi.prototype.addEvets = function () {
            var $ui = this.ui;
            $ui.addEventListener(InteractiveEvent.Down, this.butClik, this);
        };
        BaseMeshUi.prototype.butClik = function (evt) {
        };
        BaseMeshUi.prototype.resize = function () {
            this.ui.x = this._x;
            this.ui.y = this._y;
        };
        Object.defineProperty(BaseMeshUi.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseMeshUi.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.resize();
            },
            enumerable: true,
            configurable: true
        });
        return BaseMeshUi;
    }(EventDispatcher));
    prop.BaseMeshUi = BaseMeshUi;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextLabelUI = /** @class */ (function (_super) {
        __extends(TextLabelUI, _super);
        function TextLabelUI(w, h) {
            if (w === void 0) { w = 128; }
            if (h === void 0) { h = 30; }
            var _this = _super.call(this, w, h) || this;
            _this.initView();
            _this.resize();
            return _this;
        }
        TextLabelUI.prototype.initView = function () {
        };
        Object.defineProperty(TextLabelUI.prototype, "label", {
            get: function () {
                return "";
            },
            set: function (value) {
                LabelTextFont.writeSingleLabelCopy(this.ui.uiRender.uiAtlas, this.ui.skinName, value, 24, TextAlign.LEFT, "#eeeeee", "#eeeeee", 5);
            },
            enumerable: true,
            configurable: true
        });
        return TextLabelUI;
    }(BaseMeshUi));
    prop.TextLabelUI = TextLabelUI;
})(prop || (prop = {}));
//# sourceMappingURL=TextLabelUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var LabelTextFont = Pan3d.LabelTextFont;
    var TextAlign = Pan3d.TextAlign;
    var MouseType = Pan3d.MouseType;
    var InputTextUi = /** @class */ (function (_super) {
        __extends(InputTextUi, _super);
        function InputTextUi(w, h) {
            if (w === void 0) { w = 64; }
            if (h === void 0) { h = 64; }
            var _this = _super.call(this, w, h) || this;
            _this.onHtmlInputMouseDownFun = function ($evt) { _this.onHtmlInputMouseDown($evt); };
            return _this;
        }
        InputTextUi.prototype.onHtmlInputMouseDown = function ($e) {
            if ($e.target != this.chatHtmlInput) {
                if (this.chatHtmlInput) {
                    this.chatHtmlInput.hidden = true;
                }
                document.removeEventListener(MouseType.MouseDown, this.onHtmlInputMouseDownFun);
            }
        };
        InputTextUi.prototype.initView = function () {
            this.setInputTxtPos();
            this.addEvets();
        };
        InputTextUi.prototype.destory = function () {
            if (this.chatHtmlInput) {
                document.body.removeChild(this.chatHtmlInput);
                this.chatHtmlInput = null;
            }
            _super.prototype.destory.call(this);
        };
        InputTextUi.prototype.setInputTxtPos = function () {
            var _this = this;
            if (!this.chatHtmlInput) {
                this.chatHtmlInput = document.createElement("input");
                this.chatHtmlInput.style.position = "absolute";
                this.chatHtmlInput.style["z-index"] = 100;
                //this.chatHtmlInput.style.background = "transparent"
                this.chatHtmlInput.style.color = "#000000";
                document.body.appendChild(this.chatHtmlInput);
                this.chatHtmlInput.addEventListener("change", function (cevt) { _this.changeInputTxt(cevt); });
            }
            this.chatHtmlInput.style.left = 0 + "px";
            this.chatHtmlInput.style.top = 0 + "px";
            var tw = 40;
            var th = 20;
            this.chatHtmlInput.style.fontSize = String(12) + "px";
            this.chatHtmlInput.style.width = String(tw) + "px";
            this.chatHtmlInput.style.height = String(th) + "px";
            this.chatHtmlInput.value = "99.99";
            this.chatHtmlInput.hidden = true;
        };
        InputTextUi.prototype.changeInputTxt = function (evt) {
            var $agalStr = this.chatHtmlInput.value;
            var $reflectionEvet = new prop.ReflectionEvet(prop.ReflectionEvet.CHANGE_DATA);
            $reflectionEvet.data = $agalStr;
            this.dispatchEvent($reflectionEvet);
        };
        InputTextUi.prototype.resize = function () {
            _super.prototype.resize.call(this);
            this.chatHtmlInput.style.left = (this.textureContext.left + this.x - 10) + "px";
            this.chatHtmlInput.style.top = (this.textureContext.top + this.y - 5) + "px";
        };
        Object.defineProperty(InputTextUi.prototype, "visible", {
            set: function (value) {
                //this.chatHtmlInput.hidden = !value
                //this.chatHtmlInput.hidden = true
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputTextUi.prototype, "text", {
            set: function (value) {
                LabelTextFont.writeSingleLabel(this.ui.uiRender.uiAtlas, this.ui.skinName, value, 26, TextAlign.LEFT, "#ffffff", "#27262e");
                this.chatHtmlInput.value = value;
            },
            enumerable: true,
            configurable: true
        });
        InputTextUi.prototype.butClik = function (evt) {
            var _this = this;
            if (this.chatHtmlInput.hidden) {
                // console.log("添加事件")
                this.chatHtmlInput.hidden = false;
                setTimeout(function () { _this.chatHtmlInput.focus(); }, 1);
                document.addEventListener(MouseType.MouseDown, this.onHtmlInputMouseDownFun);
            }
        };
        return InputTextUi;
    }(prop.TextLabelUI));
    prop.InputTextUi = InputTextUi;
})(prop || (prop = {}));
//# sourceMappingURL=InputTextUi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var TextureManager = Pan3d.TextureManager;
    var UIManager = Pan3d.UIManager;
    var Rectangle = Pan3d.Rectangle;
    var InputFunTextUi = /** @class */ (function (_super) {
        __extends(InputFunTextUi, _super);
        function InputFunTextUi(w, h) {
            if (w === void 0) { w = 64; }
            if (h === void 0) { h = 64; }
            var _this = _super.call(this, w, h) || this;
            _this.nodeLenHeight = 0;
            _this.width = 100;
            _this.height = 100;
            return _this;
        }
        InputFunTextUi.prototype.initView = function () {
            this.makeHtmlArear();
            this.addEvets();
        };
        InputFunTextUi.prototype.destory = function () {
            document.body.removeChild(this.chatHtmlIArea);
            this.chatHtmlIArea = null;
            _super.prototype.destory.call(this);
        };
        InputFunTextUi.prototype.makeHtmlArear = function () {
            var _this = this;
            if (!this.chatHtmlIArea) {
                this.chatHtmlIArea = document.createElement("textarea");
                this.chatHtmlIArea.style.position = "absolute";
                this.chatHtmlIArea.style["z-index"] = 100;
                // this.chatHtmlIArea.style.background = "transparent"
                this.chatHtmlIArea.style.backgroundColor = "#bbbbbb";
                this.chatHtmlIArea.style.color = "#000000";
                document.body.appendChild(this.chatHtmlIArea);
                this.chatHtmlIArea.addEventListener("change", function (cevt) { _this.changeInputTxt(cevt); });
                this.chatHtmlIArea.style.left = 0 + "px";
                this.chatHtmlIArea.style.top = 0 + "px";
                var tw = 40;
                var th = 20;
                this.chatHtmlIArea.style.fontSize = String(12) + "px";
                this.chatHtmlIArea.style.width = String(tw) + "px";
                this.chatHtmlIArea.style.height = 'auto';
                this.chatHtmlIArea.style.height = 300 + "px";
                this.resize();
            }
        };
        InputFunTextUi.prototype.changeInputTxt = function (evt) {
            var $agalStr = this.chatHtmlIArea.value;
            var id = $agalStr.lastIndexOf("}");
            $agalStr = $agalStr.substr(0, id + 1);
            var frameStr = " precision mediump float;\n" +
                "\n" + $agalStr +
                "\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor = vec4(1.0,1.0,1.0,1.0);\n" +
                "}";
            var $context = Scene_data.context3D.renderContext;
            var fShader = $context.createShader($context.FRAGMENT_SHADER);
            $context.shaderSource(fShader, frameStr);
            $context.compileShader(fShader);
            var info = $context.getShaderInfoLog(fShader);
            if (!info || info == "") {
                var $reflectionEvet = new prop.ReflectionEvet(prop.ReflectionEvet.CHANGE_DATA);
                $reflectionEvet.data = $agalStr;
                this.dispatchEvent($reflectionEvet);
                this.text = $agalStr;
            }
            else {
                this.text = $agalStr + "\n------------有错";
                console.log("--------------");
                console.log(frameStr);
                console.log(info);
                console.log("--------------");
                throw "脚本有错。不做保存.";
            }
        };
        InputFunTextUi.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.chatHtmlIArea) {
                this.chatHtmlIArea.style.left = (this.textureContext.left + this.x - 10) + "px";
                this.chatHtmlIArea.style.top = (this.textureContext.top + this.y + this.nodeLenHeight) + "px";
                this.chatHtmlIArea.style.width = this.width + "px";
                console.log(this.nodeLenHeight);
            }
        };
        Object.defineProperty(InputFunTextUi.prototype, "text", {
            set: function (value) {
                this.agalStr = value;
                this.makeHtmlArear();
                this.chatHtmlIArea.value = this.agalStr;
                this.drawUrlImgToUi(this.ui, "ui/materialmenu/meshfunui.png");
            },
            enumerable: true,
            configurable: true
        });
        InputFunTextUi.prototype.drawUrlImgToUi = function (ui, url) {
            var _this = this;
            LoadManager.getInstance().load(Scene_data.fileuiRoot + url, LoadManager.IMG_TYPE, function ($img) {
                _this.drawImgToUi(ui, $img);
            });
        };
        InputFunTextUi.prototype.drawTittleBg = function ($ctx, $img) {
            var s15 = 1.5;
            var A = new Rectangle(2, 2, 164, 24);
            // $ctx.drawImage($img, A.x, A.y, A.width, A.height, A.x * s15, A.y * s15, A.width * s15, A.height * s15);
            $ctx.drawImage($img, 2, 2, 24, 24, A.x * s15, A.y * s15, 24 * s15, A.height * s15);
            $ctx.drawImage($img, 2 + 24, 2, 164 - (2 * 24), 24, 24, A.y * s15, 200 * s15, A.height * s15);
            $ctx.drawImage($img, 164 - 24, 2, 24, 24, 200 * s15, A.y * s15, 24 * s15, A.height * s15);
            $ctx.font = "24px Georgia";
            $ctx.fillStyle = "#ffffff";
            $ctx.lineWidth = 0;
            $ctx.fillText("函数(" + materialui.NodeTreeFun.getMathFunName(this.agalStr) + ")", 20, 8);
        };
        InputFunTextUi.prototype.PointRectByTypeStr = function (value) {
            var C = new Rectangle(177, 10, 16, 16);
            switch (value) {
                case materialui.MaterialItemType.FLOAT: //float
                    C = new Rectangle(218, 10, 16, 16);
                    break;
                case materialui.MaterialItemType.VEC2: //vec2
                    C = new Rectangle(238, 10, 16, 16);
                    break;
                case materialui.MaterialItemType.VEC3: //vec3
                    C = new Rectangle(177, 10, 16, 16);
                    break;
                case materialui.MaterialItemType.VEC4: //vec4
                    C = new Rectangle(196, 10, 16, 16);
                    break;
                default:
                    break;
            }
            return C;
        };
        InputFunTextUi.prototype.drawImgToUi = function (ui, $img) {
            var $UIAtlas = ui.uiRender.uiAtlas;
            var $textureStr = ui.skinName;
            var rec = $UIAtlas.getRec($textureStr);
            var $ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            //  this.drawTittleBg($ctx, $img);
            var s15 = 1.5;
            var arr = materialui.NodeTreeFun.getDataMathFunArr(this.agalStr);
            var outType = materialui.NodeTreeFun.getMathFunReturnType(this.agalStr);
            var B = new Rectangle(8, 30, 50, 50);
            $ctx.drawImage($img, B.x, B.y, B.width, B.height, 4, 35, (200 + (20)) * s15, arr.length * 30 + 30);
            $ctx.font = "24px Georgia";
            $ctx.fillStyle = "#ffffff";
            $ctx.lineWidth = 0;
            $ctx.font = "22px Georgia";
            var outRect = this.PointRectByTypeStr(outType);
            $ctx.drawImage($img, outRect.x, outRect.y, outRect.width, outRect.height, (200) * s15, 50, 16 * s15, 16 * s15);
            $ctx.fillText("out", (170) * s15, 50);
            for (var i = 0; i < arr.length; i++) {
                var inputRect = this.PointRectByTypeStr(arr[i].type);
                $ctx.drawImage($img, inputRect.x, inputRect.y, inputRect.width, inputRect.height, 15, i * 30 + 50, 16 * s15, 16 * s15);
                $ctx.fillText(arr[i].name, 50, i * 30 + 50);
            }
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, $ctx);
            this.nodeLenHeight = arr.length * 30 + 20;
            this.resize();
        };
        return InputFunTextUi;
    }(prop.BaseMeshUi));
    prop.InputFunTextUi = InputFunTextUi;
})(prop || (prop = {}));
//# sourceMappingURL=InputFunTextUi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var TextureManager = Pan3d.TextureManager;
    var TimeUtil = Pan3d.TimeUtil;
    var UIManager = Pan3d.UIManager;
    var Scene_data = Pan3d.Scene_data;
    var TexturePicUi = /** @class */ (function (_super) {
        __extends(TexturePicUi, _super);
        function TexturePicUi(w, h) {
            if (w === void 0) { w = 64; }
            if (h === void 0) { h = 64; }
            var _this = _super.call(this, w, h) || this;
            _this.$dulbelClikTm = 0;
            _this.haveDoubleCilk = true;
            _this.initView();
            _this.resize();
            return _this;
        }
        TexturePicUi.prototype.initView = function () {
            this.addEvets();
        };
        TexturePicUi.prototype.addEvets = function () {
            _super.prototype.addEvets.call(this);
            var $ui = this.ui;
            $ui.addEventListener(drag.PanDragEvent.DRAG_DROP, this.dragDrop, this);
            $ui.addEventListener(drag.PanDragEvent.DRAG_ENTER, this.dragEnter, this);
        };
        TexturePicUi.prototype.dragDrop = function (evt) {
            if (this.testSuffix(drag.DragManager.dragSource.url)) {
                console.log("可以拖动");
            }
            else {
                console.log("不可以");
            }
        };
        TexturePicUi.prototype.dragEnter = function (evt) {
            if (this.testSuffix(drag.DragManager.dragSource.url)) {
                this.url = drag.DragManager.dragSource.url;
                this.dispatchEvent(new prop.ReflectionEvet(prop.ReflectionEvet.CHANGE_DATA));
            }
        };
        TexturePicUi.prototype.butClik = function (evt) {
            if (TimeUtil.getTimer() < this.$dulbelClikTm) {
                if (this._url && this._url.indexOf(".material") != -1) {
                    var fileUrl = this._url;
                    Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL), fileUrl);
                }
                else {
                    if (this.haveDoubleCilk) {
                        console.log("选文件");
                        this.doubleClick();
                    }
                    else {
                        console.log("关闭了选取事件");
                    }
                }
            }
            this.$dulbelClikTm = TimeUtil.getTimer() + 1000;
        };
        TexturePicUi.prototype.doubleClick = function () {
            var _this = this;
            this._inputHtmlSprite = document.createElement('input');
            this._inputHtmlSprite.setAttribute('id', '_ef');
            this._inputHtmlSprite.setAttribute('type', 'file');
            this._inputHtmlSprite.setAttribute("style", 'visibility:hidden');
            this._inputHtmlSprite.click();
            this._inputHtmlSprite.value;
            this._inputHtmlSprite.addEventListener("change", function (cevt) { _this.changeFile(cevt); });
        };
        TexturePicUi.prototype.testSuffix = function (value) {
            if (!this.suffix) {
                return;
            }
            var tempItem = this.suffix.split("|");
            for (var i = 0; i < tempItem.length; i++) {
                if (value.indexOf(tempItem[i]) != -1) {
                    return true;
                }
            }
            return false;
        };
        TexturePicUi.prototype.changeFile = function (evt) {
            for (var i = 0; i < this._inputHtmlSprite.files.length && i < 1; i++) {
                var simpleFile = this._inputHtmlSprite.files[i];
                //if (!/image\/\w+/.test(simpleFile.type)) {
                //    alert("请确保文件类型为图像类型");
                //}
                console.log(this.testSuffix(simpleFile.name));
                if (this.testSuffix(simpleFile.name)) {
                    var $reflectionEvet = new prop.ReflectionEvet(prop.ReflectionEvet.CHANGE_DATA);
                    $reflectionEvet.data = simpleFile;
                    this.dispatchEvent($reflectionEvet);
                }
                else {
                    alert("请确保文件类型 " + this.suffix);
                }
            }
            this._inputHtmlSprite = null;
        };
        Object.defineProperty(TexturePicUi.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
                if (!this._url) {
                    this._url = "";
                }
                var picUrl = this._url;
                if (this._url.indexOf(".material") != -1) {
                    picUrl = "icon/marterial_64x.png";
                }
                if (this._url.indexOf(".objs") != -1) {
                    picUrl = "icon/objs_64x.png";
                }
                if (this._url.indexOf(".md5anim") != -1) {
                    picUrl = "icon/txt_64x.png";
                }
                if (this._url.indexOf(".txt") != -1) {
                    picUrl = "icon/txt_64x.png";
                }
                if (this._url.indexOf(".zzw") != -1) {
                    picUrl = "icon/zzw_64x.png";
                }
                if (this._url.indexOf(".md5mesh") != -1) {
                    picUrl = "icon/txt_64x.png";
                }
                var $img = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + picUrl);
                var $uiRender = this.textureContext.ui.uiRender;
                if ($img) {
                    var rec = $uiRender.uiAtlas.getRec(this.textureContext.ui.skinName);
                    $uiRender.uiAtlas.ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
                    $uiRender.uiAtlas.ctx.drawImage($img, 0, 0, rec.pixelWitdh, rec.pixelHeight);
                    TextureManager.getInstance().updateTexture($uiRender.uiAtlas.texture, rec.pixelX, rec.pixelY, $uiRender.uiAtlas.ctx);
                }
                else {
                    this.textureContext.ui.uiRender.uiAtlas.upDataPicToTexture(picUrl, this.textureContext.ui.skinName);
                }
            },
            enumerable: true,
            configurable: true
        });
        return TexturePicUi;
    }(prop.BaseMeshUi));
    prop.TexturePicUi = TexturePicUi;
})(prop || (prop = {}));
//# sourceMappingURL=TexturePicUi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var LabelTextFont = Pan3d.LabelTextFont;
    var TextAlign = Pan3d.TextAlign;
    var ComboBoxUi = /** @class */ (function (_super) {
        __extends(ComboBoxUi, _super);
        function ComboBoxUi(w, h) {
            if (w === void 0) { w = 128; }
            if (h === void 0) { h = 30; }
            return _super.call(this, w, h) || this;
        }
        ComboBoxUi.prototype.initView = function () {
            this.ui.addEventListener(InteractiveEvent.Down, this.butClik, this);
        };
        ComboBoxUi.prototype.destory = function () {
            this.ui.removeEventListener(InteractiveEvent.Down, this.butClik, this);
            _super.prototype.destory.call(this);
        };
        Object.defineProperty(ComboBoxUi.prototype, "text", {
            set: function (value) {
                LabelTextFont.writeSingleLabel(this.ui.uiRender.uiAtlas, this.ui.skinName, value, 26, TextAlign.LEFT, "#ffffff", "#27262e");
            },
            enumerable: true,
            configurable: true
        });
        ComboBoxUi.prototype.butClik = function (evt) {
            this.dispatchEvent(evt);
        };
        return ComboBoxUi;
    }(prop.TextLabelUI));
    prop.ComboBoxUi = ComboBoxUi;
})(prop || (prop = {}));
//# sourceMappingURL=ComboBoxUi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Vector3D = Pan3d.Vector3D;
    var UIManager = Pan3d.UIManager;
    var TextureManager = Pan3d.TextureManager;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var ColorPickUI = /** @class */ (function (_super) {
        __extends(ColorPickUI, _super);
        function ColorPickUI(w, h) {
            if (w === void 0) { w = 64; }
            if (h === void 0) { h = 64; }
            return _super.call(this, w, h) || this;
        }
        ColorPickUI.prototype.initView = function () {
            this.addEvets();
        };
        ColorPickUI.prototype.drawOutColor = function () {
            var $vcolor = new Vector3D(this._vec3d.x * 255, this._vec3d.y * 255, this._vec3d.z * 255);
            var $UIAtlas = this.ui.uiRender.uiAtlas;
            var $textureStr = this.ui.skinName;
            var rec = $UIAtlas.getRec($textureStr);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $imgData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            for (var i = 0; i < $imgData.data.length / 4; i++) {
                $imgData.data[i * 4 + 0] = $vcolor.x;
                $imgData.data[i * 4 + 1] = $vcolor.y;
                $imgData.data[i * 4 + 2] = $vcolor.z;
                $imgData.data[i * 4 + 3] = 255;
            }
            ctx.putImageData($imgData, 0, 0);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
            /*
            var $vcolor: Vector3D = new Vector3D(this._vec3d.x * 255, this._vec3d.y * 255, this._vec3d.z * 255);
            this.textLabelUIMeshVo.needDraw = false;
            var $UIAtlas: UIAtlas = this.textLabelUIMeshVo.textLabelUIDisp2D.parent.uiAtlas
            var $textureStr: string = this.textLabelUIMeshVo.textLabelUIDisp2D.ui.skinName
            var rec: UIRectangle = $UIAtlas.getRec($textureStr);
            var ctx: CanvasRenderingContext2D = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $imgData: ImageData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            for (var i: number = 0; i < $imgData.data.length / 4; i++) {
                $imgData.data[i * 4 + 0] = $vcolor.x;
                $imgData.data[i * 4 + 1] = $vcolor.y;
                $imgData.data[i * 4 + 2] = $vcolor.z;
                $imgData.data[i * 4 + 3] = 255;
            }
            ctx.putImageData($imgData, 0, 0)
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);

            */
        };
        Object.defineProperty(ColorPickUI.prototype, "vec3d", {
            get: function () {
                return this._vec3d;
            },
            set: function (value) {
                this._vec3d = value;
                this.drawOutColor();
            },
            enumerable: true,
            configurable: true
        });
        ColorPickUI.prototype.butClik = function (evt) {
            var _this = this;
            var $colorEvet = new colorview.ColorEvent(colorview.ColorEvent.SHOW_COLOR_PANEL);
            $colorEvet.v3dColor = new Vector3D(this._vec3d.x * 255, this._vec3d.y * 255, this._vec3d.z * 255);
            $colorEvet.bfun = function (value) { _this.colorPickPanelFun(value); };
            ModuleEventManager.dispatchEvent($colorEvet);
        };
        ColorPickUI.prototype.colorPickPanelFun = function (value) {
            this._vec3d.x = value.x / 255;
            this._vec3d.y = value.y / 255;
            this._vec3d.z = value.z / 255;
            var $reflectionEvet = new prop.ReflectionEvet(prop.ReflectionEvet.CHANGE_DATA);
            $reflectionEvet.data = this._vec3d;
            this.dispatchEvent($reflectionEvet);
            this.drawOutColor();
        };
        return ColorPickUI;
    }(prop.TextLabelUI));
    prop.ColorPickUI = ColorPickUI;
})(prop || (prop = {}));
//# sourceMappingURL=ColorPickUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var AgalFunUI = /** @class */ (function (_super) {
        __extends(AgalFunUI, _super);
        function AgalFunUI() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AgalFunUI.prototype.initView = function () {
            this.textLabelUI = new prop.TextLabelUI();
            this.textFunNameUI = new prop.TextLabelUI();
            this.height = 20;
        };
        AgalFunUI.prototype.destory = function () {
            this.textLabelUI.destory();
            this.textFunNameUI.destory();
        };
        Object.defineProperty(AgalFunUI.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        AgalFunUI.prototype.onChangeInput = function ($evt) {
            this.target[this.FunKey] = this.target[this.FunKey] + this.KeyStep * Number($evt.data);
            this.refreshViewValue();
        };
        AgalFunUI.prototype.refreshViewValue = function () {
            var $vo = this.target[this.FunKey];
            this.textFunNameUI.label = $vo.nodeTree.funName;
        };
        Object.defineProperty(AgalFunUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.textLabelUI.x = this._x + 0;
                this.textFunNameUI.x = this._x + 75;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AgalFunUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.textLabelUI.y = this._y;
                this.textFunNameUI.y = this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AgalFunUI.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
                this.textLabelUI.label = value;
            },
            enumerable: true,
            configurable: true
        });
        return AgalFunUI;
    }(prop.BaseReflComponent));
    prop.AgalFunUI = AgalFunUI;
})(prop || (prop = {}));
//# sourceMappingURL=MathFunUI.js.map
//# sourceMappingURL=CategoryBG2DUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var MathFunMeshPanel = /** @class */ (function (_super) {
        __extends(MathFunMeshPanel, _super);
        function MathFunMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MathFunMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.TEXT, Label: "名字:", FunKey: "tittleStr", target: this, Category: "函数" },
                { Type: prop.ReflectionData.MaterialFunContentUI, Label: "窗口:", FunKey: "nodeUI", target: this, Category: "程序" },
            ];
            return ary;
        };
        Object.defineProperty(MathFunMeshPanel.prototype, "tittleStr", {
            get: function () {
                return this.mathFunNodeUI.tittleStr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MathFunMeshPanel.prototype, "data", {
            get: function () {
                console.log(this.mathFunNodeUI);
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.mathFunNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        MathFunMeshPanel.prototype.changeFile = function (evt) {
            /*
            if (materialui.NodeTreeFun.isNeedChangePanel($agalStr, (<materialui.NodeTreeFun>this.mathFunNodeUI.nodeTree).funStr)) {
                this.mathFunNodeUI.inPutFunStr($agalStr)
            } else {
                (<materialui.NodeTreeFun>this.mathFunNodeUI.nodeTree).funStr = $agalStr
                this.changeData();
            }
            */
        };
        MathFunMeshPanel.prototype.destory = function () {
            _super.prototype.destory.call(this);
        };
        Object.defineProperty(MathFunMeshPanel.prototype, "nodeUI", {
            get: function () {
                return this.mathFunNodeUI;
            },
            set: function (value) {
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        MathFunMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return MathFunMeshPanel;
    }(prop.MetaDataView));
    prop.MathFunMeshPanel = MathFunMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=MathFunMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var FloatPropMeshPanel = /** @class */ (function (_super) {
        __extends(FloatPropMeshPanel, _super);
        function FloatPropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FloatPropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.NumberInput, Label: "值:", FunKey: "constValue", target: this, Step: 0.01, Category: "属性" },
            ];
            return ary;
        };
        Object.defineProperty(FloatPropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.constFloatNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FloatPropMeshPanel.prototype, "constValue", {
            get: function () {
                return this.constFloatNodeUI.constValue;
            },
            set: function (value) {
                this.constFloatNodeUI.constValue = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        FloatPropMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return FloatPropMeshPanel;
    }(prop.MetaDataView));
    prop.FloatPropMeshPanel = FloatPropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=FloatPropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Vec2PropMeshPanel = /** @class */ (function (_super) {
        __extends(Vec2PropMeshPanel, _super);
        function Vec2PropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Vec2PropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Vec2, Label: "xy:", FunKey: "vec2data", target: this, Step: 0.1, Category: "属性" },
            ];
            return ary;
        };
        Object.defineProperty(Vec2PropMeshPanel.prototype, "vec2data", {
            get: function () {
                return this.constVec2NodeUI.constValue;
            },
            set: function (value) {
                this.constVec2NodeUI.constValue = value;
                this.changeData();
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec2PropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.constVec2NodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Vec2PropMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return Vec2PropMeshPanel;
    }(prop.MetaDataView));
    prop.Vec2PropMeshPanel = Vec2PropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=Vec2PropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Vec3PropMeshPanel = /** @class */ (function (_super) {
        __extends(Vec3PropMeshPanel, _super);
        function Vec3PropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Vec3PropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Vec3Color, Label: "Vec3d:", FunKey: "constValue", target: this, Step: 0.1, Category: "属性" },
            ];
            return ary;
        };
        Object.defineProperty(Vec3PropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.constVec3NodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vec3PropMeshPanel.prototype, "constValue", {
            get: function () {
                return this.constVec3NodeUI.constValue;
            },
            set: function (value) {
                this.constVec3NodeUI.constValue = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Vec3PropMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return Vec3PropMeshPanel;
    }(prop.MetaDataView));
    prop.Vec3PropMeshPanel = Vec3PropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=Vec3PropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var NodeTimePropPanel = /** @class */ (function (_super) {
        __extends(NodeTimePropPanel, _super);
        function NodeTimePropPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NodeTimePropPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.NumberInput, Label: "时间间隔:", FunKey: "timeInterval", target: this, Step: 0.01, Category: "属性" },
                { Type: prop.ReflectionData.NumberInput, Label: "数值比例:", FunKey: "numScale", target: this, Step: 0.01, Category: "属性" },
            ];
            return ary;
        };
        Object.defineProperty(NodeTimePropPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.timeNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeTimePropPanel.prototype, "timeInterval", {
            get: function () {
                return this.timeNodeUI.timeValue.x;
            },
            set: function (value) {
                this.timeNodeUI.timeValue.x = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeTimePropPanel.prototype, "numScale", {
            get: function () {
                return this.timeNodeUI.timeValue.y;
            },
            set: function (value) {
                this.timeNodeUI.timeValue.y = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        NodeTimePropPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return NodeTimePropPanel;
    }(prop.MetaDataView));
    prop.NodeTimePropPanel = NodeTimePropPanel;
})(prop || (prop = {}));
//# sourceMappingURL=NodeTimePropPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var PannerPropPanel = /** @class */ (function (_super) {
        __extends(PannerPropPanel, _super);
        function PannerPropPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PannerPropPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.NumberInput, Label: "coord_x:", FunKey: "coordinateX", target: this, Step: 0.01 },
                { Type: prop.ReflectionData.NumberInput, Label: "coord_y:", FunKey: "coordinateY", target: this, Step: 0.01 },
                { Type: prop.ReflectionData.NumberInput, Label: "speed_x:", FunKey: "speedX", target: this, Step: 0.01 },
                { Type: prop.ReflectionData.NumberInput, Label: "speed_y:", FunKey: "speedY", target: this, Step: 0.01 },
            ];
            return ary;
        };
        Object.defineProperty(PannerPropPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.pannerNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PannerPropPanel.prototype, "coordinateX", {
            get: function () {
                return this.pannerNodeUI.coordinate.x;
            },
            set: function (value) {
                this.pannerNodeUI.coordinate.x = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PannerPropPanel.prototype, "coordinateY", {
            get: function () {
                return this.pannerNodeUI.coordinate.y;
            },
            set: function (value) {
                this.pannerNodeUI.coordinate.y = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PannerPropPanel.prototype, "speedX", {
            get: function () {
                return this.pannerNodeUI.speed.x;
            },
            set: function (value) {
                this.pannerNodeUI.speed.x = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PannerPropPanel.prototype, "speedY", {
            get: function () {
                return this.pannerNodeUI.speed.y;
            },
            set: function (value) {
                this.pannerNodeUI.speed.y = value;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        PannerPropPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return PannerPropPanel;
    }(prop.MetaDataView));
    prop.PannerPropPanel = PannerPropPanel;
})(prop || (prop = {}));
//# sourceMappingURL=PannerPropPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var TexturePropMeshPanel = /** @class */ (function (_super) {
        __extends(TexturePropMeshPanel, _super);
        function TexturePropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TexturePropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Texturue2DUI, Label: "纹理:", FunKey: "picurl", target: this, Suffix: "jpg|png", Category: "属性" },
                { Type: prop.ReflectionData.ComboBox, Label: "Wrap:", FunKey: "wrapValue", target: this, Data: [{ name: "repeat", type: 0 }, { name: "clamp", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "Mipmap:", FunKey: "mipmapValue", target: this, Data: [{ name: "no", type: 0 }, { name: "mipnearest", type: 1 }, { name: "miplinear", type: 2 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "filter:", FunKey: "filterValue", target: this, Data: [{ name: "linear", type: 0 }, { name: "nearest", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "预乘:", FunKey: "permulValue", target: this, Data: [{ name: "false", type: 0 }, { name: "true", type: 1 }] },
            ];
            return ary;
        };
        Object.defineProperty(TexturePropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.textureSampleNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "picurl", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.url;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.url = value;
                this.textureSampleNodeUI.drawPicBmp();
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "constValue", {
            get: function () {
                return 1;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "wrapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.wrap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "mipmapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.mipmap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "filterValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.filter;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TexturePropMeshPanel.prototype, "permulValue", {
            get: function () {
                if (this.textureSampleNodeUI.nodeTree.permul) {
                    return 1;
                }
                else {
                    return 0;
                }
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.permul = Boolean(value);
            },
            enumerable: true,
            configurable: true
        });
        TexturePropMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return TexturePropMeshPanel;
    }(prop.MetaDataView));
    prop.TexturePropMeshPanel = TexturePropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=TexturePropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Texture3DMeshPanel = /** @class */ (function (_super) {
        __extends(Texture3DMeshPanel, _super);
        function Texture3DMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Texture3DMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Texturue2DUI, Label: "纹理:", FunKey: "picurl", target: this, Category: "属性" },
                { Type: prop.ReflectionData.ComboBox, Label: "Wrap:", FunKey: "wrapValue", target: this, Data: [{ name: "repeat", type: 0 }, { name: "clamp", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "Mipmap:", FunKey: "mipmapValue", target: this, Data: [{ name: "no", type: 0 }, { name: "mipnearest", type: 1 }, { name: "miplinear", type: 2 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "filter:", FunKey: "filterValue", target: this, Data: [{ name: "linear", type: 0 }, { name: "nearest", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "预乘:", FunKey: "permulValue", target: this, Data: [{ name: "false", type: 0 }, { name: "true", type: 1 }] },
            ];
            return ary;
        };
        Object.defineProperty(Texture3DMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.textureSampleNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "picurl", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.url;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.url = value;
                this.textureSampleNodeUI.drawPicBmp();
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "constValue", {
            get: function () {
                return 1;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "wrapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.wrap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "mipmapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.mipmap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "filterValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.filter;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DMeshPanel.prototype, "permulValue", {
            get: function () {
                if (this.textureSampleNodeUI.nodeTree.permul) {
                    return 1;
                }
                else {
                    return 0;
                }
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.permul = Boolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Texture3DMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return Texture3DMeshPanel;
    }(prop.MetaDataView));
    prop.Texture3DMeshPanel = Texture3DMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=Texture3DMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var TextureCubeMeshPanel = /** @class */ (function (_super) {
        __extends(TextureCubeMeshPanel, _super);
        function TextureCubeMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextureCubeMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Texturue2DUI, Label: "纹理:", FunKey: "picurl", target: this, Category: "属性" },
                { Type: prop.ReflectionData.ComboBox, Label: "Wrap:", FunKey: "wrapValue", target: this, Data: [{ name: "repeat", type: 0 }, { name: "clamp", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "Mipmap:", FunKey: "mipmapValue", target: this, Data: [{ name: "no", type: 0 }, { name: "mipnearest", type: 1 }, { name: "miplinear", type: 2 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "filter:", FunKey: "filterValue", target: this, Data: [{ name: "linear", type: 0 }, { name: "nearest", type: 1 }] },
                { Type: prop.ReflectionData.ComboBox, Label: "预乘:", FunKey: "permulValue", target: this, Data: [{ name: "false", type: 0 }, { name: "true", type: 1 }] },
            ];
            return ary;
        };
        Object.defineProperty(TextureCubeMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.textureSampleNodeUI = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "picurl", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.url;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.url = value;
                this.textureSampleNodeUI.drawPicBmp();
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "constValue", {
            get: function () {
                return 1;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "wrapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.wrap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "mipmapValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.mipmap;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "filterValue", {
            get: function () {
                return this.textureSampleNodeUI.nodeTree.filter;
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeMeshPanel.prototype, "permulValue", {
            get: function () {
                if (this.textureSampleNodeUI.nodeTree.permul) {
                    return 1;
                }
                else {
                    return 0;
                }
            },
            set: function (value) {
                this.textureSampleNodeUI.nodeTree.permul = Boolean(value);
            },
            enumerable: true,
            configurable: true
        });
        TextureCubeMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return TextureCubeMeshPanel;
    }(prop.MetaDataView));
    prop.TextureCubeMeshPanel = TextureCubeMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=TextureCubeMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var TextureFunPanel = /** @class */ (function (_super) {
        __extends(TextureFunPanel, _super);
        function TextureFunPanel() {
            var _this = _super.call(this) || this;
            _this.layaPanel = new win.Panel();
            win.LayerManager.getInstance().addPanel(_this.layaPanel, 501);
            _this.setRect(new Pan3d.Rectangle(100, 100, 500, 400));
            return _this;
        }
        TextureFunPanel.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.e_pop_panel = this.addChild(this._closeRender.getComponent("e_pop_panel"));
            this.c_tittle_bg.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.resize();
        };
        TextureFunPanel.prototype.tittleMouseDown = function (evt) {
            this.mouseMoveTaget = evt.target;
            this.lastMousePos = new Vector2D(evt.x, evt.y);
            switch (this.mouseMoveTaget) {
                case this.c_tittle_bg:
                    this.lastPagePos = new Vector2D(this.left, this.top);
                    break;
                default:
                    console.log("nonono");
                    break;
            }
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.mouseOnTittleMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.tittleMouseUp, this);
        };
        TextureFunPanel.prototype.mouseOnTittleMove = function (evt) {
            switch (this.mouseMoveTaget) {
                case this.c_tittle_bg:
                    this.left = this.lastPagePos.x + (evt.x - this.lastMousePos.x);
                    this.top = this.lastPagePos.y + (evt.y - this.lastMousePos.y);
                    this.pageRect.x = this.left;
                    this.pageRect.y = this.top;
                    break;
                default:
                    break;
            }
            this.resize();
        };
        TextureFunPanel.prototype.setInputTxtPos = function () {
            var _this = this;
            if (!this.chatHtmlInput) {
                this.chatHtmlInput = document.createElement("textarea");
                this.chatHtmlInput.style.position = "absolute";
                this.chatHtmlInput.style["z-index"] = 100;
                this.chatHtmlInput.style.background = "transparent";
                this.chatHtmlInput.style.color = "#ffffff";
                document.body.appendChild(this.chatHtmlInput);
                this.chatHtmlInput.addEventListener("change", function (cevt) { _this.changeFile(cevt); });
                //this.chatHtmlInput.style.resize = (cevt: any) => { this.changeInputResize(cevt) };
                this.chatHtmlInput.style.resize = "none";
            }
            this.chatHtmlInput.style.left = 0 + "px";
            this.chatHtmlInput.style.top = 0 + "px";
            var tw = 350;
            var th = 40;
            this.chatHtmlInput.style.fontSize = String(12) + "px";
            this.chatHtmlInput.style.width = String(tw) + "px";
            this.chatHtmlInput.style.height = String(th) + "px";
            this.chatHtmlInput.value = this.mathFunNodeUI.nodeTree.funStr;
            this.resize();
        };
        TextureFunPanel.prototype.butClik = function (evt) {
            if (evt.target == this.b_win_close) {
                this.hidePanel();
            }
        };
        TextureFunPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.e_pop_panel && this.chatHtmlInput) {
                this.chatHtmlInput.style.left = this.left + 5 + "px";
                this.chatHtmlInput.style.top = this.top + 25 + "px";
                this.chatHtmlInput.style.width = this.pageRect.width - 8 + "px";
                this.chatHtmlInput.style.height = this.pageRect.height - 30 + "px";
                this.e_pop_panel.x = 0;
                this.e_pop_panel.y = 0;
                this.e_pop_panel.width = this.pageRect.width;
                this.e_pop_panel.height = this.pageRect.height;
                this._closeRender.applyObjData();
            }
        };
        TextureFunPanel.prototype.changeInputResize = function (evt) {
            console.log(evt);
        };
        TextureFunPanel.prototype.changeFile = function (evt) {
            var $agalStr = this.chatHtmlInput.value;
            if (materialui.NodeTreeFun.isNeedChangePanel($agalStr, this.mathFunNodeUI.nodeTree.funStr)) {
                this.mathFunNodeUI.inPutFunStr($agalStr);
            }
            else {
                this.mathFunNodeUI.nodeTree.funStr = $agalStr;
                this.changeData();
            }
        };
        TextureFunPanel.prototype.changeData = function () {
            Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        TextureFunPanel.getInstance = function () {
            if (!this._instance) {
                this._instance = new TextureFunPanel();
            }
            return this._instance;
        };
        TextureFunPanel.prototype.showPanel = function (value) {
            this.mathFunNodeUI = value;
            this.layaPanel.addUIContainer(this);
            this.setInputTxtPos();
        };
        TextureFunPanel.prototype.hidePanel = function () {
            var _this = this;
            if (this.chatHtmlInput) {
                this.chatHtmlInput.removeEventListener("change", function (cevt) { _this.changeFile(cevt); });
                document.body.removeChild(this.chatHtmlInput);
                this.chatHtmlInput = null;
            }
            this.layaPanel.removeUIContainer(this);
        };
        return TextureFunPanel;
    }(win.BaseWindow));
    prop.TextureFunPanel = TextureFunPanel;
})(prop || (prop = {}));
//# sourceMappingURL=TextureFunPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var Vector3D = Pan3d.Vector3D;
    var SciencePropMeshPanel = /** @class */ (function (_super) {
        __extends(SciencePropMeshPanel, _super);
        function SciencePropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SciencePropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.Vec3Color, Label: "环境颜色:", FunKey: "sunDirect", target: this, Step: 0.1 },
                { Type: prop.ReflectionData.Vec3Color, Label: "sun颜色:", FunKey: "sunColor", target: this, Step: 0.1 },
                { Type: prop.ReflectionData.Vec3Color, Label: "基本颜色:", FunKey: "ambientColor", target: this, Step: 0.1 },
            ];
            return ary;
        };
        Object.defineProperty(SciencePropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SciencePropMeshPanel.prototype, "sunDirect", {
            get: function () {
                return new Vector3D(Scene_data.light.sunDirect[0], Scene_data.light.sunDirect[1], Scene_data.light.sunDirect[2]);
            },
            set: function (value) {
                Scene_data.light.sunDirect[0] = value.x;
                Scene_data.light.sunDirect[1] = value.y;
                Scene_data.light.sunDirect[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SciencePropMeshPanel.prototype, "sunColor", {
            get: function () {
                return new Vector3D(Scene_data.light.sunColor[0], Scene_data.light.sunColor[1], Scene_data.light.sunColor[2]);
            },
            set: function (value) {
                Scene_data.light.sunColor[0] = value.x;
                Scene_data.light.sunColor[1] = value.y;
                Scene_data.light.sunColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SciencePropMeshPanel.prototype, "ambientColor", {
            get: function () {
                return new Vector3D(Scene_data.light.ambientColor[0], Scene_data.light.ambientColor[1], Scene_data.light.ambientColor[2]);
            },
            set: function (value) {
                Scene_data.light.ambientColor[0] = value.x;
                Scene_data.light.ambientColor[1] = value.y;
                Scene_data.light.ambientColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        return SciencePropMeshPanel;
    }(prop.MetaDataView));
    prop.SciencePropMeshPanel = SciencePropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=SciencePropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var Scene_data = Pan3d.Scene_data;
    var Vector3D = Pan3d.Vector3D;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var OpPropMeshPanel = /** @class */ (function (_super) {
        __extends(OpPropMeshPanel, _super);
        function OpPropMeshPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OpPropMeshPanel.prototype.getView = function () {
            var ary = [
                { Type: prop.ReflectionData.ComboBox, Label: "直接光照:", FunKey: "directLight", target: this, Data: [{ name: "false", type: 0 }, { name: "true", type: 1 }] },
                { Type: prop.ReflectionData.Vec3Color, Label: "环境颜色:", FunKey: "sunDirect", target: this, Step: 0.1 },
                { Type: prop.ReflectionData.Vec3Color, Label: "sun颜色:", FunKey: "sunColor", target: this, Step: 0.1 },
                { Type: prop.ReflectionData.Vec3Color, Label: "基本颜色:", FunKey: "ambientColor", target: this, Step: 0.1 },
            ];
            return ary;
        };
        Object.defineProperty(OpPropMeshPanel.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.resultNodeUI = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OpPropMeshPanel.prototype, "directLight", {
            get: function () {
                console.log("this.resultNodeUI.directLight", this.resultNodeUI.directLight);
                return this.resultNodeUI.directLight ? 1 : 0;
            },
            set: function (value) {
                this.resultNodeUI.directLight = value == 1 ? true : false;
                this.changeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OpPropMeshPanel.prototype, "sunDirect", {
            get: function () {
                return new Vector3D(Scene_data.light.sunDirect[0], Scene_data.light.sunDirect[1], Scene_data.light.sunDirect[2]);
            },
            set: function (value) {
                Scene_data.light.sunDirect[0] = value.x;
                Scene_data.light.sunDirect[1] = value.y;
                Scene_data.light.sunDirect[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OpPropMeshPanel.prototype, "sunColor", {
            get: function () {
                return new Vector3D(Scene_data.light.sunColor[0], Scene_data.light.sunColor[1], Scene_data.light.sunColor[2]);
            },
            set: function (value) {
                Scene_data.light.sunColor[0] = value.x;
                Scene_data.light.sunColor[1] = value.y;
                Scene_data.light.sunColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OpPropMeshPanel.prototype, "ambientColor", {
            get: function () {
                return new Vector3D(Scene_data.light.ambientColor[0], Scene_data.light.ambientColor[1], Scene_data.light.ambientColor[2]);
            },
            set: function (value) {
                Scene_data.light.ambientColor[0] = value.x;
                Scene_data.light.ambientColor[1] = value.y;
                Scene_data.light.ambientColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        OpPropMeshPanel.prototype.changeData = function () {
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
        };
        return OpPropMeshPanel;
    }(prop.MetaDataView));
    prop.OpPropMeshPanel = OpPropMeshPanel;
})(prop || (prop = {}));
//# sourceMappingURL=OpPropMeshPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var prop;
(function (prop) {
    var UiMeshSprite = /** @class */ (function (_super) {
        __extends(UiMeshSprite, _super);
        function UiMeshSprite() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.metaViewItem = [];
            return _this;
        }
        UiMeshSprite.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.perent) {
                this.rect = this.perent.rect;
            }
            for (var i = 0; i < this._containerList.length; i++) {
                this._containerList[i].left = this.rect.x + 2;
                this._containerList[i].top = this.rect.y + 12;
            }
            for (var i = 0; i < this.metaViewItem.length; i++) {
                this.metaViewItem[i].top = this.rect.y + this.metaViewItem[i].y;
                this.metaViewItem[i].width = this.rect.width - 5;
                this.metaViewItem[i].resize();
            }
        };
        UiMeshSprite.prototype.onAdd = function () {
            for (var i = 0; i < this.metaViewItem.length; i++) {
                this.metaViewItem[i].onAdd();
            }
        };
        UiMeshSprite.prototype.onRemove = function () {
            for (var i = 0; i < this.metaViewItem.length; i++) {
                this.metaViewItem[i].onRemove();
            }
        };
        UiMeshSprite.prototype.addBaseMeshUi = function (value) {
            this.addUIContainer(value.textureContext);
            this.resize();
        };
        UiMeshSprite.prototype.addMeshView = function (value) {
            this.metaViewItem.push(value);
        };
        return UiMeshSprite;
    }(win.Sprite));
    prop.UiMeshSprite = UiMeshSprite;
})(prop || (prop = {}));
//# sourceMappingURL=UiMeshSprite.js.map
var prop;
(function (prop) {
    var PropModel = /** @class */ (function () {
        function PropModel() {
            this.propPanle = new prop.UiMeshSprite();
            this.propPanle.x = 500;
            this.propPanle.y = 100;
            AppData.rightPanel.addChild(this.propPanle);
        }
        PropModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new PropModel();
            }
            return this._instance;
        };
        PropModel.prototype.resize = function () {
            if (this.metaDataView) {
                this.metaDataView.width = Pan3d.Scene_data.stageWidth - this.propPanle.x;
            }
        };
        PropModel.prototype.hidePanel = function () {
            if (this.metaDataView) {
                this.metaDataView.destory();
                this.metaDataView = null;
            }
            this.lastNodel = null;
        };
        PropModel.prototype.showTextureUiPanel = function ($ui) {
            if (this.lastNodel != $ui) {
                var propPanle = prop.PropModel.getInstance().propPanle;
                var tempView;
                if ($ui instanceof materialui.ConstVec3NodeUI) {
                    tempView = new prop.Vec3PropMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.ConstVec2NodeUI) {
                    tempView = new prop.Vec2PropMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.ConstFloatNodeUI) {
                    tempView = new prop.FloatPropMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.TimeNodeUI) {
                    tempView = new prop.NodeTimePropPanel(propPanle);
                }
                else if ($ui instanceof materialui.PannerNodeUI) {
                    tempView = new prop.PannerPropPanel(propPanle);
                }
                else if ($ui instanceof materialui.TextureSampleNodeUI) {
                    tempView = new prop.TexturePropMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.Texture3DNodeUI) {
                    tempView = new prop.Texture3DMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.TextureCubeNodeUI) {
                    tempView = new prop.TextureCubeMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.ResultNodeUI) {
                    tempView = new prop.OpPropMeshPanel(propPanle);
                }
                else if ($ui instanceof materialui.MathFunNodeUI) {
                    tempView = new prop.MathFunMeshPanel(propPanle);
                }
                else {
                    tempView = new prop.SciencePropMeshPanel(propPanle);
                }
                this.lastNodel = $ui;
                tempView.data = $ui;
                tempView.type = "材质";
                this.showOtherMeshView(tempView);
            }
        };
        PropModel.prototype.clearOladMeshView = function () {
            if (this.metaDataView) {
                this.metaDataView.destory();
                this.metaDataView = null;
                this.lastNodel = null;
            }
        };
        PropModel.prototype.showOtherMeshView = function (value) {
            if (this.metaDataView != value) {
                this.clearOladMeshView();
            }
            this.metaDataView = value;
            this.metaDataView.top = 25;
            this.metaDataView.refreshViewValue();
            this.resize();
            var rightPanel = AppData.rightPanel;
            rightPanel.mainRightBaseWin.pushViewToTab(this.metaDataView);
        };
        return PropModel;
    }());
    prop.PropModel = PropModel;
})(prop || (prop = {}));
//# sourceMappingURL=PropModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var filelist;
(function (filelist) {
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var FileMeshView = /** @class */ (function (_super) {
        __extends(FileMeshView, _super);
        function FileMeshView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FileMeshView.prototype.getView = function () {
            var ary = [
                { Type: ReflectionData.TEXT, Label: "名字:", FunKey: "fileUrl", target: this, Category: "模型", ClikEventKey: "clikFilePrefab" },
                { Type: ReflectionData.MeshScene2DUI, Label: "窗口:", FunKey: "fileUrl", target: this, Category: "模型" },
            ];
            return ary;
        };
        FileMeshView.prototype.eventKey = function (value) {
            switch (value) {
                case "clikFilePrefab":
                    var pathurl = Pan3d.Scene_data.fileRoot + this.fileUrl;
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
                    break;
                default:
                    console.log("没有对象", value);
                    break;
            }
        };
        Object.defineProperty(FileMeshView.prototype, "fileUrl", {
            get: function () {
                return this.data;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        return FileMeshView;
    }(MetaDataView));
    filelist.FileMeshView = FileMeshView;
})(filelist || (filelist = {}));
//# sourceMappingURL=FileMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var filelist;
(function (filelist) {
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var PrefabMeshView = /** @class */ (function (_super) {
        __extends(PrefabMeshView, _super);
        function PrefabMeshView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PrefabMeshView.prototype.getView = function () {
            var _this = this;
            var ary = [
                { Type: ReflectionData.TEXT, Label: "名字:", FunKey: "prebaburl", target: this, Category: "模型", ClikEventKey: "clikFilePrefab" },
                { Type: ReflectionData.MeshScene2DUI, Label: "窗口:", FunKey: "prebaburl", target: this, Category: "模型" },
                { Type: ReflectionData.Texturue2DUI, Label: "Objs:", FunKey: "objsurl", target: this, Suffix: "objs", Category: "网格" },
                { Type: ReflectionData.MaterialPicUi, Label: "纹理:", FunKey: "texture", changFun: function (value) { _this.textureChangeInfo(value); }, target: this, Suffix: "material", Category: "材质" },
            ];
            return ary;
        };
        PrefabMeshView.prototype.eventKey = function (value) {
            switch (value) {
                case "clikFilePrefab":
                    var pathurl = Pan3d.Scene_data.fileRoot + this.prefabStaticMesh.url;
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
                    break;
                default:
                    console.log("没有对象", value);
                    break;
            }
        };
        PrefabMeshView.prototype.textureChangeInfo = function (value) {
            this.prefabStaticMesh.paramInfo = value;
            this.saveToSever();
            this.chuangeData();
        };
        PrefabMeshView.prototype.chuangeData = function () {
            this.prefabStaticMesh.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE));
        };
        PrefabMeshView.prototype.getParamItem = function (value) {
            for (var i = 0; this.prefabStaticMesh.paramInfo && i < this.prefabStaticMesh.paramInfo.length; i++) {
                if (this.prefabStaticMesh.paramInfo[i].paramName == value) {
                    return this.prefabStaticMesh.paramInfo[i].data;
                }
            }
            return null;
        };
        Object.defineProperty(PrefabMeshView.prototype, "prebaburl", {
            get: function () {
                // return AppData.getFileName(this.prefabStaticMesh.url)
                return this.prefabStaticMesh.url;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrefabMeshView.prototype, "texture", {
            get: function () {
                return this.prefabStaticMesh.material;
            },
            set: function (value) {
                this.prefabStaticMesh.material = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrefabMeshView.prototype, "objsurl", {
            get: function () {
                return this.prefabStaticMesh.objsurl;
            },
            set: function (value) {
                this.prefabStaticMesh.objsurl = value;
                this.saveToSever();
                this.chuangeData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrefabMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.prefabStaticMesh = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        PrefabMeshView.prototype.saveToSever = function () {
            var _this = this;
            this.lastTm = Pan3d.TimeUtil.getTimer();
            // this.isSaveNow = true
            if (!this.isSaveNow) {
                this.isSaveNow = true;
                this.saveTm = this.lastTm;
                var $byte = new Pan3d.Pan3dByteArray();
                var $fileUrl = Pan3d.Scene_data.fileRoot + this.prefabStaticMesh.url;
                console.log(this.prefabStaticMesh.material);
                this.prefabStaticMesh.textureurl = this.prefabStaticMesh.material.url;
                var $temp = this.prefabStaticMesh.getObject();
                $temp.version = pack.FileOssModel.version;
                $byte.writeUTF(JSON.stringify($temp));
                var $file = new File([$byte.buffer], "cc.prefab");
                var pathurl = $fileUrl.replace(Pan3d.Scene_data.ossRoot, "");
                pack.FileOssModel.upOssFile($file, pathurl, function () {
                    if (_this.lastTm != _this.saveTm) {
                        console.log("不是最后一次，所以需要再存一次");
                        Pan3d.TimeUtil.addTimeOut(1000, function () {
                            _this.isSaveNow = false;
                            _this.saveToSever();
                        });
                    }
                    else {
                        _this.isSaveNow = false;
                        console.log("更新Prafab完成", pathurl + $file.name);
                    }
                });
            }
            else {
                console.log("正在处理保存");
            }
        };
        return PrefabMeshView;
    }(MetaDataView));
    filelist.PrefabMeshView = PrefabMeshView;
})(filelist || (filelist = {}));
//# sourceMappingURL=PrefabMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var filelist;
(function (filelist) {
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var RoleMeshView = /** @class */ (function (_super) {
        __extends(RoleMeshView, _super);
        function RoleMeshView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RoleMeshView.prototype.getView = function () {
            var _this = this;
            var ary = [
                { Type: ReflectionData.TEXT, Label: "名字:", FunKey: "roleurl", target: this, Category: "角色", ClikEventKey: "clikFileRole" },
                { Type: ReflectionData.MeshScene2DUI, Label: "窗口:", FunKey: "roleurl", target: this, Category: "角色" },
                { Type: ReflectionData.RoleAnim2DUI, Label: "动作:", FunKey: "animDic", changFun: function () { _this.animChange(); }, target: this, Suffix: "md5mesh", Category: "action" },
                { Type: ReflectionData.RoleMesh2DUI, Label: "mesh:", FunKey: "skinMesh", changFun: function (value) { _this.textureChangeInfo(value); }, target: this, Suffix: "md5mesh", Category: "mesh" },
            ];
            return ary;
        };
        RoleMeshView.prototype.eventKey = function (value) {
            switch (value) {
                case "clikFileRole":
                    var pathurl = Pan3d.Scene_data.fileRoot + this._roleStaticMesh.url;
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
                    break;
                default:
                    console.log("没有对象", value);
                    break;
            }
        };
        RoleMeshView.prototype.animChange = function () {
            this.saveToSever();
            this.chuangeData();
        };
        Object.defineProperty(RoleMeshView.prototype, "animDic", {
            get: function () {
                return this._roleStaticMesh.animDic;
            },
            set: function (value) {
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoleMeshView.prototype, "skinMesh", {
            get: function () {
                return this._roleStaticMesh.skinMesh;
            },
            set: function (value) {
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        RoleMeshView.prototype.textureChangeInfo = function (value) {
            //this._roleStaticMesh.paramInfo = value;
            this.saveToSever();
            this.chuangeData();
        };
        RoleMeshView.prototype.chuangeData = function () {
            this._roleStaticMesh.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE));
        };
        Object.defineProperty(RoleMeshView.prototype, "roleurl", {
            get: function () {
                if (this._roleStaticMesh) {
                    return this._roleStaticMesh.url;
                }
                else {
                    return null;
                }
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoleMeshView.prototype, "texture", {
            get: function () {
                return this._roleStaticMesh.material;
            },
            set: function (value) {
                this._roleStaticMesh.material = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoleMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this._roleStaticMesh = this._data;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        RoleMeshView.prototype.getChangeRoleStr = function () {
            if (this._roleStaticMesh.skinMesh) {
                var temp = this._roleStaticMesh.getObject();
                temp.version = pack.FileOssModel.version;
                var $str = JSON.stringify(temp);
                return $str;
            }
            else {
                return null;
            }
        };
        RoleMeshView.prototype.saveToSever = function () {
            var _this = this;
            this.lastTm = Pan3d.TimeUtil.getTimer();
            // this.isSaveNow = true
            if (!this.isSaveNow) {
                this.isSaveNow = true;
                this.saveTm = this.lastTm;
                var $roleStr = this.getChangeRoleStr();
                var $file = new File([$roleStr], "ossfile.txt");
                var pathUrl = Pan3d.Scene_data.fileRoot + this._roleStaticMesh.url;
                var pathurl = pathUrl.replace(Pan3d.Scene_data.ossRoot, "");
                console.log("提交上传ing...", pathurl);
                pack.FileOssModel.upOssFile($file, pathurl, function () {
                    if (_this.lastTm != _this.saveTm) {
                        console.log("不是最后一次，所以需要再存一次");
                        Pan3d.TimeUtil.addTimeOut(1000, function () {
                            _this.isSaveNow = false;
                            _this.saveToSever();
                        });
                    }
                    else {
                        _this.isSaveNow = false;
                        console.log("更新角色完成", pathurl + $file.name);
                    }
                });
            }
            else {
                console.log("正在处理保存");
            }
        };
        return RoleMeshView;
    }(MetaDataView));
    filelist.RoleMeshView = RoleMeshView;
})(filelist || (filelist = {}));
//# sourceMappingURL=RoleMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var filelist;
(function (filelist) {
    var Scene_data = Pan3d.Scene_data;
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var SkillMeshView = /** @class */ (function (_super) {
        __extends(SkillMeshView, _super);
        function SkillMeshView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SkillMeshView.prototype.getView = function () {
            var ary = [
                { Type: ReflectionData.TEXT, Label: "名字:", FunKey: "filename", target: this, Category: "角色", ClikEventKey: "clikFileSkill" },
                { Type: ReflectionData.MeshScene2DUI, Label: "窗口:", FunKey: "skillmeshUrl", target: this, Category: "角色" },
                { Type: ReflectionData.Texturue2DUI, Label: "角色:", FunKey: "roleurl", Suffix: "zzw", target: this, Category: "属性" },
                { Type: ReflectionData.Texturue2DUI, Label: "技能:", FunKey: "skillurl", Suffix: "txt", target: this, Category: "属性" },
                { Type: ReflectionData.ComboBox, Label: "播放名字:", FunKey: "actionname", target: this, Data: [], Category: "属性" },
                { Type: ReflectionData.NumberInput, Label: "播放间隔:", FunKey: "intervalTm", target: this, Category: "属性" },
            ];
            return ary;
        };
        Object.defineProperty(SkillMeshView.prototype, "skillmeshUrl", {
            get: function () {
                return this._skillStaticMesh.url;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        SkillMeshView.prototype.eventKey = function (value) {
            switch (value) {
                case "clikFileSkill":
                    var pathurl = Pan3d.Scene_data.fileRoot + this.skillmeshUrl;
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
                    break;
                default:
                    console.log("没有对象", value);
                    break;
            }
        };
        Object.defineProperty(SkillMeshView.prototype, "intervalTm", {
            get: function () {
                return this._skillStaticMesh.interval;
            },
            set: function (value) {
                this._skillStaticMesh.interval = value;
                this.saveToSever();
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillMeshView.prototype, "actionname", {
            get: function () {
                return this._skillStaticMesh.actionnum;
            },
            set: function (value) {
                this._skillStaticMesh.actionnum = value;
                this.saveToSever();
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillMeshView.prototype, "filename", {
            get: function () {
                return this._skillStaticMesh.url;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillMeshView.prototype, "roleurl", {
            get: function () {
                return this._skillStaticMesh.roleUrl;
            },
            set: function (value) {
                this._skillStaticMesh.roleUrl = value;
                this.saveToSever();
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillMeshView.prototype, "skillurl", {
            get: function () {
                return this._skillStaticMesh.skillUrl;
            },
            set: function (value) {
                this._skillStaticMesh.skillUrl = value;
                this.saveToSever();
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this._skillStaticMesh = value;
                this.refreshViewValue();
                this.mashSkillActionInfo();
            },
            enumerable: true,
            configurable: true
        });
        SkillMeshView.prototype.mashSkillActionInfo = function () {
            var _this = this;
            Pan3d.ResManager.getInstance().loadSkillRes(Scene_data.fileRoot + this._skillStaticMesh.skillUrl, function ($skillRes) {
                for (var i = 0; i < _this.ui.length; i++) {
                    var tempUi = _this.ui[i];
                    if (tempUi instanceof prop.ComBoBoxCtrl2D) {
                        var dataItem = [];
                        for (var acKey in $skillRes.data) {
                            dataItem.push({ name: acKey, type: dataItem.length });
                        }
                        dataItem.push({ name: "循环播放", type: dataItem.length });
                        tempUi.data = dataItem;
                        tempUi.refreshViewValue();
                    }
                }
            });
        };
        SkillMeshView.prototype.categoryClikUp = function (value) {
            _super.prototype.categoryClikUp.call(this, value);
            this.mashSkillActionInfo();
        };
        SkillMeshView.prototype.saveToSever = function () {
            var _this = this;
            this.lastTm = Pan3d.TimeUtil.getTimer();
            // this.isSaveNow = true
            if (!this.isSaveNow) {
                this.isSaveNow = true;
                this.saveTm = this.lastTm;
                var $temp = this._skillStaticMesh.getObject();
                $temp.version = pack.FileOssModel.version;
                var $roleStr = JSON.stringify($temp);
                var $file = new File([$roleStr], "ossfile.txt");
                var pathUrl = Pan3d.Scene_data.fileRoot + this._skillStaticMesh.url;
                var pathurl = pathUrl.replace(Pan3d.Scene_data.ossRoot, "");
                console.log("提交上传ing...", pathurl);
                pack.FileOssModel.upOssFile($file, pathurl, function () {
                    if (_this.lastTm != _this.saveTm) {
                        console.log("不是最后一次，所以需要再存一次");
                        Pan3d.TimeUtil.addTimeOut(1000, function () {
                            _this.isSaveNow = false;
                            _this.saveToSever();
                        });
                    }
                    else {
                        _this.isSaveNow = false;
                        console.log("更新角色完成", pathurl + $file.name);
                    }
                });
            }
            else {
                console.log("正在处理保存");
            }
        };
        return SkillMeshView;
    }(MetaDataView));
    filelist.SkillMeshView = SkillMeshView;
})(filelist || (filelist = {}));
//# sourceMappingURL=SkillMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var basefolderwin;
(function (basefolderwin) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Vector2D = Pan3d.Vector2D;
    var Scene_data = Pan3d.Scene_data;
    var BaseFolderWindow = /** @class */ (function (_super) {
        __extends(BaseFolderWindow, _super);
        function BaseFolderWindow() {
            var _this = _super.call(this) || this;
            _this.percentNum = 0.2;
            return _this;
        }
        BaseFolderWindow.prototype.setRect = function (value) {
            this.pageRect = value;
            this.setLinePos();
            this.resize();
            this.refrishWinSize();
        };
        BaseFolderWindow.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.uiLoadComplete && this.pathUrlBg) {
                this.pathUrlBg.x = this.pageRect.width * this.percentNum + 3;
                this.pathUrlBg.y = 11;
                this.pathUrlBg.height = 28;
                this.pathUrlBg.width = this.pageRect.width - this.pathUrlBg.x;
                this._baseMidRender.applyObjData();
            }
        };
        BaseFolderWindow.prototype.getPageRect = function () {
            return this.pageRect;
        };
        BaseFolderWindow.prototype.setLinePos = function () {
            if (this.moveLine) {
                this.moveLine.x = this.pageRect.width * this.percentNum;
                this.moveLine.y = 13;
                this.moveLine.width = 5;
                this.moveLine.height = this.pageRect.height;
                // console.log("设置位置")
            }
        };
        BaseFolderWindow.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.setUiListVisibleByItem([this.c_tittle_bg, this.c_win_bg], false);
            this.setUiListVisibleByItem([this.e_panel_1], true);
            this.pathUrlBg = this.addChild(this._baseMidRender.getComponent("e_file_list_path_bg"));
            this.moveLine = this.addChild(this._baseMidRender.getComponent("e_line_vertical"));
            this.moveLine.addEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.setLinePos();
            this.resize();
        };
        BaseFolderWindow.prototype.tittleMouseDown = function (evt) {
            this.mouseMoveTaget = evt.target;
            this.lastMousePos = new Vector2D(evt.x, evt.y);
            switch (this.mouseMoveTaget) {
                case this.moveLine:
                    this.lastPagePos = new Vector2D(this.moveLine.x, this.moveLine.y);
                    break;
                default:
                    console.log("nonono");
                    break;
            }
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.mouseOnTittleMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.tittleMouseUp, this);
        };
        BaseFolderWindow.prototype.refrishWinSize = function () {
            Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.RESET_FOLDE_WIN_SIZE));
        };
        BaseFolderWindow.prototype.mouseOnTittleMove = function (evt) {
            switch (this.mouseMoveTaget) {
                case this.moveLine:
                    this.moveLine.x = this.lastPagePos.x + (evt.x - this.lastMousePos.x);
                    this.moveLine.x = Math.min(this.moveLine.x, this.pageRect.width * 0.6);
                    this.moveLine.x = Math.max(this.moveLine.x, this.pageRect.width * 0.2);
                    this.percentNum = this.moveLine.x / this.pageRect.width;
                    this.refrishWinSize();
                default:
                    console.log("nonono");
                    break;
            }
            this.resize();
        };
        return BaseFolderWindow;
    }(win.BaseWindow));
    basefolderwin.BaseFolderWindow = BaseFolderWindow;
})(basefolderwin || (basefolderwin = {}));
//# sourceMappingURL=BaseFolderWindow.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ossfolder;
(function (ossfolder) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var Rectangle = Pan3d.Rectangle;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var MouseType = Pan3d.MouseType;
    var Vector3D = Pan3d.Vector3D;
    var Scene_data = Pan3d.Scene_data;
    var TextureManager = Pan3d.TextureManager;
    var OssListFile = /** @class */ (function () {
        function OssListFile() {
        }
        return OssListFile;
    }());
    ossfolder.OssListFile = OssListFile;
    var FolderMeshVo = /** @class */ (function (_super) {
        __extends(FolderMeshVo, _super);
        function FolderMeshVo() {
            return _super.call(this) || this;
        }
        Object.defineProperty(FolderMeshVo.prototype, "name", {
            set: function (value) {
                this.needDraw = true;
            },
            enumerable: true,
            configurable: true
        });
        FolderMeshVo.prototype.destory = function () {
            this.pos = null;
            this.needDraw = null;
            this.clear = true;
        };
        return FolderMeshVo;
    }(Pan3d.baseMeshVo));
    ossfolder.FolderMeshVo = FolderMeshVo;
    var FolderName = /** @class */ (function (_super) {
        __extends(FolderName, _super);
        function FolderName() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FolderName.prototype.makeData = function () {
            this.folderMeshVo = this.rightTabInfoVo;
            if (this.folderMeshVo) {
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, "[9c9c9c]" + this.folderMeshVo.ossListFile.baseFile.name, 18, 50, 5, TextAlign.LEFT);
                if (this.folderMeshVo.ossListFile.isOpen) {
                    this.parent.uiAtlas.ctx.drawImage(OssFolderPanel.imgBaseDic["icon_PanRight"], 2, 7, 14, 14);
                    this.parent.uiAtlas.ctx.drawImage(OssFolderPanel.imgBaseDic["icon_FolderOpen_dark"], 20, 2, 18 * 1.4, 16 * 1.4);
                }
                else {
                    this.parent.uiAtlas.ctx.drawImage(OssFolderPanel.imgBaseDic["icon_PanUp"], 3, 7, 14, 14);
                    this.parent.uiAtlas.ctx.drawImage(OssFolderPanel.imgBaseDic["icon_FolderClosed_dark"], 20, 2, 18 * 1.4, 16 * 1.4);
                }
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        FolderName.prototype.update = function () {
            this.folderMeshVo = this.rightTabInfoVo;
            if (this.folderMeshVo) {
                if (this.folderMeshVo.needDraw) {
                    this.makeData();
                    this.folderMeshVo.needDraw = false;
                }
                if (this.folderMeshVo.pos) {
                    this.ui.x = this.folderMeshVo.pos.x;
                    this.ui.y = this.folderMeshVo.pos.y;
                    this.ui.width = this.ui.baseRec.width * this.folderMeshVo.uiScale;
                    this.ui.height = this.ui.baseRec.height * this.folderMeshVo.uiScale;
                }
                if (this.folderMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return FolderName;
    }(Disp2DBaseText));
    ossfolder.FolderName = FolderName;
    var OssFolderPanel = /** @class */ (function (_super) {
        __extends(OssFolderPanel, _super);
        function OssFolderPanel() {
            var _this = _super.call(this, FolderName, new Rectangle(0, 0, 256, 22), 5) || this;
            _this.folderCellHeight = 20;
            _this.left = 0;
            _this.pageRect = new Rectangle(0, 0, 200, 200);
            return _this;
        }
        OssFolderPanel.prototype.loadConfigCom = function () {
            var _this = this;
            _super.prototype.loadConfigCom.call(this);
            this._baseRender.mask = this._uiMask;
            this.loadAssetImg(function () {
                _this.makeItemUiList();
                Pan3d.TimeUtil.addFrameTick(function (t) { _this.update(t); });
            });
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
        };
        OssFolderPanel.prototype.loadAssetImg = function (bfun) {
            OssFolderPanel.imgBaseDic = {};
            var item = [];
            item.push("icon_FolderClosed_dark");
            item.push("icon_FolderOpen_dark");
            item.push("icon_PanRight");
            item.push("icon_PanUp");
            var finishNum = 0;
            for (var i = 0; i < item.length; i++) {
                this.loadTempOne(item[i], function () {
                    finishNum++;
                    if (finishNum >= item.length) {
                        bfun();
                    }
                });
            }
        };
        OssFolderPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.uiLoadComplete) {
                var needScroll = this.contentHeight > this._uiMask.height;
                this.setUiListVisibleByItem([this.c_scroll_bar_bg], needScroll);
                if (needScroll) {
                    this._uiMask.width -= this.c_scroll_bar_bg.width;
                }
            }
        };
        OssFolderPanel.prototype.loadTempOne = function (name, bfun) {
            var tempImg = makeImage();
            OssFolderPanel.imgBaseDic[name] = tempImg;
            tempImg.onload = function () {
                bfun();
            };
            tempImg.url = Scene_data.fileuiRoot + "ui/folder/pic/" + name + ".png";
            tempImg.src = Scene_data.fileuiRoot + "ui/folder/pic/" + name + ".png";
        };
        OssFolderPanel.prototype.update = function (t) {
            _super.prototype.update.call(this, t);
        };
        OssFolderPanel.prototype.fileOssFolderDic = function (value) {
            this.fileAndOpenDicByUrl(value, this.fileItem);
        };
        OssFolderPanel.prototype.fileAndOpenDicByUrl = function (value, arr) {
            var _this = this;
            for (var i = 0; arr && i < arr.length; i++) {
                var vo = arr[i];
                if (value.indexOf(vo.ossListFile.baseFile.path) != -1) {
                    console.log("找到文件目录", vo.ossListFile.baseFile.path);
                    if (!vo.ossListFile.isOpen) {
                        vo.ossListFile.isOpen = true;
                        if (vo.childItem) {
                            this.resetHideDic(vo.childItem);
                            this.refrishFolder();
                            this.fileAndOpenDicByUrl(value, vo.childItem);
                        }
                        else {
                            this.pushChidrenDic(vo, function () {
                                _this.refrishFolder();
                                _this.fileAndOpenDicByUrl(value, vo.childItem);
                            }); //显示mu
                        }
                    }
                    else {
                        this.fileAndOpenDicByUrl(value, vo.childItem);
                    }
                }
            }
        };
        OssFolderPanel.prototype.itemMouseUp = function (evt) {
            if (this.c_scroll_bar_bg.parent && evt.x > this.c_scroll_bar_bg.x) {
                console.log("在外面---");
                return;
            }
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.ui == evt.target) {
                    if ((evt.x - this.left) - $vo.ui.x < 20) {
                        $vo.folderMeshVo.ossListFile.isOpen = !$vo.folderMeshVo.ossListFile.isOpen;
                        if ($vo.folderMeshVo.ossListFile.isOpen) {
                            this.pushChidrenDic($vo.folderMeshVo);
                        }
                        else {
                            this.clearChildern($vo.folderMeshVo); //将要关闭
                        }
                    }
                    else {
                        if (!$vo.folderMeshVo.ossListFile.isOpen) {
                            this.pushChidrenDic($vo.folderMeshVo);
                        }
                        $vo.folderMeshVo.ossListFile.isOpen = true;
                        Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), $vo.folderMeshVo.ossListFile.baseFile.path);
                    }
                    $vo.folderMeshVo.needDraw = true;
                }
            }
            this.refrishFolder();
        };
        OssFolderPanel.prototype.resetHideDic = function (arr) {
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].clear = false;
                arr[i].pos = new Vector3D();
                this.showTemp(arr[i]);
                this.resetHideDic(arr[i].childItem);
            }
        };
        OssFolderPanel.prototype.pushChidrenDic = function (folderMeshVo, bfun) {
            var _this = this;
            if (folderMeshVo.childItem) {
                console.log("已经有了，直接显示就行");
                this.resetHideDic(folderMeshVo.childItem);
            }
            else {
                var pathurl = folderMeshVo.ossListFile.baseFile.path;
                pack.FileOssModel.getFolderArr(pathurl, function (value) {
                    if (!folderMeshVo.childItem) {
                        folderMeshVo.childItem = [];
                        for (var i = 0; value && i < value.length; i++) {
                            if (value[i].isFolder) {
                                var $vo = _this.getCharNameMeshVo(value[i]);
                                $vo.pos = new Vector3D(0, i * 15, 0);
                                folderMeshVo.childItem.push($vo);
                            }
                        }
                        _this.refrishFolder();
                        bfun && bfun();
                    }
                    else {
                        console.log("已获取过，注意可能是网络问题");
                    }
                });
            }
        };
        OssFolderPanel.prototype.clearChildern = function ($folderMeshVo) {
            if ($folderMeshVo.childItem) {
                for (var i = 0; i < $folderMeshVo.childItem.length; i++) {
                    var $vo = $folderMeshVo.childItem[i];
                    $vo.destory();
                    this.clearChildern($vo);
                }
            }
        };
        OssFolderPanel.prototype.makeItemUiList = function () {
            var _this = this;
            this.fileItem = [];
            for (var i = 0; i < this._uiItem.length; i++) {
                //  this._uiItem[i].ui.addEventListener(InteractiveEvent.Up, this.itemMouseUp, this);
            }
            //"upfile/shadertree/"
            //
            //Pan3d.Scene_data.ossRoot = "https://webpan.oss-cn-shanghai.aliyuncs.com/";
            var rootDic = Pan3d.Scene_data.fileRoot.replace(Pan3d.Scene_data.ossRoot, "");
            pack.FileOssModel.getFolderArr(rootDic, function (value) {
                for (var i = 0; i < value.length; i++) {
                    if (value[i].isFolder) {
                        var $vo = _this.getCharNameMeshVo(value[i]);
                        $vo.pos = new Vector3D(0, i * 15, 0);
                        _this.fileItem.push($vo);
                    }
                }
                _this.refrishFolder();
            });
        };
        OssFolderPanel.prototype.getCharNameMeshVo = function (value) {
            var $vo = new FolderMeshVo;
            $vo.ossListFile = new OssListFile;
            $vo.ossListFile.baseFile = value;
            var tmep = this.showTemp($vo);
            tmep.ui.removeEventListener(InteractiveEvent.Up, this.itemMouseUp, this);
            tmep.ui.addEventListener(InteractiveEvent.Up, this.itemMouseUp, this);
            return $vo;
        };
        OssFolderPanel.prototype.makeOtherRender = function () {
            var tempRender = new UIRenderComponent;
            console.log("添加新对象");
            tempRender.mask = this._uiMask;
            return tempRender;
        };
        OssFolderPanel.prototype.refrishFolder = function () {
            OssFolderPanel.listTy = this.moveListTy;
            var frist = OssFolderPanel.listTy;
            this.disChiendren(this.fileItem, 10);
            var moveTy = 0;
            this.moveAllTy(this.fileItem, moveTy);
            this.contentHeight = OssFolderPanel.listTy - frist;
            this.resize();
        };
        Object.defineProperty(OssFolderPanel.prototype, "isCanToDo", {
            get: function () {
                if (this && this.hasStage) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        OssFolderPanel.prototype.onMouseWheel = function ($evt) {
            if (!this.isCanToDo) {
                return;
            }
            if (this.pageRect.isHitByPoint($evt.x, $evt.y)) {
                if (this.contentHeight > this._uiMask.height) {
                    this.c_scroll_bar.y += $evt.deltaY / 30;
                    this.changeScrollBar();
                    this.resize();
                }
            }
        };
        OssFolderPanel.prototype.changeScrollBar = function () {
            _super.prototype.changeScrollBar.call(this);
            this.refrishFolder();
        };
        OssFolderPanel.prototype.moveAllTy = function (arr, ty) {
            if (ty === void 0) { ty = 0; }
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].pos.y += ty;
                if (arr[i].ossListFile.isOpen) {
                    this.moveAllTy(arr[i].childItem, ty);
                }
            }
        };
        OssFolderPanel.prototype.disChiendren = function (arr, tx) {
            if (tx === void 0) { tx = 0; }
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].pos.x = tx;
                arr[i].pos.y = OssFolderPanel.listTy;
                arr[i].uiScale = 0.7;
                OssFolderPanel.listTy += 20;
                if (arr[i].ossListFile.isOpen) {
                    this.disChiendren(arr[i].childItem, tx + 20);
                }
            }
        };
        OssFolderPanel.listTy = 0;
        return OssFolderPanel;
    }(win.Dis2dBaseWindow));
    ossfolder.OssFolderPanel = OssFolderPanel;
})(ossfolder || (ossfolder = {}));
//# sourceMappingURL=OssFolderPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var filelist;
(function (filelist) {
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var UIData = Pan3d.UIData;
    var Vector2D = Pan3d.Vector2D;
    var Vector3D = Pan3d.Vector3D;
    var Rectangle = Pan3d.Rectangle;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var TextureManager = Pan3d.TextureManager;
    var MouseType = Pan3d.MouseType;
    var DragSource = drag.DragSource;
    var DragManager = drag.DragManager;
    var FileVo = pack.FileVo;
    var MenuListData = menutwo.MenuListData;
    var SampleFileVo = /** @class */ (function () {
        function SampleFileVo() {
        }
        return SampleFileVo;
    }());
    filelist.SampleFileVo = SampleFileVo;
    var FileListMeshVo = /** @class */ (function (_super) {
        __extends(FileListMeshVo, _super);
        function FileListMeshVo() {
            var _this = _super.call(this) || this;
            _this.cellHeightNum = 1;
            return _this;
        }
        Object.defineProperty(FileListMeshVo.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
                this.needDraw = true;
            },
            enumerable: true,
            configurable: true
        });
        FileListMeshVo.prototype.destory = function () {
            this.pos = null;
            this._name = null;
            this.needDraw = null;
            this.clear = true;
        };
        return FileListMeshVo;
    }(Pan3d.baseMeshVo));
    filelist.FileListMeshVo = FileListMeshVo;
    var FileListName = /** @class */ (function (_super) {
        __extends(FileListName, _super);
        function FileListName() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.lastSelect = true;
            return _this;
        }
        FileListName.prototype.makeData = function () {
            var _this = this;
            this.fileListMeshVo = this.rightTabInfoVo;
            if (this.fileListMeshVo) {
                if (this.lastSelect == this.fileListMeshVo.fileXmlVo.data.select && this.lastName == this.fileListMeshVo.fileXmlVo.data.name) {
                    return;
                }
                this.lastSelect = this.fileListMeshVo.fileXmlVo.data.select;
                this.lastName = this.fileListMeshVo.fileXmlVo.data.name;
                var $color = "[9c9c9c]";
                if (this.fileListMeshVo.fileXmlVo.data.select) {
                    $color = "[ffffff]";
                }
                var fileVo = this.fileListMeshVo.fileXmlVo.data;
                this.parent.uiAtlas.clearCtxTextureBySkilname(this.textureStr);
                switch (fileVo.suffix) {
                    case FileVo.JPG:
                    case FileVo.PNG:
                        maineditor.EditorModel.getInstance().loadHideMixImg(Scene_data.ossRoot + fileVo.path, function ($img) {
                            _this.drawFileIconName($img, fileVo.name, $color);
                        });
                        break;
                    case FileVo.PREFAB:
                        this.drawFileIconName(FileListPanel.imgBaseDic["profeb_64x"], fileVo.name, $color);
                        break;
                    case FileVo.MATERIAL:
                        this.drawFileIconName(FileListPanel.imgBaseDic["marterial_64x"], fileVo.name, $color);
                        break;
                    case FileVo.TXT:
                        this.drawFileIconName(FileListPanel.imgBaseDic["txt_64x"], fileVo.name, $color);
                        break;
                    case FileVo.OBJS:
                        this.drawFileIconName(FileListPanel.imgBaseDic["objs_64x"], fileVo.name, $color);
                        break;
                    case FileVo.MAP:
                        this.drawFileIconName(FileListPanel.imgBaseDic["map_64x"], fileVo.name, $color);
                        break;
                    case FileVo.LYF:
                        this.drawFileIconName(FileListPanel.imgBaseDic["lyf_64x"], fileVo.name, $color);
                        break;
                    case FileVo.ZZW:
                        this.drawFileIconName(FileListPanel.imgBaseDic["zzw_64x"], fileVo.name, $color);
                        break;
                    case FileVo.MD5ANIM:
                        this.drawFileIconName(FileListPanel.imgBaseDic["md5anim_64x"], fileVo.name, $color);
                        break;
                    case FileVo.MD5MESH:
                        this.drawFileIconName(FileListPanel.imgBaseDic["md5mesh_64x"], fileVo.name, $color);
                        break;
                    case FileVo.SKILL:
                        this.drawFileIconName(FileListPanel.imgBaseDic["skill_64x"], fileVo.name, $color);
                        break;
                    default:
                        this.drawFileIconName(FileListPanel.imgBaseDic["icon_Folder_64x"], fileVo.name, $color);
                        break;
                }
            }
        };
        FileListName.prototype.tempDown = function ($img, name, $color) {
            var _this = this;
            var sceneRes = new inputres.SceneRes();
            sceneRes.bfun = function () {
                var imgUrl = "working/scene007/scene007_hide/lightuv/build2.jpg";
                var tbaimg = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + imgUrl);
                if (tbaimg) { //新加的图
                    console.log(tbaimg);
                    _this.drawFileIconName(tbaimg, name, $color);
                }
            };
            Pan3d.LoadManager.getInstance().load(Scene_data.fileRoot + "pan/expmapinfo.txt", LoadManager.BYTE_TYPE, function ($byte) {
                sceneRes.loadComplete($byte);
            });
        };
        FileListName.prototype.drawFileIconName = function ($img, name, $color) {
            var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
            this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
            this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
            // var $textMetrics: TextMetrics = Pan3d.TextRegExp.getTextMetrics(this.parent.uiAtlas.ctx, outStr);
            var outStr = name.split(".")[0];
            var $textMetrics = editscene.ChangeNameModel.getInstance().getTextMetrics(outStr, 14);
            var twoLine = false;
            if ($textMetrics.width > 70) {
                twoLine = true;
            }
            if (this.fileListMeshVo.fileXmlVo.data.select) {
                this.parent.uiAtlas.ctx.fillStyle = "rgba(255,255,255,0.1)";
                ; // text color
                if (twoLine) {
                    this.parent.uiAtlas.ctx.fillRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight - 3);
                }
                else {
                    this.parent.uiAtlas.ctx.fillRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight - 10);
                }
            }
            var drawPicRect = new Rectangle(18, 1, 64, 64);
            var tw = drawPicRect.width;
            var th = drawPicRect.height;
            if ($img.width) {
                tw = Math.max($img.width * 1.5, 20);
                th = Math.max($img.heigh * 1.5, 20);
                tw = Math.min($img.width * 1.5, drawPicRect.width);
                th = Math.min($img.height * 1.5, drawPicRect.height);
            }
            this.parent.uiAtlas.ctx.drawImage($img, drawPicRect.x + (drawPicRect.width - tw) / 2, drawPicRect.y + (drawPicRect.height - th) / 2, tw, th);
            if (twoLine) {
                var inset = Math.floor(outStr.length * (2 / 5));
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, $color + outStr.substr(0, inset), 15, 0 - 2, 60, TextAlign.CENTER);
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, $color + outStr.substring(inset, outStr.length), 15, 0 - 2, 78, TextAlign.CENTER);
            }
            else {
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, $color + outStr, 18, 0, 65, TextAlign.CENTER);
            }
            TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
        };
        FileListName.prototype.update = function () {
            this.fileListMeshVo = this.rightTabInfoVo;
            if (this.fileListMeshVo) {
                if (this.fileListMeshVo.needDraw) {
                    this.makeData();
                    this.fileListMeshVo.needDraw = false;
                }
                if (this.fileListMeshVo.pos) {
                    this.ui.x = this.fileListMeshVo.pos.x;
                    this.ui.y = this.fileListMeshVo.pos.y;
                    this.ui.width = this.ui.baseRec.width * this.fileListMeshVo.uiScale;
                    this.ui.height = this.ui.baseRec.height * this.fileListMeshVo.uiScale;
                }
                if (this.fileListMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return FileListName;
    }(Disp2DBaseText));
    filelist.FileListName = FileListName;
    var PathurlRect = /** @class */ (function (_super) {
        __extends(PathurlRect, _super);
        function PathurlRect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PathurlRect;
    }(Rectangle));
    filelist.PathurlRect = PathurlRect;
    var PathurlLabel = /** @class */ (function (_super) {
        __extends(PathurlLabel, _super);
        function PathurlLabel() {
            var _this = _super.call(this, 512, 22) || this;
            _this.label = "目录/文件夹";
            _this.ui.addEventListener(InteractiveEvent.Down, _this.pathurlLabelDown, _this);
            _this.ui.addEventListener(InteractiveEvent.Move, _this.pathurlLabelMove, _this);
            return _this;
        }
        PathurlLabel.prototype.pathurlLabelMove = function ($evt) {
            //  console.log("pathurlLabelMove")
        };
        PathurlLabel.prototype.pathurlLabelDown = function ($evt) {
            //console.log("pathurlLabelDown", this.areaRectItem)
            var tempMouse = new Vector2D($evt.x - this.textureContext.left, $evt.y - this.textureContext.top);
            tempMouse.x /= this.textureContext.uiViewScale;
            tempMouse.y /= this.textureContext.uiViewScale; //UI已被放大
            for (var i = 0; i < this.areaRectItem.length; i++) {
                var tempRect = this.areaRectItem[i];
                if (tempRect.isHitByPoint(tempMouse.x, tempMouse.y)) {
                    var pathUrl = tempRect.pathurl.replace(Pan3d.Scene_data.ossRoot, "");
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathUrl);
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_OSS_FOLDER_FILE), pathUrl);
                }
            }
        };
        Object.defineProperty(PathurlLabel.prototype, "label", {
            set: function (value) {
                LabelTextFont.writeSingleLabel(this.ui.uiRender.uiAtlas, this.ui.skinName, value, 26, TextAlign.LEFT, "#ffffff", "#27262e", 5);
            },
            enumerable: true,
            configurable: true
        });
        PathurlLabel.prototype.setPath = function (value) {
            this.areaRectItem = [];
            var $uiAtlas = this.ui.uiRender.uiAtlas;
            var $uiRect = $uiAtlas.getRec(this.ui.skinName);
            var $ctx = UIManager.getInstance().getContext2D($uiRect.pixelWitdh, $uiRect.pixelHeight, false);
            $ctx.fillStyle = "#ffffff";
            $ctx.font = +26 + "px " + UIData.font;
            $ctx.strokeStyle = "#27262e";
            $ctx.lineWidth = 4;
            var tempArr = value.split("/");
            var tx = 20;
            var tempSaveName = "";
            for (var i = 0; i < tempArr.length; i++) {
                var tempStr = tempArr[i];
                if (tempStr && tempStr.length) {
                    $ctx.fillText(tempStr, tx, 0);
                    tempSaveName += tempStr + "/";
                    var tempRect = new PathurlRect(tx, 0, $ctx.measureText(tempStr).width, 22);
                    tempRect.pathurl = tempSaveName;
                    this.areaRectItem.push(tempRect);
                    tx += $ctx.measureText(tempStr).width;
                    $ctx.fillText(" / ", tx, 0);
                    tx += 30;
                }
            }
            $uiAtlas.updateCtx($ctx, $uiRect.pixelX, $uiRect.pixelY);
        };
        return PathurlLabel;
    }(prop.TextLabelUI));
    filelist.PathurlLabel = PathurlLabel;
    var FileListPanel = /** @class */ (function (_super) {
        __extends(FileListPanel, _super);
        function FileListPanel() {
            var _this = _super.call(this, FileListName, new Rectangle(0, 0, 100, 100), 48) || this;
            _this.timeOutMakeDragFun = function () { _this.makeDragData(); };
            return _this;
        }
        FileListPanel.prototype.loadConfigCom = function () {
            var _this = this;
            _super.prototype.loadConfigCom.call(this);
            this._baseRender.mask = this._uiMask;
            this.pathlistBg = this.addChild(this._baseTopRender.getComponent("a_round_line"));
            this.pathlistBg.x = 0;
            this.pathlistBg.y = -20;
            this.pathlistBg.width = 100;
            this.pathlistBg.height = 20;
            this.pathurlLabel = new PathurlLabel();
            this.addRender(this.pathurlLabel.ui.uiRender);
            this.setUiListVisibleByItem([this.c_scroll_bar_bg], true);
            this.a_tittle_bg.removeEventListener(InteractiveEvent.Down, this.tittleMouseDown, this);
            this.loadAssetImg(function () {
                _this.makeItemUiList();
                Pan3d.TimeUtil.addFrameTick(function (t) { _this.update(t); });
            });
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            this.resize();
        };
        FileListPanel.prototype.onMouseWheel = function ($evt) {
            if (!this.isCanToDo) {
                return;
            }
            if (this.pageRect.isHitByPoint($evt.x, $evt.y)) {
                if (this.contentHeight > this._uiMask.height) {
                    this.c_scroll_bar.y += $evt.deltaY / 30;
                    this.changeScrollBar();
                    this.resize();
                }
            }
        };
        Object.defineProperty(FileListPanel.prototype, "isCanToDo", {
            get: function () {
                if (this && this.hasStage) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        FileListPanel.prototype.resize = function () {
            this.resetSampleFilePos();
            if (this.uiLoadComplete) {
                this.contentHeight = this.getcontentHeight();
                if (this.pathlistBg) {
                    this.pathlistBg.width = this.pageRect.width;
                }
                if (this.pathurlLabel) {
                    this.pathurlLabel.textureContext.resize();
                    this.pathurlLabel.textureContext.left = this.left + 20;
                    this.pathurlLabel.textureContext.top = this.top - 22;
                }
            }
            _super.prototype.resize.call(this);
        };
        FileListPanel.prototype.loadAssetImg = function (bfun) {
            FileListPanel.imgBaseDic = {};
            var item = [];
            item.push("icon_Folder_64x");
            item.push("profeb_64x");
            item.push("marterial_64x");
            item.push("txt_64x");
            item.push("objs_64x");
            item.push("lyf_64x");
            item.push("zzw_64x");
            item.push("map_64x");
            item.push("skill_64x");
            item.push("md5anim_64x");
            item.push("md5mesh_64x");
            var finishNum = 0;
            for (var i = 0; i < item.length; i++) {
                this.loadTempOne(item[i], function () {
                    finishNum++;
                    if (finishNum >= item.length) {
                        bfun();
                    }
                });
            }
        };
        FileListPanel.prototype.loadTempOne = function (name, bfun) {
            var tempImg = makeImage();
            FileListPanel.imgBaseDic[name] = tempImg;
            tempImg.onload = function () {
                bfun();
            };
            tempImg.url = Scene_data.fileuiRoot + "ui/icon/" + name + ".png";
            tempImg.src = Scene_data.fileuiRoot + "ui/icon/" + name + ".png";
        };
        FileListPanel.prototype.update = function (t) {
            _super.prototype.update.call(this, t);
        };
        FileListPanel.prototype.fileMouseDown = function (evt) {
            if (this._lastfileDonwInfo && this._lastfileDonwInfo.target == evt.target) {
                if (this._lastfileDonwInfo.tm > (Pan3d.TimeUtil.getTimer() - 1000) && this._lastfileDonwInfo.x == evt.x && this._lastfileDonwInfo.y == evt.y) {
                    this.fileDuboclik(evt);
                    return;
                }
            }
            this._lastfileDonwInfo = { x: evt.x, y: evt.y, target: evt.target, tm: Pan3d.TimeUtil.getTimer() };
            this.lastDragEvent = evt;
            Pan3d.TimeUtil.addTimeOut(100, this.timeOutMakeDragFun);
        };
        FileListPanel.prototype.makeDragData = function () {
            var vo = this.getItemVoByUi(this.lastDragEvent.target);
            if (vo) {
                var fileUrl = Pan3d.Scene_data.ossRoot + vo.fileListMeshVo.fileXmlVo.data.path;
                fileUrl = fileUrl.replace(Pan3d.Scene_data.fileRoot, "");
                var dsragSource = new DragSource();
                if (vo.fileListMeshVo.fileXmlVo.data.isFolder) {
                    dsragSource.icon = "icon/icon_Folder_64x.png";
                }
                else {
                    switch (vo.fileListMeshVo.fileXmlVo.data.suffix) {
                        case FileVo.MATERIAL:
                            dsragSource.icon = "icon/marterial_64x.png";
                            break;
                        case "jpg":
                        case "png":
                            dsragSource.icon = "icon/profeb_64x.png";
                            break;
                        case "objs":
                            dsragSource.icon = "icon/objs_64x.png";
                            break;
                        default:
                            dsragSource.icon = "icon/objs_64x.png";
                            break;
                    }
                }
                dsragSource.url = fileUrl;
                dsragSource.type = "file";
                DragManager.doDragdoDrag(this, dsragSource);
            }
        };
        FileListPanel.prototype.fileDuboclik = function (evt) {
            var vo = this.getItemVoByUi(evt.target);
            if (vo) {
                if (vo.fileListMeshVo.fileXmlVo.data.isFolder) {
                    this.refrishPath(vo.fileListMeshVo.fileXmlVo.data.path);
                }
                else {
                    var fileUrl = Pan3d.Scene_data.ossRoot + vo.fileListMeshVo.fileXmlVo.data.path;
                    fileUrl = fileUrl.replace(Pan3d.Scene_data.fileRoot, "");
                    maineditor.EditorModel.getInstance().openFileByUrl(fileUrl);
                    //switch (vo.fileListMeshVo.fileXmlVo.data.suffix) {
                    //    case FileVo.MATERIAL:
                    //        Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL), fileUrl);
                    //        break
                    //    case FileVo.MAP:
                    //        Pan3d.ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.LOAD_SCENE_MAP), fileUrl); //加载场景
                    //        break;
                    //    default:
                    //        break;
                    //}
                }
            }
        };
        FileListPanel.prototype.selectFileClik = function (evt) {
            var vo = this.getItemVoByUi(evt.target);
            if (vo) {
                if (vo.fileListMeshVo.fileXmlVo.data.isFolder) {
                }
                else {
                    var fileUrl = Pan3d.Scene_data.ossRoot + vo.fileListMeshVo.fileXmlVo.data.path;
                    fileUrl = fileUrl.replace(Pan3d.Scene_data.fileRoot, "");
                    switch (vo.fileListMeshVo.fileXmlVo.data.suffix) {
                        case FileVo.PREFAB:
                            pack.PackPrefabManager.getInstance().getPrefabByUrl(fileUrl, function (value) {
                                var tempview = new filelist.PrefabMeshView(prop.PropModel.getInstance().propPanle);
                                tempview.data = value;
                                prop.PropModel.getInstance().showOtherMeshView(tempview);
                            });
                            break;
                        case FileVo.ZZW:
                            pack.PackRoleManager.getInstance().getRoleZzwByUrl(fileUrl, function (value) {
                                var tempRoleView = new filelist.RoleMeshView(prop.PropModel.getInstance().propPanle);
                                tempRoleView.data = value;
                                prop.PropModel.getInstance().showOtherMeshView(tempRoleView);
                            });
                            break;
                        case FileVo.SKILL:
                            pack.PackSkillManager.getInstance().getPrefabByUrl(fileUrl, function (value) {
                                var tempSkilView = new filelist.SkillMeshView(prop.PropModel.getInstance().propPanle);
                                tempSkilView.data = value;
                                prop.PropModel.getInstance().showOtherMeshView(tempSkilView);
                            });
                            break;
                        case FileVo.LYF:
                            var tempFileMView = new filelist.FileMeshView(prop.PropModel.getInstance().propPanle);
                            tempFileMView.data = fileUrl;
                            prop.PropModel.getInstance().showOtherMeshView(tempFileMView);
                            break;
                        case FileVo.LYF:
                        case FileVo.OBJS:
                            var tempFileMView = new filelist.FileMeshView(prop.PropModel.getInstance().propPanle);
                            tempFileMView.data = fileUrl;
                            prop.PropModel.getInstance().showOtherMeshView(tempFileMView);
                            break;
                        default:
                            console.log("还没有的类型", vo.fileListMeshVo.fileXmlVo.data.path);
                            break;
                    }
                }
            }
        };
        FileListPanel.prototype.fileMouseUp = function (evt) {
            Pan3d.TimeUtil.removeTimeOut(this.timeOutMakeDragFun);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.stageMouseMove, this);
            this.selectFileIcon(evt);
        };
        FileListPanel.prototype.selectFileIcon = function (evt) {
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.fileListMeshVo && $vo.ui) {
                    if ($vo.ui == evt.target) {
                        $vo.fileListMeshVo.fileXmlVo.data.select = true;
                    }
                    else {
                        $vo.fileListMeshVo.fileXmlVo.data.select = false;
                    }
                    $vo.fileListMeshVo.needDraw = true;
                }
            }
            this.selectFileClik(evt);
        };
        //移除不显示的对象
        FileListPanel.prototype.clearListAll = function () {
            while (this.fileItem.length) {
                var vo = this.fileItem.pop();
                vo.destory();
            }
        };
        FileListPanel.prototype.refrishPath = function (filePath) {
            var _this = this;
            console.log("刷新目录", filePath);
            this.pathurlLabel.setPath(filePath);
            AppData.rootFilePath = AppData.getPerentPath(filePath);
            this.moveListTy = 0;
            this.clearListAll();
            pack.FileOssModel.getFolderArr(AppData.rootFilePath, function (value) {
                for (var i = 0; i < value.length; i++) {
                    var sampleFile = new SampleFileVo;
                    sampleFile.id = i;
                    sampleFile.data = value[i];
                    if (sampleFile.data.path == filePath) {
                        sampleFile.data.select = true;
                    }
                    var $vo = _this.getCharNameMeshVo(sampleFile);
                    $vo.pos = new Vector3D(i * 64, 40, 0);
                    _this.fileItem.push($vo);
                }
                _this.resize();
            });
        };
        FileListPanel.prototype.addRender = function ($uiRender) {
            _super.prototype.addRender.call(this, $uiRender);
            //这里的监听和之前有冲突之前添加过的 需要优化，暂时没问题
            for (var i = 0; this._uiItem && i < this._uiItem.length; i++) {
                this._uiItem[i].ui.addEventListener(InteractiveEvent.Down, this.fileMouseDown, this);
                this._uiItem[i].ui.addEventListener(InteractiveEvent.Up, this.fileMouseUp, this);
            }
        };
        FileListPanel.prototype.getItemVoByUi = function (ui) {
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.ui == ui) {
                    return $vo;
                }
            }
            return null;
        };
        FileListPanel.prototype.makeItemUiList = function () {
            var _this = this;
            this.fileItem = [];
            for (var i = 0; i < this._uiItem.length; i++) {
                this._uiItem[i].ui.addEventListener(InteractiveEvent.Down, this.fileMouseDown, this);
                this._uiItem[i].ui.addEventListener(InteractiveEvent.Up, this.fileMouseUp, this);
            }
            var rootDic = Pan3d.Scene_data.fileRoot.replace(Pan3d.Scene_data.ossRoot, "");
            this.refrishPath(rootDic);
            if (!this.onRightMenuFun) {
                this.onRightMenuFun = function ($evt) { _this.onRightMenu($evt); };
            }
            document.addEventListener("contextmenu", this.onRightMenuFun);
        };
        FileListPanel.prototype.onRightMenu = function ($evt) {
            $evt.preventDefault();
            var $slectUi = win.LayerManager.getInstance().getObjectsUnderPoint(new Vector2D($evt.x, $evt.y));
            if ($slectUi) {
                if ($slectUi.parent instanceof FileListPanel) {
                    var vo = this.getItemVoByUi($slectUi);
                    if (vo) {
                        //在当前文件上
                        this.makeFileFloadMenu($evt);
                        return;
                    }
                }
            }
            //范围其它区域
            if (this.pageRect.isHitByPoint($evt.x, $evt.y)) {
                this.makeFileListMenu($evt);
            }
        };
        FileListPanel.prototype.makeFileFloadMenu = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU);
            var temp = {};
            temp.mouse = new Vector2D($evt.clientX, $evt.clientY);
            var menuA = new Array();
            menuA.push(new MenuListData("删除文件", "21"));
            menuA.push(new MenuListData("重命名", "22"));
            menuA.push(new MenuListData("下载文件", "23"));
            temp.menuXmlItem = menuA;
            temp.info = {};
            temp.info.bfun = function (value, evt) { _this.menuBfun(value, evt); };
            ModuleEventManager.dispatchEvent(new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU), temp);
        };
        FileListPanel.prototype.makeFileListMenu = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU);
            var temp = {};
            var menuB = new Array();
            menuB.push(new MenuListData("上传文件", "1"));
            menuB.push(new MenuListData("创建文件夹", "2"));
            menuB.push(new MenuListData("创建Texture", "3"));
            menuB.push(new MenuListData("创建prefab", "4"));
            menuB.push(new MenuListData("刷新", "5"));
            temp.mouse = new Vector2D($evt.clientX, Math.min($evt.clientY, Scene_data.stageHeight - menuB.length * 20));
            temp.menuXmlItem = menuB;
            temp.info = {};
            temp.info.bfun = function (value, evt) { _this.menuBfun(value, evt); };
            ModuleEventManager.dispatchEvent(new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU), temp);
        };
        FileListPanel.prototype.menuBfun = function (value, evt) {
            switch (value.key) {
                case "1":
                    this.upTempFileToOss();
                    break;
                case "3":
                    this.creatTexture();
                    break;
                case "4":
                    this.creatPefab();
                    break;
                case "5":
                    this.refrishIndexGroup(AppData.rootFilePath);
                    break;
                case "21":
                    this.deleFile();
                    break;
                case "22":
                    this.changeFileName();
                    break;
                case "23":
                    this.downFile();
                    break;
                default:
                    console.log("没处理对象", value.key);
                    break;
            }
        };
        FileListPanel.prototype.downFile = function () {
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.fileListMeshVo && $vo.ui) {
                    if ($vo.fileListMeshVo.fileXmlVo.data.select) {
                        var basePath = $vo.fileListMeshVo.fileXmlVo.data.path;
                        window.open(Scene_data.ossRoot + basePath);
                    }
                }
            }
        };
        FileListPanel.prototype.changeFileName = function () {
            var _this = this;
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.fileListMeshVo && $vo.ui) {
                    if ($vo.fileListMeshVo.fileXmlVo.data.select) {
                        var rect = new Rectangle();
                        rect.x = $vo.ui.x + this.left;
                        rect.y = $vo.ui.y + this.top;
                        rect.x += 5;
                        rect.y += 45;
                        rect.width = 60;
                        rect.height = 20;
                        var nameStr = $vo.fileListMeshVo.fileXmlVo.data.name;
                        var receet = editscene.ChangeNameModel.getInstance().getTextMetrics(nameStr, 14);
                        rect.width = receet.width + 20;
                        var basePath = $vo.fileListMeshVo.fileXmlVo.data.path;
                        editscene.ChangeNameModel.getInstance().changeName(rect, nameStr, function (value) {
                            if (value.length) {
                                console.log("准备修改名字");
                                var toPath = basePath.substr(0, basePath.lastIndexOf("/") + 1);
                                toPath = toPath + value;
                                console.log(basePath);
                                console.log(toPath);
                                pack.FileOssModel.copyFile(toPath, basePath, function () {
                                    pack.FileOssModel.deleFile(basePath, function () {
                                        _this.refrishIndexGroup(AppData.rootFilePath);
                                    });
                                });
                            }
                        });
                    }
                }
            }
        };
        FileListPanel.prototype.creatTexture = function () {
            var _this = this;
            //复制文件
            var baseTextureUrl = "baseedit/assets/base/base.material";
            var pathurl = AppData.rootFilePath.replace(Pan3d.Scene_data.ossRoot, "");
            pack.FileOssModel.copyFile(pathurl + "base.material", baseTextureUrl, function () {
                _this.refrishIndexGroup(AppData.rootFilePath);
            });
        };
        FileListPanel.prototype.refrishIndexGroup = function (url) {
            var _this = this;
            pack.FileOssModel.getDisByOss(url, function (value) {
                _this.refrishPath(url);
            });
        };
        FileListPanel.prototype.creatPefab = function () {
            var _this = this;
            //复制文件
            var basePrefabUrl = "baseedit/assets/base/base.prefab";
            var pathurl = AppData.rootFilePath.replace(Pan3d.Scene_data.ossRoot, "");
            pack.FileOssModel.copyFile(pathurl + "base.prefab", basePrefabUrl, function () {
                _this.refrishIndexGroup(AppData.rootFilePath);
            });
        };
        FileListPanel.prototype.deleFile = function () {
            var _this = this;
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.fileListMeshVo && $vo.ui) {
                    if ($vo.fileListMeshVo.fileXmlVo.data.select) {
                        var truthBeTold = window.confirm("是否确定要删除选取的对象。");
                        if (truthBeTold) {
                            pack.FileOssModel.deleFile($vo.fileListMeshVo.fileXmlVo.data.path, function () {
                                _this.refrishIndexGroup(AppData.rootFilePath);
                                console.log("删除成功");
                            });
                        }
                        else {
                        }
                    }
                }
            }
        };
        FileListPanel.prototype.upTempFileToOss = function () {
            var _this = this;
            this._inputHtmlSprite = document.createElement('input');
            this._inputHtmlSprite.setAttribute('id', '_ef');
            this._inputHtmlSprite.setAttribute('type', 'file');
            this._inputHtmlSprite.setAttribute("style", 'visibility:hidden');
            this._inputHtmlSprite.click();
            this._inputHtmlSprite.value;
            this._inputHtmlSprite.addEventListener("change", function (cevt) { _this.changeFile(cevt); });
        };
        FileListPanel.prototype.changeFile = function (evt) {
            var _this = this;
            for (var i = 0; i < this._inputHtmlSprite.files.length && i < 1; i++) {
                var simpleFile = this._inputHtmlSprite.files[i];
                console.log(simpleFile);
                console.log(AppData.rootFilePath);
                var pathurl = AppData.rootFilePath.replace(Pan3d.Scene_data.ossRoot, "");
                console.log(pathurl + simpleFile.name);
                pack.FileOssModel.upOssFile(simpleFile, pathurl + simpleFile.name, function () {
                    console.log("文件上传成功");
                    pack.FileOssModel.getDisByOss(pathurl, function () {
                        _this.refrishPath(AppData.rootFilePath);
                    });
                });
            }
            this._inputHtmlSprite = null;
        };
        FileListPanel.prototype.resetSampleFilePos = function () {
            var w = Math.round((this.pageRect.width - 50) / 100);
            var moveTy = this.moveListTy + 10;
            for (var i = 0; this.fileItem && i < this.fileItem.length; i++) {
                var vo = this.fileItem[i];
                vo.uiScale = 0.7;
                vo.pos.x = i % w * 100 + 10;
                vo.pos.y = Math.floor(i / w) * 70 + moveTy;
            }
        };
        FileListPanel.prototype.getcontentHeight = function () {
            if (this.uiLoadComplete && this.fileItem) {
                var w = Math.round((this.pageRect.width - 50) / 100);
                return Math.round(this.fileItem.length / w) * 70;
            }
            else {
                return 0;
            }
        };
        FileListPanel.prototype.getCharNameMeshVo = function (value) {
            var $vo = new FileListMeshVo;
            $vo.fileXmlVo = value;
            this.showTemp($vo);
            return $vo;
        };
        return FileListPanel;
    }(win.Dis2dBaseWindow));
    filelist.FileListPanel = FileListPanel;
})(filelist || (filelist = {}));
//# sourceMappingURL=FileListPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var folder;
(function (folder) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var Panel = win.Panel;
    var FileListPanel = filelist.FileListPanel;
    var BaseFolderWindow = basefolderwin.BaseFolderWindow;
    var OssFolderPanel = ossfolder.OssFolderPanel;
    var FolderEvent = /** @class */ (function (_super) {
        __extends(FolderEvent, _super);
        function FolderEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FolderEvent.SHOW_FOLDER_PANEL = "SHOW_FOLDER_PANEL";
        FolderEvent.EDITSCENE_RESET_SIZE = "EDITSCENE_RESET_SIZE";
        FolderEvent.RESET_FOLDE_WIN_SIZE = "RESET_FOLDE_WIND_SIZE";
        FolderEvent.LIST_DIS_ALL_FILE = "LIST_DIS_ALL_FILE";
        FolderEvent.LIST_OSS_FOLDER_FILE = "LIST_OSS_FOLDER_FILE";
        return FolderEvent;
    }(BaseEvent));
    folder.FolderEvent = FolderEvent;
    var FolderModule = /** @class */ (function (_super) {
        __extends(FolderModule, _super);
        function FolderModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FolderModule.prototype.getModuleName = function () {
            return "FolderModule";
        };
        FolderModule.prototype.listProcessors = function () {
            return [new FolderProcessor()];
        };
        return FolderModule;
    }(Module));
    folder.FolderModule = FolderModule;
    var FolderProcessor = /** @class */ (function (_super) {
        __extends(FolderProcessor, _super);
        function FolderProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FolderProcessor.prototype.getName = function () {
            return "FolderProcessor";
        };
        FolderProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof FolderEvent) {
                var _folderEvent = $event;
                if (_folderEvent.type == FolderEvent.SHOW_FOLDER_PANEL) {
                    if (!this._baseFolderWindow) {
                        this._baseFolderWindow = new BaseFolderWindow();
                    }
                    this.addUIContainer(this._baseFolderWindow);
                    if (!this._folderPanel) {
                        this._folderPanel = new OssFolderPanel();
                    }
                    this.addUIContainer(this._folderPanel);
                    if (!this._fileListPanel) {
                        this._fileListPanel = new FileListPanel();
                    }
                    this.addUIContainer(this._fileListPanel);
                    if (this.fristRect) {
                        this._baseFolderWindow.setRect(this.fristRect);
                    }
                }
                if (_folderEvent.type == FolderEvent.EDITSCENE_RESET_SIZE) {
                    if (this._baseFolderWindow) {
                        this._baseFolderWindow.setRect(_folderEvent.data);
                    }
                    else {
                        this.fristRect = _folderEvent.data;
                    }
                }
                if (_folderEvent.type == FolderEvent.LIST_DIS_ALL_FILE) {
                    this._fileListPanel.refrishPath(String(_folderEvent.data));
                }
                if (_folderEvent.type == FolderEvent.LIST_OSS_FOLDER_FILE) {
                    this._folderPanel.fileOssFolderDic(String(_folderEvent.data));
                }
                if (_folderEvent.type == FolderEvent.RESET_FOLDE_WIN_SIZE) {
                    this.resetFolderWinSize();
                }
            }
        };
        FolderProcessor.prototype.resetFolderWinSize = function () {
            var $perentWinRect = this._baseFolderWindow.getPageRect().clone();
            var A = $perentWinRect.clone();
            A.x = 0;
            A.y += 13;
            A.width = $perentWinRect.width * this._baseFolderWindow.percentNum + 5;
            A.height -= 18;
            this._folderPanel.setRect(A);
            var B = $perentWinRect.clone();
            B.x = $perentWinRect.width * this._baseFolderWindow.percentNum;
            B.y = $perentWinRect.y + 40;
            B.width = $perentWinRect.width * (1 - this._baseFolderWindow.percentNum);
            B.height -= 43;
            this._fileListPanel.setRect(B);
        };
        FolderProcessor.prototype.addOtherPanel = function () {
            win.LayerManager.getInstance().addPanel(new Panel, 200);
        };
        FolderProcessor.prototype.addUIContainer = function (value) {
            if (!this.folderPanel) {
                this.folderPanel = new Panel();
                this.folderPanel.x = 0;
                this.folderPanel.y = 0;
                this.folderPanel.width = 450;
                this.folderPanel.height = 250;
                win.LayerManager.getInstance().addPanel(this.folderPanel, 200);
                // this.addOtherPanel()
            }
            this.folderPanel.addUIContainer(value);
            //   layout.LayerManager.getInstance().mainTab.addUIContainer(value);
            //  UIManager.getInstance().addUIContainer(value);
        };
        FolderProcessor.prototype.listenModuleEvents = function () {
            return [
                new FolderEvent(FolderEvent.SHOW_FOLDER_PANEL),
                new FolderEvent(FolderEvent.RESET_FOLDE_WIN_SIZE),
                new FolderEvent(FolderEvent.EDITSCENE_RESET_SIZE),
                new FolderEvent(FolderEvent.LIST_DIS_ALL_FILE),
                new FolderEvent(FolderEvent.LIST_OSS_FOLDER_FILE),
            ];
        };
        return FolderProcessor;
    }(BaseProcessor));
    folder.FolderProcessor = FolderProcessor;
})(folder || (folder = {}));
//# sourceMappingURL=FolderProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var BaseEvent = Pan3d.BaseEvent;
    var MEvent_Material_Connect = /** @class */ (function (_super) {
        __extends(MEvent_Material_Connect, _super);
        function MEvent_Material_Connect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STARTDRAG = "MEvent_Material_Connect_startDrag";
        MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STOPDRAG = "MEvent_Material_Connect_stopDrag";
        MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE = "MEvent_Material_Connect_removeLine";
        MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_DOUBLUELINE = "MEvent_Material_Connect_doublueLine";
        return MEvent_Material_Connect;
    }(BaseEvent));
    materialui.MEvent_Material_Connect = MEvent_Material_Connect;
})(materialui || (materialui = {}));
//# sourceMappingURL=MEvent_Material_Connect.js.map
var materialui;
(function (materialui) {
    var NodeTreeItem = /** @class */ (function () {
        function NodeTreeItem() {
        }
        NodeTreeItem.prototype.getObj = function () {
            var obj = new Object;
            obj.inoutType = this.inoutType;
            obj.id = this.id;
            obj.type = this.type;
            return obj;
        };
        NodeTreeItem.prototype.otherNeedObj = function () {
            var obj = new Object;
            obj.id = this.id;
            obj.inoutType = this.inoutType;
            obj.pid = this.node.id;
            return obj;
        };
        NodeTreeItem.IN = "in";
        NodeTreeItem.OUT = "out";
        return NodeTreeItem;
    }());
    materialui.NodeTreeItem = NodeTreeItem;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeInputItem = /** @class */ (function (_super) {
        __extends(NodeTreeInputItem, _super);
        function NodeTreeInputItem() {
            return _super.call(this) || this;
        }
        Object.defineProperty(NodeTreeInputItem.prototype, "parentNodeItem", {
            get: function () {
                return this._parentNodeItem;
            },
            set: function (value) {
                this._parentNodeItem = value;
            },
            enumerable: true,
            configurable: true
        });
        NodeTreeInputItem.prototype.getObj = function () {
            var obj = _super.prototype.getObj.call(this);
            obj.parentObj = this.parentNodeItem ? this.parentNodeItem.otherNeedObj() : null;
            return obj;
        };
        return NodeTreeInputItem;
    }(materialui.NodeTreeItem));
    materialui.NodeTreeInputItem = NodeTreeInputItem;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeInputItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeOutoutItem = /** @class */ (function (_super) {
        __extends(NodeTreeOutoutItem, _super);
        function NodeTreeOutoutItem() {
            var _this = _super.call(this) || this;
            _this.sunNodeItems = new Array;
            _this.inoutType = materialui.NodeTreeItem.OUT;
            return _this;
        }
        NodeTreeOutoutItem.prototype.pushSunNode = function (nodeitem) {
            this.sunNodeItems.push(nodeitem);
        };
        NodeTreeOutoutItem.prototype.removeSunNode = function (nodeitem) {
            for (var i = 0; i < this.sunNodeItems.length; i++) {
                if (this.sunNodeItems[i] == nodeitem) {
                    this.sunNodeItems.splice(i, 1);
                    break;
                }
            }
        };
        NodeTreeOutoutItem.prototype.getObj = function () {
            var obj = _super.prototype.getObj.call(this);
            var ary = new Array;
            for (var i = 0; i < this.sunNodeItems.length; i++) {
                ary.push(this.sunNodeItems[i].otherNeedObj());
            }
            obj.sunObj = ary;
            return obj;
        };
        return NodeTreeOutoutItem;
    }(materialui.NodeTreeItem));
    materialui.NodeTreeOutoutItem = NodeTreeOutoutItem;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeOutoutItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var EventDispatcher = Pan3d.EventDispatcher;
    var BaseEvent = Pan3d.BaseEvent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Vector2D = Pan3d.Vector2D;
    var ItemMaterialUI = /** @class */ (function (_super) {
        __extends(ItemMaterialUI, _super);
        function ItemMaterialUI(name, $type, $inOut) {
            if ($inOut === void 0) { $inOut = true; }
            var _this = _super.call(this) || this;
            _this.outLineList = new Array;
            _this.titleLabeltext = name;
            _this.inOut = $inOut;
            if (_this.inOut) {
                _this.nodeTreeItem = new materialui.NodeTreeInputItem;
            }
            else {
                _this.nodeTreeItem = new materialui.NodeTreeOutoutItem;
            }
            _this.nodeTreeItem.name = name;
            _this.typets = $type;
            _this.drawSp();
            return _this;
        }
        ItemMaterialUI.prototype.removeOut = function ($line) {
            for (var i = 0; i < this.outLineList.length; i++) {
                if (this.outLineList[i] == $line) {
                    this.outLineList.splice(i, 1);
                    break;
                }
            }
            if (!this.inOut && this.outLineList.length == 0) {
                this.hasConnet = false;
                this.dispatchEvent(new BaseEvent("DisConnect"));
            }
        };
        ItemMaterialUI.prototype.removeIn = function () {
            this._inLine = null;
            if (this.inOut) {
                this.hasConnet = false;
                this.dispatchEvent(new BaseEvent("DisConnect"));
            }
        };
        ItemMaterialUI.prototype.setConnect = function () {
            this.hasConnet = true;
            this.dispatchEvent(new BaseEvent("Connect"));
        };
        ItemMaterialUI.prototype.removeAllLine = function () {
            var evt;
            for (var i = this.outLineList.length - 1; i >= 0; i--) {
                evt = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE);
                evt.line = this.outLineList[i];
                ModuleEventManager.dispatchEvent(evt);
            }
            if (this._inLine) {
                evt = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE);
                evt.line = this._inLine;
                ModuleEventManager.dispatchEvent(evt);
            }
        };
        Object.defineProperty(ItemMaterialUI.prototype, "typets", {
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value;
                this.nodeTreeItem.type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemMaterialUI.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
                this.pointframe.x = this._x;
                if (this.inOut) {
                    this.labelframe.x = this._x + 20;
                }
                else {
                    this.labelframe.x = this._x - 80;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemMaterialUI.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
                this.pointframe.y = this._y;
                this.labelframe.y = this._y - 2;
            },
            enumerable: true,
            configurable: true
        });
        ItemMaterialUI.prototype.getStagePoint = function () {
            return new Vector2D(this.pointframe.x + this.pointframe.parent.left + 10, this.pointframe.y + this.pointframe.parent.top + 10);
        };
        ItemMaterialUI.prototype.changeType = function ($type) {
            this.typets = $type;
            this.drawSp();
        };
        ItemMaterialUI.prototype.drawSp = function () {
            if (this.pointframe) {
                if (this._type == materialui.MaterialItemType.FLOAT) {
                    this.pointframe.goToAndStop(2);
                }
                else if (this._type == materialui.MaterialItemType.VEC2) {
                    this.pointframe.goToAndStop(3);
                }
                else if (this._type == materialui.MaterialItemType.VEC3) {
                    this.pointframe.goToAndStop(0);
                }
                else if (this._type == materialui.MaterialItemType.VEC4) {
                    this.pointframe.goToAndStop(1);
                }
                else if (this._type == materialui.MaterialItemType.UNDEFINE) {
                    this.pointframe.goToAndStop(4);
                }
            }
        };
        Object.defineProperty(ItemMaterialUI.prototype, "inLine", {
            get: function () {
                return this._inLine;
            },
            set: function (value) {
                this._inLine = value;
                //NodeTreeInputItem(nodeTreeItem) = _inLine.fromNode.nodeTreeItem;
            },
            enumerable: true,
            configurable: true
        });
        ItemMaterialUI.prototype.drawLine = function () {
            for (var i = 0; i < this.outLineList.length; i++) {
                this.outLineList[i].draw();
            }
            if (this._inLine) {
                this._inLine.draw();
            }
        };
        return ItemMaterialUI;
    }(EventDispatcher));
    materialui.ItemMaterialUI = ItemMaterialUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=ItemMaterialUI.js.map
var materialui;
(function (materialui) {
    var NodeTree = /** @class */ (function () {
        function NodeTree() {
            this.priority = -1;
            this.id = -1;
            this.inputVec = new Array;
            this.outputVec = new Array;
        }
        NodeTree.prototype.addInput = function ($in) {
            var initem = $in;
            if (!initem) {
                throw new Error("转换失败");
            }
            this.inputVec.push(initem);
            initem.node = this;
            this.refreshID();
        };
        NodeTree.prototype.removeInput = function ($in) {
            for (var i = 0; i < this.inputVec.length; i++) {
                if (this.inputVec[i] == $in) {
                    this.inputVec.splice(i, 1);
                    break;
                }
            }
            this.refreshID();
        };
        NodeTree.prototype.addOutput = function ($in) {
            var initem = $in;
            if (!initem) {
                throw new Error("转换失败");
            }
            this.outputVec.push(initem);
            initem.node = this;
            this.refreshID();
        };
        NodeTree.prototype.removeOutput = function ($out) {
            for (var i = 0; i < this.outputVec.length; i++) {
                if (this.outputVec[i] == $out) {
                    this.outputVec.splice(i, 1);
                    break;
                }
            }
            this.refreshID();
        };
        NodeTree.getID = function ($constID) {
            if (NodeTree.jsMode) {
                return "[" + $constID + "]";
            }
            else {
                return String($constID);
            }
        };
        NodeTree.prototype.refreshID = function () {
            for (var i = 0; i < this.inputVec.length; i++) {
                this.inputVec[i].id = i;
            }
            for (i = 0; i < this.outputVec.length; i++) {
                this.outputVec[i].id = i;
            }
        };
        NodeTree.prototype.getObj = function () {
            var obj = new Object;
            obj.id = this.id;
            obj.type = this.type;
            obj.data = this.ui.getData();
            var inAry = new Array;
            for (var i = 0; i < this.inputVec.length; i++) {
                inAry.push(this.inputVec[i].getObj());
            }
            obj.inAry = inAry;
            var outAry = new Array;
            for (i = 0; i < this.outputVec.length; i++) {
                outAry.push(this.outputVec[i].getObj());
            }
            obj.outAry = outAry;
            return obj;
        };
        Object.defineProperty(NodeTree.prototype, "isDynamic", {
            get: function () {
                return this._isDynamic;
            },
            set: function (value) {
                this._isDynamic = value;
            },
            enumerable: true,
            configurable: true
        });
        NodeTree.prototype.checkInput = function () {
            for (var i = 0; i < this.inputVec.length; i++) {
                if (!this.inputVec[i].parentNodeItem) {
                    return false;
                }
            }
            return true;
        };
        NodeTree.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".xyz";
            }
            else if ($id == 1) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
            }
            else if ($id == 2) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".y";
            }
            else if ($id == 3) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".z";
            }
            else if ($id == 4) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".w";
            }
            else {
                return materialui.CompileTwo.FT + this.regResultTemp.id;
            }
        };
        NodeTree.prototype.releaseUse = function () {
            var allCompilde = true;
            for (var i = 0; i < this.outputVec.length; i++) {
                var sunAry = this.outputVec[i].sunNodeItems;
                var breakAble = false;
                for (var j = 0; j < sunAry.length; j++) {
                    if (!sunAry[j].hasCompiled) {
                        allCompilde = false;
                        breakAble = true;
                        break;
                    }
                }
                if (breakAble) {
                    break;
                }
            }
            if (allCompilde) {
                if (this.regResultTemp) {
                    this.regResultTemp.inUse = false;
                }
            }
        };
        NodeTree.TEX = "tex";
        NodeTree.TEX3D = "tex3d";
        NodeTree.TEXCUBE = "texCube";
        NodeTree.OP = "op";
        NodeTree.ADD = "add";
        NodeTree.SUB = "sub";
        NodeTree.MUL = "mul";
        NodeTree.FUN = "fun";
        NodeTree.DIV = "div";
        NodeTree.RCP = "rcp";
        NodeTree.MIN = "min";
        NodeTree.MAX = "max";
        NodeTree.FRC = "frc";
        NodeTree.SQT = "sqt";
        NodeTree.RSQ = "rsq";
        NodeTree.POW = "pow";
        NodeTree.LOG = "log";
        NodeTree.EXP = "exp";
        NodeTree.NRM = "nrm";
        NodeTree.SIN = "sin";
        NodeTree.COS = "cos";
        NodeTree.CRS = "crs";
        NodeTree.DP3 = "dp3";
        NodeTree.DP4 = "dp4";
        NodeTree.ABS = "abs";
        NodeTree.NEG = "neg";
        NodeTree.SAT = "sat";
        NodeTree.LERP = "lerp";
        NodeTree.VEC3 = "vec3";
        NodeTree.VEC2 = "vec2";
        NodeTree.FLOAT = "float";
        NodeTree.NORMAL = "normal";
        NodeTree.TIME = "time";
        NodeTree.TEXCOORD = "texcoord";
        NodeTree.TEXCOORDLIGHT = "texlightuv";
        NodeTree.DYNVEC3 = "dynvec3";
        NodeTree.PTCOLOR = "ptColor";
        NodeTree.VERCOLOR = "verColor";
        NodeTree.HEIGHTINFO = "heightinfo";
        NodeTree.FRESNEL = "fresnel";
        NodeTree.REFRACTION = "refraction";
        NodeTree.PANNER = "panner";
        NodeTree.jsMode = false;
        return NodeTree;
    }());
    materialui.NodeTree = NodeTree;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTree.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeDynamic = /** @class */ (function (_super) {
        __extends(NodeTreeDynamic, _super);
        function NodeTreeDynamic() {
            return _super.call(this) || this;
        }
        NodeTreeDynamic.prototype.getComponentID = function ($id) {
            var output = this.outputVec[0];
            if ($id == 0) {
                if (output.type == materialui.MaterialItemType.VEC4) {
                    return materialui.CompileTwo.FT + this.regResultTemp.id;
                }
                else if (output.type == materialui.MaterialItemType.VEC3) {
                    return materialui.CompileTwo.FT + this.regResultTemp.id + ".xyz";
                }
                else if (output.type == materialui.MaterialItemType.VEC2) {
                    return materialui.CompileTwo.FT + this.regResultTemp.id + ".xy";
                }
                else if (output.type == materialui.MaterialItemType.FLOAT) {
                    return materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
                }
            }
            else if ($id == 1) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
            }
            else if ($id == 2) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".y";
            }
            else if ($id == 3) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".z";
            }
            else if ($id == 4) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".xy";
            }
            else if ($id == 5) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".xyz";
            }
            else if ($id == 6) {
                return materialui.CompileTwo.FT + this.regResultTemp.id + ".w";
            }
            return null;
        };
        return NodeTreeDynamic;
    }(materialui.NodeTree));
    materialui.NodeTreeDynamic = NodeTreeDynamic;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeDynamic.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeOP = /** @class */ (function (_super) {
        __extends(NodeTreeOP, _super);
        function NodeTreeOP() {
            var _this = _super.call(this) || this;
            _this.writeZbuffer = true;
            return _this;
        }
        NodeTreeOP.prototype.checkInput = function () {
            return true;
        };
        return NodeTreeOP;
    }(materialui.NodeTree));
    materialui.NodeTreeOP = NodeTreeOP;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeOP.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeTex = /** @class */ (function (_super) {
        __extends(NodeTreeTex, _super);
        function NodeTreeTex() {
            return _super.call(this) || this;
        }
        NodeTreeTex.prototype.checkInput = function () {
            return true;
        };
        return NodeTreeTex;
    }(materialui.NodeTree));
    materialui.NodeTreeTex = NodeTreeTex;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeTex.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeAdd = /** @class */ (function (_super) {
        __extends(NodeTreeAdd, _super);
        function NodeTreeAdd() {
            return _super.call(this) || this;
        }
        return NodeTreeAdd;
    }(materialui.NodeTreeDynamic));
    materialui.NodeTreeAdd = NodeTreeAdd;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeAdd.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeSub = /** @class */ (function (_super) {
        __extends(NodeTreeSub, _super);
        function NodeTreeSub() {
            return _super.call(this) || this;
        }
        return NodeTreeSub;
    }(materialui.NodeTree));
    materialui.NodeTreeSub = NodeTreeSub;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeSub.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeMul = /** @class */ (function (_super) {
        __extends(NodeTreeMul, _super);
        function NodeTreeMul() {
            return _super.call(this) || this;
        }
        return NodeTreeMul;
    }(materialui.NodeTreeDynamic));
    materialui.NodeTreeMul = NodeTreeMul;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeMul.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeDiv = /** @class */ (function (_super) {
        __extends(NodeTreeDiv, _super);
        function NodeTreeDiv() {
            return _super.call(this) || this;
        }
        return NodeTreeDiv;
    }(materialui.NodeTreeDynamic));
    materialui.NodeTreeDiv = NodeTreeDiv;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeDiv.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeSin = /** @class */ (function (_super) {
        __extends(NodeTreeSin, _super);
        function NodeTreeSin() {
            return _super.call(this) || this;
        }
        NodeTreeSin.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                var str = materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
                return str;
            }
            return null;
        };
        return NodeTreeSin;
    }(materialui.NodeTree));
    materialui.NodeTreeSin = NodeTreeSin;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeSin.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeCos = /** @class */ (function (_super) {
        __extends(NodeTreeCos, _super);
        function NodeTreeCos() {
            return _super.call(this) || this;
        }
        NodeTreeCos.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                var str = materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
                return str;
            }
            return null;
        };
        return NodeTreeCos;
    }(materialui.NodeTree));
    materialui.NodeTreeCos = NodeTreeCos;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeCos.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector3D = Pan3d.Vector3D;
    var NodeTreeVec3 = /** @class */ (function (_super) {
        __extends(NodeTreeVec3, _super);
        function NodeTreeVec3() {
            var _this = _super.call(this) || this;
            _this.constVec3 = new Vector3D;
            _this.canDynamic = true;
            return _this;
        }
        NodeTreeVec3.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                return materialui.CompileTwo.FC + materialui.NodeTree.getID(this.regResultConst.id) + ".xyz";
            }
            else if ($id == 1) {
                return materialui.CompileTwo.FC + materialui.NodeTree.getID(this.regResultConst.id) + ".w";
            }
            else if ($id == 2) {
                return materialui.CompileTwo.FC + materialui.NodeTree.getID(this.regResultConst.id);
            }
            return null;
        };
        return NodeTreeVec3;
    }(materialui.NodeTree));
    materialui.NodeTreeVec3 = NodeTreeVec3;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeVec3.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var NodeTreeVec2 = /** @class */ (function (_super) {
        __extends(NodeTreeVec2, _super);
        function NodeTreeVec2() {
            var _this = _super.call(this) || this;
            _this.constValue = new Vector2D;
            _this.canDynamic = true;
            return _this;
        }
        NodeTreeVec2.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                var str = materialui.CompileTwo.FC + materialui.NodeTree.getID(this.regResultConst.id);
                if (this.regConstIndex == 0) {
                    str += ".xy";
                }
                else if (this.regConstIndex == 1) {
                    str += ".yz";
                }
                else if (this.regConstIndex == 2) {
                    str += ".zw";
                }
                return str;
            }
            return null;
        };
        return NodeTreeVec2;
    }(materialui.NodeTree));
    materialui.NodeTreeVec2 = NodeTreeVec2;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeVec2.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeFloat = /** @class */ (function (_super) {
        __extends(NodeTreeFloat, _super);
        function NodeTreeFloat() {
            var _this = _super.call(this) || this;
            _this.canDynamic = true;
            return _this;
        }
        NodeTreeFloat.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                var str = materialui.CompileTwo.FC + materialui.NodeTree.getID(this.regResultConst.id);
                if (this.regConstIndex == 0) {
                    str += ".x";
                }
                else if (this.regConstIndex == 1) {
                    str += ".y";
                }
                else if (this.regConstIndex == 2) {
                    str += ".z";
                }
                else if (this.regConstIndex == 3) {
                    str += ".w";
                }
                return str;
            }
            return null;
        };
        return NodeTreeFloat;
    }(materialui.NodeTree));
    materialui.NodeTreeFloat = NodeTreeFloat;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeFloat.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeFresnel = /** @class */ (function (_super) {
        __extends(NodeTreeFresnel, _super);
        function NodeTreeFresnel() {
            return _super.call(this) || this;
        }
        NodeTreeFresnel.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                var str = materialui.CompileTwo.FT + this.regResultTemp.id + ".x";
                return str;
            }
            return null;
        };
        return NodeTreeFresnel;
    }(materialui.NodeTree));
    materialui.NodeTreeFresnel = NodeTreeFresnel;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeFresnel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var NodeTreeLightuv = /** @class */ (function (_super) {
        __extends(NodeTreeLightuv, _super);
        function NodeTreeLightuv() {
            var _this = _super.call(this) || this;
            _this.constValue = new Vector2D;
            _this.canDynamic = true;
            return _this;
        }
        NodeTreeLightuv.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                return "lightuv.xy";
            }
            return null;
        };
        return NodeTreeLightuv;
    }(materialui.NodeTree));
    materialui.NodeTreeLightuv = NodeTreeLightuv;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeLightuv.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var NodeTreeTexCoord = /** @class */ (function (_super) {
        __extends(NodeTreeTexCoord, _super);
        function NodeTreeTexCoord() {
            var _this = _super.call(this) || this;
            _this.constValue = new Vector2D;
            _this.canDynamic = true;
            return _this;
        }
        NodeTreeTexCoord.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                return "uvpos.xy";
            }
            return null;
        };
        return NodeTreeTexCoord;
    }(materialui.NodeTree));
    materialui.NodeTreeTexCoord = NodeTreeTexCoord;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeTexCoord.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var NodeTreePanner = /** @class */ (function (_super) {
        __extends(NodeTreePanner, _super);
        function NodeTreePanner() {
            var _this = _super.call(this) || this;
            _this.coordinateValue = new Vector2D(1, 1);
            _this.speedValue = new Vector2D(0, 0);
            return _this;
        }
        NodeTreePanner.prototype.getComponentID = function ($id) {
            var str;
            if ($id == 0) {
                str = materialui.CompileTwo.FT + this.regResultTemp.id + ".xy";
            }
            return str;
        };
        NodeTreePanner.prototype.checkInput = function () {
            return true;
        };
        return NodeTreePanner;
    }(materialui.NodeTree));
    materialui.NodeTreePanner = NodeTreePanner;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreePanner.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var NodeTreeTime = /** @class */ (function (_super) {
        __extends(NodeTreeTime, _super);
        function NodeTreeTime() {
            var _this = _super.call(this) || this;
            _this.speed = 1;
            _this.timeValue = new Vector2D(1, 1);
            return _this;
        }
        NodeTreeTime.prototype.getComponentID = function ($id) {
            if ($id == 0) {
                return "time";
            }
            return null;
        };
        return NodeTreeTime;
    }(materialui.NodeTree));
    materialui.NodeTreeTime = NodeTreeTime;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeTime.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector3D = Pan3d.Vector3D;
    var NodeTreeNormal = /** @class */ (function (_super) {
        __extends(NodeTreeNormal, _super);
        function NodeTreeNormal() {
            var _this = _super.call(this) || this;
            _this.constVec3 = new Vector3D;
            return _this;
        }
        NodeTreeNormal.prototype.getComponentID = function ($id) {
            return "normalVec.xyz";
        };
        return NodeTreeNormal;
    }(materialui.NodeTree));
    materialui.NodeTreeNormal = NodeTreeNormal;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeNormal.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var DataMathFunNode = /** @class */ (function () {
        function DataMathFunNode($name, $type) {
            this.name = $name;
            this.type = $type;
        }
        return DataMathFunNode;
    }());
    materialui.DataMathFunNode = DataMathFunNode;
    var NodeTreeFun = /** @class */ (function (_super) {
        __extends(NodeTreeFun, _super);
        function NodeTreeFun() {
            return _super.call(this) || this;
        }
        NodeTreeFun.isNeedChangePanel = function ($a, $b) {
            var sortID = $a.split(materialui.CompileTwo.LN)[0].indexOf($b.split(materialui.CompileTwo.LN)[0]);
            return sortID == -1;
        };
        NodeTreeFun.getMathFunName = function ($agalStr) {
            var $tittlestr = $agalStr.split(materialui.CompileTwo.LN)[0];
            var $funName = $tittlestr.split(materialui.CompileTwo.SPACE)[1].split(materialui.CompileTwo.LEFT_PARENTH)[0]; //函数名
            return $funName;
        };
        NodeTreeFun.getMathFunReturnType = function ($agalStr) {
            var $tittlestr = $agalStr.split(materialui.CompileTwo.LN)[0];
            var $returnType = $tittlestr.split(materialui.CompileTwo.SPACE)[0]; //返回类型
            return $returnType;
        };
        NodeTreeFun.getDataMathFunArr = function ($agalStr) {
            var $tittlestr = $agalStr.split(materialui.CompileTwo.LN)[0];
            var left = $tittlestr.indexOf(materialui.CompileTwo.LEFT_PARENTH);
            var right = $tittlestr.indexOf(materialui.CompileTwo.RIGHT_PARENTH);
            var $kv = $tittlestr.substring(left + 1, right).split(materialui.CompileTwo.COMMA);
            var $arr = new Array();
            ;
            for (var i = 0; i < $kv.length; i++) {
                if ($kv[i].split(materialui.CompileTwo.LN).length != 2) {
                    var atype = $kv[i].split(materialui.CompileTwo.SPACE)[0];
                    var aname = $kv[i].split(materialui.CompileTwo.SPACE)[1];
                    // console.log(atype, aname);
                    $arr.push(new DataMathFunNode(aname, atype));
                }
                else {
                    console.log("有错");
                }
            }
            return $arr;
        };
        return NodeTreeFun;
    }(materialui.NodeTreeDynamic));
    materialui.NodeTreeFun = NodeTreeFun;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeTreeFun.js.map
var materialui;
(function (materialui) {
    var Vector3D = Pan3d.Vector3D;
    var MaterialBaseData = /** @class */ (function () {
        function MaterialBaseData() {
            this.baseColor = new Vector3D;
            this.roughness = 0;
            this.specular = 0;
            this.metallic = 0;
            this.usePbr = false;
        }
        MaterialBaseData.prototype.setData = function (obj) {
            if (!obj) {
                return;
            }
            this.baseColorUrl = obj.baseColorUrl;
            if (obj.baseColor) {
                this.baseColor = new Vector3D(obj.baseColor.x, obj.baseColor.y, obj.baseColor.z);
            }
            this.roughness = obj.roughness;
            this.specular = obj.specular;
            this.metallic = obj.metallic;
            this.normalUrl = obj.normalUrl;
            this.usePbr = obj.usePbr;
            this.url = obj.url;
        };
        return MaterialBaseData;
    }());
    materialui.MaterialBaseData = MaterialBaseData;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialBaseData.js.map
var materialui;
(function (materialui) {
    var LabelTextFont = Pan3d.LabelTextFont;
    var UIManager = Pan3d.UIManager;
    var TextAlign = Pan3d.TextAlign;
    var PanelContainer = /** @class */ (function () {
        function PanelContainer($panel, $label, $render) {
            this.panel = $panel;
            this.labelRender = $label;
            this.uiRender = $render;
            if (!PanelContainer.strItem) {
                PanelContainer.strItem = new Array();
                //PanelContainer.strItem.push("out")
                //PanelContainer.strItem.push("rgb")
                //PanelContainer.strItem.push("r")
                //PanelContainer.strItem.push("g")
                //PanelContainer.strItem.push("b")
                //PanelContainer.strItem.push("a")
                //PanelContainer.strItem.push("rgba")
                //PanelContainer.strItem.push("UV")
                //PanelContainer.strItem.push("xy")
                //PanelContainer.strItem.push("alpha")
                //PanelContainer.strItem.push("coordinate")
                //PanelContainer.strItem.push("speed")
            }
        }
        PanelContainer.prototype.removeChild = function ($ui) {
            this.panel.removeChild($ui.pointframe);
            this.panel.removeChild($ui.labelframe);
            $ui.pointframe = null;
            $ui.labelframe = null;
            $ui.parent = null;
        };
        PanelContainer.prototype.addChild = function ($ui) {
            if (!$ui.pointframe) {
                $ui.pointframe = this.panel.addEvntBut("a_point_frame", this.uiRender);
                $ui.labelframe = this.panel.addEvntBut("a_label_txt", this.labelRender);
                $ui.labelframe.width = $ui.labelframe.baseRec.width * 0.5;
                $ui.labelframe.height = $ui.labelframe.baseRec.height * 0.5;
                $ui.pointframe.data = $ui;
            }
            var $labelKey = $ui.titleLabeltext;
            var $textAlignStr;
            if ($ui.inOut) {
                $labelKey += "_left";
                $textAlignStr = TextAlign.LEFT;
            }
            else {
                $labelKey += "_right";
                $textAlignStr = TextAlign.RIGHT;
            }
            var $num = PanelContainer.strItem.indexOf($labelKey);
            if ($num == -1) {
                PanelContainer.strItem.push($labelKey);
                $num = PanelContainer.strItem.indexOf($labelKey);
                $ui.labelframe.goToAndStop($num);
                this.drawTextToName($ui.labelframe, $ui.titleLabeltext, $textAlignStr);
            }
            $ui.labelframe.goToAndStop($num);
            $ui.drawSp();
        };
        PanelContainer.prototype.drawTextToName = function ($ui, $str, isAlign) {
            var $toRect = $ui.getSkinCtxRect();
            var $ctx = UIManager.getInstance().getContext2D($toRect.width, $toRect.height, false);
            LabelTextFont.writeSingleLabelToCtx($ctx, $str, 24, 0, 5, isAlign);
            $ui.drawToCtx(materialui.BaseMaterialNodeUI.baseUIAtlas, $ctx);
        };
        return PanelContainer;
    }());
    materialui.PanelContainer = PanelContainer;
})(materialui || (materialui = {}));
//# sourceMappingURL=PanelContainer.js.map
var materialui;
(function (materialui) {
    var MaterialItemType = /** @class */ (function () {
        function MaterialItemType() {
        }
        MaterialItemType.FLOAT = "float";
        MaterialItemType.VEC2 = "vec2";
        MaterialItemType.VEC3 = "vec3";
        MaterialItemType.VEC4 = "vec4";
        MaterialItemType.UNDEFINE = "undefine";
        return MaterialItemType;
    }());
    materialui.MaterialItemType = MaterialItemType;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialItemType.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var UIManager = Pan3d.UIManager;
    var Vector2D = Pan3d.Vector2D;
    var TextAlign = Pan3d.TextAlign;
    var LabelTextFont = Pan3d.LabelTextFont;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Scene_data = Pan3d.Scene_data;
    var UIPanel = win.UIPanel;
    var BaseMaterialNodeUI = /** @class */ (function (_super) {
        __extends(BaseMaterialNodeUI, _super);
        function BaseMaterialNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.layer = 0;
            _this.name = "BaseMaterialNodeUI" + random(9999999);
            _this.width = 200;
            _this.height = 200;
            _this._bottomRender = new UIRenderComponent;
            _this.addRender(_this._bottomRender);
            _this._midRender = new UIRenderComponent;
            _this.addRender(_this._midRender);
            _this._labelRender = new UIRenderComponent;
            _this.addRender(_this._labelRender);
            _this._topRender = new UIRenderComponent;
            _this.addRender(_this._topRender);
            _this._bottomRender.uiAtlas = BaseMaterialNodeUI.baseUIAtlas;
            _this._midRender.uiAtlas = BaseMaterialNodeUI.baseUIAtlas;
            _this._labelRender.uiAtlas = BaseMaterialNodeUI.baseUIAtlas;
            _this._topRender.uiAtlas = BaseMaterialNodeUI.baseUIAtlas;
            _this._container = new materialui.PanelContainer(_this, _this._labelRender, _this._topRender);
            _this.loadConfigCom();
            return _this;
        }
        BaseMaterialNodeUI.prototype.setInItemByData = function (ary) {
        };
        BaseMaterialNodeUI.prototype.setOutItemByData = function (ary) {
        };
        BaseMaterialNodeUI.prototype.setData = function (obj) {
            this.left = obj.x + 500;
            this.top = obj.y + 300;
            this.nodeTree.isDynamic = obj.isDynamic;
            this.nodeTree.paramName = obj.paramName;
        };
        BaseMaterialNodeUI.prototype.getData = function () {
            var obj = new Object;
            obj.x = this.left - 500;
            obj.y = this.top - 300;
            obj.name = this.name;
            obj.isDynamic = this.nodeTree.isDynamic;
            obj.paramName = this.nodeTree.paramName;
            return obj;
        };
        BaseMaterialNodeUI.prototype.getObj = function () {
            return this.nodeTree.getObj();
        };
        BaseMaterialNodeUI.prototype.resetBgSize = function () {
            this.a_cell_base_bg.height = this.height;
            this.a_select_line.x = 0;
            this.a_select_line.y = 0;
            this.a_select_line.width = this.width;
            this.a_select_line.height = this.height + 25;
        };
        BaseMaterialNodeUI.prototype.loadConfigCom = function () {
            this.a_cell_base_bg = this._bottomRender.getComponent("a_cell_base_bg");
            this.addChild(this.a_cell_base_bg);
            this.a_tittle_bg = this.addEvntBut("a_tittle_bg", this._bottomRender);
            this.a_select_line = this._topRender.getComponent("a_select_line");
            this.a_panel_title_frame = this._topRender.getComponent("a_panel_title_frame");
            this.a_panel_title_frame.goToAndStop(BaseMaterialNodeUI.titleFrameId++);
            this.a_panel_title_frame.y = 5;
            this.a_panel_title_frame.x = 20;
            this.a_panel_title_frame.width = this.a_panel_title_frame.baseRec.width * 0.6;
            this.a_panel_title_frame.height = this.a_panel_title_frame.baseRec.height * 0.6;
            this.addChild(this.a_panel_title_frame);
            this.a_tittle_bg.x = 0;
            this.a_tittle_bg.y = 0;
            this.a_tittle_bg.goToAndStop(0);
            this.a_cell_base_bg.x = 0;
            this.a_cell_base_bg.y = this.a_tittle_bg.height;
            this.inPutItemVec = new Array;
            this.outPutItemVec = new Array;
            this.resetBgSize();
            this.drawTitleToFrame("材质");
        };
        BaseMaterialNodeUI.prototype.drawTitleToFrame = function ($str) {
            this.tittleStr = $str;
            this.drawTextToName(this.a_panel_title_frame, $str);
            this.resetBgSize();
        };
        BaseMaterialNodeUI.prototype.drawTextToName = function ($ui, $str) {
            var $toRect = $ui.getSkinCtxRect();
            var $ctx = UIManager.getInstance().getContext2D($toRect.width, $toRect.height, false);
            LabelTextFont.writeSingleLabelToCtx($ctx, $str, 20, 0, 0, TextAlign.LEFT);
            $ui.drawToCtx(this._bottomRender.uiAtlas, $ctx);
        };
        BaseMaterialNodeUI.prototype.addItems = function ($nodeUI) {
            if ($nodeUI.inOut) {
                if (this.inPutItemVec.indexOf($nodeUI) == -1) {
                    this.inPutItemVec.push($nodeUI);
                    this.nodeTree.addInput($nodeUI.nodeTreeItem);
                }
            }
            else {
                if (this.outPutItemVec.indexOf($nodeUI) == -1) {
                    this.outPutItemVec.push($nodeUI);
                    this.nodeTree.addOutput($nodeUI.nodeTreeItem);
                }
            }
            $nodeUI.parent = this;
            this._container.addChild($nodeUI);
            this.refreshNodePos();
        };
        BaseMaterialNodeUI.prototype.removeItem = function ($nodeUI) {
            for (var i = 0; i < this.inPutItemVec.length; i++) {
                if (this.inPutItemVec[i] == $nodeUI) {
                    this.inPutItemVec.splice(i, 1);
                }
            }
            this.nodeTree.removeInput($nodeUI.nodeTreeItem);
            for (i = 0; i < this.outPutItemVec.length; i++) {
                if (this.outPutItemVec[i] == $nodeUI) {
                    this.outPutItemVec.splice(i, 1);
                }
            }
            this.nodeTree.removeOutput($nodeUI.nodeTreeItem);
            if ($nodeUI.parent) {
                this._container.removeChild($nodeUI);
            }
            this.refreshNodePos();
        };
        BaseMaterialNodeUI.prototype.refreshNodePos = function () {
            for (var i = 0; i < this.inPutItemVec.length; i++) {
                this.inPutItemVec[i].y = this.gap * i + 30;
                this.inPutItemVec[i].x = 10;
            }
            for (i = 0; i < this.outPutItemVec.length; i++) {
                this.outPutItemVec[i].y = this.gap * i + 30;
                this.outPutItemVec[i].x = 130;
            }
        };
        BaseMaterialNodeUI.prototype.removeAllNodeLine = function () {
            for (var i = 0; i < this.inPutItemVec.length; i++) {
                this.inPutItemVec[i].removeAllLine();
            }
            for (i = 0; i < this.outPutItemVec.length; i++) {
                this.outPutItemVec[i].removeAllLine();
            }
        };
        BaseMaterialNodeUI.prototype.butClik = function (evt) {
            switch (evt.target) {
                case this.a_tittle_bg:
                    this.addStageMoveEvets(evt);
                    break;
                default:
                    this.clikUiEvent(evt);
                    break;
            }
            ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SELECT_MATERIAL_NODE_UI), this);
        };
        BaseMaterialNodeUI.prototype.getInItem = function ($id) {
            return this.inPutItemVec[$id];
        };
        BaseMaterialNodeUI.prototype.getOutItem = function ($id) {
            return this.outPutItemVec[$id];
        };
        BaseMaterialNodeUI.prototype.clikUiEvent = function ($mouseEvt) {
            var $itemMaterialUI = this.getPointFrameTagetFoItemVec($mouseEvt.target);
            if (AppData.altKey) {
                $itemMaterialUI.removeAllLine();
                return;
            }
            if ($itemMaterialUI) {
                var $MEvent_Material_Connect = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STARTDRAG);
                $MEvent_Material_Connect.itemNode = $itemMaterialUI;
                ModuleEventManager.dispatchEvent($MEvent_Material_Connect);
            }
        };
        BaseMaterialNodeUI.prototype.getPointFrameTagetFoItemVec = function ($targer) {
            for (var i = 0; i < this.inPutItemVec.length; i++) {
                if (this.inPutItemVec[i].pointframe == $targer) {
                    return this.inPutItemVec[i];
                }
            }
            for (i = 0; i < this.outPutItemVec.length; i++) {
                if (this.outPutItemVec[i].pointframe == $targer) {
                    return this.outPutItemVec[i];
                }
            }
            return null;
        };
        BaseMaterialNodeUI.prototype.addStageMoveEvets = function ($e) {
            this.lastPanelPos = new Vector2D(this.left, this.top);
            this.mouseXY = new Vector2D($e.x, $e.y);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.onUp, this);
        };
        BaseMaterialNodeUI.prototype.onMove = function ($e) {
            this.left = this.lastPanelPos.x + ($e.x - this.mouseXY.x) / materialui.MtlUiData.Scale;
            this.top = this.lastPanelPos.y + ($e.y - this.mouseXY.y) / materialui.MtlUiData.Scale;
            this.resize();
            this.drawLine();
        };
        BaseMaterialNodeUI.prototype.drawLine = function () {
            for (var i = 0; i < this.inPutItemVec.length; i++) {
                this.inPutItemVec[i].drawLine();
            }
            for (i = 0; i < this.outPutItemVec.length; i++) {
                this.outPutItemVec[i].drawLine();
            }
        };
        BaseMaterialNodeUI.prototype.onUp = function ($e) {
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.onMove, this);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Up, this.onUp, this);
        };
        Object.defineProperty(BaseMaterialNodeUI.prototype, "select", {
            get: function () {
                return this._select;
            },
            set: function (value) {
                this._select = value;
                this.setUiListVisibleByItem([this.a_select_line], this._select);
                if (this._select) {
                    if (this instanceof materialui.MathFunNodeUI) {
                        //  prop.TextureFunPanel.getInstance().showPanel(this)
                        prop.PropModel.getInstance().showTextureUiPanel(this);
                    }
                    else {
                        prop.PropModel.getInstance().showTextureUiPanel(this);
                        prop.TextureFunPanel.getInstance().hidePanel();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        BaseMaterialNodeUI.prototype.showDynamic = function () {
        };
        BaseMaterialNodeUI.titleFrameId = 0;
        return BaseMaterialNodeUI;
    }(UIPanel));
    materialui.BaseMaterialNodeUI = BaseMaterialNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=BaseMaterialNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var UIManager = Pan3d.UIManager;
    var TextureSampleNodeUI = /** @class */ (function (_super) {
        __extends(TextureSampleNodeUI, _super);
        function TextureSampleNodeUI() {
            var _this = _super.call(this) || this;
            _this.name = "TextureSampleNodeUI" + random(9999999);
            _this.left = 400;
            _this.top = 100;
            _this._wrap = 0;
            _this._mipmap = 0;
            _this._filter = 0;
            _this.nodeTree = new materialui.NodeTreeTex;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TEX;
            _this.width = 162;
            _this.height = 140;
            _this.initItem();
            _this.resetBgSize();
            _this.drawTitleToFrame("纹理采样");
            _this.a_texture_pic_frame = _this.getTexturePicUi();
            _this.a_texture_pic_frame.x = 20;
            _this.a_texture_pic_frame.y = 55;
            return _this;
        }
        TextureSampleNodeUI.prototype.drawTextureUrlToFrame = function ($ui, $img) {
            var $toRect = $ui.getSkinCtxRect();
            var $ctx = UIManager.getInstance().getContext2D($toRect.width, $toRect.height, false);
            $ctx.drawImage($img, 0, 0, $toRect.width, $toRect.height);
            $ui.drawToCtx(this._topRender.uiAtlas, $ctx);
        };
        TextureSampleNodeUI.prototype.getTexturePicUi = function () {
            var $ui = this.addEvntBut("a_texture_pic_frame", this._topRender);
            $ui.goToAndStop(TextureSampleNodeUI.texture_pic_frame_ID++);
            return $ui;
        };
        TextureSampleNodeUI.prototype.initItem = function () {
            this.uvItem = new materialui.ItemMaterialUI("UV", materialui.MaterialItemType.VEC2);
            this.rgbItem = new materialui.ItemMaterialUI("rgb", materialui.MaterialItemType.VEC3, false);
            this.rItem = new materialui.ItemMaterialUI("r", materialui.MaterialItemType.FLOAT, false);
            this.gItem = new materialui.ItemMaterialUI("g", materialui.MaterialItemType.FLOAT, false);
            this.bItem = new materialui.ItemMaterialUI("b", materialui.MaterialItemType.FLOAT, false);
            this.aItem = new materialui.ItemMaterialUI("a", materialui.MaterialItemType.FLOAT, false);
            this.rgbaItem = new materialui.ItemMaterialUI("rgba", materialui.MaterialItemType.VEC4, false);
            this.addItems(this.uvItem);
            this.addItems(this.rgbItem);
            this.addItems(this.rItem);
            this.addItems(this.gItem);
            this.addItems(this.bItem);
            this.addItems(this.aItem);
            this.addItems(this.rgbaItem);
        };
        TextureSampleNodeUI.prototype.creatBase = function ($url) {
            var vo = this.nodeTree;
            vo.url = $url;
            vo.wrap = this._wrap;
            vo.mipmap = this._mipmap;
            vo.filter = this._filter;
            vo.permul = false;
            this.drawPicBmp();
        };
        TextureSampleNodeUI.prototype.drawPicBmp = function () {
            var _this = this;
            var $url = this.nodeTree.url;
            var $img = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + $url);
            if ($img) {
                this.drawTextureUrlToFrame(this.a_texture_pic_frame, $img);
            }
            else {
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.IMG_TYPE, function ($img) {
                    _this.drawTextureUrlToFrame(_this.a_texture_pic_frame, $img);
                });
            }
        };
        TextureSampleNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            obj.url = String(obj.url).replace(Scene_data.fileRoot, ""); //兼容原来相对路径
            this.nodeTree.url = obj.url;
            this.isMain = obj.isMain;
            this.wrap = obj.wrap;
            this.mipmap = obj.mipmap;
            this.filter = obj.filter;
            this.permul = obj.permul;
            this.drawPicBmp();
            this.showDynamic();
        };
        TextureSampleNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.url = this.nodeTree.url;
            obj.isMain = this.isMain;
            obj.wrap = this.wrap;
            obj.mipmap = this.mipmap;
            obj.filter = this.filter;
            obj.permul = this.nodeTree.permul;
            return obj;
        };
        Object.defineProperty(TextureSampleNodeUI.prototype, "wrap", {
            get: function () {
                return this._wrap;
            },
            set: function (value) {
                this._wrap = value;
                this.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureSampleNodeUI.prototype, "mipmap", {
            get: function () {
                return this._mipmap;
            },
            set: function (value) {
                this._mipmap = value;
                this.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureSampleNodeUI.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureSampleNodeUI.prototype, "permul", {
            get: function () {
                return this.nodeTree.permul;
            },
            set: function (value) {
                this.nodeTree.permul = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureSampleNodeUI.prototype, "isMain", {
            set: function (value) {
                this.nodeTree.isMain = value;
                if (value) {
                    //  _mainTxt.text = "M";
                }
                else {
                    //  _mainTxt.text = "";
                }
            },
            enumerable: true,
            configurable: true
        });
        TextureSampleNodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("纹理采样<" + this.nodeTree.paramName + ">");
            }
            else {
                this.drawTitleToFrame("纹理采样");
            }
        };
        TextureSampleNodeUI.texture_pic_frame_ID = 0;
        return TextureSampleNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.TextureSampleNodeUI = TextureSampleNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=TextureSampleNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var UIManager = Pan3d.UIManager;
    var Texture3DNodeUI = /** @class */ (function (_super) {
        __extends(Texture3DNodeUI, _super);
        function Texture3DNodeUI() {
            var _this = _super.call(this) || this;
            _this.name = "TextureSampleNodeUI" + random(9999999);
            _this.left = 400;
            _this.top = 100;
            _this._wrap = 0;
            _this._mipmap = 0;
            _this._filter = 0;
            _this._permul = false;
            _this.nodeTree = new materialui.NodeTreeTex;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TEX3D;
            _this.width = 162;
            _this.height = 140;
            _this.initItem();
            _this.resetBgSize();
            _this.drawTitleToFrame("3D纹理");
            _this.a_texture_pic_frame = _this.getTexturePicUi();
            _this.a_texture_pic_frame.x = 20;
            _this.a_texture_pic_frame.y = 55;
            return _this;
        }
        Texture3DNodeUI.prototype.drawTextureUrlToFrame = function ($ui, $img) {
            var $toRect = $ui.getSkinCtxRect();
            var $ctx = UIManager.getInstance().getContext2D($toRect.width, $toRect.height, false);
            $ctx.drawImage($img, 0, 0, $toRect.width, $toRect.height);
            $ui.drawToCtx(this._topRender.uiAtlas, $ctx);
        };
        Texture3DNodeUI.prototype.getTexturePicUi = function () {
            var $ui = this.addEvntBut("a_texture_pic_frame", this._topRender);
            $ui.goToAndStop(materialui.TextureSampleNodeUI.texture_pic_frame_ID++);
            return $ui;
        };
        Texture3DNodeUI.prototype.initItem = function () {
            this.uvItem = new materialui.ItemMaterialUI("UV", materialui.MaterialItemType.VEC3);
            this.rgbItem = new materialui.ItemMaterialUI("rgb", materialui.MaterialItemType.VEC3, false);
            this.addItems(this.uvItem);
            this.addItems(this.rgbItem);
        };
        Texture3DNodeUI.prototype.creatBase = function ($url) {
            var vo = this.nodeTree;
            vo.url = $url;
            vo.wrap = this._wrap;
            vo.mipmap = this._mipmap;
            vo.filter = this._filter;
            vo.permul = this._permul;
            this.drawPicBmp();
        };
        Texture3DNodeUI.prototype.drawPicBmp = function () {
            var _this = this;
            var $url = this.nodeTree.url;
            var $img = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + $url);
            if ($img) {
                this.drawTextureUrlToFrame(this.a_texture_pic_frame, $img);
            }
            else {
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.IMG_TYPE, function ($img) {
                    _this.drawTextureUrlToFrame(_this.a_texture_pic_frame, $img);
                });
            }
        };
        Texture3DNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            obj.url = String(obj.url).replace(Scene_data.fileRoot, ""); //兼容原来相对路径
            this.nodeTree.url = obj.url;
            this.isMain = obj.isMain;
            this.wrap = obj.wrap;
            this.mipmap = obj.mipmap;
            this.filter = obj.filter;
            this.permul = obj.permul;
            this.drawPicBmp();
            this.showDynamic();
        };
        Texture3DNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.url = this.nodeTree.url;
            obj.isMain = this.isMain;
            obj.wrap = this.wrap;
            obj.mipmap = this.mipmap;
            obj.filter = this.filter;
            obj.permul = this.permul;
            return obj;
        };
        Object.defineProperty(Texture3DNodeUI.prototype, "wrap", {
            get: function () {
                return this._wrap;
            },
            set: function (value) {
                this._wrap = value;
                this.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DNodeUI.prototype, "mipmap", {
            get: function () {
                return this._mipmap;
            },
            set: function (value) {
                this._mipmap = value;
                this.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DNodeUI.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DNodeUI.prototype, "permul", {
            get: function () {
                return this._permul;
            },
            set: function (value) {
                this._permul = value;
                this.nodeTree.permul = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Texture3DNodeUI.prototype, "isMain", {
            set: function (value) {
                this.nodeTree.isMain = value;
                if (value) {
                    //  _mainTxt.text = "M";
                }
                else {
                    //  _mainTxt.text = "";
                }
            },
            enumerable: true,
            configurable: true
        });
        Texture3DNodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("3d采样<" + this.nodeTree.paramName + ">");
            }
            else {
                this.drawTitleToFrame("3d采样");
            }
        };
        Texture3DNodeUI.texture_pic_frame_ID = 0;
        return Texture3DNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.Texture3DNodeUI = Texture3DNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=Texture3DNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TextureManager = Pan3d.TextureManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var UIManager = Pan3d.UIManager;
    var TextureCubeNodeUI = /** @class */ (function (_super) {
        __extends(TextureCubeNodeUI, _super);
        function TextureCubeNodeUI() {
            var _this = _super.call(this) || this;
            _this.name = "TextureCubeNodeUI" + random(9999999);
            _this.left = 400;
            _this.top = 100;
            _this._wrap = 0;
            _this._mipmap = 0;
            _this._filter = 0;
            _this._permul = false;
            _this.nodeTree = new materialui.NodeTreeTex;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TEXCUBE;
            _this.width = 162;
            _this.height = 140;
            _this.initItem();
            _this.resetBgSize();
            _this.drawTitleToFrame("天空盒");
            _this.a_texture_pic_frame = _this.getTexturePicUi();
            _this.a_texture_pic_frame.x = 20;
            _this.a_texture_pic_frame.y = 55;
            return _this;
        }
        TextureCubeNodeUI.prototype.drawTextureUrlToFrame = function ($ui, $img) {
            var $toRect = $ui.getSkinCtxRect();
            var $ctx = UIManager.getInstance().getContext2D($toRect.width, $toRect.height, false);
            $ctx.drawImage($img, 0, 0, $toRect.width, $toRect.height);
            $ui.drawToCtx(this._topRender.uiAtlas, $ctx);
        };
        TextureCubeNodeUI.prototype.getTexturePicUi = function () {
            var $ui = this.addEvntBut("a_texture_pic_frame", this._topRender);
            $ui.goToAndStop(materialui.TextureSampleNodeUI.texture_pic_frame_ID++);
            return $ui;
        };
        TextureCubeNodeUI.prototype.initItem = function () {
            this.rgbItem = new materialui.ItemMaterialUI("rgb", materialui.MaterialItemType.VEC3, false);
            this.addItems(this.rgbItem);
        };
        TextureCubeNodeUI.prototype.creatBase = function ($url) {
            var vo = this.nodeTree;
            vo.url = $url;
            vo.wrap = this._wrap;
            vo.mipmap = this._mipmap;
            vo.filter = this._filter;
            vo.permul = this._permul;
            this.drawPicBmp();
        };
        TextureCubeNodeUI.prototype.drawPicBmp = function () {
            var _this = this;
            var $url = this.nodeTree.url;
            var $img = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + $url);
            if ($img) {
                this.drawTextureUrlToFrame(this.a_texture_pic_frame, $img);
            }
            else {
                LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.IMG_TYPE, function ($img) {
                    _this.drawTextureUrlToFrame(_this.a_texture_pic_frame, $img);
                });
            }
        };
        TextureCubeNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            obj.url = String(obj.url).replace(Scene_data.fileRoot, ""); //兼容原来相对路径
            this.nodeTree.url = obj.url;
            this.isMain = obj.isMain;
            this.wrap = obj.wrap;
            this.mipmap = obj.mipmap;
            this.filter = obj.filter;
            this.permul = obj.permul;
            this.drawPicBmp();
            this.showDynamic();
        };
        TextureCubeNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.url = this.nodeTree.url;
            obj.isMain = this.isMain;
            obj.wrap = this.wrap;
            obj.mipmap = this.mipmap;
            obj.filter = this.filter;
            obj.permul = this.permul;
            return obj;
        };
        Object.defineProperty(TextureCubeNodeUI.prototype, "wrap", {
            get: function () {
                return this._wrap;
            },
            set: function (value) {
                this._wrap = value;
                this.nodeTree.wrap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeNodeUI.prototype, "mipmap", {
            get: function () {
                return this._mipmap;
            },
            set: function (value) {
                this._mipmap = value;
                this.nodeTree.mipmap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeNodeUI.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.nodeTree.filter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeNodeUI.prototype, "permul", {
            get: function () {
                return this._permul;
            },
            set: function (value) {
                this._permul = value;
                this.nodeTree.permul = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureCubeNodeUI.prototype, "isMain", {
            set: function (value) {
                this.nodeTree.isMain = value;
                if (value) {
                    //  _mainTxt.text = "M";
                }
                else {
                    //  _mainTxt.text = "";
                }
            },
            enumerable: true,
            configurable: true
        });
        TextureCubeNodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("天空盒<" + this.nodeTree.paramName + ">");
            }
            else {
                this.drawTitleToFrame("天空盒");
            }
        };
        TextureCubeNodeUI.texture_pic_frame_ID = 0;
        return TextureCubeNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.TextureCubeNodeUI = TextureCubeNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=TextureCubeNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var ResultNodeUI = /** @class */ (function (_super) {
        __extends(ResultNodeUI, _super);
        function ResultNodeUI() {
            var _this = _super.call(this) || this;
            _this._blenderMode = 0;
            _this._killNum = 0;
            _this._backCull = true;
            _this._writeZbuffer = true;
            _this._useDynamicIBL = false;
            _this._normalScale = 0;
            _this._lightProbe = false;
            _this._directLight = false;
            _this._noLight = false;
            _this._fogMode = 0;
            _this._scaleLightMap = false;
            _this._hdr = false;
            _this.name = "ResultNodeUI" + random(9999999);
            _this.left = 900;
            _this.top = 300;
            _this.gap = 30;
            _this.width = 162;
            _this.height = 180;
            _this.nodeTree = new materialui.NodeTreeOP;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.OP;
            _this.initItem();
            _this.resetBgSize();
            return _this;
        }
        ResultNodeUI.prototype.initItem = function () {
            this.diffuseItem = new materialui.ItemMaterialUI("漫反射", materialui.MaterialItemType.VEC3);
            this.normalItem = new materialui.ItemMaterialUI("法线", materialui.MaterialItemType.VEC3);
            this.reflectItem = new materialui.ItemMaterialUI("反射", materialui.MaterialItemType.VEC3);
            this.alphaItem = new materialui.ItemMaterialUI("透明度", materialui.MaterialItemType.FLOAT);
            this.killItem = new materialui.ItemMaterialUI("不透明蒙版", materialui.MaterialItemType.FLOAT);
            this.addItems(this.diffuseItem);
            this.addItems(this.normalItem);
            this.addItems(this.reflectItem);
            this.addItems(this.alphaItem);
            this.addItems(this.killItem);
        };
        Object.defineProperty(ResultNodeUI.prototype, "blenderMode", {
            get: function () {
                return this._blenderMode;
            },
            set: function (value) {
                this._blenderMode = value;
                this.nodeTree.blendMode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "normalScale", {
            get: function () {
                return this._normalScale;
            },
            set: function (value) {
                this._normalScale = value;
                this.nodeTree.normalScale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "lightProbe", {
            get: function () {
                return this._lightProbe;
            },
            set: function (value) {
                this._lightProbe = value;
                this.nodeTree.lightProbe = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "directLight", {
            get: function () {
                return this._directLight;
            },
            set: function (value) {
                this._directLight = value;
                this.nodeTree.directLight = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "noLight", {
            get: function () {
                return this._noLight;
            },
            set: function (value) {
                this._noLight = value;
                this.nodeTree.noLight = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "fogMode", {
            get: function () {
                return this._fogMode;
            },
            set: function (value) {
                this._fogMode = value;
                this.nodeTree.fogMode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "scaleLightMap", {
            get: function () {
                return this._scaleLightMap;
            },
            set: function (value) {
                this._scaleLightMap = value;
                this.nodeTree.scaleLightMap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "writeZbuffer", {
            get: function () {
                return this._writeZbuffer;
            },
            set: function (value) {
                this._writeZbuffer = value;
                this.nodeTree.writeZbuffer = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultNodeUI.prototype, "hdr", {
            get: function () {
                return this._hdr;
            },
            set: function (value) {
                this._hdr = value;
                this.nodeTree.hdr = value;
            },
            enumerable: true,
            configurable: true
        });
        ResultNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.blenderMode = this.blenderMode;
            obj.killNum = this._killNum;
            obj.backCull = this._backCull;
            obj.useDynamicIBL = this._useDynamicIBL;
            obj.normalScale = this.normalScale;
            obj.lightProbe = this.lightProbe;
            obj.directLight = this.directLight;
            obj.noLight = this.noLight;
            obj.fogMode = this.fogMode;
            obj.scaleLightMap = this.scaleLightMap;
            obj.writeZbuffer = this.writeZbuffer;
            obj.hdr = this.hdr;
            return obj;
        };
        ResultNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.blenderMode = obj.blenderMode;
            this._killNum = obj.killNum;
            this._backCull = obj.backCull;
            this._useDynamicIBL = obj.useDynamicIBL;
            this._normalScale = obj.normalScale;
            this._lightProbe = obj.lightProbe;
            this._directLight = obj.directLight;
            this._noLight = obj.noLight;
            this._fogMode = obj.fogMode;
            this._scaleLightMap = obj.scaleLightMap;
            this.hdr = obj.hdr;
            if (obj.hasOwnProperty("writeZbuffer")) {
                this._writeZbuffer = obj.writeZbuffer;
            }
            if (isNaN(this._killNum)) {
                this._killNum = 0;
            }
            if (isNaN(this._normalScale)) {
                this._normalScale = 1;
            }
            this.nodeTree.blendMode = this.blenderMode;
            this.nodeTree.killNum = this._killNum;
            this.nodeTree.backCull = this._backCull;
            this.nodeTree.useDynamicIBL = this._useDynamicIBL;
            this.nodeTree.normalScale = this._normalScale;
            this.nodeTree.lightProbe = this._lightProbe;
            this.nodeTree.directLight = this._directLight;
            this.nodeTree.noLight = this._noLight;
            this.nodeTree.fogMode = this._fogMode;
            this.nodeTree.scaleLightMap = this._scaleLightMap;
            this.nodeTree.writeZbuffer = this._writeZbuffer;
            this.nodeTree.hdr = this._hdr;
        };
        return ResultNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.ResultNodeUI = ResultNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=ResultNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Scene_data = Pan3d.Scene_data;
    var Shader3D = Pan3d.Shader3D;
    var Vector2D = Pan3d.Vector2D;
    var Vector3D = Pan3d.Vector3D;
    var UICompenent = Pan3d.UICompenent;
    var UIData = Pan3d.UIData;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Matrix3D = Pan3d.Matrix3D;
    var ObjData = Pan3d.ObjData;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIPanel = win.UIPanel;
    var NodeLineLinkShader = /** @class */ (function (_super) {
        __extends(NodeLineLinkShader, _super);
        function NodeLineLinkShader() {
            return _super.call(this) || this;
        }
        NodeLineLinkShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v4Pos");
        };
        NodeLineLinkShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec4 v4Pos;" +
                "uniform vec4 posMove;" +
                "uniform mat4 viewMatrix3D;" +
                "void main(void)" +
                "{" +
                "vec4 vt0= vec4(v4Pos.x+posMove.x,v4Pos.y+posMove.y,1.0,1.0);\n" +
                "vt0=vt0*viewMatrix3D;\n" +
                "vt0.x=vt0.x-1.0;\n" +
                "vt0.y=vt0.y+1.0;\n" +
                "gl_Position = vt0;\n" +
                "}";
            return $str;
        };
        NodeLineLinkShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "void main(void)\n" +
                "{\n" +
                "gl_FragColor = vec4(0.9,0.9,0.9, 0.9);\n" +
                "}";
            return $str;
        };
        NodeLineLinkShader.NodeLineLinkShader = "NodeLineLinkShader";
        return NodeLineLinkShader;
    }(Shader3D));
    materialui.NodeLineLinkShader = NodeLineLinkShader;
    var MapLineUi = /** @class */ (function (_super) {
        __extends(MapLineUi, _super);
        function MapLineUi() {
            var _this = _super.call(this) || this;
            _this.x = UIData.designWidth / 2;
            _this.y = UIData.designHeight / 2;
            _this.width = 20;
            _this.height = 20;
            return _this;
        }
        MapLineUi.prototype.applyRenderSize = function () {
        };
        return MapLineUi;
    }(UICompenent));
    materialui.MapLineUi = MapLineUi;
    var NodeLineLinkComponent = /** @class */ (function (_super) {
        __extends(NodeLineLinkComponent, _super);
        function NodeLineLinkComponent() {
            var _this = _super.call(this) || this;
            ProgrmaManager.getInstance().registe(NodeLineLinkShader.NodeLineLinkShader, new NodeLineLinkShader);
            _this.shader = ProgrmaManager.getInstance().getProgram(NodeLineLinkShader.NodeLineLinkShader);
            _this.program = _this.shader.program;
            return _this;
        }
        NodeLineLinkComponent.prototype.makeLineUiItem = function ($arr) {
            if ($arr && $arr.length > 1) {
                this.mapLineUiList = new Array();
                var lastPos = $arr[0];
                var $gapnum = 1.0;
                for (var i = 0; i < $arr.length; i++) {
                    while (Vector2D.distance(lastPos, $arr[i]) > $gapnum) {
                        lastPos = this.nextPostForTow(lastPos, $arr[i], $gapnum / 2);
                        var $ui = new Vector2D();
                        $ui.x = lastPos.x;
                        $ui.y = lastPos.y;
                        this.mapLineUiList.push($ui);
                    }
                }
                this.makeLineVetlineObjData();
            }
            else {
                this.objData.treNum = 0;
                console.log("路线清除");
            }
        };
        NodeLineLinkComponent.prototype.nextPostForTow = function (a, b, $gapnum) {
            var c = new Vector2D(b.x - a.x, b.y - a.y);
            c.normalize();
            c.x = c.x * $gapnum;
            c.y = c.y * $gapnum;
            c.x += a.x;
            c.y += a.y;
            return c;
        };
        NodeLineLinkComponent.prototype.makeLineVetlineObjData = function () {
            if (!this.objData) {
                this.objData = new ObjData;
            }
            this.objData.vertices = new Array();
            this.objData.indexs = new Array();
            this.getUiDataForItem();
            if (this.objData.vertexBuffer) {
                Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer, this.objData.vertices);
                Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer, this.objData.indexs);
            }
            else {
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
            this.objData.treNum = this.objData.indexs.length;
        };
        NodeLineLinkComponent.prototype.getUiDataForItem = function () {
            //   this.anglyNum++;
            var $v = new Array;
            var $linesize = 2;
            for (var i = 0; i < this.mapLineUiList.length; i++) {
                var $v2d = this.mapLineUiList[i];
                if (i == 0) {
                    this.objData.vertices.push($v2d.x, $v2d.y, 1, 1);
                    this.objData.vertices.push($v2d.x, $v2d.y, 1, 1);
                }
                else {
                    var lastV2d = this.mapLineUiList[i - 1];
                    var anglyNum = Math.atan2($v2d.y - lastV2d.y, $v2d.x - lastV2d.x);
                    var rotm = new Matrix3D();
                    rotm.appendRotation(anglyNum * 180 / Math.PI, Vector3D.Z_AXIS);
                    rotm.appendTranslation($v2d.x, $v2d.y, 0);
                    var ka = rotm.transformVector(new Vector3D(0, +$linesize, 0));
                    var kb = rotm.transformVector(new Vector3D(0, -$linesize, 0));
                    this.objData.vertices.push(ka.x, ka.y, 1, 1);
                    this.objData.vertices.push(kb.x, kb.y, 1, 1);
                    var $indx = i - 1;
                    this.objData.indexs.push(0 + $indx * 2, 1 + $indx * 2, 3 + $indx * 2);
                    this.objData.indexs.push(0 + $indx * 2, 3 + $indx * 2, 2 + $indx * 2);
                }
            }
        };
        NodeLineLinkComponent.prototype.update = function () {
            if (this.objData && this.objData.treNum > 0) {
                Scene_data.context3D.setProgram(this.program);
                Scene_data.context3D.setVa(0, 4, this.objData.vertexBuffer);
                var $m = new Matrix3D;
                $m.appendScale(2 / Scene_data.stageWidth * materialui.MtlUiData.Scale, -2 / Scene_data.stageHeight * materialui.MtlUiData.Scale, 1);
                Scene_data.context3D.setVc4fv(this.shader, "posMove", [AppData.stagePos.x, AppData.stagePos.y, 0, 0]);
                Scene_data.context3D.setVcMatrix4fv(this.shader, "viewMatrix3D", $m.m);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return NodeLineLinkComponent;
    }(UIRenderComponent));
    materialui.NodeLineLinkComponent = NodeLineLinkComponent;
    var MaterialLineContainer = /** @class */ (function (_super) {
        __extends(MaterialLineContainer, _super);
        function MaterialLineContainer() {
            var _this = _super.call(this) || this;
            _this.layer = 1;
            _this.width = 200;
            _this.height = 200;
            /*
             this._midRender = new NodeLineLinkComponent;
             this.addRender(this._midRender);
             var $arr: Array<Vector2D> = new Array();
             $arr.push(new Vector2D(0, 0));
             $arr.push(new Vector2D(1000, 0));
             $arr.push(new Vector2D(1000, 1000));
             $arr.push(new Vector2D(0, 1000));
             $arr.push(new Vector2D(0, 0));
             this._midRender.makeLineUiItem($arr)
 
             */
            _this._lineList = new Array;
            return _this;
        }
        MaterialLineContainer.prototype.startLine = function ($item) {
            this._currentLine = new materialui.MaterialNodeLineUI;
            this._currentLine.parent = this;
            this.addRender(this._currentLine.lineRender);
            this._currentLine.setFromNode($item);
            Scene_data.uiStage.addEventListener(InteractiveEvent.Up, this.onMouseUp, this);
        };
        MaterialLineContainer.prototype.removeLine = function ($line) {
            for (var i; i < this._lineList.length; i++) {
                if (this._lineList[i] == $line) {
                    this._lineList.splice(i, 1);
                    break;
                }
            }
            $line.remove();
        };
        MaterialLineContainer.prototype.globalToLocal = function ($v) {
            var p = new Vector2D($v.x - AppData.stagePos.x, $v.y - AppData.stagePos.y);
            return p;
        };
        MaterialLineContainer.prototype.getMouse = function ($v) {
            var p = new Vector2D(($v.x / materialui.MtlUiData.Scale - AppData.stagePos.x), $v.y / materialui.MtlUiData.Scale - AppData.stagePos.y);
            return p;
        };
        MaterialLineContainer.prototype.onMouseUp = function (event) {
            // var $slectUi: UICompenent = UIManager.getInstance().getObjectsUnderPoint(new Vector2D(event.x, event.y))
            var $slectUi = materialui.MaterialCtrl.getInstance().nodeUiPanel.getObjectsUnderPoint(new Vector2D(event.x, event.y));
            console.log($slectUi);
            var evt = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STOPDRAG);
            if ($slectUi && $slectUi.name == "a_point_frame") {
                evt.itemNode = $slectUi.data;
            }
            ModuleEventManager.dispatchEvent(evt);
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Up, this.onMouseUp, this);
        };
        MaterialLineContainer.prototype.addConnentLine = function ($startItem, $endItem) {
            this._currentLine = new materialui.MaterialNodeLineUI;
            this._currentLine.parent = this;
            this.addRender(this._currentLine.lineRender);
            this._currentLine.setFromNode($startItem);
            this._currentLine.setEndNode($endItem);
            this._lineList.push(this._currentLine);
        };
        MaterialLineContainer.prototype.stopLine = function ($item) {
            if ($item) {
                if (this._currentLine.needNodeType == $item.inOut && $item.parent != this._currentLine.currentHasNode.parent && ($item.typets == materialui.MaterialItemType.UNDEFINE || $item.typets == this._currentLine.currentHasNode.typets)) {
                    if ($item.typets == materialui.MaterialItemType.UNDEFINE) {
                        $item.changeType(this._currentLine.currentHasNode.typets);
                    }
                    this._currentLine.setEndNode($item);
                    this._lineList.push(this._currentLine);
                }
                else {
                    this._currentLine.removeStage();
                }
            }
            else {
                this._currentLine.removeStage();
            }
        };
        return MaterialLineContainer;
    }(UIPanel));
    materialui.MaterialLineContainer = MaterialLineContainer;
})(materialui || (materialui = {}));
//# sourceMappingURL=NodeLineLinkSprite.js.map
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var BezierClasszip = /** @class */ (function () {
        function BezierClasszip() {
        }
        BezierClasszip.drawbezier = function (_array, _time) {
            var _newarray = new Array();
            for (var i = 0; i < _array.length; i++) {
                _newarray.push(new Vector2D(_array[i].x, _array[i].y));
            }
            while (_newarray.length > 1) {
                for (var j = 0; j < _newarray.length - 1; j++) {
                    this.mathmidpoint(_newarray[j], _newarray[j + 1], _time);
                }
                _newarray.pop();
            }
            return _newarray[0];
        };
        BezierClasszip.mathmidpoint = function (a, b, t) {
            var _nx, _ny, _nz;
            _nx = a.x + (b.x - a.x) * t;
            _ny = a.y + (b.y - a.y) * t;
            a.x = _nx;
            a.y = _ny;
        };
        return BezierClasszip;
    }());
    materialui.BezierClasszip = BezierClasszip;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var Scene_data = Pan3d.Scene_data;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var MaterialNodeLineUI = /** @class */ (function () {
        function MaterialNodeLineUI() {
            this.lineRender = new materialui.NodeLineLinkComponent;
        }
        MaterialNodeLineUI.prototype.setFromNode = function ($node) {
            if ($node.inOut) {
                this.endNode = $node;
            }
            else {
                this.fromNode = $node;
            }
            this.currentHasNode = $node;
            this.needNodeType = !$node.inOut;
            Scene_data.uiStage.addEventListener(InteractiveEvent.Move, this.onMove, this);
        };
        MaterialNodeLineUI.prototype.onMove = function ($e) {
            this.mousePos = $e;
            this.draw();
        };
        MaterialNodeLineUI.prototype.setEndNode = function ($node) {
            if ($node.inOut) {
                this.endNode = $node;
            }
            else {
                this.fromNode = $node;
            }
            Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.onMove, this);
            this.draw();
            this.setNodeLine();
        };
        MaterialNodeLineUI.prototype.setNodeLine = function () {
            if (this.endNode.inLine) {
                var evt = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE);
                evt.line = this.endNode.inLine;
                ModuleEventManager.dispatchEvent(evt);
            }
            if (this.endNode.typets == materialui.MaterialItemType.UNDEFINE) {
                this.endNode.changeType(this.fromNode.typets);
            }
            this.fromNode.outLineList.push(this);
            this.endNode.inLine = this;
            this.fromNode.setConnect();
            this.endNode.setConnect();
            this.endNode.nodeTreeItem.parentNodeItem = this.fromNode.nodeTreeItem;
            this.fromNode.nodeTreeItem.pushSunNode(this.endNode.nodeTreeItem);
        };
        MaterialNodeLineUI.prototype.removeStage = function () {
            if (this.parent) {
                if (this.parent) {
                    Scene_data.uiStage.removeEventListener(InteractiveEvent.Move, this.onMove, this);
                }
                this.parent.removeRender(this.lineRender);
                this.parent = null;
            }
        };
        MaterialNodeLineUI.prototype.draw = function () {
            if (this.fromNode) {
                this.startPoint = this.parent.globalToLocal(this.fromNode.getStagePoint());
            }
            else {
                this.startPoint = this.parent.getMouse(this.mousePos);
            }
            if (this.endNode) {
                this.endPoint = this.parent.globalToLocal(this.endNode.getStagePoint());
            }
            else {
                this.endPoint = this.parent.getMouse(this.mousePos);
            }
            var $arr = new Array();
            $arr.push(this.startPoint);
            $arr.push(new Vector2D(this.startPoint.x + 100, this.startPoint.y));
            $arr.push(new Vector2D(this.endPoint.x - 100, this.endPoint.y));
            $arr.push(this.endPoint);
            var bzitem = new Array;
            for (var i = 0; i < 100; i++) {
                bzitem.push(BezierClasszip.drawbezier($arr, i / 100));
            }
            this.lineRender.makeLineUiItem(bzitem);
        };
        MaterialNodeLineUI.prototype.remove = function () {
            this.removeStage();
            if (this.fromNode) {
                this.fromNode.removeOut(this);
                this.fromNode.nodeTreeItem.removeSunNode(this.endNode.nodeTreeItem);
            }
            if (this.endNode) {
                this.endNode.removeIn();
                this.endNode.nodeTreeItem.parentNodeItem = null;
            }
        };
        return MaterialNodeLineUI;
    }());
    materialui.MaterialNodeLineUI = MaterialNodeLineUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialNodeLineUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TexItem = Pan3d.TexItem;
    var Material = Pan3d.Material;
    var ConstItem = Pan3d.ConstItem;
    var MaterialTree = /** @class */ (function (_super) {
        __extends(MaterialTree, _super);
        function MaterialTree() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.texList = new Array;
            _this.constList = new Array;
            _this.killNum = 0;
            _this.writeZbuffer = true;
            _this.fcIDAry = new Array; //[]
            return _this;
        }
        Object.defineProperty(MaterialTree.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        MaterialTree.prototype.setData = function (value) {
            this.data = value.data;
            this.compileData = value.compileData;
        };
        MaterialTree.prototype.clone = function () {
            var $temp = new MaterialTree;
            var $treeMater = this;
            $temp.data = $treeMater.data;
            $temp.constList = $treeMater.constList;
            $temp.fcNum = $treeMater.fcNum;
            $temp.fcData = $treeMater.fcData;
            $temp.texList = $treeMater.texList;
            $temp.useNormal = $treeMater.useNormal;
            $temp.useLightUv = $treeMater.useLightUv;
            $temp.hasTime = $treeMater.hasTime;
            $temp.timeSpeed = $treeMater.timeSpeed;
            $temp.timeValue = $treeMater.timeValue;
            $temp.useUv = $treeMater.useUv;
            $temp.blendMode = $treeMater.blendMode;
            return $temp;
        };
        Object.defineProperty(MaterialTree.prototype, "compileData", {
            set: function (value) {
                if (!value) {
                    return;
                }
                this._compileData = value;
                this.shaderStr = this._compileData.shaderStr;
                this.hasTime = this._compileData.hasTime;
                this.timeSpeed = this._compileData.timeSpeed;
                this.blendMode = this._compileData.blendMode;
                this.backCull = this._compileData.backCull;
                this.killNum = this._compileData.killNum;
                this.hasVertexColor = this._compileData.hasVertexColor;
                this.usePbr = this._compileData.usePbr;
                this.useNormal = this._compileData.useNormal;
                this.roughness = this._compileData.roughness;
                this.writeZbuffer = this._compileData.writeZbuffer;
                this.hasFresnel = this._compileData.hasFresnel;
                this.useDynamicIBL = this._compileData.useDynamicIBL;
                this.normalScale = this._compileData.normalScale;
                this.lightProbe = this._compileData.lightProbe;
                this.directLight = this._compileData.directLight;
                this.noLight = this._compileData.noLight;
                this.fogMode = this._compileData.fogMode;
                this.scaleLightMap = this._compileData.scaleLightMap;
                this.useKill = this._compileData.useKill;
                this.fcNum = this._compileData.fcNum;
                this.fcIDAry = this._compileData.fcIDAry;
                this.hasAlpha = this._compileData.hasAlpha;
                this.skyBoxTextId = this._compileData.skyBoxTextId;
                this.hasSkyBox = this._compileData.hasSkyBox;
                this.materialBaseData = new materialui.MaterialBaseData;
                this.materialBaseData.setData(this._compileData.materialBaseData);
                if (this._compileData.texList) {
                    var ary = this._compileData.texList;
                    this.texList = new Array;
                    for (var i = 0; i < ary.length; i++) {
                        var texItem = new TexItem;
                        texItem.id = ary[i].id;
                        texItem.url = ary[i].url;
                        texItem.isDynamic = ary[i].isDynamic;
                        texItem.paramName = ary[i].paramName;
                        texItem.isMain = ary[i].isMain;
                        texItem.wrap = ary[i].wrap;
                        texItem.filter = ary[i].filter;
                        texItem.mipmap = ary[i].mipmap;
                        texItem.permul = ary[i].permul;
                        texItem.isParticleColor = ary[i].isParticleColor;
                        texItem.type = ary[i].type;
                        this.texList.push(texItem);
                    }
                }
                if (this._compileData.constList) {
                    ary = this._compileData.constList;
                    this.constList = new Array;
                    for (i = 0; i < ary.length; i++) {
                        var constItem = new ConstItem;
                        constItem.setData(ary[i]);
                        this.constList.push(constItem);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        return MaterialTree;
    }(Material));
    materialui.MaterialTree = MaterialTree;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialTree.js.map
var materialui;
(function (materialui) {
    var MaterialCtrl = /** @class */ (function () {
        function MaterialCtrl() {
            this.initData();
        }
        MaterialCtrl.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialCtrl();
            }
            return this._instance;
        };
        MaterialCtrl.prototype.initData = function () {
            this.nodeList = new Array;
            this.uiList = new Array;
            this._materialTree = new materialui.MaterialTree;
        };
        MaterialCtrl.prototype.addNodeUI = function (ui) {
            var node = ui.nodeTree;
            if (node.id == -1) {
                if (this.nodeList.length) {
                    node.id = this.nodeList[this.nodeList.length - 1].id + 1;
                }
                else {
                    node.id = 0;
                }
            }
            this.nodeList.push(node);
            this.uiList.push(ui);
            this.addUIContainer(ui);
        };
        MaterialCtrl.prototype.addUIContainer = function (value) {
            this.nodeUiPanel.addUIContainer(value);
        };
        MaterialCtrl.prototype.removeUI = function (ui) {
            for (var i = 0; i < this.uiList.length; i++) {
                if (this.uiList[i] == ui) {
                    this.uiList.splice(i, 1);
                    break;
                }
            }
        };
        MaterialCtrl.prototype.getObj = function () {
            var ary = new Array;
            for (var i = 0; i < this.uiList.length; i++) {
                var $temp = this.uiList[i];
                if ($temp) {
                    var obj = $temp.getObj();
                    ary.push(obj);
                }
            }
            return ary;
        };
        return MaterialCtrl;
    }());
    materialui.MaterialCtrl = MaterialCtrl;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialCtrl.js.map
var materialui;
(function (materialui) {
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var MaterialTreeManager = /** @class */ (function () {
        function MaterialTreeManager() {
        }
        MaterialTreeManager.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialTreeManager();
            }
            return this._instance;
        };
        MaterialTreeManager.prototype.getMaterial = function ($url, $fun) {
            LoadManager.getInstance().load(Scene_data.fileRoot + $url, LoadManager.XML_TYPE, function ($dtstr) {
                var $materailTree = new materialui.MaterialTree;
                $materailTree.url = $url.replace(Scene_data.fileRoot, "");
                var $obj = JSON.parse($dtstr);
                $materailTree.setData($obj);
                $fun && $fun($materailTree);
            });
        };
        return MaterialTreeManager;
    }());
    materialui.MaterialTreeManager = MaterialTreeManager;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialTreeManager.js.map
var materialui;
(function (materialui) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var MaterialViewBuildUtils = /** @class */ (function () {
        function MaterialViewBuildUtils() {
        }
        MaterialViewBuildUtils.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialViewBuildUtils();
            }
            return this._instance;
        };
        MaterialViewBuildUtils.prototype.setData = function (ary) {
            materialui.BaseMaterialNodeUI.titleFrameId = 0; //重置id
            materialui.TextureSampleNodeUI.texture_pic_frame_ID = 0; //重置id
            // prop.PropModel.getInstance().hidePanel();//重置属性面板
            this._uiVec = new Array;
            var ui;
            if (!ary) {
            }
            else {
                for (var i = 0; i < ary.length; i++) {
                    ui = this.getUI(ary[i].type);
                    ui.setData(ary[i].data);
                    ui.setInItemByData(ary[i].inAry);
                    ui.setOutItemByData(ary[i].outAry);
                    ui.nodeTree.id = ary[i].id;
                    this.addFun(ui);
                    this._uiVec.push(ui);
                }
                this._dataAry = ary;
                this.drawLine();
            }
        };
        MaterialViewBuildUtils.prototype.drawLine = function () {
            for (var i = 0; i < this._dataAry.length; i++) {
                var inAry = this._dataAry[i].inAry;
                for (var j = 0; j < inAry.length; j++) {
                    if (!inAry[j].parentObj) {
                        continue;
                    }
                    var endNode = this.getUIbyID(this._dataAry[i].id, inAry[j].id, true);
                    var startNode = this.getUIbyID(inAry[j].parentObj.pid, inAry[j].parentObj.id, false);
                    if (endNode.typets == materialui.MaterialItemType.UNDEFINE) {
                        endNode.changeType(startNode.typets);
                    }
                    var evt = new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_DOUBLUELINE);
                    evt.startNode = startNode;
                    evt.endNode = endNode;
                    ModuleEventManager.dispatchEvent(evt);
                }
            }
        };
        MaterialViewBuildUtils.prototype.getUIbyID = function ($pid, $id, $inout) {
            var ui = this.getNodeUI($pid);
            if ($inout) {
                return ui.getInItem($id);
            }
            else {
                return ui.getOutItem($id);
            }
        };
        MaterialViewBuildUtils.prototype.getNodeUI = function ($pid) {
            for (var i = 0; i < this._uiVec.length; i++) {
                if (this._uiVec[i].nodeTree.id == $pid) {
                    return this._uiVec[i];
                }
            }
            return null;
        };
        MaterialViewBuildUtils.prototype.getUI = function (type) {
            var ui;
            switch (type) {
                case materialui.NodeTree.OP:
                    ui = new materialui.ResultNodeUI();
                    break;
                case materialui.NodeTree.TEX:
                    ui = new materialui.TextureSampleNodeUI();
                    break;
                case materialui.NodeTree.TEX3D:
                    ui = new materialui.Texture3DNodeUI();
                    break;
                case materialui.NodeTree.TEXCUBE:
                    ui = new materialui.TextureCubeNodeUI();
                    break;
                case materialui.NodeTree.TEXCOORD:
                    ui = new materialui.TexCoordNodeUI();
                    break;
                case materialui.NodeTree.TEXCOORDLIGHT:
                    ui = new materialui.TexLightUvNodeUI();
                    break;
                case materialui.NodeTree.PANNER:
                    ui = new materialui.PannerNodeUI();
                    break;
                case materialui.NodeTree.SUB:
                    ui = new materialui.MathAddNodeUI;
                    break;
                case materialui.NodeTree.ADD:
                    ui = new materialui.MathAddNodeUI;
                    break;
                case materialui.NodeTree.MUL:
                    ui = new materialui.MathMulNodeUI;
                    break;
                case materialui.NodeTree.DIV:
                    ui = new materialui.MathDivNodeUI;
                    break;
                case materialui.NodeTree.SIN:
                    ui = new materialui.MathSinNodeUI;
                    break;
                case materialui.NodeTree.COS:
                    ui = new materialui.MathCosNodeUI;
                    break;
                case materialui.NodeTree.VEC3:
                    ui = new materialui.ConstVec3NodeUI;
                    break;
                case materialui.NodeTree.VEC2:
                    ui = new materialui.ConstVec2NodeUI;
                    break;
                case materialui.NodeTree.FLOAT:
                    ui = new materialui.ConstFloatNodeUI;
                    break;
                case materialui.NodeTree.FRESNEL:
                    ui = new materialui.FresnelNodeUI;
                    break;
                case materialui.NodeTree.TIME:
                    ui = new materialui.TimeNodeUI;
                    break;
                case materialui.NodeTree.NORMAL:
                    ui = new materialui.NormalNodeUI;
                    break;
                case materialui.NodeTree.FUN:
                    ui = new materialui.MathFunNodeUI;
                    break;
                default:
                    break;
            }
            return ui;
        };
        return MaterialViewBuildUtils;
    }());
    materialui.MaterialViewBuildUtils = MaterialViewBuildUtils;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialViewBuildUtils.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathDynamicNodeUI = /** @class */ (function (_super) {
        __extends(MathDynamicNodeUI, _super);
        function MathDynamicNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 60;
            _this.resetBgSize();
            return _this;
        }
        MathDynamicNodeUI.prototype.initItem = function () {
            this.intAItem = new materialui.ItemMaterialUI("a", materialui.MaterialItemType.UNDEFINE);
            this.intBItem = new materialui.ItemMaterialUI("b", materialui.MaterialItemType.UNDEFINE);
            this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.UNDEFINE, false);
            this.outRItem = new materialui.ItemMaterialUI("r", materialui.MaterialItemType.FLOAT, false);
            this.outGItem = new materialui.ItemMaterialUI("g", materialui.MaterialItemType.FLOAT, false);
            this.outBItem = new materialui.ItemMaterialUI("b", materialui.MaterialItemType.FLOAT, false);
            this.outXYItem = new materialui.ItemMaterialUI("xy", materialui.MaterialItemType.VEC2, false);
            this.outRGBItem = new materialui.ItemMaterialUI("rgb", materialui.MaterialItemType.VEC3, false);
            this.outAItem = new materialui.ItemMaterialUI("a", materialui.MaterialItemType.FLOAT, false);
            this.addItems(this.intAItem);
            this.addItems(this.intBItem);
            this.addItems(this.outItem);
            this.addEvents(this.intAItem);
            this.addEvents(this.intBItem);
            this.addEvents(this.outItem);
            this.addDisEvent(this.intAItem);
            this.addDisEvent(this.intBItem);
            this.addDisEvent(this.outItem);
            this.addDisEvent(this.outRItem);
            this.addDisEvent(this.outGItem);
            this.addDisEvent(this.outBItem);
            this.addDisEvent(this.outXYItem);
            this.addDisEvent(this.outRGBItem);
            this.addDisEvent(this.outAItem);
        };
        MathDynamicNodeUI.prototype.addEvents = function ($nodeUI) {
            $nodeUI.addEventListener("Connect", this.onConnect, this);
        };
        MathDynamicNodeUI.prototype.addDisEvent = function ($nodeUI) {
            $nodeUI.addEventListener("DisConnect", this.disConnect, this);
        };
        MathDynamicNodeUI.prototype.disConnect = function (event) {
            this.checkItem();
        };
        MathDynamicNodeUI.prototype.onConnect = function (event) {
            var target = event.target;
            var typets = target.typets;
            target.changeType(typets);
            this.checkItem();
            if (this.intAItem.typets != materialui.MaterialItemType.UNDEFINE && this.intBItem.typets != materialui.MaterialItemType.UNDEFINE) {
                if (this.intAItem.typets != materialui.MaterialItemType.FLOAT && this.intBItem.typets != materialui.MaterialItemType.FLOAT) {
                    if (this.intAItem.typets != this.intBItem.typets) {
                        target.removeAllLine();
                    }
                }
            }
        };
        MathDynamicNodeUI.prototype.checkItem = function () {
            if (!this.intAItem.hasConnet) {
                this.intAItem.changeType(materialui.MaterialItemType.UNDEFINE);
            }
            if (!this.intBItem.hasConnet) {
                this.intBItem.changeType(materialui.MaterialItemType.UNDEFINE);
            }
            if (!this.outItem.hasConnet) {
                this.outItem.changeType(materialui.MaterialItemType.UNDEFINE);
            }
            if (this.outItem.typets == materialui.MaterialItemType.VEC3) {
                if (this.intAItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intBItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intBItem.changeType(materialui.MaterialItemType.VEC3);
                    }
                }
                if (this.intBItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intAItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intAItem.changeType(materialui.MaterialItemType.VEC3);
                    }
                }
            }
            else if (this.outItem.typets == materialui.MaterialItemType.VEC4) {
                if (this.intAItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intBItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intBItem.changeType(materialui.MaterialItemType.VEC4);
                    }
                }
                if (this.intBItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intAItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intAItem.changeType(materialui.MaterialItemType.VEC4);
                    }
                }
            }
            else if (this.outItem.typets == materialui.MaterialItemType.VEC2) {
                if (this.intAItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intBItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intBItem.changeType(materialui.MaterialItemType.VEC2);
                    }
                }
                if (this.intBItem.typets == materialui.MaterialItemType.FLOAT) {
                    if (this.intAItem.typets == materialui.MaterialItemType.UNDEFINE) {
                        this.intAItem.changeType(materialui.MaterialItemType.VEC2);
                    }
                }
            }
            else if (this.outItem.typets == materialui.MaterialItemType.FLOAT) {
                if (this.intAItem.typets == materialui.MaterialItemType.UNDEFINE) {
                    this.intAItem.changeType(materialui.MaterialItemType.FLOAT);
                }
                if (this.intBItem.typets == materialui.MaterialItemType.UNDEFINE) {
                    this.intBItem.changeType(materialui.MaterialItemType.FLOAT);
                }
            }
            else if (this.outItem.typets == materialui.MaterialItemType.UNDEFINE) {
                if (this.intAItem.typets == materialui.MaterialItemType.VEC4 || this.intBItem.typets == materialui.MaterialItemType.VEC4) {
                    this.outItem.changeType(materialui.MaterialItemType.VEC4);
                }
                else if (this.intAItem.typets == materialui.MaterialItemType.VEC3 || this.intBItem.typets == materialui.MaterialItemType.VEC3) {
                    this.outItem.changeType(materialui.MaterialItemType.VEC3);
                }
                else if (this.intAItem.typets == materialui.MaterialItemType.VEC2 || this.intBItem.typets == materialui.MaterialItemType.VEC2) {
                    this.outItem.changeType(materialui.MaterialItemType.VEC2);
                }
                else if (this.intAItem.typets == materialui.MaterialItemType.FLOAT && this.intBItem.typets == materialui.MaterialItemType.FLOAT) {
                    this.outItem.changeType(materialui.MaterialItemType.FLOAT);
                }
            }
            if (this.outItem.typets == materialui.MaterialItemType.VEC4) {
                this.addItems(this.outRItem);
                this.addItems(this.outGItem);
                this.addItems(this.outBItem);
                this.addItems(this.outXYItem);
                this.addItems(this.outRGBItem);
                this.addItems(this.outAItem);
                this.height = 180;
            }
            else if (this.outItem.typets == materialui.MaterialItemType.VEC3) {
                this.addItems(this.outRItem);
                this.addItems(this.outGItem);
                this.addItems(this.outBItem);
                this.addItems(this.outXYItem);
                this.height = 140;
                this.removeItem(this.outRGBItem);
                this.outRGBItem.removeAllLine();
                this.removeItem(this.outAItem);
                this.outAItem.removeAllLine();
            }
            else {
                this.removeItem(this.outRItem);
                this.outRItem.removeAllLine();
                this.removeItem(this.outGItem);
                this.outGItem.removeAllLine();
                this.removeItem(this.outBItem);
                this.outBItem.removeAllLine();
                this.removeItem(this.outXYItem);
                this.outXYItem.removeAllLine();
                this.removeItem(this.outRGBItem);
                this.outRGBItem.removeAllLine();
                this.removeItem(this.outAItem);
                this.outAItem.removeAllLine();
                this.height = 80;
            }
            this.resetBgSize();
        };
        MathDynamicNodeUI.prototype.setInItemByData = function (ary) {
            _super.prototype.setInItemByData.call(this, ary);
            this.intAItem.changeType(ary[0].type);
            this.intBItem.changeType(ary[1].type);
        };
        MathDynamicNodeUI.prototype.setOutItemByData = function (ary) {
            _super.prototype.setOutItemByData.call(this, ary);
            this.outItem.changeType(ary[0].type);
            if (ary.length >= 2) {
                this.addItems(this.outRItem);
                this.addItems(this.outGItem);
                this.addItems(this.outBItem);
                this.addItems(this.outXYItem);
            }
            if (ary.length >= 6) {
                this.addItems(this.outRGBItem);
                this.addItems(this.outAItem);
            }
        };
        return MathDynamicNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.MathDynamicNodeUI = MathDynamicNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathDynamicNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathAddNodeUI = /** @class */ (function (_super) {
        __extends(MathAddNodeUI, _super);
        function MathAddNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeAdd;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.ADD;
            _this.initItem();
            _this.drawTitleToFrame("加法(Add+)");
            return _this;
        }
        return MathAddNodeUI;
    }(materialui.MathDynamicNodeUI));
    materialui.MathAddNodeUI = MathAddNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathAddNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathSubNodeUI = /** @class */ (function (_super) {
        __extends(MathSubNodeUI, _super);
        function MathSubNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeSub;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.SUB;
            _this.initItem();
            _this.drawTitleToFrame("减法(Sub-)");
            return _this;
        }
        return MathSubNodeUI;
    }(materialui.MathDynamicNodeUI));
    materialui.MathSubNodeUI = MathSubNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathSubNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathMulNodeUI = /** @class */ (function (_super) {
        __extends(MathMulNodeUI, _super);
        function MathMulNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeMul;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.MUL;
            _this.initItem();
            _this.drawTitleToFrame("乘法(Mul*)");
            return _this;
        }
        return MathMulNodeUI;
    }(materialui.MathDynamicNodeUI));
    materialui.MathMulNodeUI = MathMulNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathMulNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathDivNodeUI = /** @class */ (function (_super) {
        __extends(MathDivNodeUI, _super);
        function MathDivNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeDiv;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.DIV;
            _this.initItem();
            _this.drawTitleToFrame("除法(Div/)");
            return _this;
        }
        return MathDivNodeUI;
    }(materialui.MathDynamicNodeUI));
    materialui.MathDivNodeUI = MathDivNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathDivNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathStaticNodeUI = /** @class */ (function (_super) {
        __extends(MathStaticNodeUI, _super);
        function MathStaticNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 80;
            _this.resetBgSize();
            return _this;
        }
        MathStaticNodeUI.prototype.initItem = function () {
            this.intItem = new materialui.ItemMaterialUI("in", materialui.MaterialItemType.FLOAT);
            this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.FLOAT, false);
            this.addItems(this.intItem);
            this.addItems(this.outItem);
        };
        return MathStaticNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.MathStaticNodeUI = MathStaticNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathStaticNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathSinNodeUI = /** @class */ (function (_super) {
        __extends(MathSinNodeUI, _super);
        function MathSinNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeSin;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.SIN;
            _this.initItem();
            _this.drawTitleToFrame("正弦(sin)");
            return _this;
        }
        return MathSinNodeUI;
    }(materialui.MathStaticNodeUI));
    materialui.MathSinNodeUI = MathSinNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathSinNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathCosNodeUI = /** @class */ (function (_super) {
        __extends(MathCosNodeUI, _super);
        function MathCosNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeCos;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.COS;
            _this.initItem();
            _this.drawTitleToFrame("余弦(cos)");
            return _this;
        }
        return MathCosNodeUI;
    }(materialui.MathStaticNodeUI));
    materialui.MathCosNodeUI = MathCosNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathCosNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector3D = Pan3d.Vector3D;
    var ConstVec3NodeUI = /** @class */ (function (_super) {
        __extends(ConstVec3NodeUI, _super);
        function ConstVec3NodeUI() {
            var _this = _super.call(this) || this;
            _this._bastTitleStr = "vec3";
            _this.gap = 20;
            _this.width = 162;
            _this.height = 95;
            _this._constValue = new Vector3D;
            _this.initNodeTree();
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC3, false);
            _this.addItems(_this.outItem);
            _this.outAItem = new materialui.ItemMaterialUI("alpha", materialui.MaterialItemType.FLOAT, false);
            _this.addItems(_this.outAItem);
            _this.outRGBAItem = new materialui.ItemMaterialUI("rgba", materialui.MaterialItemType.VEC4, false);
            _this.addItems(_this.outRGBAItem);
            _this.drawTitleToFrame("vec3");
            return _this;
        }
        ConstVec3NodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.constValue = this._constValue;
            return obj;
        };
        ConstVec3NodeUI.prototype.initNodeTree = function () {
            this.nodeTree = new materialui.NodeTreeVec3;
            this.nodeTree.ui = this;
            this.nodeTree.type = materialui.NodeTree.VEC3;
        };
        ConstVec3NodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.constValue = new Vector3D(obj.constValue.x, obj.constValue.y, obj.constValue.z, obj.constValue.w);
            this.nodeTree.constVec3 = this.constValue;
            this.showDynamic();
        };
        Object.defineProperty(ConstVec3NodeUI.prototype, "constValue", {
            get: function () {
                return this._constValue;
            },
            set: function (value) {
                this._constValue = value;
                this.nodeTree.constVec3 = value;
                //_titleLabel.text = _bastTitleStr + "(" + getNumStr(value.x) + "," + getNumStr(value.y) + "," + getNumStr(value.z) + "," + getNumStr(value.w) + ")"
                this.showDynamic();
            },
            enumerable: true,
            configurable: true
        });
        ConstVec3NodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("vec3<" + this.nodeTree.paramName + ">(" + this.getNumStr(this.constValue.x) + "," + this.getNumStr(this.constValue.y) + "," + this.getNumStr(this.constValue.z) + "," + this.getNumStr(this.constValue.w) + ")");
            }
            else {
                this.drawTitleToFrame("vec3(" + this.getNumStr(this.constValue.x) + "," + this.getNumStr(this.constValue.y) + "," + this.getNumStr(this.constValue.z) + "," + this.getNumStr(this.constValue.w) + ")");
            }
        };
        ConstVec3NodeUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        return ConstVec3NodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.ConstVec3NodeUI = ConstVec3NodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=ConstVec3NodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var ConstVec2NodeUI = /** @class */ (function (_super) {
        __extends(ConstVec2NodeUI, _super);
        function ConstVec2NodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 95;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this.nodeTree = new materialui.NodeTreeVec2;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.VEC2;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC2, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("vec2");
            return _this;
        }
        Object.defineProperty(ConstVec2NodeUI.prototype, "constValue", {
            get: function () {
                return this.nodeTree.constValue;
            },
            set: function (value) {
                this.nodeTree.constValue = value;
                this.showDynamic();
            },
            enumerable: true,
            configurable: true
        });
        ConstVec2NodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.constValue = this.constValue;
            return obj;
        };
        ConstVec2NodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.constValue = new Vector2D(obj.constValue.x, obj.constValue.y);
            this.showDynamic();
        };
        ConstVec2NodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("vec2<" + this.nodeTree.paramName + ">(" + this.getNumStr(this.constValue.x) + "," + this.getNumStr(this.constValue.y) + ")");
            }
            else {
                this.drawTitleToFrame("vec2(" + this.getNumStr(this.constValue.x) + "," + this.getNumStr(this.constValue.y) + ")");
            }
        };
        ConstVec2NodeUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        return ConstVec2NodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.ConstVec2NodeUI = ConstVec2NodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=ConstVec2NodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var ConstFloatNodeUI = /** @class */ (function (_super) {
        __extends(ConstFloatNodeUI, _super);
        function ConstFloatNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this._constValue = 0;
            _this.nodeTree = new materialui.NodeTreeFloat;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.FLOAT;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.FLOAT, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("float");
            return _this;
        }
        ConstFloatNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.constValue = obj.constValue;
            this.nodeTree.constValue = this.constValue;
            this.showDynamic();
        };
        ConstFloatNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.constValue = this._constValue;
            return obj;
        };
        Object.defineProperty(ConstFloatNodeUI.prototype, "constValue", {
            get: function () {
                return this._constValue;
            },
            set: function (value) {
                this._constValue = value;
                this.nodeTree.constValue = value;
                this.showDynamic();
            },
            enumerable: true,
            configurable: true
        });
        ConstFloatNodeUI.prototype.showDynamic = function () {
            if (this.nodeTree.isDynamic) {
                this.drawTitleToFrame("float<" + this.nodeTree.paramName + ">(" + this.getNumStr(this._constValue) + ")");
            }
            else {
                this.drawTitleToFrame("float(" + this.getNumStr(this._constValue) + ")");
            }
        };
        ConstFloatNodeUI.prototype.getNumStr = function (num) {
            var n = Math.floor(num * 100) / 100;
            return n.toString();
        };
        return ConstFloatNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.ConstFloatNodeUI = ConstFloatNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=ConstFloatNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var FresnelNodeUI = /** @class */ (function (_super) {
        __extends(FresnelNodeUI, _super);
        function FresnelNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this.nodeTree = new materialui.NodeTreeFresnel;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.FRESNEL;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.FLOAT, false);
            _this.addItems(_this.outItem);
            _this.inAItem = new materialui.ItemMaterialUI("scale", materialui.MaterialItemType.FLOAT, true);
            _this.addItems(_this.inAItem);
            _this.inBItem = new materialui.ItemMaterialUI("add", materialui.MaterialItemType.FLOAT, true);
            _this.addItems(_this.inBItem);
            _this.drawTitleToFrame("Fresnel");
            return _this;
        }
        return FresnelNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.FresnelNodeUI = FresnelNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=FresnelNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TexCoordNodeUI = /** @class */ (function (_super) {
        __extends(TexCoordNodeUI, _super);
        function TexCoordNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this.nodeTree = new materialui.NodeTreeTexCoord;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TEXCOORD;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC2, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("TexCoord");
            return _this;
        }
        return TexCoordNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.TexCoordNodeUI = TexCoordNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=TexCoordNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TexLightUvNodeUI = /** @class */ (function (_super) {
        __extends(TexLightUvNodeUI, _super);
        function TexLightUvNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this.nodeTree = new materialui.NodeTreeLightuv;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TEXCOORDLIGHT;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC2, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("Lightuv");
            return _this;
        }
        return TexLightUvNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.TexLightUvNodeUI = TexLightUvNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=TexLightUvNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector2D = Pan3d.Vector2D;
    var PannerNodeUI = /** @class */ (function (_super) {
        __extends(PannerNodeUI, _super);
        function PannerNodeUI() {
            var _this = _super.call(this) || this;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 85;
            _this._coordinate = new Vector2D;
            _this._speed = new Vector2D;
            _this.nodeTree = new materialui.NodeTreePanner;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.PANNER;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC2, false);
            _this.addItems(_this.outItem);
            _this.inItem = new materialui.ItemMaterialUI("coordinate", materialui.MaterialItemType.VEC2, true);
            _this.addItems(_this.inItem);
            _this.inSpeedItem = new materialui.ItemMaterialUI("speed", materialui.MaterialItemType.VEC2, true);
            _this.addItems(_this.inSpeedItem);
            _this.drawTitleToFrame("UV");
            return _this;
        }
        Object.defineProperty(PannerNodeUI.prototype, "speed", {
            get: function () {
                return this._speed;
            },
            set: function (value) {
                this._speed = value;
                this.nodeTree.speedValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PannerNodeUI.prototype, "coordinate", {
            get: function () {
                return this._coordinate;
            },
            set: function (value) {
                this._coordinate = value;
                this.nodeTree.coordinateValue = value;
            },
            enumerable: true,
            configurable: true
        });
        PannerNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.coordinate = new Vector2D(obj.coordinate.x, obj.coordinate.y);
            this.speed = new Vector2D(obj.speed.x, obj.speed.y);
        };
        return PannerNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.PannerNodeUI = PannerNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=PannerNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var TimeNodeUI = /** @class */ (function (_super) {
        __extends(TimeNodeUI, _super);
        function TimeNodeUI() {
            var _this = _super.call(this) || this;
            _this._speed = 1;
            _this.gap = 20;
            _this.width = 162;
            _this.height = 65;
            _this.nodeTree = new materialui.NodeTreeTime;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.TIME;
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.FLOAT, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("Time");
            return _this;
        }
        Object.defineProperty(TimeNodeUI.prototype, "speed", {
            get: function () {
                return this._speed;
            },
            set: function (value) {
                this._speed = value;
                this.nodeTree.speed = this.speed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeNodeUI.prototype, "timeValue", {
            get: function () {
                return this.nodeTree.timeValue;
            },
            set: function (value) {
                this.nodeTree.timeValue = value;
            },
            enumerable: true,
            configurable: true
        });
        TimeNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.speed = this._speed;
            if (!this.timeValue) {
                this.timeValue = new Vector2D(1, 1);
            }
            obj.timeValue = this.timeValue;
            return obj;
        };
        TimeNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            if (obj.speed) {
                this.speed = obj.speed;
                ;
            }
            else {
                this.speed = 1;
            }
            if (obj.timeValue) {
                this.timeValue = new Vector2D(obj.timeValue.x, obj.timeValue.y);
            }
            else {
                this.timeValue = new Vector2D(1, 1);
            }
            this.nodeTree.speed = this.speed;
        };
        return TimeNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.TimeNodeUI = TimeNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=TimeNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Vector3D = Pan3d.Vector3D;
    var NormalNodeUI = /** @class */ (function (_super) {
        __extends(NormalNodeUI, _super);
        function NormalNodeUI() {
            var _this = _super.call(this) || this;
            _this._bastTitleStr = "Normal";
            _this.gap = 20;
            _this.width = 162;
            _this.height = 60;
            _this._constValue = new Vector3D;
            _this.initNodeTree();
            _this.outItem = new materialui.ItemMaterialUI("out", materialui.MaterialItemType.VEC3, false);
            _this.addItems(_this.outItem);
            _this.drawTitleToFrame("Normal");
            return _this;
        }
        NormalNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.constValue = this._constValue;
            return obj;
        };
        NormalNodeUI.prototype.initNodeTree = function () {
            this.nodeTree = new materialui.NodeTreeNormal;
            this.nodeTree.ui = this;
            this.nodeTree.type = materialui.NodeTree.NORMAL;
        };
        NormalNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.constValue = new Vector3D(obj.constValue.x, obj.constValue.y, obj.constValue.z, obj.constValue.w);
            this.nodeTree.constVec3 = this.constValue;
        };
        Object.defineProperty(NormalNodeUI.prototype, "constValue", {
            get: function () {
                return this._constValue;
            },
            set: function (value) {
                this._constValue = value;
                this.nodeTree.constVec3 = value;
            },
            enumerable: true,
            configurable: true
        });
        return NormalNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.NormalNodeUI = NormalNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=NormalNodeUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var MathFunNodeUI = /** @class */ (function (_super) {
        __extends(MathFunNodeUI, _super);
        function MathFunNodeUI() {
            var _this = _super.call(this) || this;
            _this.left = 600;
            _this.top = 300;
            _this.nodeTree = new materialui.NodeTreeFun;
            _this.nodeTree.ui = _this;
            _this.nodeTree.type = materialui.NodeTree.FUN;
            _this.drawTitleToFrame("函数(Fun*)");
            _this.gap = 20;
            _this.width = 162;
            _this.height = 30;
            _this.resetBgSize();
            _this.inPutFunStr();
            return _this;
        }
        /*
        public onKeyDown($evt: KeyboardEvent): void {
            document.addEventListener(MouseType.KeyDown, ($evt: KeyboardEvent) => { this.onKeyDown($evt) })
            if ($evt.keyCode == KeyboardType.G) {
                var $agalStr: string = "vec3 ic(vec3 lightuv,float size){\n" +
                    "return lightuv*size;\n" +
                    "}\n";

                this.inPutFunStr($agalStr)
            }
        }
        */
        MathFunNodeUI.prototype.inPutFunStr = function ($baseStr) {
            if ($baseStr === void 0) { $baseStr = null; }
            var $agalStr = "vec3 die(vec3 lightuv,vec3 movePos){\n" +
                "return vec3(1,0,1);\n" +
                "}\n";
            if ($baseStr) {
                $agalStr = $baseStr;
            }
            var $funName = materialui.NodeTreeFun.getMathFunName($agalStr);
            var $returnType = materialui.NodeTreeFun.getMathFunReturnType($agalStr);
            var $arr = materialui.NodeTreeFun.getDataMathFunArr($agalStr);
            this.nodeTree.funStr = $agalStr;
            this.nodeTree.funName = $funName;
            this.clearNode();
            for (var i = 0; i < $arr.length; i++) {
                var $temp = new materialui.ItemMaterialUI($arr[i].name, $arr[i].type);
                this.addItems($temp);
                this.addEvents($temp);
                this.addDisEvent($temp);
            }
            this.outItem = new materialui.ItemMaterialUI("out", $returnType, false);
            this.addItems(this.outItem);
            this.addEvents(this.outItem);
            this.addDisEvent(this.outItem);
            this.resetBgSize();
            this.drawTitleToFrame("函数(" + $funName + ")");
        };
        MathFunNodeUI.prototype.clearNode = function () {
            this.removeAllNodeLine();
            while (this.inPutItemVec.length) {
                this.removeItem(this.inPutItemVec.pop());
            }
            while (this.outPutItemVec.length) {
                this.removeItem(this.outPutItemVec.pop());
            }
        };
        MathFunNodeUI.prototype.resetBgSize = function () {
            this.height = this.inPutItemVec.length * 30;
            _super.prototype.resetBgSize.call(this);
        };
        MathFunNodeUI.prototype.addEvents = function ($nodeUI) {
            $nodeUI.addEventListener("Connect", this.onConnect, this);
        };
        MathFunNodeUI.prototype.addDisEvent = function ($nodeUI) {
            $nodeUI.addEventListener("DisConnect", this.disConnect, this);
        };
        MathFunNodeUI.prototype.removeEvents = function ($nodeUI) {
            $nodeUI.removeEventListener("Connect", this.onConnect, this);
        };
        MathFunNodeUI.prototype.removeDisEvent = function ($nodeUI) {
            $nodeUI.removeEventListener("DisConnect", this.disConnect, this);
        };
        MathFunNodeUI.prototype.disConnect = function (event) {
            this.checkItem();
        };
        MathFunNodeUI.prototype.onConnect = function (event) {
            var target = event.target;
            var typets = target.typets;
            target.changeType(typets);
            this.checkItem();
        };
        MathFunNodeUI.prototype.checkItem = function () {
            // console.log("checkItem")
            this.resetBgSize();
        };
        MathFunNodeUI.prototype.setData = function (obj) {
            _super.prototype.setData.call(this, obj);
            this.nodeTree.funStr = obj.funStr;
            this.inPutFunStr(this.nodeTree.funStr);
        };
        MathFunNodeUI.prototype.getData = function () {
            var obj = _super.prototype.getData.call(this);
            obj.funStr = this.nodeTree.funStr;
            return obj;
        };
        MathFunNodeUI.prototype.setInItemByData = function (ary) {
            _super.prototype.setInItemByData.call(this, ary);
            // console.log("setInItemByData")
        };
        MathFunNodeUI.prototype.setOutItemByData = function (ary) {
            _super.prototype.setOutItemByData.call(this, ary);
            //  console.log("setOutItemByData")
        };
        return MathFunNodeUI;
    }(materialui.BaseMaterialNodeUI));
    materialui.MathFunNodeUI = MathFunNodeUI;
})(materialui || (materialui = {}));
//# sourceMappingURL=MathFunNodeUI.js.map
var materialui;
(function (materialui) {
    var RegisterItem = /** @class */ (function () {
        function RegisterItem($id) {
            this.id = $id;
        }
        RegisterItem.prototype.getUse = function ($nodeTree) {
            var $type = $nodeTree.type;
            if ($type == materialui.NodeTree.VEC3) {
                if (!this.xUse) {
                    this.xUse = true;
                    this.yUse = true;
                    this.zUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 0;
                    return true;
                }
            }
            else if ($type == materialui.NodeTree.VEC2) {
                if (!this.xUse) {
                    this.xUse = true;
                    this.yUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 0;
                    return true;
                }
                else if (!this.yUse) {
                    this.yUse = true;
                    this.zUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 1;
                    return true;
                }
                else if (!this.zUse) {
                    this.zUse = true;
                    this.wUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 2;
                    return true;
                }
            }
            else if ($type == materialui.NodeTree.FLOAT) {
                if (!this.xUse) {
                    this.xUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 0;
                    return true;
                }
                else if (!this.yUse) {
                    this.yUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 1;
                    return true;
                }
                else if (!this.zUse) {
                    this.zUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 2;
                    return true;
                }
                else if (!this.wUse) {
                    this.wUse = true;
                    $nodeTree.regResultConst = this;
                    $nodeTree.regConstIndex = 3;
                    return true;
                }
            }
            return false;
        };
        return RegisterItem;
    }());
    materialui.RegisterItem = RegisterItem;
})(materialui || (materialui = {}));
//# sourceMappingURL=RegisterItem.js.map
var materialui;
(function (materialui) {
    var Scene_data = Pan3d.Scene_data;
    var MaterialBaseParam = Pan3d.MaterialBaseParam;
    var TexItem = Pan3d.TexItem;
    var Vector3D = Pan3d.Vector3D;
    var TextureCube = Pan3d.TextureCube;
    var ConstItem = Pan3d.ConstItem;
    var CubemapLoad = Pan3d.CubemapLoad;
    var LoadManager = Pan3d.LoadManager;
    var TextureManager = Pan3d.TextureManager;
    var CompileTwo = /** @class */ (function () {
        function CompileTwo() {
            this._timeID = 0;
            this._fcBeginID = 0;
            this.initReg();
            new Vector3D;
            this.defaultUvReg = new materialui.RegisterItem(0);
        }
        CompileTwo.prototype.initReg = function () {
            this.fragmentTempList = new Array;
            this.fragmentTexList = new Array;
            this.fragmentConstList = new Array;
            for (var i = 0; i < 8; i++) {
                this.fragmentTempList.push(new materialui.RegisterItem(i));
                this.fragmentTexList.push(new materialui.RegisterItem(i));
            }
            for (i = 0; i < 28; i++) {
                this.fragmentConstList.push(new materialui.RegisterItem(i));
            }
        };
        CompileTwo.prototype.compile = function ($priorityList, $materialTree) {
            materialui.NodeTree.jsMode = true;
            this.priorityList = $priorityList;
            this.strVec = new Array;
            this.texVec = new Array;
            this.constVec = new Array;
            this.hasTime = false;
            this.useNormal = false;
            this.cubeTextItem = null;
            this.initBaseFc();
            this.funNodeStr = "";
            this.FunDic = {};
            for (var i = this.priorityList.length - 1; i >= 0; i--) {
                var treelist = this.priorityList[i];
                for (var j = 0; j < treelist.length; j++) {
                    this.processNode(treelist[j]);
                }
            }
            var resultStr = this.getGLSLStr();
            $materialTree.shaderStr = resultStr;
            $materialTree.constList = this.constVec;
            $materialTree.texList = this.texVec;
            $materialTree.cubeTextItem = this.cubeTextItem;
            var $materialBaseParam = new MaterialBaseParam();
            $materialBaseParam.setData($materialTree, []);
            $materialTree.fcNum = this.getMaxFc();
            $materialTree.fcData = this.makeFc($materialTree.fcNum);
            $materialTree.hasTime = this.hasTime;
            $materialTree.timeSpeed = this.timeSpeed;
            $materialTree.timeValue = this.timeValue;
            $materialTree.useNormal = this.useNormal;
            $materialTree.useUv = this.useUv;
            $materialTree.useLightUv = this.useLightUv;
            $materialTree.roughness = 0;
            return resultStr;
        };
        CompileTwo.prototype.getMaxFc = function () {
            var maxID = 0;
            if (this.constVec.length) {
                maxID = this.constVec[this.constVec.length - 1].id + 1;
            }
            else {
                if (this._fcBeginID > 0) {
                    maxID = this._fcBeginID;
                }
            }
            return maxID;
        };
        CompileTwo.prototype.makeFc = function (fcNum) {
            var fcData = new Float32Array(fcNum * 4);
            for (var i = 0; i < this.constVec.length; i++) {
                this.constVec[i].creat(fcData);
            }
            return fcData;
        };
        CompileTwo.prototype.getGLSLStr = function () {
            var mainStr = "";
            for (var i = 0; i < this.strVec.length; i++) {
                mainStr += this.strVec[i] + "\n";
            }
            var perStr = "precision mediump float;\n";
            var texStr = "";
            for (i = 0; i < this.texVec.length; i++) {
                if (this.texVec[i].type == TexItem.CUBEMAP) {
                    texStr += "uniform samplerCube fs" + this.texVec[i].id + ";\n";
                }
                else {
                    texStr += "uniform sampler2D fs" + this.texVec[i].id + ";\n";
                }
            }
            if (this.cubeTextItem) {
                texStr += "uniform samplerCube skyBoxCube; \n";
            }
            var constStr = "";
            var maxID = 0;
            if (this.constVec.length) {
                maxID = this.constVec[this.constVec.length - 1].id + 1;
            }
            else {
                if (this._fcBeginID > 0) {
                    maxID = this._fcBeginID;
                }
            }
            this.fcNum = maxID;
            if (this.fcNum > 0) {
                constStr += "uniform vec4 fc[" + (this.fcNum) + "];\n";
            }
            var varyStr = "";
            varyStr += "varying vec2 v0;\n";
            varyStr += "varying highp vec3 vPos;\n";
            varyStr += "uniform vec3 cam3DPos;\n";
            if (this.hasTime) {
                varyStr += "uniform float time;\n";
            }
            if (this.useUv) {
                varyStr += "varying vec2 uvpos;\n";
            }
            if (this.useLightUv) {
                varyStr += "varying vec2 lightuv;\n";
            }
            if (this.useNormal) {
                varyStr += "varying vec3 T;\n";
                varyStr += "varying vec3 B;\n";
                varyStr += "varying vec3 N;\n";
                varyStr += "vec3 normalpic(vec3 n) { \n" +
                    "n=2.0*n-vec3(1.0);\n" +
                    "return normalize(T*n.x+B*n.y+N*n.z);\n" +
                    "}\n";
            }
            var beginStr = "void main(void){\n";
            if (this.useNormal) {
                var inputNormal = this.getInputNormal();
                if (inputNormal.parentNodeItem) {
                    beginStr += "vec3 normalVec = normalpic(" + "texture2D(fs" + inputNormal.parentNodeItem.node.regResultTex.id + ",v0).xyz)" + CompileTwo.END + "\n";
                }
                else {
                    beginStr += "vec3 normalVec = " + "N.xyz" + CompileTwo.END + "\n";
                }
            }
            var endStr = "\n}";
            var resultStr = perStr + texStr + constStr + varyStr + this.funNodeStr + beginStr + mainStr + endStr;
            console.log(resultStr);
            return resultStr;
        };
        CompileTwo.prototype.getInputNormal = function () {
            for (var i = this.priorityList.length - 1; i >= 0; i--) {
                var treelist = this.priorityList[i];
                for (var j = 0; j < treelist.length; j++) {
                    if (treelist[j].type == materialui.NodeTree.OP) {
                        return treelist[j].inputVec[1];
                    }
                }
            }
            return null;
        };
        CompileTwo.prototype.getFragmentTex = function ($nodeTreeTex) {
            if ($nodeTreeTex === void 0) { $nodeTreeTex = null; }
            for (var i = 0; i < this.fragmentTexList.length; i++) {
                if (!this.fragmentTexList[i].inUse) {
                    this.fragmentTexList[i].inUse = true;
                    this.fragmentTexList[i].url = "";
                    return this.fragmentTexList[i];
                }
            }
            return null;
        };
        CompileTwo.prototype.getFragmentTemp = function () {
            for (var i = 0; i < this.fragmentTempList.length; i++) {
                if (!this.fragmentTempList[i].inUse) {
                    this.fragmentTempList[i].inUse = true;
                    return this.fragmentTempList[i];
                }
            }
            return null;
        };
        CompileTwo.prototype.processTexCubeNode = function ($node) {
            var texItem = new TextureCube;
            texItem.url = $node.url;
            texItem.isDynamic = $node.isDynamic;
            texItem.paramName = $node.paramName;
            texItem.isMain = $node.isMain;
            texItem.wrap = $node.wrap;
            texItem.filter = $node.filter;
            texItem.mipmap = $node.mipmap;
            texItem.permul = $node.permul;
            TextureManager.getInstance().getTexture(Scene_data.fileRoot + texItem.url, function ($texture) {
                texItem.textureRes = $texture;
            });
            LoadManager.getInstance().load(Scene_data.fileRoot + texItem.url, LoadManager.IMG_TYPE, function ($img, $info) {
                //   texItem.cubeTextWebgl = CubemapLoad.makeTempCubeTextture($img)
            });
            this.cubeTextItem = texItem;
        };
        CompileTwo.prototype.processTex3DNode = function ($node) {
            var str = "";
            var input = $node.inputVec[0];
            var regtex = this.getFragmentTex($node);
            var regtemp = this.getFragmentTemp();
            var resultStr;
            if (regtemp.hasInit) {
                resultStr = CompileTwo.FT + regtemp.id;
            }
            else {
                resultStr = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id;
                regtemp.hasInit = true;
            }
            if (input.parentNodeItem) {
                var pNode = input.parentNodeItem.node;
                str = resultStr + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + "textureCube" + CompileTwo.LEFT_PARENTH + CompileTwo.FS + regtex.id + CompileTwo.COMMA + pNode.getComponentID(input.parentNodeItem.id) + CompileTwo.RIGHT_PARENTH + CompileTwo.END;
            }
            $node.regResultTemp = regtemp;
            $node.regResultTex = regtex;
            $node.shaderStr = str;
            this.strVec.push(str);
            var texItem = new TexItem;
            texItem.id = regtex.id;
            texItem.url = $node.url;
            texItem.isDynamic = $node.isDynamic;
            texItem.paramName = $node.paramName;
            texItem.isMain = $node.isMain;
            texItem.wrap = $node.wrap;
            texItem.filter = $node.filter;
            texItem.mipmap = $node.mipmap;
            texItem.permul = $node.permul;
            texItem.type = TexItem.CUBEMAP;
            LoadManager.getInstance().load(Scene_data.fileRoot + texItem.url, LoadManager.IMG_TYPE, function ($img, $info) {
                texItem.textureRes = new Pan3d.TextureRes();
                texItem.textureRes.texture = CubemapLoad.makeTempCubeTextture($img);
            });
            this.texVec.push(texItem);
            input.hasCompiled = true;
            if (pNode) {
                pNode.releaseUse();
            }
        };
        CompileTwo.prototype.processTexNode = function ($node) {
            var str = "";
            var input = $node.inputVec[0];
            var regtex = this.getFragmentTex($node);
            var regtemp = this.getFragmentTemp();
            var resultStr;
            if (regtemp.hasInit) {
                resultStr = CompileTwo.FT + regtemp.id;
            }
            else {
                resultStr = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id;
                regtemp.hasInit = true;
            }
            if (input.parentNodeItem) {
                var pNode = input.parentNodeItem.node;
                str = resultStr + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.texture2D + CompileTwo.LEFT_PARENTH + CompileTwo.FS + regtex.id + CompileTwo.COMMA + pNode.getComponentID(input.parentNodeItem.id) + CompileTwo.RIGHT_PARENTH + CompileTwo.END;
            }
            else {
                str = resultStr + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.texture2D + CompileTwo.LEFT_PARENTH + CompileTwo.FS + regtex.id + CompileTwo.COMMA + CompileTwo.VI + this.defaultUvReg.id + CompileTwo.RIGHT_PARENTH + CompileTwo.END;
            }
            if ($node.permul) {
                str += CompileTwo.LN + CompileTwo.FT + regtemp.id + CompileTwo.XYZ + CompileTwo.SPACE + CompileTwo.MUL_EQU_MATH + CompileTwo.SPACE + CompileTwo.FT + regtemp.id + CompileTwo.W + CompileTwo.END;
            }
            $node.regResultTemp = regtemp;
            $node.regResultTex = regtex;
            $node.shaderStr = str;
            this.strVec.push(str);
            var texItem = new TexItem;
            texItem.id = regtex.id;
            texItem.url = $node.url;
            texItem.isDynamic = $node.isDynamic;
            texItem.paramName = $node.paramName;
            texItem.isMain = $node.isMain;
            texItem.wrap = $node.wrap;
            texItem.filter = $node.filter;
            texItem.mipmap = $node.mipmap;
            texItem.permul = $node.permul;
            TextureManager.getInstance().getTexture(Scene_data.fileRoot + texItem.url, function ($texture) {
                texItem.textureRes = $texture;
            });
            this.texVec.push(texItem);
            input.hasCompiled = true;
            if (pNode) {
                pNode.releaseUse();
            }
        };
        CompileTwo.prototype.processFunNode = function ($node) {
            var $nodeTreeFun = $node;
            var str = "";
            var input0 = $node.inputVec[0];
            var output = $node.outputVec[0];
            var regtemp = this.getFragmentTemp();
            var resultStr = "";
            if (!regtemp.hasInit) { //vec4(0,0,0,0)
                resultStr = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.DEFAULT_VEC4 + CompileTwo.END + CompileTwo.LN;
                regtemp.hasInit = true;
            }
            if (output.type == materialui.MaterialItemType.FLOAT) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.X + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else if (output.type == materialui.MaterialItemType.VEC2) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.XY + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else if (output.type == materialui.MaterialItemType.VEC3) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.XYZ + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else {
                str = CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            str = resultStr + str;
            var $kfuncstr = $nodeTreeFun.funName + "(";
            for (var i = 0; i < $node.inputVec.length; i++) {
                var $inputNodeTreeInputItem = $node.inputVec[i];
                $inputNodeTreeInputItem.hasCompiled = true;
                $inputNodeTreeInputItem.parentNodeItem.node.releaseUse();
                var kkkk = $inputNodeTreeInputItem.parentNodeItem.node.getComponentID($inputNodeTreeInputItem.parentNodeItem.id);
                $kfuncstr += kkkk;
                if (i < $node.inputVec.length - 1) {
                    $kfuncstr += ",";
                }
            }
            $kfuncstr += ")" + CompileTwo.END;
            str += $kfuncstr;
            $node.regResultTemp = regtemp;
            $node.shaderStr = str;
            this.strVec.push(str);
            if (!this.FunDic[$nodeTreeFun.funName]) {
                //函数只会添加一组
                this.funNodeStr += $nodeTreeFun.funStr;
                this.FunDic[$nodeTreeFun.funName] = $nodeTreeFun;
            }
        };
        CompileTwo.prototype.processDynamicNode = function ($node, opCode) {
            var str = "";
            var input0 = $node.inputVec[0];
            var input1 = $node.inputVec[1];
            var pNode0 = input0.parentNodeItem.node;
            var pNode1 = input1.parentNodeItem.node;
            var output = $node.outputVec[0];
            var regtemp = this.getFragmentTemp();
            var resultStr = "";
            if (!regtemp.hasInit && !(input0.type == materialui.MaterialItemType.VEC4 || input1.type == materialui.MaterialItemType.VEC4)) { //vec4(0,0,0,0)
                resultStr = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.DEFAULT_VEC4 + CompileTwo.END + CompileTwo.LN;
                regtemp.hasInit = true;
            }
            if (input0.type == materialui.MaterialItemType.VEC4 || input1.type == materialui.MaterialItemType.VEC4) {
                if (!regtemp.hasInit) {
                    resultStr = CompileTwo.VEC4 + CompileTwo.SPACE;
                    regtemp.hasInit = true;
                }
                str = CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else if (output.type == materialui.MaterialItemType.FLOAT) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.X + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else if (output.type == materialui.MaterialItemType.VEC2) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.XY + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            else if (output.type == materialui.MaterialItemType.VEC3) {
                str = CompileTwo.FT + regtemp.id + CompileTwo.XYZ + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE;
            }
            str += pNode0.getComponentID(input0.parentNodeItem.id);
            str += CompileTwo.SPACE + opCode + CompileTwo.SPACE;
            str += pNode1.getComponentID(input1.parentNodeItem.id);
            str = resultStr + str + CompileTwo.END;
            input0.hasCompiled = true;
            input1.hasCompiled = true;
            pNode0.releaseUse();
            pNode1.releaseUse();
            $node.regResultTemp = regtemp;
            $node.shaderStr = str;
            this.strVec.push(str);
        };
        CompileTwo.prototype.processNode = function ($node) {
            switch ($node.type) {
                case materialui.NodeTree.VEC3:
                case materialui.NodeTree.FLOAT:
                case materialui.NodeTree.VEC2:
                    this.processVec3Node($node);
                    break;
                case materialui.NodeTree.TEX:
                    this.processTexNode($node);
                    break;
                case materialui.NodeTree.TEX3D:
                    this.processTex3DNode($node);
                    break;
                case materialui.NodeTree.TEXCUBE:
                    this.processTexCubeNode($node);
                    break;
                case materialui.NodeTree.FUN:
                    this.processFunNode($node);
                    break;
                case materialui.NodeTree.MUL:
                    this.processDynamicNode($node, "*");
                    break;
                case materialui.NodeTree.ADD:
                    this.processDynamicNode($node, "+");
                    break;
                case materialui.NodeTree.SUB:
                    this.processDynamicNode($node, "-");
                    break;
                case materialui.NodeTree.DIV:
                    this.processDynamicNode($node, "/");
                    break;
                case materialui.NodeTree.OP:
                    this.processOpNode($node);
                    break;
                case materialui.NodeTree.SIN:
                    this.processStaticNode($node, CompileTwo.SIN);
                    break;
                case materialui.NodeTree.COS:
                    this.processStaticNode($node, CompileTwo.COS);
                    break;
                case materialui.NodeTree.NORMAL:
                    this.useNormal = true;
                    break;
                case materialui.NodeTree.TEXCOORD:
                    this.useUv = true;
                    break;
                case materialui.NodeTree.TEXCOORDLIGHT:
                    this.useLightUv = true;
                    break;
                case materialui.NodeTree.TIME:
                    // this.processTimeNode($node);
                    this.hasTime = true;
                    this.timeSpeed = $node.speed;
                    this.timeValue = $node.timeValue;
                    break;
                default:
                    break;
            }
        };
        CompileTwo.prototype.processTimeNode = function ($node) {
            var str = "";
            var regtemp = this.getFragmentTemp();
            var pNode = new materialui.NodeTreeFloat;
            pNode.type = materialui.NodeTree.FLOAT;
            pNode.constValue = $node.speed;
            this.processVec3Node(pNode);
            if (!regtemp.hasInit) {
                str = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.DEFAULT_VEC4 + CompileTwo.END;
                regtemp.hasInit = true;
                this.strVec.push(str);
            }
            //str =  FT + regtemp.id + X + SPACE + EQU + SPACE + FC + ZERO + W + SPACE +  MUL_MATH + SPACE + pNode.getComponentID(0) + END;
            str = CompileTwo.FT + regtemp.id + CompileTwo.X + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + this.timeStr + CompileTwo.SPACE + CompileTwo.MUL_MATH + CompileTwo.SPACE + pNode.getComponentID(0) + CompileTwo.END;
            this.strVec.push(str);
            $node.regResultTemp = regtemp;
            this.hasTime = true;
        };
        CompileTwo.prototype.processStaticNode = function ($node, opCode) {
            var str = "";
            var input = $node.inputVec[0];
            var pNode = input.parentNodeItem.node;
            var regtemp = this.getFragmentTemp();
            if (!regtemp.hasInit) { //vec4(0,0,0,0)
                str = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtemp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.DEFAULT_VEC4 + CompileTwo.END + CompileTwo.LN;
                regtemp.hasInit = true;
            }
            str += CompileTwo.FT + regtemp.id + CompileTwo.X + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + opCode + CompileTwo.LEFT_PARENTH + pNode.getComponentID(input.parentNodeItem.id) + CompileTwo.RIGHT_PARENTH + CompileTwo.END;
            input.hasCompiled = true;
            pNode.releaseUse();
            $node.regResultTemp = regtemp;
            $node.shaderStr = str;
            this.strVec.push(str);
        };
        CompileTwo.prototype.traceFt = function () {
            return;
        };
        Object.defineProperty(CompileTwo.prototype, "timeStr", {
            get: function () {
                return "fc[" + this._timeID + "].y";
            },
            enumerable: true,
            configurable: true
        });
        CompileTwo.prototype.processVec3Node = function ($node) {
            this.setFragmentConst($node);
            this.addConstItem($node);
        };
        CompileTwo.prototype.addConstItem = function ($node) {
            if ($node.isDynamic) {
                console.log($node.paramName);
            }
            var constItem;
            var id = $node.regResultConst.id;
            for (var i = 0; i < this.constVec.length; i++) {
                if (this.constVec[i].id == id) {
                    constItem = this.constVec[i];
                }
            }
            if (!constItem) {
                constItem = new ConstItem;
                constItem.id = $node.regResultConst.id;
                this.constVec.push(constItem);
            }
            if ($node.type == materialui.NodeTree.VEC3) {
                if ($node.regConstIndex == 0) {
                    var v3d = $node.constVec3;
                    constItem.value.setTo(v3d.x, v3d.y, v3d.z);
                    if ($node.isDynamic) {
                        constItem.paramName0 = $node.paramName;
                        constItem.param0Type = 4;
                        constItem.param0Index = 0;
                    }
                }
            }
            else if ($node.type == materialui.NodeTree.FLOAT) {
                var num = $node.constValue;
                if ($node.regConstIndex == 0) {
                    constItem.value.x = num;
                    if ($node.isDynamic) {
                        constItem.paramName0 = $node.paramName;
                        constItem.param0Type = 1;
                        constItem.param0Index = 0;
                    }
                }
                else if ($node.regConstIndex == 1) {
                    constItem.value.y = num;
                    if ($node.isDynamic) {
                        constItem.paramName1 = $node.paramName;
                        constItem.param1Type = 1;
                        constItem.param1Index = 1;
                    }
                }
                else if ($node.regConstIndex == 2) {
                    constItem.value.z = num;
                    if ($node.isDynamic) {
                        constItem.paramName2 = $node.paramName;
                        constItem.param2Type = 1;
                        constItem.param2Index = 2;
                    }
                }
                else if ($node.regConstIndex == 3) {
                    constItem.value.w = num;
                    if ($node.isDynamic) {
                        constItem.paramName3 = $node.paramName;
                        constItem.param3Type = 1;
                        constItem.param3Index = 3;
                    }
                }
            }
            else if ($node.type == materialui.NodeTree.VEC2) {
                var vec2 = $node.constValue;
                if ($node.regConstIndex == 0) {
                    constItem.value.x = vec2.x;
                    constItem.value.y = vec2.y;
                    if ($node.isDynamic) {
                        constItem.paramName0 = $node.paramName;
                        constItem.param0Type = 2;
                        constItem.param0Index = 0;
                    }
                }
                else if ($node.regConstIndex == 1) {
                    constItem.value.y = vec2.x;
                    constItem.value.z = vec2.y;
                    if ($node.isDynamic) {
                        constItem.paramName1 = $node.paramName;
                        constItem.param1Type = 2;
                        constItem.param1Index = 1;
                    }
                }
                else if ($node.regConstIndex == 2) {
                    constItem.value.z = vec2.x;
                    constItem.value.w = vec2.y;
                    if ($node.isDynamic) {
                        constItem.paramName2 = $node.paramName;
                        constItem.param2Type = 2;
                        constItem.param2Index = 2;
                    }
                }
            }
        };
        CompileTwo.prototype.setFragmentConst = function ($nodeTree) {
            for (var i = this._fcBeginID; i < this.fragmentConstList.length; i++) {
                var tf = this.fragmentConstList[i].getUse($nodeTree);
                if (tf) {
                    break;
                }
            }
        };
        CompileTwo.prototype.processOpNode = function ($node) {
            //diffuse
            var str = "";
            var inputDiffuse = $node.inputVec[0];
            var inputNormal = $node.inputVec[1];
            var inputAlpha = $node.inputVec[3];
            if (inputNormal.parentNodeItem) {
                this.useNormal = true;
            }
            var regOp;
            this.traceFt();
            if (inputDiffuse.parentNodeItem) { //漫反射部分
                var pNodeDiffuse = inputDiffuse.parentNodeItem.node; //diffuse输入节点
                var regtempLightMap = this.getFragmentTemp();
                var resultStr;
                if (regtempLightMap.hasInit) {
                    resultStr = CompileTwo.FT + regtempLightMap.id;
                }
                else {
                    resultStr = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regtempLightMap.id;
                    regtempLightMap.hasInit = true;
                }
                str = resultStr + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.VEC4 + CompileTwo.LEFT_PARENTH + pNodeDiffuse.getComponentID(inputDiffuse.parentNodeItem.id) + CompileTwo.COMMA + "1.0" + CompileTwo.RIGHT_PARENTH + CompileTwo.END;
                this.strVec.push(str);
                pNodeDiffuse.releaseUse();
                regOp = this.getFragmentTemp(); //输出用临时寄存器
                if (!regOp.hasInit) {
                    str = CompileTwo.VEC4 + CompileTwo.SPACE + CompileTwo.FT + regOp.id + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.DEFAULT_VEC4 + CompileTwo.END;
                    regOp.hasInit = true;
                    this.strVec.push(str);
                }
                str = CompileTwo.FT + regOp.id + CompileTwo.XYZ + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.FT + regtempLightMap.id + CompileTwo.XYZ + CompileTwo.END;
                inputDiffuse.hasCompiled = true;
                this.strVec.push(str);
                regtempLightMap.inUse = false;
            }
            str = "";
            if (inputAlpha.parentNodeItem) { //漫反射部分
                var pNodeAlpha = inputAlpha.parentNodeItem.node; //diffuse输入节点
                str += CompileTwo.FT + regOp.id + CompileTwo.W + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + pNodeAlpha.getComponentID(inputAlpha.parentNodeItem.id) + CompileTwo.END;
                pNodeAlpha.releaseUse();
            }
            else {
                str = CompileTwo.FT + regOp.id + CompileTwo.W + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.ONE_FLOAT + CompileTwo.END;
            }
            this.strVec.push(str);
            str = "";
            str = CompileTwo.FO + CompileTwo.SPACE + CompileTwo.EQU + CompileTwo.SPACE + CompileTwo.FT + regOp.id + CompileTwo.END;
            this.strVec.push(str);
        };
        CompileTwo.prototype.initBaseFc = function () {
            var dataID = 0;
            var $hasTime = false;
            for (var i = this.priorityList.length - 1; i >= 0; i--) {
                var treelist = this.priorityList[i];
                for (var j = 0; j < treelist.length; j++) {
                    var node = treelist[j];
                    if (node.type == materialui.NodeTree.OP) {
                    }
                    else if (node.type == materialui.NodeTree.TIME) {
                        $hasTime = true;
                    }
                }
            }
            if ($hasTime) {
                dataID++;
            }
            dataID = 0;
            this._fcBeginID = dataID;
        };
        CompileTwo.SPACE = " ";
        CompileTwo.COMMA = ",";
        CompileTwo.END = ";";
        CompileTwo.FC = "fc";
        CompileTwo.FT = "ft";
        CompileTwo.TEXTURE = "texture";
        CompileTwo.FS = "fs";
        CompileTwo.VI = "v";
        CompileTwo.OP = "op";
        CompileTwo.FO = "gl_FragColor";
        CompileTwo.XYZ = ".xyz";
        CompileTwo.XY = ".xy";
        CompileTwo.X = ".x";
        CompileTwo.Y = ".y";
        CompileTwo.Z = ".z";
        CompileTwo.W = ".w";
        CompileTwo.ZW = ".zw";
        CompileTwo.MOV = "mov";
        //public static ONE:string = "1";
        CompileTwo.ONE_FLOAT = "1.0";
        CompileTwo.ZERO = "[0]";
        CompileTwo.ONE = "[1]";
        CompileTwo.TWO = "[2]";
        CompileTwo.TWO_FLOAT = "2.0";
        CompileTwo.THREE = "3";
        CompileTwo.FOUR = "4";
        CompileTwo.LN = "\n";
        CompileTwo.texType = "<2d,linear,repeat>";
        CompileTwo.TEX_2D = "2d";
        //  public static TEX_CUBE: string = "cube";
        CompileTwo.TEX_LINEAR = "linear";
        CompileTwo.TEX_NEAREST = "nearest";
        CompileTwo.TEX_WRAP_REPEAT = "repeat";
        CompileTwo.TEX_WRAP_CLAMP = "clamp";
        CompileTwo.LEFT_BRACKET = "<";
        CompileTwo.RIGHT_BRACKET = ">";
        CompileTwo.texCubeType = "<cube,clamp,linear,mipnone>";
        CompileTwo.TEX = "tex";
        CompileTwo.ADD = "add";
        CompileTwo.SUB = "sub";
        CompileTwo.MUL = "mul";
        CompileTwo.DIV = "div";
        CompileTwo.ADD_MATH = "+";
        CompileTwo.SUB_MATH = "-";
        CompileTwo.MUL_MATH = "*";
        CompileTwo.MUL_EQU_MATH = "*=";
        CompileTwo.DIV_MATH = "/";
        CompileTwo.RCP = "rcp";
        CompileTwo.MIN = "min";
        CompileTwo.MAX = "max";
        CompileTwo.FRC = "frc";
        CompileTwo.SQT = "sqt";
        CompileTwo.RSQ = "rsq";
        CompileTwo.POW = "pow";
        CompileTwo.LOG = "log";
        CompileTwo.EXP = "exp";
        CompileTwo.NRM = "normalize";
        CompileTwo.SIN = "sin";
        CompileTwo.COS = "cos";
        CompileTwo.CRS = "crs";
        CompileTwo.DP3 = "dp3";
        CompileTwo.DOT = "dot";
        CompileTwo.DP4 = "dp4";
        CompileTwo.ABS = "abs";
        CompileTwo.NEG = "neg";
        CompileTwo.SAT = "sat";
        CompileTwo.LERP = "lerp";
        CompileTwo.KIL = "kil";
        CompileTwo.M33 = "m33";
        CompileTwo.VEC4 = "vec4";
        CompileTwo.VEC3 = "vec3";
        CompileTwo.VEC2 = "vec2";
        CompileTwo.EQU = "=";
        CompileTwo.texture2D = "texture2D";
        CompileTwo.textureCube = "textureCube";
        CompileTwo.LEFT_PARENTH = "(";
        CompileTwo.RIGHT_PARENTH = ")";
        CompileTwo.DEFAULT_VEC4 = "vec4(0,0,0,1)";
        CompileTwo.MIX = "mix";
        CompileTwo.REFLECT = "reflect";
        CompileTwo.IF = "if";
        CompileTwo.DISCARD = "{discard;}";
        CompileTwo.scalelight = "scalelight";
        return CompileTwo;
    }());
    materialui.CompileTwo = CompileTwo;
})(materialui || (materialui = {}));
//# sourceMappingURL=CompileTwo.js.map
//# sourceMappingURL=CompilePan.js.map
var materialui;
(function (materialui) {
    var MaterialCompile = /** @class */ (function () {
        function MaterialCompile() {
            this.maxPriority = 0;
        }
        MaterialCompile.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialCompile();
            }
            return this._instance;
        };
        MaterialCompile.prototype.compile = function ($list, $materialTree) {
            this._compileGlslServer = new materialui.CompileTwo();
            this.nodeList = $list;
            this.resetCompile($list);
            this.resetPriority();
            var opNode = this.getOpNode();
            opNode.priority = 0;
            this.setPriority(opNode);
            this.priorityList = new Array;
            for (var i = 0; i <= this.maxPriority; i++) {
                this.priorityList.push(new Array);
            }
            for (i = 0; i < this.nodeList.length; i++) {
                if (this.nodeList[i].priority < 0) {
                    continue;
                }
                if (!this.nodeList[i].checkInput()) {
                    console.log(this.nodeList[i]);
                    alert("不完整的输入" + this.nodeList[i].type);
                    return;
                }
            }
            for (i = 0; i < this.nodeList.length; i++) {
                if (this.nodeList[i].priority < 0) {
                    continue;
                }
                this.priorityList[this.nodeList[i].priority].push(this.nodeList[i]);
            }
            this._compileGlslServer.compile(this.priorityList, $materialTree);
            left.ModelShowModel.getInstance().outShaderStr($materialTree);
        };
        MaterialCompile.prototype.setPriority = function ($node) {
            var inputVec = $node.inputVec;
            for (var i = 0; i < inputVec.length; i++) {
                var parentNodeItem = inputVec[i].parentNodeItem;
                if (parentNodeItem) {
                    var pNode = parentNodeItem.node;
                    if (pNode.priority < ($node.priority + 1)) {
                        pNode.priority = ($node.priority + 1);
                    }
                    this.maxPriority = Math.max(this.maxPriority, pNode.priority);
                    this.setPriority(pNode);
                }
            }
        };
        MaterialCompile.prototype.getOpNode = function () {
            for (var i = 0; i < this.nodeList.length; i++) {
                if (this.nodeList[i].type == materialui.NodeTree.OP) {
                    return this.nodeList[i];
                }
            }
            return null;
        };
        MaterialCompile.prototype.resetCompile = function ($list) {
            for (var i = 0; i < $list.length; i++) {
                var inputVec = $list[i].inputVec;
                for (var j = 0; j < inputVec.length; j++) {
                    inputVec[j].hasCompiled = false;
                }
            }
        };
        MaterialCompile.prototype.resetPriority = function () {
            for (var i = 0; i < this.nodeList.length; i++) {
                if (this.nodeList[i].type != materialui.NodeTree.OP) {
                    this.nodeList[i].priority = -1;
                }
                else {
                    this.nodeList[i].priority = 0;
                }
            }
        };
        return MaterialCompile;
    }());
    materialui.MaterialCompile = MaterialCompile;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialCompile.js.map
var materialui;
(function (materialui) {
    var MtlUiData = /** @class */ (function () {
        function MtlUiData() {
        }
        MtlUiData.Scale = 1;
        return MtlUiData;
    }());
    materialui.MtlUiData = MtlUiData;
})(materialui || (materialui = {}));
//# sourceMappingURL=MtUiPanel.js.map
var materialui;
(function (materialui) {
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Scene_data = Pan3d.Scene_data;
    var LoadManager = Pan3d.LoadManager;
    var Panel = win.Panel;
    var TextureManager = Pan3d.TextureManager;
    var MenuListData = menutwo.MenuListData;
    var MaterialModel = /** @class */ (function () {
        function MaterialModel() {
        }
        MaterialModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new MaterialModel();
            }
            return this._instance;
        };
        MaterialModel.prototype.makePanle = function () {
            materialui.MaterialCtrl.getInstance().bgwinPanel = new Panel(); //背景线
            materialui.MaterialCtrl.getInstance().nodeUiPanel = new Panel(); //模块
            materialui.MaterialCtrl.getInstance().linePanel = new Panel(); //线
            materialui.MaterialCtrl.getInstance().lineContainer = new materialui.MaterialLineContainer(); //创建线层
            materialui.MaterialCtrl.getInstance().linePanel.addUIContainer(materialui.MaterialCtrl.getInstance().lineContainer);
            materialui.MaterialCtrl.getInstance().bgwinPanel.addUIContainer(new materialui.MaterialCavasPanel());
        };
        MaterialModel.prototype.selectMaterialUrl = function (url) {
            pack.PackMaterialManager.getInstance().getMaterialByUrl(url, function ($materialTree) {
                ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.INUPT_NEW_MATERIAL_FILE), $materialTree);
            });
        };
        MaterialModel.prototype.getMenuXml = function () {
            var item = new Array();
            item.push(this.getMathListData());
            item.push(this.getV2CListData());
            item.push(this.getTextureListData());
            item.push(this.getOtherListData());
            return item;
        };
        MaterialModel.prototype.getMathListData = function () {
            var $vo = new MenuListData("Math", "1");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("ADD", "11"));
            $vo.subMenu.push(new MenuListData("SUB", "12"));
            $vo.subMenu.push(new MenuListData("MUL", "13"));
            $vo.subMenu.push(new MenuListData("DIV", "14"));
            $vo.subMenu.push(new MenuListData("SIN", "15"));
            $vo.subMenu.push(new MenuListData("COS", "16"));
            //$vo.subMenu.push(new MenuListData("LERP", "17"));
            //$vo.subMenu.push(new MenuListData("MIN", "18"));
            return $vo;
        };
        MaterialModel.prototype.getV2CListData = function () {
            var $vo = new MenuListData("常数", "2");
            $vo.subMenu = new Array;
            //     $vo.subMenu.push(new MenuListData("vec4", "21"));
            $vo.subMenu.push(new MenuListData("vec3", "22"));
            $vo.subMenu.push(new MenuListData("vec2", "23"));
            $vo.subMenu.push(new MenuListData("float", "24"));
            $vo.subMenu.push(new MenuListData("Time", "25"));
            $vo.subMenu.push(new MenuListData("Normal", "26"));
            return $vo;
        };
        MaterialModel.prototype.getTextureListData = function () {
            var $vo = new MenuListData("纹理", "3");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("纹理贴图", "31"));
            $vo.subMenu.push(new MenuListData("纹理坐标", "32"));
            $vo.subMenu.push(new MenuListData("纹理滚动", "33"));
            $vo.subMenu.push(new MenuListData("Cube纹理", "34"));
            $vo.subMenu.push(new MenuListData("3D贴图", "35"));
            $vo.subMenu.push(new MenuListData("LightUv", "36"));
            return $vo;
        };
        MaterialModel.prototype.getOtherListData = function () {
            var $vo = new MenuListData("其它", "4");
            $vo.subMenu = new Array;
            $vo.subMenu.push(new MenuListData("菲捏尔", "41"));
            $vo.subMenu.push(new MenuListData("導入材質", "42"));
            $vo.subMenu.push(new MenuListData("函数", "43"));
            $vo.subMenu.push(new MenuListData("文件列表", "44"));
            return $vo;
        };
        MaterialModel.prototype.mekeMaterialRightMenu = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU);
            var temp = {};
            temp.mouse = new Vector2D($evt.clientX, $evt.clientY);
            temp.menuXmlItem = this.getMenuXml();
            temp.info = {};
            temp.info.bfun = function (value, evt) { _this.menuBfun(value, evt); };
            ModuleEventManager.dispatchEvent(new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU), temp);
        };
        MaterialModel.prototype.menuBfun = function (value, evt) {
            console.log("材质返回菜单", value);
            switch (value.key) {
                case "1":
                    break;
                case "2":
                    break;
                case "3":
                    break;
                case "4":
                    break;
                case "11":
                    this.onTempNode(new materialui.MathAddNodeUI(), evt);
                    break;
                case "12":
                    this.onTempNode(new materialui.MathSubNodeUI(), evt);
                    break;
                case "13":
                    this.onTempNode(new materialui.MathMulNodeUI(), evt);
                    break;
                case "14":
                    this.onTempNode(new materialui.MathDivNodeUI(), evt);
                    break;
                case "15":
                    this.onTempNode(new materialui.MathSinNodeUI(), evt);
                    break;
                case "16":
                    this.onTempNode(new materialui.MathCosNodeUI(), evt);
                    break;
                case "22":
                    this.onTempNode(new materialui.ConstVec3NodeUI(), evt);
                    break;
                case "23":
                    this.onTempNode(new materialui.ConstVec2NodeUI(), evt);
                    break;
                case "24":
                    this.onTempNode(new materialui.ConstFloatNodeUI(), evt);
                    break;
                case "25":
                    this.onTempNode(new materialui.TimeNodeUI(), evt);
                    break;
                case "26":
                    this.onTempNode(new materialui.NormalNodeUI(), evt);
                    break;
                case "31":
                    var textui = new materialui.TextureSampleNodeUI();
                    this.onTempNode(textui, evt);
                    textui.creatBase("assets/white.jpg");
                    break;
                case "32":
                    this.onTempNode(new materialui.TexCoordNodeUI(), evt);
                    break;
                case "36":
                    this.onTempNode(new materialui.TexLightUvNodeUI(), evt);
                    break;
                case "33":
                    this.onTempNode(new materialui.PannerNodeUI(), evt);
                    break;
                case "34":
                    var textCubeui = new materialui.TextureCubeNodeUI();
                    this.onTempNode(textCubeui, evt);
                    textCubeui.creatBase("assets/white.jpg");
                    break;
                case "35":
                    var text3dui = new materialui.Texture3DNodeUI();
                    this.onTempNode(text3dui, evt);
                    text3dui.creatBase("assets/white.jpg");
                    break;
                case "41":
                    this.onTempNode(new materialui.FresnelNodeUI(), evt);
                    break;
                case "42":
                    //this.selectInputDae(evt)
                    // filemodel.InputMaterialModel.getInstance().inputFile(evt)
                    break;
                case "43":
                    this.onTempNode(new materialui.MathFunNodeUI(), evt);
                    break;
                case "44":
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.SHOW_FOLDER_PANEL));
                    break;
                default:
                    break;
            }
        };
        MaterialModel.prototype.onTempNode = function ($ui, evt) {
            $ui.left = evt.x / materialui.MtlUiData.Scale - 150;
            $ui.top = evt.y / materialui.MtlUiData.Scale - 30;
            $ui.uiScale = materialui.MtlUiData.Scale;
            materialui.MaterialCtrl.getInstance().addNodeUI($ui);
            win.LayerManager.getInstance().resize();
        };
        MaterialModel.prototype.dataURLtoFile = function (dataurl, filename) {
            var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        };
        MaterialModel.prototype.MakeTempWebMaterialTree = function ($temp, $info) {
            var $byte = new Pan3d.Pan3dByteArray();
            $byte.writeUTF(JSON.stringify({ data: $temp.data, info: $info }));
            pack.PackMaterialManager.getInstance().getMaterialByUrl($temp.url, function (value) {
                pack.PackMaterialManager.getInstance().makeMaterialShaderByByte($byte, $temp.url, value);
            });
        };
        MaterialModel.prototype.upMaterialTreeToWeb = function ($temp, $info, $url) {
            for (var i = 0; $temp.data && i < $temp.data.length; i++) {
                var $vo = $temp.data[i];
                if ($vo.type == materialui.NodeTree.TEX || $vo.type == materialui.NodeTree.TEX3D || $vo.type == materialui.NodeTree.TEXCUBE) {
                    var $img = TextureManager.getInstance().getImgResByurl(Scene_data.fileRoot + $vo.data.url);
                    if ($img) { //新加的图
                        console.log("图片列表", $img);
                        /*
                        var $upfile: File = this.dataURLtoFile($img.src, $vo.data.url);
                        var $newUrl: string = "ccc.jpg"
                        filemodel.FolderModel.upOssFile($upfile, "shadertree/" + $newUrl, () => {
                            console.log("文件上传成功");
                        })
                        $vo.data.url = $newUrl;
                        */
                    }
                    else {
                    }
                }
            }
            var $byte = new Pan3d.Pan3dByteArray();
            $byte.writeUTF(JSON.stringify({ data: $temp.data, info: $info }));
            var $file = new File([$byte.buffer], "ossfile.txt");
            var pathUrl = Pan3d.Scene_data.fileRoot + $url;
            var pathurl = pathUrl.replace(Pan3d.Scene_data.ossRoot, "");
            console.log(pathUrl);
            pack.FileOssModel.upOssFile($file, pathurl, function () {
                console.log("材质上传成功");
                pack.PackMaterialManager.getInstance().replaceMaterialByUrl($url);
            });
        };
        MaterialModel.prototype.selectFileById = function (value) {
            var $texturl = "texturelist/" + value + ".txt";
            LoadManager.getInstance().load(Scene_data.fileRoot + $texturl, LoadManager.BYTE_TYPE, function ($dtstr) {
                var $byte = new Pan3d.Pan3dByteArray($dtstr);
                $byte.position = 0;
                var $temp = JSON.parse($byte.readUTF());
                var $tempMaterial = new materialui.MaterialTree;
                $tempMaterial = new materialui.MaterialTree;
                $tempMaterial.url = $texturl;
                $tempMaterial.setData({ data: $temp.data });
                ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.INUPT_NEW_MATERIAL_FILE), $tempMaterial);
                /*
                    LoadManager.getInstance().load(Scene_data.fileRoot + "texturelist/config/" + this.fileid + ".txt", LoadManager.XML_TYPE,
                        ($configStr: string) => {
                            var $config: any = JSON.parse($configStr);
                            if ($config.showType == 0) {
                                LoadManager.getInstance().load(Scene_data.fileRoot + "texturelist/model_" + value + "_objs.txt", LoadManager.XML_TYPE,
                                    ($modelxml: string) => {
                                        left.ModelShowModel.getInstance().readTxtToModelBy($modelxml)
                                        ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
                                    });
                            }
                            if ($config.showType == 1) {
                                filemodel.RoleChangeModel.getInstance().changeRoleModel(this.fileid)
                                Scene_data.cam3D.distance = 100
                                left.SceneRenderToTextrue.getInstance().viweLHnumber = 300
                            }
                        });
                 
                    */
            });
        };
        return MaterialModel;
    }());
    materialui.MaterialModel = MaterialModel;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var Rectangle = Pan3d.Rectangle;
    var Scene_data = Pan3d.Scene_data;
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var UIManager = Pan3d.UIManager;
    var UIConatiner = Pan3d.UIConatiner;
    var UIAtlas = Pan3d.UIAtlas;
    //ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.COMPILE_MATERIAL));
    var Vector3D = Pan3d.Vector3D;
    var TextureManager = Pan3d.TextureManager;
    var TextureContext = /** @class */ (function (_super) {
        __extends(TextureContext, _super);
        function TextureContext(w, h) {
            var _this = _super.call(this) || this;
            _this.tempUiName = "tempui";
            _this.uiViewScale = 0.5;
            w /= _this.uiViewScale;
            h /= _this.uiViewScale;
            _this._bRender = new UIRenderComponent();
            _this.addRender(_this._bRender);
            _this._bRender.uiAtlas = new UIAtlas();
            var $uiAtlas = _this._bRender.uiAtlas;
            $uiAtlas.configData = [];
            var kkwA = Math.pow(2, Math.ceil(Math.log(w) / Math.log(2)));
            var kkhB = Math.pow(2, Math.ceil(Math.log(h) / Math.log(2)));
            _this._bRender.uiAtlas.ctx = UIManager.getInstance().getContext2D(kkwA, kkhB, false);
            _this._bRender.uiAtlas.textureRes = TextureManager.getInstance().getCanvasTexture(_this._bRender.uiAtlas.ctx);
            $uiAtlas.configData.push($uiAtlas.getObject(_this.tempUiName, 0, 0, w, h, kkwA, kkhB));
            _this.ui = _this._bRender.creatBaseComponent(_this.tempUiName);
            _this.ui.width = w * _this.uiViewScale;
            _this.ui.height = h * _this.uiViewScale;
            _this.addChild(_this.ui);
            return _this;
            //  this.ui.uiRender.uiAtlas.upDataPicToTexture("b.jpg", this.ui.skinName);
        }
        return TextureContext;
    }(UIConatiner));
    materialui.TextureContext = TextureContext;
    var MaterialCavasPanel = /** @class */ (function (_super) {
        __extends(MaterialCavasPanel, _super);
        function MaterialCavasPanel() {
            var _this = _super.call(this) || this;
            _this.lineItemBigA = [];
            _this.lineItemBigB = [];
            _this.lineItemA = [];
            _this.lineItemB = [];
            _this.setRect(new Rectangle(0, 0, Scene_data.stageWidth, Scene_data.stageHeight));
            _this.blakCavansRender = new UIRenderComponent();
            _this.addRender(_this.blakCavansRender);
            _this.blakCavansRender.uiAtlas = _this.makeBaseUiatlas(64, 64);
            for (var i = 0; i < 200; i++) {
                _this.lineItemA.push(_this.getTempLineUi());
                _this.lineItemB.push(_this.getTempLineUi());
            }
            for (var j = 0; j < 30; j++) {
                _this.lineItemBigA.push(_this.getTempBigLineUi());
                _this.lineItemBigB.push(_this.getTempBigLineUi());
            }
            return _this;
        }
        MaterialCavasPanel.prototype.getTempLineUi = function () {
            if (!this.linesSmailRender) {
                this.linesSmailRender = new UIRenderComponent();
                this.addRender(this.linesSmailRender);
                this.linesSmailRender.uiAtlas = this.makeBaseUiatlas(64, 64);
                var tempLine = this.linesSmailRender.creatBaseComponent("temp_ui");
                this.drawOutColor(tempLine, new Vector3D(53, 53, 53));
            }
            if (this.linesSmailRender.uiListLen >= 50) {
                var temp = new UIRenderComponent();
                this.addRender(temp);
                temp.uiAtlas = this.linesSmailRender.uiAtlas;
                this.linesSmailRender = temp;
            }
            var ui = this.addChild(this.linesSmailRender.creatBaseComponent("temp_ui"));
            return ui;
        };
        MaterialCavasPanel.prototype.getTempBigLineUi = function () {
            if (!this.lineBigRender) {
                this.lineBigRender = new UIRenderComponent();
                this.addRender(this.lineBigRender);
                this.lineBigRender.uiAtlas = this.makeBaseUiatlas(64, 64);
                var tempLine = this.lineBigRender.creatBaseComponent("temp_ui");
                this.drawOutColor(tempLine, new Vector3D(35, 35, 35));
            }
            if (this.lineBigRender.uiListLen >= 50) {
                var temp = new UIRenderComponent();
                this.addRender(temp);
                temp.uiAtlas = this.lineBigRender.uiAtlas;
                this.lineBigRender = temp;
            }
            var ui = this.addChild(this.lineBigRender.creatBaseComponent("temp_ui"));
            return ui;
        };
        MaterialCavasPanel.prototype.drawOutColor = function (ui, $vcolor) {
            // var $vcolor: Vector3D = new Vector3D(1 * 255, 0,0);
            var $UIAtlas = ui.uiRender.uiAtlas;
            var $textureStr = ui.skinName;
            var rec = $UIAtlas.getRec($textureStr);
            var ctx = UIManager.getInstance().getContext2D(rec.pixelWitdh, rec.pixelHeight, false);
            var $imgData = ctx.getImageData(0, 0, rec.pixelWitdh, rec.pixelHeight);
            for (var i = 0; i < $imgData.data.length / 4; i++) {
                $imgData.data[i * 4 + 0] = $vcolor.x;
                $imgData.data[i * 4 + 1] = $vcolor.y;
                $imgData.data[i * 4 + 2] = $vcolor.z;
                $imgData.data[i * 4 + 3] = 255;
            }
            ctx.putImageData($imgData, 0, 0);
            TextureManager.getInstance().updateTexture($UIAtlas.texture, rec.pixelX, rec.pixelY, ctx);
        };
        MaterialCavasPanel.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.tempListBg = this.blakCavansRender.creatBaseComponent("temp_ui");
            this.addChild(this.tempListBg);
            this.drawOutColor(this.tempListBg, new Vector3D(42, 42, 42));
            this.resize();
        };
        MaterialCavasPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
            if (this.tempListBg) {
                this.moveLineA();
                this.moveLineB();
                this.movelineItemBigA();
                this.movelineItemBigB();
                this.tempListBg.x = 0;
                this.tempListBg.y = 0;
                this.tempListBg.width = Scene_data.stageWidth;
                this.tempListBg.height = Scene_data.stageHeight;
            }
        };
        MaterialCavasPanel.prototype.moveLineA = function () {
            var speedNum = materialui.MtlUiData.Scale * 20;
            for (var i = 0; i < this.lineItemA.length; i++) {
                var $tempA = this.lineItemA[i];
                $tempA.x = 0;
                $tempA.y = i * speedNum + (AppData.stagePos.y * materialui.MtlUiData.Scale) % (speedNum);
                $tempA.width = Scene_data.stageWidth;
                $tempA.height = 1;
            }
        };
        MaterialCavasPanel.prototype.moveLineB = function () {
            var speedNum = materialui.MtlUiData.Scale * 20;
            for (var i = 0; i < this.lineItemB.length; i++) {
                var $tempB = this.lineItemB[i];
                $tempB.x = i * speedNum + (AppData.stagePos.x * materialui.MtlUiData.Scale) % (speedNum);
                $tempB.y = 0;
                $tempB.width = 1;
                $tempB.height = Scene_data.stageHeight;
            }
        };
        MaterialCavasPanel.prototype.movelineItemBigA = function () {
            var speedNum = materialui.MtlUiData.Scale * 20 * 8;
            for (var i = 0; i < this.lineItemBigA.length; i++) {
                var $tempA = this.lineItemBigA[i];
                $tempA.x = 0;
                $tempA.y = i * speedNum + (AppData.stagePos.y * materialui.MtlUiData.Scale) % (speedNum);
                $tempA.width = Scene_data.stageWidth;
                $tempA.height = 2;
            }
        };
        MaterialCavasPanel.prototype.movelineItemBigB = function () {
            var speedNum = materialui.MtlUiData.Scale * 20 * 8;
            for (var i = 0; i < this.lineItemBigB.length; i++) {
                var $tempB = this.lineItemBigB[i];
                $tempB.x = i * speedNum + (AppData.stagePos.x * materialui.MtlUiData.Scale) % (speedNum);
                $tempB.y = 0;
                $tempB.width = 1;
                $tempB.height = Scene_data.stageHeight;
            }
        };
        return MaterialCavasPanel;
    }(win.BaseWindow));
    materialui.MaterialCavasPanel = MaterialCavasPanel;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialCavasPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialui;
(function (materialui) {
    var BaseEvent = Pan3d.BaseEvent;
    var Vector2D = Pan3d.Vector2D;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var UIManager = Pan3d.UIManager;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var KeyboardType = Pan3d.KeyboardType;
    var MouseType = Pan3d.MouseType;
    var Rectangle = Pan3d.Rectangle;
    var UIAtlas = Pan3d.UIAtlas;
    var LayerManager = win.LayerManager;
    var MaterialEvent = /** @class */ (function (_super) {
        __extends(MaterialEvent, _super);
        function MaterialEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialEvent.INIT_MATERIA_PANEL = "INIT_MATERIA_PANEL"; //
        MaterialEvent.SHOW_MATERIA_PANEL = "SHOW_MATERIA_PANEL"; //
        MaterialEvent.SAVE_MATERIA_PANEL = "SAVE_MATERIA_PANEL"; //
        MaterialEvent.SELECT_MATERIAL_NODE_UI = "SELECT_MATERIAL_NODE_UI"; //
        MaterialEvent.COMPILE_MATERIAL = "COMPILE_MATERIAL"; //
        MaterialEvent.INUPT_NEW_MATERIAL_FILE = "CLEAR_MATERIAL_ALL_UI"; //
        return MaterialEvent;
    }(BaseEvent));
    materialui.MaterialEvent = MaterialEvent;
    var MaterialModule = /** @class */ (function (_super) {
        __extends(MaterialModule, _super);
        function MaterialModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialModule.prototype.getModuleName = function () {
            return "MaterialModule";
        };
        MaterialModule.prototype.listProcessors = function () {
            return [new MaterialProcessor()];
        };
        return MaterialModule;
    }(Module));
    materialui.MaterialModule = MaterialModule;
    var MaterialProcessor = /** @class */ (function (_super) {
        __extends(MaterialProcessor, _super);
        function MaterialProcessor() {
            return _super.call(this) || this;
        }
        MaterialProcessor.prototype.getName = function () {
            return "MaterialProcessor";
        };
        MaterialProcessor.prototype.receivedModuleEvent = function ($event) {
            var _this = this;
            if ($event instanceof MaterialEvent) {
                var $materialEvent = $event;
                if ($materialEvent.type == MaterialEvent.INIT_MATERIA_PANEL) {
                    materialui.MaterialModel.getInstance().makePanle();
                    AppData.stagePos = new Vector2D();
                    materialui.BaseMaterialNodeUI.baseUIAtlas = new UIAtlas();
                    materialui.BaseMaterialNodeUI.baseUIAtlas.setInfo("pan/marmoset/uilist/baseui.txt", "pan/marmoset/uilist/baseui.png", function () { _this.loadConfigCom(); });
                    // this.baseWindow = new win.BaseWindow()
                }
                if ($materialEvent.type == MaterialEvent.SHOW_MATERIA_PANEL) {
                    this.lastMaterialUrl = $materialEvent.data;
                    // AppData.centenPanel.addUIContainer(this.baseWindow)
                    LayerManager.getInstance().addPanel(materialui.MaterialCtrl.getInstance().bgwinPanel, 1);
                    LayerManager.getInstance().addPanel(materialui.MaterialCtrl.getInstance().nodeUiPanel, 2);
                    LayerManager.getInstance().addPanel(materialui.MaterialCtrl.getInstance().linePanel, 3);
                    editscene.EditTopMenuPanel.getInstance().makeTextureTopMenu();
                    ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA));
                    ModuleEventManager.dispatchEvent(new materialleft.MaterialLeftEvent(materialleft.MaterialLeftEvent.SHOW_MATERIAL_LEFT_PANEL));
                    materialui.MaterialModel.getInstance().selectMaterialUrl(this.lastMaterialUrl);
                    this.addEvents();
                }
                if ($materialEvent.type == MaterialEvent.SAVE_MATERIA_PANEL) {
                    this.saveMateriaPanel();
                }
                if ($materialEvent.type == MaterialEvent.SELECT_MATERIAL_NODE_UI) {
                    this.selectNodeUi($materialEvent.data);
                }
                if ($materialEvent.type == MaterialEvent.COMPILE_MATERIAL) {
                    materialui.MaterialCompile.getInstance().compile(materialui.MaterialCtrl.getInstance().nodeList, this.baseMaterialTree);
                    this.changeLeftMeshView();
                }
                if ($materialEvent.type == MaterialEvent.INUPT_NEW_MATERIAL_FILE) {
                    this.clearAllMaterialUi($materialEvent.data);
                }
            }
            if ($event instanceof materialui.MEvent_Material_Connect) {
                var $mevent_Material_Connect = $event;
                if ($mevent_Material_Connect.type == materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STARTDRAG) {
                    this.startDragLine($mevent_Material_Connect.itemNode);
                }
                if ($mevent_Material_Connect.type == materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STOPDRAG) {
                    this.stopDragLine($mevent_Material_Connect.itemNode);
                }
                if ($mevent_Material_Connect.type == materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE) {
                    this.removeLine($mevent_Material_Connect.line);
                }
                if ($mevent_Material_Connect.type == materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_DOUBLUELINE) {
                    this.setConnetLine($mevent_Material_Connect.startNode, $mevent_Material_Connect.endNode);
                }
            }
        };
        MaterialProcessor.prototype.changeLeftMeshView = function () {
            this._materialTree = new materialui.MaterialTree();
            this._materialTree.data = materialui.MaterialCtrl.getInstance().getObj();
            this._materialTree.url = this.lastMaterialUrl;
            materialui.MaterialModel.getInstance().MakeTempWebMaterialTree(this._materialTree, this.getMakeProgemePrame());
        };
        Object.defineProperty(MaterialProcessor.prototype, "hasStage", {
            get: function () {
                return AppData.sceneEidtType == 2;
            },
            enumerable: true,
            configurable: true
        });
        MaterialProcessor.prototype.addEvents = function () {
            var _this = this;
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
                this.onMouseFun = function ($evt) { _this.onMouse($evt); };
                this.onMouseMoveFun = function ($evt) { _this.onMouseMove($evt); };
                this.onMouseUpFun = function ($evt) { _this.onMouseUp($evt); };
                this.onKeyDownFun = function ($evt) { _this.onKeyDown($evt); };
                this.onKeyUpFun = function ($evt) { _this.onKeyUp($evt); };
                this.onRightMenuFun = function ($evt) { _this.onRightMenu($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.addEventListener(MouseType.MouseDown, this.onMouseFun);
            document.addEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.addEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.addEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.addEventListener(MouseType.KeyUp, this.onKeyUpFun);
            document.addEventListener("contextmenu", this.onRightMenuFun);
        };
        MaterialProcessor.prototype.onRightMenu = function ($evt) {
            $evt.preventDefault();
            if (!this.hasStage) {
                return;
            }
            if (!AppData.centenPanel.rect.isHitByPoint($evt.x, $evt.y)) {
                return;
            }
            materialui.MaterialModel.getInstance().mekeMaterialRightMenu($evt);
            /*

            var $rightMenuEvet: rightmenu.RightMenuEvent = new rightmenu.RightMenuEvent(rightmenu.RightMenuEvent.SHOW_RIGHT_MENU);
            $rightMenuEvet.posv2d = new Vector2D($evt.clientX, $evt.clientY);
            ModuleEventManager.dispatchEvent($rightMenuEvet);

            */
        };
        MaterialProcessor.prototype.removeEvents = function () {
            document.removeEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.removeEventListener(MouseType.MouseDown, this.onMouseFun);
            document.removeEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.removeEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.removeEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.removeEventListener(MouseType.KeyUp, this.onKeyUpFun);
        };
        MaterialProcessor.prototype.clearAllMaterialUi = function ($materailTree) {
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            var $len = $containerList.length;
            for (var i = ($len - 1); i >= 0; i--) {
                var $temp = $containerList[i];
                if ($temp.name) {
                    this.delUI($temp);
                }
            }
            this.stageMoveTx(new Vector2D(-AppData.stagePos.x, -AppData.stagePos.y));
            materialui.MtlUiData.Scale = 1;
            materialui.MaterialCtrl.getInstance().initData();
            this.baseMaterialTree = $materailTree;
            materialui.MaterialViewBuildUtils.getInstance().setData($materailTree.data);
            this.resetMaterialListUi();
            left.ModelShowModel.getInstance().modelSprite.material = $materailTree;
        };
        MaterialProcessor.prototype.resetMaterialListUi = function () {
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            var $len = $containerList.length;
            var $rect;
            for (var i = 0; i < $len; i++) {
                var $ui = $containerList[i];
                if ($ui.name) {
                    var temp = new Rectangle($ui.x, $ui.y, $ui.x + $ui.width, $ui.y + $ui.height);
                    if ($rect) {
                        $rect.x = Math.min($rect.x, temp.x);
                        $rect.y = Math.min($rect.y, temp.y);
                        $rect.width = Math.max($rect.width, temp.x);
                        $rect.height = Math.max($rect.height, temp.y);
                    }
                    else {
                        $rect = new Rectangle(temp.x, temp.y, temp.x, temp.y);
                    }
                }
            }
            if ($rect) {
                var pageRect = new Rectangle();
                pageRect.x = AppData.centenPanel.rect.x;
                pageRect.y = AppData.centenPanel.rect.y + 15;
                pageRect.width = AppData.centenPanel.rect.width;
                pageRect.height = AppData.centenPanel.rect.height - 40;
                $rect.width = ($rect.width - $rect.x) + 180;
                $rect.height = ($rect.height - $rect.y) + 200;
                //重新载入的材质适配到可显示位置
                var scaleNum = (Math.min(pageRect.width / $rect.width, pageRect.height / $rect.height));
                scaleNum = Math.min(scaleNum, 0.8);
                scaleNum = Math.max(scaleNum, 0.5);
                materialui.MtlUiData.Scale = scaleNum;
                var tureXY = new Vector2D();
                tureXY.x = -$rect.x + pageRect.x / materialui.MtlUiData.Scale;
                tureXY.y = -$rect.y + pageRect.y / materialui.MtlUiData.Scale;
                tureXY.x += (pageRect.width / materialui.MtlUiData.Scale - $rect.width) / 2;
                tureXY.y += (pageRect.height / materialui.MtlUiData.Scale - $rect.height) / 2;
                this.stageMoveTx(tureXY);
            }
        };
        MaterialProcessor.prototype.saveMateriaPanel = function () {
            this._materialTree = new materialui.MaterialTree();
            this._materialTree.data = materialui.MaterialCtrl.getInstance().getObj();
            console.log(this.baseMaterialTree);
            if (this.baseMaterialTree.shaderStr) {
                materialui.MaterialModel.getInstance().upMaterialTreeToWeb(this._materialTree, this.getMakeProgemePrame(), this.lastMaterialUrl);
            }
            else {
                alert("选编译才能保存上传");
            }
        };
        MaterialProcessor.prototype.getMakeProgemePrame = function () {
            var obj = {};
            obj.useNormal = this.baseMaterialTree.useNormal;
            obj.hasTime = this.baseMaterialTree.hasTime;
            obj.timeValue = this.baseMaterialTree.timeValue;
            obj.writeZbuffer = this.baseMaterialTree.writeZbuffer;
            obj.zbuff = this.baseMaterialTree.zbuff;
            obj.blendMode = this.baseMaterialTree.blendMode;
            obj.showurl = this.baseMaterialTree.showurl;
            obj.backCull = this.baseMaterialTree.backCull;
            obj.texList = this.baseMaterialTree.texList;
            obj.constList = this.baseMaterialTree.constList;
            obj.shaderStr = this.baseMaterialTree.shaderStr;
            obj.laterTextureurl = this.baseMaterialTree.laterTextureurl;
            obj.fcData = this.baseMaterialTree.fcData.toString();
            obj.paramAry = this.baseMaterialTree.shader.paramAry;
            return obj;
        };
        MaterialProcessor.prototype.selectNodeUi = function ($nodeUi) {
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            for (var i = 0; i < $containerList.length; i++) {
                var $temp = $containerList[i];
                if ($temp) {
                    $temp.select = Boolean($nodeUi == $temp);
                }
            }
        };
        MaterialProcessor.prototype.setConnetLine = function ($startItem, $endItem) {
            materialui.MaterialCtrl.getInstance().lineContainer.addConnentLine($startItem, $endItem);
        };
        MaterialProcessor.prototype.removeLine = function ($line) {
            materialui.MaterialCtrl.getInstance().lineContainer.removeLine($line);
        };
        MaterialProcessor.prototype.startDragLine = function ($node) {
            materialui.MaterialCtrl.getInstance().lineContainer.startLine($node);
        };
        MaterialProcessor.prototype.stopDragLine = function ($node) {
            materialui.MaterialCtrl.getInstance().lineContainer.stopLine($node);
        };
        MaterialProcessor.prototype.openMaterialPanel = function () {
        };
        MaterialProcessor.prototype.loadConfigCom = function () {
            this.readMaterialTree();
        };
        MaterialProcessor.prototype.readMaterialTree = function () {
            materialui.MaterialViewBuildUtils.getInstance().addFun = function (ui) { materialui.MaterialCtrl.getInstance().addNodeUI(ui); };
            var id = Number(getUrlParam("id"));
        };
        MaterialProcessor.prototype.onKeyDown = function ($evt) {
            if (!this.hasStage) {
                return;
            }
            AppData.altKey = $evt.altKey;
            switch ($evt.keyCode) {
                case KeyboardType.Delete:
                    var $selectUi = this.getSelUI();
                    if ($selectUi) {
                        if (!($selectUi instanceof materialui.ResultNodeUI)) {
                            this.delUI($selectUi);
                        }
                    }
                    break;
                case KeyboardType.S:
                    if ($evt.altKey) {
                    }
                    break;
                case KeyboardType.C:
                    if ($evt.altKey) {
                    }
                    else {
                        var $selectUi = this.getSelUI();
                        if ($selectUi) {
                            $selectUi.nodeTree.paramName = this.getCanUseParamName();
                            switch ($selectUi.nodeTree.type) {
                                case materialui.NodeTree.TEX:
                                case materialui.NodeTree.TEX3D:
                                case materialui.NodeTree.TEXCUBE:
                                case materialui.NodeTree.VEC3:
                                case materialui.NodeTree.VEC2:
                                case materialui.NodeTree.FLOAT:
                                    if ($selectUi.nodeTree.type) {
                                        $selectUi.nodeTree.isDynamic = !$selectUi.nodeTree.isDynamic;
                                        $selectUi.showDynamic();
                                    }
                                    break;
                                default:
                                    console.log("不可以设置为动态");
                                    break;
                            }
                        }
                    }
                    break;
                case KeyboardType.O:
                    //ModuleEventManager.dispatchEvent(new left.LeftEvent(left.LeftEvent.SHOW_LEFT_PANEL));
                    break;
                case KeyboardType.Z:
                    materialui.MtlUiData.Scale += 0.1;
                    UIManager.getInstance().resize();
                    break;
                default:
                    break;
            }
        };
        MaterialProcessor.prototype.delUI = function ($ui) {
            materialui.MaterialCtrl.getInstance().removeUI($ui);
            $ui.removeAllNodeLine();
            materialui.MaterialCtrl.getInstance().nodeUiPanel.removeUIContainer($ui);
        };
        MaterialProcessor.prototype.getCanUseParamName = function () {
            var tempItem = [];
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            for (var i = 0; i < $containerList.length; i++) {
                var $temp = $containerList[i];
                if ($temp && $temp.nodeTree.isDynamic) {
                    tempItem.push($temp.nodeTree.paramName);
                }
            }
            return "param" + tempItem.length;
        };
        MaterialProcessor.prototype.getSelUI = function () {
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            for (var i = 0; i < $containerList.length; i++) {
                var $temp = $containerList[i];
                if ($temp && $temp.select) {
                    return $temp;
                }
            }
            return null;
        };
        MaterialProcessor.prototype.onKeyUp = function ($evt) {
            AppData.altKey = $evt.altKey;
        };
        MaterialProcessor.prototype.onMouse = function ($e) {
            if (!this.hasStage) {
                return;
            }
            if ($e.type == MouseType.MouseDown) {
                if ($e.button == 1) {
                    this._isMidelMouse = true;
                    this.mouseXY = new Vector2D($e.x, $e.y);
                }
            }
        };
        MaterialProcessor.prototype.onMouseMove = function ($e) {
            if (!this.hasStage) {
                return;
            }
            if (this._isMidelMouse) {
                var $txy = new Vector2D($e.x - this.mouseXY.x, $e.y - this.mouseXY.y);
                $txy.x /= materialui.MtlUiData.Scale;
                $txy.y /= materialui.MtlUiData.Scale;
                this.stageMoveTx($txy);
                this.mouseXY = new Vector2D($e.x, $e.y);
            }
        };
        MaterialProcessor.prototype.onMouseUp = function ($e) {
            if (!this.hasStage) {
                return;
            }
            this._isMidelMouse = false;
        };
        MaterialProcessor.prototype.onMouseWheel = function ($evt) {
            if (!this.hasStage) {
                return;
            }
            if ($evt.x > AppData.centenPanel.x && $evt.x < AppData.rightPanel.x) {
                var $slectUi = win.LayerManager.getInstance().getObjectsUnderPoint(new Vector2D($evt.x, $evt.y));
                if (!$slectUi || $slectUi.parent instanceof materialui.BaseMaterialNodeUI || $slectUi.parent instanceof materialui.MaterialCavasPanel) {
                    this.changeScalePanle($evt);
                }
            }
        };
        MaterialProcessor.prototype.changeScalePanle = function ($evt) {
            var $v2d = new Vector2D(($evt.x - AppData.stagePos.x), ($evt.y - AppData.stagePos.y));
            var tx = $evt.x / materialui.MtlUiData.Scale;
            var ty = $evt.y / materialui.MtlUiData.Scale;
            var $oldScale = materialui.MtlUiData.Scale;
            var $addScale = $evt.wheelDelta > 0 ? +0.1 : -0.1;
            materialui.MtlUiData.Scale += $addScale;
            materialui.MtlUiData.Scale = Math.max(0.5, materialui.MtlUiData.Scale);
            materialui.MtlUiData.Scale = Math.min(materialui.MtlUiData.Scale, 1.2);
            var $se = (materialui.MtlUiData.Scale - $oldScale);
            this.stageMoveTx(new Vector2D(-tx * $se / materialui.MtlUiData.Scale, -ty * $se / materialui.MtlUiData.Scale));
        };
        MaterialProcessor.prototype.stageMoveTx = function ($txy) {
            AppData.stagePos.x += $txy.x;
            AppData.stagePos.y += $txy.y;
            var $containerList = materialui.MaterialCtrl.getInstance().nodeUiPanel._containerList;
            for (var i = 0; i < $containerList.length; i++) {
                var $uiConatiner = $containerList[i];
                if ($uiConatiner instanceof materialui.BaseMaterialNodeUI) {
                    $uiConatiner.left += $txy.x;
                    $uiConatiner.top += $txy.y;
                    $uiConatiner.uiScale = materialui.MtlUiData.Scale;
                }
            }
            win.LayerManager.getInstance().resize();
        };
        MaterialProcessor.prototype.listenModuleEvents = function () {
            return [
                new MaterialEvent(MaterialEvent.INIT_MATERIA_PANEL),
                new MaterialEvent(MaterialEvent.SHOW_MATERIA_PANEL),
                new MaterialEvent(MaterialEvent.SELECT_MATERIAL_NODE_UI),
                new MaterialEvent(MaterialEvent.SAVE_MATERIA_PANEL),
                new MaterialEvent(MaterialEvent.COMPILE_MATERIAL),
                new MaterialEvent(MaterialEvent.INUPT_NEW_MATERIAL_FILE),
                new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STARTDRAG),
                new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_STOPDRAG),
                new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_REMOVELINE),
                new materialui.MEvent_Material_Connect(materialui.MEvent_Material_Connect.MEVENT_MATERIAL_CONNECT_DOUBLUELINE),
            ];
        };
        return MaterialProcessor;
    }(BaseProcessor));
    materialui.MaterialProcessor = MaterialProcessor;
})(materialui || (materialui = {}));
//# sourceMappingURL=MaterialProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialleft;
(function (materialleft) {
    var Scene_data = Pan3d.Scene_data;
    var Vector3D = Pan3d.Vector3D;
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var MateriaMeshView = /** @class */ (function (_super) {
        __extends(MateriaMeshView, _super);
        function MateriaMeshView(value) {
            return _super.call(this, value) || this;
        }
        MateriaMeshView.prototype.resize = function () {
            this._top = 0;
            _super.prototype.resize.call(this);
        };
        MateriaMeshView.prototype.getView = function () {
            var _this = this;
            if (isNaN(this.hideCategoryKey["后期"])) {
                this.hideCategoryKey["后期"] = true;
                this.hideCategoryKey["属性"] = true;
            }
            var ary = [
                { Type: ReflectionData.MeshMaterialLeft2DUI, Label: "窗口:", FunKey: "materialTree", Suffix: "prefab|zzw|objs", target: this, Category: "模型" },
                {
                    Type: ReflectionData.ComboBox, Label: "渲染模式:", FunKey: "blendMode", target: this, Data: [
                        { name: "普通模式", type: 0 },
                        { name: "透明模式", type: 1 },
                        { name: "叠加模式", type: 2 }
                    ],
                    Category: "设置"
                },
                { Type: ReflectionData.CheckBox, Label: "深度测试:", FunKey: "testzbuff", target: this, Category: "设置" },
                { Type: ReflectionData.CheckBox, Label: "写入深度:", FunKey: "writeZbuffer", target: this, Category: "设置" },
                { Type: ReflectionData.CheckBox, Label: "点灯光:", FunKey: "pointlight", target: this, Category: "设置" },
                { Type: ReflectionData.MaterialPicUi, Label: "纹理:", FunKey: "laterTexture", changFun: function (value) { _this.textureChangeInfo(value); }, target: this, Suffix: "material", Category: "后期" },
                { Type: ReflectionData.Vec3Color, Label: "模型列表:", FunKey: "sunDirect", target: this, Step: 0.1, Category: "属性" },
                { Type: ReflectionData.Vec3Color, Label: "sun颜色:", FunKey: "sunColor", target: this, Step: 0., Category: "属性" },
                { Type: ReflectionData.Vec3Color, Label: "基本颜色:", FunKey: "ambientColor", target: this, Step: 0.1, Category: "属性" },
            ];
            return ary;
        };
        MateriaMeshView.prototype.getParamItem = function (value) {
            return null;
        };
        Object.defineProperty(MateriaMeshView.prototype, "laterTexture", {
            get: function () {
                return this._materialTree.laterTexture;
            },
            set: function (value) {
                this._materialTree.laterTextureurl = value.url;
                this._materialTree.laterTexture = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        MateriaMeshView.prototype.textureChangeInfo = function (value) {
        };
        Object.defineProperty(MateriaMeshView.prototype, "materialTree", {
            get: function () {
                return this._materialTree;
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "blendMode", {
            get: function () {
                return this._materialTree.blendMode;
            },
            set: function (value) {
                this._materialTree.blendMode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "testzbuff", {
            get: function () {
                return this._materialTree.zbuff;
            },
            set: function (value) {
                this._materialTree.zbuff = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "writeZbuffer", {
            get: function () {
                return this._materialTree.writeZbuffer;
            },
            set: function (value) {
                this._materialTree.writeZbuffer = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "pointlight", {
            get: function () {
                return this._materialTree.pointlight;
            },
            set: function (value) {
                this._materialTree.pointlight = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this._materialTree = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "sunDirect", {
            get: function () {
                return new Vector3D(Scene_data.light.sunDirect[0], Scene_data.light.sunDirect[1], Scene_data.light.sunDirect[2]);
            },
            set: function (value) {
                Scene_data.light.sunDirect[0] = value.x;
                Scene_data.light.sunDirect[1] = value.y;
                Scene_data.light.sunDirect[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "sunColor", {
            get: function () {
                return new Vector3D(Scene_data.light.sunColor[0], Scene_data.light.sunColor[1], Scene_data.light.sunColor[2]);
            },
            set: function (value) {
                Scene_data.light.sunColor[0] = value.x;
                Scene_data.light.sunColor[1] = value.y;
                Scene_data.light.sunColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MateriaMeshView.prototype, "ambientColor", {
            get: function () {
                return new Vector3D(Scene_data.light.ambientColor[0], Scene_data.light.ambientColor[1], Scene_data.light.ambientColor[2]);
            },
            set: function (value) {
                Scene_data.light.ambientColor[0] = value.x;
                Scene_data.light.ambientColor[1] = value.y;
                Scene_data.light.ambientColor[2] = value.z;
            },
            enumerable: true,
            configurable: true
        });
        return MateriaMeshView;
    }(MetaDataView));
    materialleft.MateriaMeshView = MateriaMeshView;
})(materialleft || (materialleft = {}));
//# sourceMappingURL=MateriaMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialleft;
(function (materialleft) {
    var ByteArray = Pan3d.Pan3dByteArray;
    var ModelShowModel = left.ModelShowModel;
    var MaterialLeftPanel = /** @class */ (function (_super) {
        __extends(MaterialLeftPanel, _super);
        function MaterialLeftPanel() {
            var _this = _super.call(this) || this;
            _this.only = true; //标记需要移除
            _this.addPojectView();
            _this.initView();
            return _this;
        }
        MaterialLeftPanel.prototype.addPojectView = function () {
            this.propPanle = new prop.UiMeshSprite();
            this.materiaMeshView = new materialleft.MateriaMeshView(this.propPanle);
            this.propPanle.addMeshView(this.materiaMeshView);
        };
        Object.defineProperty(MaterialLeftPanel.prototype, "materialTree", {
            set: function (value) {
                var _this = this;
                this._materialTree = value;
                this.materiaMeshView.data = this._materialTree;
                if (this._materialTree.laterTextureurl && !this._materialTree.laterTexture) {
                    pack.PackMaterialManager.getInstance().getMaterialByUrl(this._materialTree.laterTextureurl, function ($laterTexture) {
                        _this._materialTree.laterTexture = $laterTexture;
                        _this.materiaMeshView.data = _this._materialTree;
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        MaterialLeftPanel.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.setUiListVisibleByItem([this.e_panel_1], true);
        };
        MaterialLeftPanel.prototype.butClik = function (evt) {
            if (evt.target == this.b_win_close) {
                this.perent.removeUIContainer(this);
            }
        };
        MaterialLeftPanel.prototype.initView = function () {
            ModelShowModel.getInstance().addBaseModel();
            this.resize();
        };
        MaterialLeftPanel.prototype.resize = function () {
            var panel = this.perent;
            if (panel) {
                this.pageRect.x = panel.x;
                this.pageRect.y = panel.y;
                this.pageRect.width = panel.width;
                this.pageRect.height = panel.height;
            }
            _super.prototype.resize.call(this);
            if (this.uiLoadComplete) {
                this.propPanle.resize();
            }
        };
        MaterialLeftPanel.prototype.selectInputDae = function (evt) {
            var _this = this;
            this._inputHtmlSprite = document.createElement('input');
            this._inputHtmlSprite.setAttribute('id', '_ef');
            this._inputHtmlSprite.setAttribute('type', 'file');
            this._inputHtmlSprite.setAttribute("style", 'visibility:hidden');
            this._inputHtmlSprite.click();
            this._inputHtmlSprite.value;
            this._inputHtmlSprite.addEventListener("change", function (cevt) { _this.changeFile(cevt); });
        };
        MaterialLeftPanel.prototype.changeFile = function (evt) {
            var _this = this;
            for (var i = 0; i < this._inputHtmlSprite.files.length && i < 1; i++) {
                var simpleFile = this._inputHtmlSprite.files[i];
                if (!/image\/\w+/.test(simpleFile.type)) {
                    var $reader = new FileReader();
                    if (simpleFile.name.indexOf(".md5mesh") != -1) {
                        $reader.readAsText(simpleFile);
                        $reader.onload = function ($temp) {
                            ModelShowModel.getInstance().webmd5Sprite.addLocalMeshByStr($reader.result);
                        };
                        return;
                    }
                    if (simpleFile.name.indexOf(".md5anim") != -1) {
                        $reader.readAsText(simpleFile);
                        $reader.onload = function ($temp) {
                            ModelShowModel.getInstance().webmd5Sprite.addLocalAdimByStr($reader.result);
                            ModelShowModel.getInstance().changeWebModel();
                        };
                        return;
                    }
                    if (simpleFile.name.indexOf("objs.txt") != -1) {
                        $reader.readAsText(simpleFile);
                        $reader.onload = function ($temp) {
                            ModelShowModel.getInstance().readTxtToModelBy($reader.result);
                        };
                    }
                    else {
                        // alert("objs.txt结尾对象0" + simpleFile.name);
                        $reader.readAsArrayBuffer(simpleFile);
                        $reader.onload = function ($temp) {
                            if (_this.isRoleFile($reader.result)) {
                                console.log("是角色", simpleFile.name);
                                pack.RoleChangeModel.getInstance().loadLocalFile($reader.result, null);
                                left.SceneRenderToTextrue.getInstance().viweLHnumber = 1000;
                            }
                            else {
                                alert("不确定类型");
                            }
                        };
                    }
                }
                else {
                    alert("请确保文件类型为图像类型");
                }
            }
            this._inputHtmlSprite = null;
        };
        MaterialLeftPanel.prototype.isRoleFile = function (arrayBuffer) {
            var $byte = new ByteArray(arrayBuffer);
            $byte.position = 0;
            var $version = $byte.readInt();
            var $url = $byte.readUTF();
            if ($url.indexOf("role/") != -1) {
                return true;
            }
            else {
                return false;
            }
        };
        return MaterialLeftPanel;
    }(win.BaseWindow));
    materialleft.MaterialLeftPanel = MaterialLeftPanel;
})(materialleft || (materialleft = {}));
//# sourceMappingURL=MaterialLeftPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var materialleft;
(function (materialleft) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var LoadManager = Pan3d.LoadManager;
    var Scene_data = Pan3d.Scene_data;
    var MaterialEvent = materialui.MaterialEvent;
    var MaterialLeftEvent = /** @class */ (function (_super) {
        __extends(MaterialLeftEvent, _super);
        function MaterialLeftEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialLeftEvent.SHOW_MATERIAL_LEFT_PANEL = "SHOW_MATERIAL_LEFT_PANEL";
        MaterialLeftEvent.HIDE_MATERIAL_LEFT_PANEL = "HIDE_MATERIAL_LEFT_PANEL";
        return MaterialLeftEvent;
    }(BaseEvent));
    materialleft.MaterialLeftEvent = MaterialLeftEvent;
    var MaterialLeftModule = /** @class */ (function (_super) {
        __extends(MaterialLeftModule, _super);
        function MaterialLeftModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialLeftModule.prototype.getModuleName = function () {
            return "MaterialLeftModule";
        };
        MaterialLeftModule.prototype.listProcessors = function () {
            return [new MaterialLeftProcessor()];
        };
        return MaterialLeftModule;
    }(Module));
    materialleft.MaterialLeftModule = MaterialLeftModule;
    var MaterialLeftProcessor = /** @class */ (function (_super) {
        __extends(MaterialLeftProcessor, _super);
        function MaterialLeftProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialLeftProcessor.prototype.getName = function () {
            return "MaterialLeftProcessor";
        };
        MaterialLeftProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof MaterialLeftEvent) {
                var $leftEvent = $event;
                if ($leftEvent.type == MaterialLeftEvent.SHOW_MATERIAL_LEFT_PANEL) {
                    this.showLeftPanel();
                    this.readBaseModel();
                }
                if ($leftEvent.type == MaterialLeftEvent.HIDE_MATERIAL_LEFT_PANEL) {
                    this.hideLeftPanel();
                }
            }
            if ($event instanceof MaterialEvent) {
                var $materialEvent = $event;
                if ($materialEvent.type == MaterialEvent.INUPT_NEW_MATERIAL_FILE) {
                    this.materialLeftPanel.materialTree = $materialEvent.data;
                }
            }
        };
        MaterialLeftProcessor.prototype.readBaseModel = function () {
            LoadManager.getInstance().load(Scene_data.fileRoot + "objs/model_2.objs", LoadManager.XML_TYPE, function ($modelxml) {
                left.ModelShowModel.getInstance().readTxtToModelBy($modelxml);
            });
        };
        MaterialLeftProcessor.prototype.hideLeftPanel = function () {
            editscene.EditLeftPanel.leftPanel.removeUIContainer(this.materialLeftPanel);
        };
        MaterialLeftProcessor.prototype.showLeftPanel = function () {
            if (!this.materialLeftPanel) {
                this.materialLeftPanel = new materialleft.MaterialLeftPanel;
            }
            if (!this.materialLeftPanel.hasStage) {
                editscene.EditLeftPanel.leftPanel.addUIContainer(this.materialLeftPanel);
            }
        };
        MaterialLeftProcessor.prototype.listenModuleEvents = function () {
            return [
                new MaterialLeftEvent(MaterialLeftEvent.SHOW_MATERIAL_LEFT_PANEL),
                new MaterialLeftEvent(MaterialLeftEvent.HIDE_MATERIAL_LEFT_PANEL),
                new MaterialEvent(MaterialEvent.INUPT_NEW_MATERIAL_FILE),
            ];
        };
        return MaterialLeftProcessor;
    }(BaseProcessor));
    materialleft.MaterialLeftProcessor = MaterialLeftProcessor;
})(materialleft || (materialleft = {}));
//# sourceMappingURL=MaterialLeftProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var EventDispatcher = Pan3d.EventDispatcher;
    var SceneProjectVo = /** @class */ (function (_super) {
        __extends(SceneProjectVo, _super);
        function SceneProjectVo(value) {
            var _this = _super.call(this) || this;
            _this.scenescale = 1;
            _this.meshObj(value);
            return _this;
        }
        SceneProjectVo.prototype.meshObj = function (value) {
            var _this = this;
            for (var key in value) {
                this[key] = value[key];
            }
            if (this.textureurl) {
                pack.PackMaterialManager.getInstance().getMaterialByUrl(this.textureurl, function ($materialTree) {
                    _this.material = $materialTree;
                    _this.materialParam = new Pan3d.MaterialBaseParam;
                    _this.materialParam.material = _this.material;
                    pack.PackPrefabManager.getInstance().makeMaterialBaseParam(_this.materialParam, _this.paramInfo);
                });
            }
        };
        SceneProjectVo.prototype.getSaveObj = function () {
            var obj = {};
            if (this.material) {
                this.textureurl = this.material.url;
            }
            obj.paramInfo = this.paramInfo;
            obj.scenescale = this.scenescale;
            obj.textureurl = this.textureurl;
            obj.gildline = this.gildline;
            return obj;
        };
        return SceneProjectVo;
    }(EventDispatcher));
    maineditor.SceneProjectVo = SceneProjectVo;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=SceneProjectVo.js.map
var maineditor;
(function (maineditor) {
    var FileNode = /** @class */ (function () {
        function FileNode() {
        }
        FileNode.FILE_NODE = "fileNode";
        return FileNode;
    }());
    maineditor.FileNode = FileNode;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=FileNode.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Display3DSprite = Pan3d.Display3DSprite;
    var LyfSpriteDisplay = /** @class */ (function (_super) {
        __extends(LyfSpriteDisplay, _super);
        function LyfSpriteDisplay() {
            var _this = _super.call(this) || this;
            _this.waitLoadUrl = [];
            _this.particleItem = [];
            return _this;
        }
        LyfSpriteDisplay.prototype.getSocket = function (socketName, resultMatrix) {
            resultMatrix.identity();
            resultMatrix.append(this.posMatrix);
        };
        LyfSpriteDisplay.prototype.addLyfByUrl = function ($url) {
            if (this._scene) {
                this.loadTempByUrl($url);
            }
            else {
                this.waitLoadUrl.push($url);
            }
        };
        LyfSpriteDisplay.prototype.removeStage = function () {
            var scene = this._scene;
            while (scene && this.particleItem.length) {
                scene.particleManager.removeParticle(this.particleItem.pop());
            }
            _super.prototype.removeStage.call(this);
        };
        LyfSpriteDisplay.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            while (this.waitLoadUrl.length) {
                this.loadTempByUrl(this.waitLoadUrl.pop());
            }
        };
        LyfSpriteDisplay.prototype.loadTempByUrl = function (value) {
            var _this = this;
            var scene = this._scene;
            scene.groupDataManager.scene = scene;
            scene.groupDataManager.getGroupData(Pan3d.Scene_data.fileRoot + value, function (groupRes) {
                for (var i = 0; i < groupRes.dataAry.length; i++) {
                    var item = groupRes.dataAry[i];
                    if (item.types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                        var $particle = scene.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + item.particleUrl);
                        scene.particleManager.addParticle($particle);
                        $particle.bindTarget = _this;
                        _this.particleItem.push($particle);
                    }
                    else {
                        console.log("播放的不是单纯特效");
                    }
                }
            });
        };
        return LyfSpriteDisplay;
    }(Display3DSprite));
    maineditor.LyfSpriteDisplay = LyfSpriteDisplay;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=LyfSpriteDisplay.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Display3DSprite = Pan3d.Display3DSprite;
    var SkillSpriteDisplay = /** @class */ (function (_super) {
        __extends(SkillSpriteDisplay, _super);
        function SkillSpriteDisplay() {
            var _this = _super.call(this) || this;
            _this.skipNum = 0;
            _this.waitLoadUrl = [];
            _this.roleChar = new left.MaterialRoleSprite();
            return _this;
        }
        SkillSpriteDisplay.prototype.updateMatrix = function () {
            _super.prototype.updateMatrix.call(this);
            this.roleChar.x = this.x;
            this.roleChar.y = this.y;
            this.roleChar.z = this.z;
            //this.roleChar.scaleX = 1
            //this.roleChar.scaleY =1
            //this.roleChar.scaleZ = 1
            this.roleChar.rotationX = this.rotationX;
            this.roleChar.rotationY = this.rotationY;
            this.roleChar.rotationZ = this.rotationZ;
        };
        SkillSpriteDisplay.prototype.addSkillByUrl = function ($url) {
            if (this._scene) {
                this.loadTempByUrl($url);
            }
            else {
                this.waitLoadUrl.push($url);
            }
        };
        SkillSpriteDisplay.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            while (this.waitLoadUrl.length) {
                this.loadTempByUrl(this.waitLoadUrl.pop());
            }
        };
        SkillSpriteDisplay.prototype.playNextSkill = function () {
            var _this = this;
            var tempScene = this._scene;
            if (this.skillActionItem) {
                if (this.skillActionItem.length) {
                    var playName;
                    if (this.skillStaticMesh.actionnum >= 0 && this.skillStaticMesh.actionnum < this.skillActionItem.length) {
                        playName = this.skillActionItem[this.skillStaticMesh.actionnum];
                    }
                    else {
                        playName = this.skillActionItem[this.skipNum % this.skillActionItem.length];
                    }
                    var $skill = tempScene.skillManager.getSkill(this.skillStaticMesh.skillUrl, playName); //skill_0022
                    if ($skill) {
                        $skill.reset();
                        $skill.isDeath = false;
                    }
                    $skill.configFixEffect(this.roleChar);
                    tempScene.skillManager.playSkill($skill);
                    this.skipNum++;
                }
            }
            if (!this.skillStaticMesh.interval || this.skillStaticMesh.interval <= 0) { //间隔时间必须大于0
                this.skillStaticMesh.interval = 1;
            }
            Pan3d.TimeUtil.addTimeOut(this.skillStaticMesh.interval * 1000, function () {
                _this.playNextSkill();
            });
        };
        SkillSpriteDisplay.prototype.loadTempByUrl = function (value) {
            var _this = this;
            pack.PackSkillManager.getInstance().getPrefabByUrl(value, function (temp) {
                _this.skillStaticMesh = temp;
                //      this.skillStaticMesh.roleUrl = "pefab/上杉谦信/ssqx.zzw"
                //     this.skillStaticMesh.skillUrl = "skill/上杉谦信_byte.txt"
                var tempScene = _this._scene;
                _this.roleChar.setRoleZwwUrl(_this.skillStaticMesh.roleUrl);
                tempScene.addMovieDisplay(_this.roleChar);
                _this.roleChar.scale = 0.3;
                Pan3d.ResManager.getInstance().loadSkillRes(Pan3d.Scene_data.fileRoot + _this.skillStaticMesh.skillUrl, function ($skillRes) {
                    _this.skillActionItem = [];
                    for (var acKey in $skillRes.data) {
                        _this.skillActionItem.push(acKey);
                    }
                });
                _this.playNextSkill();
            });
        };
        return SkillSpriteDisplay;
    }(Display3DSprite));
    maineditor.SkillSpriteDisplay = SkillSpriteDisplay;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=SkillSpriteDisplay.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var HierarchyNodeType = /** @class */ (function () {
        function HierarchyNodeType() {
        }
        HierarchyNodeType.Folder = 0;
        HierarchyNodeType.Prefab = 1;
        HierarchyNodeType.Light = 2;
        HierarchyNodeType.Water = 3;
        HierarchyNodeType.Grass = 4;
        HierarchyNodeType.Capture = 5;
        HierarchyNodeType.Build = 6;
        HierarchyNodeType.Reflection = 7;
        HierarchyNodeType.LightProbe = 8;
        HierarchyNodeType.ParallelLight = 9;
        HierarchyNodeType.Particle = 11;
        HierarchyNodeType.Role = 12;
        HierarchyNodeType.SKILL = 13;
        HierarchyNodeType.Ground = 14;
        return HierarchyNodeType;
    }());
    maineditor.HierarchyNodeType = HierarchyNodeType;
    var HierarchyFileNode = /** @class */ (function (_super) {
        __extends(HierarchyFileNode, _super);
        function HierarchyFileNode() {
            return _super.call(this) || this;
        }
        return HierarchyFileNode;
    }(maineditor.FileNode));
    maineditor.HierarchyFileNode = HierarchyFileNode;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=HierarchyFileNode.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Rectangle = Pan3d.Rectangle;
    var Vector2D = Pan3d.Vector2D;
    var TextureManager = Pan3d.TextureManager;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var UIData = Pan3d.UIData;
    var MouseType = Pan3d.MouseType;
    var MathUtil = Pan3d.MathUtil;
    var TextRegExp = Pan3d.TextRegExp;
    var PanDragEvent = drag.PanDragEvent;
    var SelectFileListText = /** @class */ (function (_super) {
        __extends(SelectFileListText, _super);
        function SelectFileListText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SelectFileListText.prototype, "select", {
            get: function () {
                return this._select;
            },
            set: function (value) {
                this._select = value;
                this.makeData();
            },
            enumerable: true,
            configurable: true
        });
        SelectFileListText.prototype.makeData = function () {
            if (this.tittlestr) {
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                var nameStr = this.tittlestr;
                if (this._select) {
                    nameStr = "[ffffff]" + nameStr;
                }
                else {
                    nameStr = "[9c9c9c]" + nameStr;
                }
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, nameStr, 24, 1, 1, TextAlign.LEFT);
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        return SelectFileListText;
    }(Disp2DBaseText));
    maineditor.SelectFileListText = SelectFileListText;
    var EditorOpenList = /** @class */ (function () {
        function EditorOpenList(value, render) {
            this.perent = value;
            this.topRender = render;
            this.tabItemArr = [];
            //this.pushPathUrl("角色/新场景.scene")
            //this.pushPathUrl("完美的开始.map")
        }
        EditorOpenList.prototype.tabBgClik = function (evt) {
            var tabVo = evt.target.data;
            var ui = evt.target;
            if ((evt.x - ui.absoluteX) < (ui.absoluteWidth - 20)) {
                this.selectTabStr = tabVo.rightTabInfoVo;
                //if (this.selectTabStr.indexOf(".map") != -1) {
                //    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.LOAD_SCENE_MAP), this.selectTabStr); //加载场景
                //    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SHOW_MAIN_EDITOR_PANEL));
                //}
                //if (this.selectTabStr.indexOf(".material") != -1) {
                //    Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL), this.selectTabStr);
                //}
                maineditor.EditorModel.getInstance().openFileByUrl(this.selectTabStr);
            }
            else {
                console.log("关", tabVo);
                this.removePathUrl(tabVo.rightTabInfoVo);
            }
            this.refrishTabUiSelect();
        };
        EditorOpenList.prototype.removePathUrl = function (value) {
            for (var i = 0; i < this.tabItemArr.length; i++) {
                if (this.tabItemArr[i].rightTabInfoVo == value) {
                    var tabVo = this.tabItemArr[i];
                    this.perent.removeChild(tabVo.bgUi);
                    tabVo.bgUi.removeEventListener(InteractiveEvent.Down, this.tabBgClik, this);
                    this.perent.clearTemp(tabVo.rightTabInfoVo);
                    this.tabItemArr.splice(i, 1);
                }
            }
        };
        EditorOpenList.prototype.changeVoBg = function (vo, value) {
            var skinName = "e_edit_select_bg_1";
            if (value) {
                skinName = "e_edit_select_bg_2";
            }
            else {
                skinName = "e_edit_select_bg_1";
            }
            var tempui = this.perent.addChild(this.topRender.getComponent(skinName));
            if (vo.bgUi) {
                tempui.x = vo.bgUi.x;
                tempui.y = vo.bgUi.y;
                tempui.width = vo.bgUi.width;
                tempui.height = vo.bgUi.height;
                vo.bgUi.removeEventListener(InteractiveEvent.Down, this.tabBgClik, this);
                this.perent.removeChild(vo.bgUi);
            }
            vo.bgUi = tempui; //换上最新的
            vo.bgUi.addEventListener(InteractiveEvent.Down, this.tabBgClik, this);
            vo.bgUi.data = vo;
            vo.select = value;
        };
        EditorOpenList.prototype.refrishTabUiSelect = function () {
            var tx = 2;
            for (var i = 0; i < this.tabItemArr.length; i++) {
                var tabVo = this.tabItemArr[i];
                if (this.tabItemArr[i].rightTabInfoVo == this.selectTabStr) {
                    this.tabItemArr[i].select = true;
                    this.changeVoBg(this.tabItemArr[i], true);
                }
                else {
                    this.tabItemArr[i].select = false;
                    this.changeVoBg(this.tabItemArr[i], false);
                }
                tabVo.bgUi.x = tx - 1;
                tabVo.bgUi.y = 1;
                tabVo.bgUi.width = Math.floor(tabVo.textMetrics.width) + 20 + 25;
                tabVo.bgUi.height = 22;
                tabVo.bgUi.data = tabVo;
                tx += tabVo.bgUi.width;
                tabVo.ui.x = tabVo.bgUi.x + 10;
                tabVo.ui.y = tabVo.bgUi.y + 5;
                tabVo.ui.width = 256;
                tabVo.ui.height = 20;
            }
            this.topRender.applyObjData();
        };
        EditorOpenList.prototype.pushPathUrl = function (value) {
            this.selectTabStr = value;
            var needAdd = true;
            var tx = 1;
            for (var i = 0; i < this.tabItemArr.length; i++) {
                if (this.tabItemArr[i].rightTabInfoVo == value) {
                    needAdd = false;
                }
                tx = this.tabItemArr[i].bgUi.x + this.tabItemArr[i].bgUi.width - 1;
            }
            if (needAdd) {
                var $tittlestr = value.split("/")[value.split("/").length - 1];
                var $pathurl = value;
                var $ctx = UIManager.getInstance().getContext2D(100, 100, false);
                $ctx.font = "13px " + UIData.font;
                var tabVo = this.perent.showTemp($pathurl);
                tabVo.textMetrics = TextRegExp.getTextMetrics($ctx, $tittlestr);
                tabVo.tittlestr = $tittlestr;
                this.changeVoBg(tabVo, false);
                tabVo.select = true;
                this.tabItemArr.push(tabVo);
            }
            this.refrishTabUiSelect();
        };
        return EditorOpenList;
    }());
    maineditor.EditorOpenList = EditorOpenList;
    var MainEditorPanel = /** @class */ (function (_super) {
        __extends(MainEditorPanel, _super);
        function MainEditorPanel() {
            var _this = _super.call(this, SelectFileListText, new Rectangle(0, 0, 512, 40), 10) || this;
            _this.suffix = "prefab|lyf|zzw|skill";
            _this.pageRect = new Rectangle(0, 0, 500, 500);
            _this._sceneViewRender = new maineditor.UiModelViewRender();
            _this.addRender(_this._sceneViewRender);
            return _this;
        }
        Object.defineProperty(MainEditorPanel.prototype, "sceneProjectVo", {
            set: function (value) {
                this._sceneViewRender.sceneProjectVo = value;
            },
            enumerable: true,
            configurable: true
        });
        MainEditorPanel.prototype.loadConfigCom = function () {
            _super.prototype.loadConfigCom.call(this);
            this.e_centen_panel = this.addChild(this._baseMidRender.getComponent("e_centen_panel"));
            this.editorOpenList = new EditorOpenList(this, this._baseTopRender);
            this.e_line_left = this.addChild(this._baseTopRender.getComponent("e_line_vertical"));
            this.e_line_right = this.addChild(this._baseTopRender.getComponent("e_line_vertical"));
            this.initView();
            this.uiLoadComplete = true;
            this.refrishSize();
            this.showType = AppData.sceneEidtType;
        };
        Object.defineProperty(MainEditorPanel.prototype, "showType", {
            set: function (value) {
                AppData.sceneEidtType = value;
                if (this.uiLoadComplete) {
                    switch (AppData.sceneEidtType) {
                        case 1:
                            this.setUiListVisibleByItem([this.a_scene_view], true);
                            //  this.setUiListVisibleByItem([this.e_centen_panel], true)
                            break;
                        case 2:
                            this.setUiListVisibleByItem([this.a_scene_view], false);
                            // this.setUiListVisibleByItem([this.e_centen_panel], false)
                            break;
                        default:
                            break;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        MainEditorPanel.prototype.initView = function () {
            var _this = this;
            this._sceneViewRender.uiAtlas = this._tRender.uiAtlas;
            this.a_scene_view = this.addChild(this._sceneViewRender.getComponent("a_scene_view"));
            TextureManager.getInstance().getTexture("res/white.jpg", function ($texture) {
                _this._sceneViewRender.textureRes = $texture;
                Pan3d.TimeUtil.addFrameTick(function (t) { _this.upFrame(t); });
            });
            this.a_scene_view.addEventListener(PanDragEvent.DRAG_DROP, this.dragDrop, this);
            this.a_scene_view.addEventListener(PanDragEvent.DRAG_ENTER, this.dragEnter, this);
            this.a_scene_view.addEventListener(InteractiveEvent.Down, this.butClik, this);
            document.addEventListener(MouseType.MouseWheel, function ($evt) { _this.onPanellMouseWheel($evt); });
        };
        MainEditorPanel.prototype.butClik = function (evt) {
            switch (evt.target) {
                case this.a_scene_view:
                    if (evt.mouseEvent.ctrlKey || evt.mouseEvent.shiftKey) {
                        ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SCENE_SELECT_SPRITE_DOWN), evt);
                    }
                    break;
                default:
                    break;
            }
        };
        MainEditorPanel.prototype.onPanellMouseWheel = function ($evt) {
            var $slectUi = win.LayerManager.getInstance().getObjectsUnderPoint(new Vector2D($evt.x, $evt.y));
            if ($slectUi && $slectUi.parent == this) {
                var q = new Pan3d.Quaternion();
                q.fromMatrix(maineditor.MainEditorProcessor.edItorSceneManager.cam3D.cameraMatrix);
                var m = q.toMatrix3D();
                m.invert();
                var $add = m.transformVector(new Vector3D(0, 0, $evt.wheelDelta / 100));
                maineditor.MainEditorProcessor.edItorSceneManager.cam3D.x += $add.x;
                maineditor.MainEditorProcessor.edItorSceneManager.cam3D.y += $add.y;
                maineditor.MainEditorProcessor.edItorSceneManager.cam3D.z += $add.z;
                MathUtil.MathCam(maineditor.MainEditorProcessor.edItorSceneManager.cam3D);
            }
        };
        MainEditorPanel.prototype.dragDrop = function (evt) {
            if (this.testSuffix(drag.DragManager.dragSource.url)) {
                console.log("可以拖动");
            }
            else {
                console.log("不可以");
            }
        };
        MainEditorPanel.prototype.testSuffix = function (value) {
            if (!this.suffix) {
                return;
            }
            var tempItem = this.suffix.split("|");
            for (var i = 0; i < tempItem.length; i++) {
                if (value.indexOf(tempItem[i]) != -1) {
                    return true;
                }
            }
            return false;
        };
        MainEditorPanel.prototype.dragEnter = function (evt) {
            if (this.testSuffix(drag.DragManager.dragSource.url)) {
                var obj = {};
                obj.url = drag.DragManager.dragSource.url;
                obj.name = "新对象";
                obj.pos = maineditor.MainEditorProcessor.edItorSceneManager.getGroundPos(new Vector2D(evt.data.x, evt.data.y));
                if (drag.DragManager.dragSource.url.indexOf(".lyf") != -1) {
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.INPUT_LYF_TO_SCENE), obj);
                }
                if (drag.DragManager.dragSource.url.indexOf(".skill") != -1) {
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.INPUT_SKILL_TO_SCENE), obj);
                }
                if (drag.DragManager.dragSource.url.indexOf(".prefab") != -1) {
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.INPUT_PREFAB_TO_SCENE), obj);
                }
                if (drag.DragManager.dragSource.url.indexOf(".zzw") != -1) {
                    ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.INPUT_ZZW_TO_SCENE), obj);
                }
            }
        };
        MainEditorPanel.prototype.upFrame = function (t) {
            if (this.hasStage) {
                maineditor.MainEditorProcessor.edItorSceneManager.textureRes = this._sceneViewRender.textureRes;
                var cam3D = maineditor.MainEditorProcessor.edItorSceneManager.cam3D;
                cam3D.cavanRect.x = this.a_scene_view.x + this.left;
                cam3D.cavanRect.y = this.a_scene_view.y + this.top;
                cam3D.cavanRect.width = this.a_scene_view.width;
                cam3D.cavanRect.height = this.a_scene_view.height;
                maineditor.MainEditorProcessor.edItorSceneManager.renderToTexture();
            }
        };
        MainEditorPanel.prototype.resize = function () {
            _super.prototype.resize.call(this);
        };
        MainEditorPanel.prototype.panelEventChanger = function (value) {
            this.setRect(value);
            this.refrishSize();
        };
        MainEditorPanel.prototype.refrishSize = function () {
            if (this.uiLoadComplete) {
                var roundNum = 1;
                this.a_scene_view.x = roundNum;
                this.a_scene_view.y = roundNum + 22;
                this.a_scene_view.width = this.pageRect.width - roundNum * 2;
                this.a_scene_view.height = this.pageRect.height - roundNum * 2 - 20;
                if (this.e_centen_panel) {
                    this.e_centen_panel.x = 0;
                    this.e_centen_panel.y = 0;
                    this.e_centen_panel.width = this.pageRect.width;
                    this._baseMidRender.applyObjData();
                }
                this.e_line_left.x = 1;
                this.e_line_left.y = 0;
                this.e_line_left.height = this.pageRect.height;
                this.e_line_right.x = this.pageRect.width - 3;
                this.e_line_right.y = 0;
                this.e_line_right.height = this.pageRect.height;
            }
            this.resize();
        };
        return MainEditorPanel;
    }(win.Dis2dBaseWindow));
    maineditor.MainEditorPanel = MainEditorPanel;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=MainEditorPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Vector3D = Pan3d.Vector3D;
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var PropertyMeshView = /** @class */ (function (_super) {
        __extends(PropertyMeshView, _super);
        function PropertyMeshView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PropertyMeshView.prototype.getView = function () {
            var ary = [
                { Type: ReflectionData.Vec3, Label: "坐标:", FunKey: "pos", target: this, Step: 1, Category: "属性" },
                { Type: ReflectionData.Vec3, Label: "比例:", FunKey: "scale", target: this, Step: 0.1, Category: "属性" },
                { Type: ReflectionData.Vec3, Label: "角度:", FunKey: "rotation", target: this, Step: 1, Category: "属性" },
            ];
            return ary;
        };
        PropertyMeshView.prototype.resize = function () {
            var ty = this._top;
            for (var i = 0; this.ui && i < this.ui.length; i++) {
                this.ui[i].y = ty;
                this.ui[i].x = 20;
                ty += this.ui[i].height;
                if (this.ui.length > 1) { //展开的情况需要处理
                    ty += 10; //特殊间隔加上10，显得比平时宽一点
                }
                this.ui[i].width = this.width;
                this.ui[i].resize();
            }
            this._height = ty - this._top;
        };
        Object.defineProperty(PropertyMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                var _this = this;
                this._data = value;
                this.xyzPosData = this.data;
                this.xyzPosData.dataUpDate = function () {
                    _this.refreshViewValue();
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PropertyMeshView.prototype, "pos", {
            get: function () {
                return new Vector3D(this.xyzPosData.x, this.xyzPosData.y, this.xyzPosData.z);
            },
            set: function (value) {
                this.xyzPosData.x = value.x;
                this.xyzPosData.y = value.y;
                this.xyzPosData.z = value.z;
                this.xyzPosData.changeModelMatrix3d();
                this.xyzPosData.upRootMatrix3DToItem();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PropertyMeshView.prototype, "rotation", {
            get: function () {
                return new Vector3D(this.xyzPosData.rotationX, this.xyzPosData.rotationY, this.xyzPosData.rotationZ);
            },
            set: function (value) {
                this.xyzPosData.rotationX = value.x;
                this.xyzPosData.rotationY = value.y;
                this.xyzPosData.rotationZ = value.z;
                this.xyzPosData.changeModelMatrix3d();
                this.xyzPosData.upRootMatrix3DToItem();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PropertyMeshView.prototype, "scale", {
            get: function () {
                return new Vector3D(this.xyzPosData.scaleX, this.xyzPosData.scaleY, this.xyzPosData.scaleZ);
            },
            set: function (value) {
                this.xyzPosData.scaleX = value.x;
                this.xyzPosData.scaleY = value.y;
                this.xyzPosData.scaleZ = value.z;
                this.xyzPosData.changeModelMatrix3d();
                this.xyzPosData.upRootMatrix3DToItem();
            },
            enumerable: true,
            configurable: true
        });
        return PropertyMeshView;
    }(MetaDataView));
    maineditor.PropertyMeshView = PropertyMeshView;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=PropertyMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Vector3D = Pan3d.Vector3D;
    var MetaDataView = prop.MetaDataView;
    var ReflectionData = prop.ReflectionData;
    var ScenePojectMeshView = /** @class */ (function (_super) {
        __extends(ScenePojectMeshView, _super);
        function ScenePojectMeshView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._bgcolor = new Vector3D(11, 11, 11);
            return _this;
        }
        ScenePojectMeshView.prototype.getView = function () {
            var _this = this;
            var ary = [
                { Type: ReflectionData.TEXT, Label: "场景名字:", FunKey: "mapname", target: this, Category: "属性" },
                { Type: ReflectionData.Vec3Color, Label: "背景颜色:", FunKey: "bgcolor", target: this, Step: 0.1, Category: "属性" },
                { Type: ReflectionData.ComboBox, Label: "坐标网格:", FunKey: "gridline", target: this, Category: "属性", Data: [{ name: "false", type: 0 }, { name: "true", type: 1 }] },
                { Type: ReflectionData.Vec3, Label: "坐标:", FunKey: "campos", target: this, Step: 1, Category: "镜头" },
                { Type: ReflectionData.Vec3, Label: "角度:", FunKey: "camrotation", target: this, Step: 1, Category: "镜头" },
                { Type: ReflectionData.NumberInput, Label: "比例:", FunKey: "scenescale", target: this, Step: 1, Category: "镜头" },
                { Type: ReflectionData.MaterialPicUi, Label: "纹理:", FunKey: "texture", changFun: function (value) { _this.textureChangeInfo(value); }, target: this, Suffix: "material", Category: "后期" },
            ];
            return ary;
        };
        Object.defineProperty(ScenePojectMeshView.prototype, "scenescale", {
            get: function () {
                return this.sceneProjectVo.scenescale;
            },
            set: function (value) {
                this.sceneProjectVo.scenescale = value;
                ScenePojectMeshView.gridLineSprite.scale = this.sceneProjectVo.scenescale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "gridline", {
            get: function () {
                if (!ScenePojectMeshView.gridLineSprite) {
                    ScenePojectMeshView.gridLineSprite = new Pan3d.GridLineSprite();
                    ScenePojectMeshView.gridLineSprite.scale = this.sceneProjectVo.scenescale;
                }
                ScenePojectMeshView.gridLineSprite.scale = 0.5;
                if (this.sceneProjectVo.gildline) {
                    maineditor.MainEditorProcessor.edItorSceneManager.addDisplay(ScenePojectMeshView.gridLineSprite, 0);
                }
                else {
                    maineditor.MainEditorProcessor.edItorSceneManager.removeDisplay(ScenePojectMeshView.gridLineSprite);
                }
                return this.sceneProjectVo.gildline ? 1 : 0;
            },
            set: function (value) {
                this.sceneProjectVo.gildline = value == 1;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        ScenePojectMeshView.prototype.textureChangeInfo = function (value) {
            this.sceneProjectVo.paramInfo = value;
            this.sceneProjectVo.materialParam = new Pan3d.MaterialBaseParam;
            this.sceneProjectVo.materialParam.material = this.sceneProjectVo.material;
            pack.PackPrefabManager.getInstance().makeMaterialBaseParam(this.sceneProjectVo.materialParam, this.sceneProjectVo.paramInfo);
        };
        //private chuangeData(): void {
        //    this.sceneProjectVo.dispatchEvent(new Pan3d.BaseEvent(Pan3d.BaseEvent.COMPLETE))
        //}
        ScenePojectMeshView.prototype.getParamItem = function (value) {
            for (var i = 0; this.sceneProjectVo.paramInfo && i < this.sceneProjectVo.paramInfo.length; i++) {
                if (this.sceneProjectVo.paramInfo[i].paramName == value) {
                    return this.sceneProjectVo.paramInfo[i].data;
                }
            }
            return null;
        };
        Object.defineProperty(ScenePojectMeshView.prototype, "texture", {
            get: function () {
                var _this = this;
                if (this.sceneProjectVo.material) {
                    return this.sceneProjectVo.material;
                }
                else {
                    if (this.sceneProjectVo.textureurl) {
                        pack.PackMaterialManager.getInstance().getMaterialByUrl(this.sceneProjectVo.textureurl, function ($materialTree) {
                            _this.sceneProjectVo.material = $materialTree;
                            _this.refreshViewValue();
                        });
                    }
                    return null;
                }
            },
            set: function (value) {
                this.sceneProjectVo.material = value;
                this.sceneProjectVo.textureurl = this.sceneProjectVo.material.url;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "mapname", {
            get: function () {
                return AppData.mapOpenUrl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.sceneProjectVo = value;
                this.refreshViewValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "campos", {
            get: function () {
                return new Vector3D();
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "bgcolor", {
            get: function () {
                return this._bgcolor;
            },
            set: function (value) {
                this._bgcolor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePojectMeshView.prototype, "camrotation", {
            get: function () {
                return new Vector3D();
            },
            set: function (value) {
            },
            enumerable: true,
            configurable: true
        });
        return ScenePojectMeshView;
    }(MetaDataView));
    maineditor.ScenePojectMeshView = ScenePojectMeshView;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=ScenePojectMeshView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Scene_data = Pan3d.Scene_data;
    var UIRenderOnlyPicComponent = Pan3d.UIRenderOnlyPicComponent;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Shader3D = Pan3d.Shader3D;
    var TimeUtil = Pan3d.TimeUtil;
    var UiModelViewShder = /** @class */ (function (_super) {
        __extends(UiModelViewShder, _super);
        function UiModelViewShder() {
            return _super.call(this) || this;
        }
        UiModelViewShder.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Pos");
            $context.bindAttribLocation(this.program, 1, "v2uv");
        };
        UiModelViewShder.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Pos;" +
                "attribute vec3 v2uv;" +
                "uniform vec4 ui[50];" +
                "uniform vec4 ui2[50];" +
                "varying vec2 v0;" +
                "void main(void)" +
                "{" +
                "   vec4 data = ui2[int(v2uv.z)];" +
                "   v0 = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);" +
                "   data = ui[int(v2uv.z)];" +
                "   vec3 pos = vec3(0.0,0.0,0.0);" +
                "   pos.xy = v3Pos.xy * data.zw * 2.0;" +
                "   pos.x += data.x * 2.0 - 1.0;" +
                "   pos.y += -data.y * 2.0 + 1.0;" +
                "   vec4 vt0= vec4(pos, 1.0);" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        UiModelViewShder.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D fs0;\n" +
                "varying vec2 v0;\n" +
                "void main(void){\n" +
                "vec4 ik=texture2D(fs0,v0);\n" +
                "gl_FragColor=vec4(ik.x,ik.x,ik.x,1.0);\n" +
                "}";
            return $str;
        };
        UiModelViewShder.UiModelViewShder = "UiModelViewShder";
        return UiModelViewShder;
    }(Shader3D));
    maineditor.UiModelViewShder = UiModelViewShder;
    var UiModelViewRender = /** @class */ (function (_super) {
        __extends(UiModelViewRender, _super);
        function UiModelViewRender() {
            var _this = _super.call(this) || this;
            _this.time = 0;
            return _this;
        }
        UiModelViewRender.prototype.initData = function () {
            this._uiList = new Array;
            this.objData = new ObjData();
            ProgrmaManager.getInstance().registe(UiModelViewShder.UiModelViewShder, new UiModelViewShder);
            this.shader = ProgrmaManager.getInstance().getProgram(UiModelViewShder.UiModelViewShder);
            this.program = this.shader.program;
            this.uiProLocation = Scene_data.context3D.getLocation(this.program, "ui");
            this.ui2ProLocation = Scene_data.context3D.getLocation(this.program, "ui2");
        };
        UiModelViewRender.prototype.makeRenderDataVc = function ($vcId) {
            _super.prototype.makeRenderDataVc.call(this, $vcId);
            for (var i = 0; i < this.renderData2.length / 4; i++) {
                this.renderData2[i * 4 + 0] = 1;
                this.renderData2[i * 4 + 1] = -1;
                this.renderData2[i * 4 + 2] = 0;
                this.renderData2[i * 4 + 3] = 0;
            }
        };
        Object.defineProperty(UiModelViewRender.prototype, "sceneProjectVo", {
            set: function (value) {
                if (value) {
                    if (this._sceneProjectVo) {
                        this._sceneProjectVo.removeEventListener(Pan3d.BaseEvent.COMPLETE, this.sceneProjectUpData, this);
                    }
                    this._sceneProjectVo = value;
                    this._sceneProjectVo.addEventListener(Pan3d.BaseEvent.COMPLETE, this.sceneProjectUpData, this);
                    this.sceneProjectUpData();
                }
            },
            enumerable: true,
            configurable: true
        });
        UiModelViewRender.prototype.sceneProjectUpData = function () {
            var _this = this;
            pack.PackMaterialManager.getInstance().getMaterialByUrl(this._sceneProjectVo.textureurl, function ($materialTree) {
                _this.materialTree = $materialTree;
                var tempShader = new UiModelViewShder;
                _this.materialTree.shader = _this.materialTree.modelShader;
                tempShader.fragment = _this.materialTree.shader.fragment;
                tempShader.encode();
                _this.uiProLocation = Scene_data.context3D.getLocation(tempShader.program, "ui");
                _this.ui2ProLocation = Scene_data.context3D.getLocation(tempShader.program, "ui2");
                _this.shader = tempShader;
                _this.materialTree.shader = tempShader; //这里将材质设置到材质对象中，会有可能物件，人物，场景都引用。可能需要规避
            });
        };
        UiModelViewRender.prototype.setMaterialVc = function ($material, $mp) {
            if ($mp === void 0) { $mp = null; }
            if ($material.fcNum <= 0) {
                return;
            }
            var t = 0;
            if ($material.hasTime) {
                t = (TimeUtil.getTimer() - this.time) % 100000 * 0.001;
            }
            $material.update(t);
            if ($mp) {
                $mp.update();
            }
            Scene_data.context3D.setVc4fv(this.shader, "fc", $material.fcData);
        };
        UiModelViewRender.prototype.update = function () {
            if (this.visible && this._uiList.length) {
                Scene_data.context3D.setBlendParticleFactors(this.blenderMode);
                Scene_data.context3D.setProgram(this.shader.program);
                Scene_data.context3D.setVc4fvLocation(this.uiProLocation, this.renderData);
                Scene_data.context3D.setVc4fvLocation(this.ui2ProLocation, this.renderData2);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 3, this.objData.uvBuffer);
                Scene_data.context3D.setRenderTexture(this.shader, "fs0", this.texture, 0);
                if (this.materialTree) {
                    this.setMaterialVc(this.materialTree, this._sceneProjectVo.materialParam);
                }
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return UiModelViewRender;
    }(UIRenderOnlyPicComponent));
    maineditor.UiModelViewRender = UiModelViewRender;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=UiModelViewRender.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var UIRenderComponent = Pan3d.UIRenderComponent;
    var InteractiveEvent = Pan3d.InteractiveEvent;
    var TextAlign = Pan3d.TextAlign;
    var Rectangle = Pan3d.Rectangle;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var UIManager = Pan3d.UIManager;
    var LabelTextFont = Pan3d.LabelTextFont;
    var Disp2DBaseText = Pan3d.Disp2DBaseText;
    var MouseType = Pan3d.MouseType;
    var Vector2D = Pan3d.Vector2D;
    var Scene_data = Pan3d.Scene_data;
    var TextureManager = Pan3d.TextureManager;
    var LoadManager = Pan3d.LoadManager;
    var KeyboardType = Pan3d.KeyboardType;
    var Shader3D = Pan3d.Shader3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var BaseEvent = Pan3d.BaseEvent;
    var CombineReflectionView = prop.CombineReflectionView;
    var TooXyzPosData = xyz.TooXyzPosData;
    var MenuListData = menutwo.MenuListData;
    var TestDiplay3dShader = /** @class */ (function (_super) {
        __extends(TestDiplay3dShader, _super);
        function TestDiplay3dShader() {
            return _super.call(this) || this;
        }
        TestDiplay3dShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        TestDiplay3dShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "uniform mat4 vpMatrix3D;" +
                "uniform mat4 posMatrix3D;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "   v_texCoord = vec2(u2Texture.x, u2Texture.y);" +
                "   vec4 vt0= vec4(v3Position, 1.0);" +
                "   vt0 = posMatrix3D * vt0;" +
                "   vt0 = vpMatrix3D * vt0;" +
                "   gl_Position = vt0;" +
                "}";
            return $str;
        };
        TestDiplay3dShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        TestDiplay3dShader.TestDiplay3dShader = "TestDiplay3dShader";
        return TestDiplay3dShader;
    }(Shader3D));
    maineditor.TestDiplay3dShader = TestDiplay3dShader;
    var ModelSprite = /** @class */ (function (_super) {
        __extends(ModelSprite, _super);
        function ModelSprite() {
            return _super.call(this) || this;
        }
        ModelSprite.prototype.update = function () {
            var showTempModel = false;
            if (showTempModel) {
                this.drawBaseModel();
            }
            else {
                _super.prototype.update.call(this);
            }
        };
        ModelSprite.prototype.drawBaseModel = function () {
            if (this.objData) {
                if (!this.baseModeShader) {
                    ProgrmaManager.getInstance().registe(TestDiplay3dShader.TestDiplay3dShader, new TestDiplay3dShader);
                    this.baseModeShader = ProgrmaManager.getInstance().getProgram(TestDiplay3dShader.TestDiplay3dShader);
                    var $ctx = UIManager.getInstance().getContext2D(128, 128, false);
                    $ctx.fillStyle = "rgb(255,255,255)";
                    $ctx.fillRect(0, 0, 128, 128);
                    this.baseTextureres = TextureManager.getInstance().getCanvasTexture($ctx);
                }
                Scene_data.context3D.setProgram(this.baseModeShader.program);
                Scene_data.context3D.setVpMatrix(this.baseModeShader, Scene_data.vpMatrix.m);
                Scene_data.context3D.setVcMatrix4fv(this.baseModeShader, "posMatrix3D", this.posMatrix.m);
                Scene_data.context3D.setRenderTexture(this.baseModeShader, "s_texture", this.baseTextureres.texture, 0);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        Object.defineProperty(ModelSprite.prototype, "prefab", {
            get: function () {
                return this._prefab;
            },
            set: function (value) {
                this._prefab = value;
                this._prefab.addEventListener(BaseEvent.COMPLETE, this.meshParamInfo, this);
                this.meshParamInfo();
            },
            enumerable: true,
            configurable: true
        });
        ModelSprite.prototype.meshParamInfo = function () {
            var _this = this;
            if (this._prefab.objsurl) {
                pack.PackObjDataManager.getInstance().getObjDataByUrl(this._prefab.objsurl, function (value) {
                    _this._prefab.objData = value;
                    _this.objData = value;
                });
            }
            if (this._prefab.textureurl) {
                pack.PackMaterialManager.getInstance().getMaterialByUrl(this._prefab.textureurl, function ($materialTree) {
                    _this._prefab.material = $materialTree;
                    _this.material = $materialTree;
                });
            }
            if (this.material) {
                if (this._prefab.paramInfo) {
                    this.materialParam = new Pan3d.MaterialBaseParam;
                    this.materialParam.material = this.material;
                    pack.PackPrefabManager.getInstance().makeMaterialBaseParam(this.materialParam, this._prefab.paramInfo);
                }
            }
        };
        ModelSprite.prototype.setPreFabUrl = function (url, bfun) {
            var _this = this;
            pack.PackPrefabManager.getInstance().getPrefabByUrl(url, function (value) {
                _this.prefab = value;
                bfun && bfun();
            });
        };
        return ModelSprite;
    }(left.MaterialModelSprite));
    maineditor.ModelSprite = ModelSprite;
    var OssListFile = /** @class */ (function (_super) {
        __extends(OssListFile, _super);
        function OssListFile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OssListFile;
    }(maineditor.HierarchyFileNode));
    maineditor.OssListFile = OssListFile;
    var FolderMeshVo = /** @class */ (function (_super) {
        __extends(FolderMeshVo, _super);
        function FolderMeshVo() {
            return _super.call(this) || this;
        }
        Object.defineProperty(FolderMeshVo.prototype, "name", {
            set: function (value) {
                this.needDraw = true;
            },
            enumerable: true,
            configurable: true
        });
        FolderMeshVo.prototype.destory = function () {
            this.needDraw = null;
            this.clear = true;
        };
        return FolderMeshVo;
    }(Pan3d.baseMeshVo));
    maineditor.FolderMeshVo = FolderMeshVo;
    var FolderName = /** @class */ (function (_super) {
        __extends(FolderName, _super);
        function FolderName() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FolderName.prototype.makeData = function () {
            this.folderMeshVo = this.rightTabInfoVo;
            if (this.folderMeshVo) {
                var $uiRec = this.parent.uiAtlas.getRec(this.textureStr);
                this.parent.uiAtlas.ctx = UIManager.getInstance().getContext2D($uiRec.pixelWitdh, $uiRec.pixelHeight, false);
                this.parent.uiAtlas.ctx.clearRect(0, 1, $uiRec.pixelWitdh, $uiRec.pixelHeight);
                // this.parent.uiAtlas.ctx.fillStyle = "#3c3c3c"; // text color
                // this.parent.uiAtlas.ctx.fillRect(1, 1, $uiRec.pixelWitdh-2, $uiRec.pixelHeight-2);
                LabelTextFont.writeSingleLabelToCtx(this.parent.uiAtlas.ctx, "[9c9c9c]" + this.folderMeshVo.ossListFile.name, 24, 70, 10, TextAlign.LEFT);
                var uiScaleVo = 2;
                if (this.folderMeshVo.ossListFile.children || this.folderMeshVo.ossListFile.type == maineditor.HierarchyNodeType.Folder) {
                    if (this.folderMeshVo.ossListFile.isOpen) {
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["icon_PanRight"], 2, 5, 20, 20);
                    }
                    else {
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["icon_PanUp"], 3, 5, 20, 20);
                    }
                }
                switch (this.folderMeshVo.ossListFile.type) {
                    case maineditor.HierarchyNodeType.Prefab:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["profeb_16"], 30, 5, 26, 32);
                        break;
                    case maineditor.HierarchyNodeType.Role:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["zzw_16x"], 30, 5, 26, 32);
                        break;
                    case maineditor.HierarchyNodeType.SKILL:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["skill_16x"], 30, 5, 26, 32);
                        break;
                    case maineditor.HierarchyNodeType.Light:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["icon_point16"], 30, 5, 26, 32);
                        break;
                    case maineditor.HierarchyNodeType.Particle:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["particle_16x"], 30, 5, 26, 32);
                        break;
                    case maineditor.HierarchyNodeType.Folder:
                        if (this.folderMeshVo.ossListFile.isOpen) {
                            this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["icon_FolderOpen_dark"], 15, 2, 18, 16);
                        }
                        else {
                            this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["icon_FolderClosed_dark"], 15, 2, 18, 16);
                        }
                        break;
                    default:
                        this.parent.uiAtlas.ctx.drawImage(HierarchyListPanel.imgBaseDic["water_plane16"], 15, 2, 18, 16);
                        break;
                }
                //icon_point16
                //profeb_16
                TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture, $uiRec.pixelX, $uiRec.pixelY, this.parent.uiAtlas.ctx);
            }
        };
        FolderName.prototype.update = function () {
            this.folderMeshVo = this.rightTabInfoVo;
            if (this.folderMeshVo) {
                if (this.folderMeshVo.needDraw) {
                    this.makeData();
                    this.folderMeshVo.needDraw = false;
                }
                if (this.folderMeshVo.cellPos) {
                    this.ui.x = this.folderMeshVo.cellPos.x;
                    this.ui.y = this.folderMeshVo.cellPos.y;
                    this.ui.width = this.ui.baseRec.width * this.folderMeshVo.uiScale;
                    this.ui.height = this.ui.baseRec.height * this.folderMeshVo.uiScale;
                }
                if (this.folderMeshVo.clear) {
                    this.ui.parent.removeChild(this.ui);
                    this._data = null;
                }
            }
        };
        return FolderName;
    }(Disp2DBaseText));
    maineditor.FolderName = FolderName;
    var HierarchyListPanel = /** @class */ (function (_super) {
        __extends(HierarchyListPanel, _super);
        function HierarchyListPanel() {
            var _this = _super.call(this, FolderName, new Rectangle(0, 0, 400, 40), 20) || this;
            _this.only = true; //标记需要移除
            _this.cellBgItem = [];
            _this.left = 0;
            _this.pageRect = new Rectangle(0, 0, 200, 200);
            maineditor.EditorModel.getInstance().hierarchyListPanel = _this;
            _this.maskRoundRect = new Rectangle(0, 13, 0, 14);
            return _this;
        }
        HierarchyListPanel.prototype.makeOtherRender = function () {
            var tempRender = new UIRenderComponent;
            console.log("添加新对象");
            tempRender.mask = this._uiMask;
            return tempRender;
        };
        HierarchyListPanel.prototype.loadConfigCom = function () {
            var _this = this;
            _super.prototype.loadConfigCom.call(this);
            this.setUiListVisibleByItem([this.c_scroll_bar_bg], true);
            this.setUiListVisibleByItem([this.c_win_bg], false);
            this.setUiListVisibleByItem([this.e_panel_1], true);
            this.resize();
            this.loadAssetImg(function () {
                _this.makeItemUiList();
                Pan3d.TimeUtil.addFrameTick(function (t) { _this.update(t); });
                //  console.log("图片加载完")
            });
        };
        Object.defineProperty(HierarchyListPanel.prototype, "isCanToDo", {
            get: function () {
                if (this && this.hasStage) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        HierarchyListPanel.prototype.onMouseWheel = function ($evt) {
            if (!this.isCanToDo) {
                return;
            }
            if (this.pageRect.isHitByPoint($evt.x, $evt.y)) {
                if (this.contentHeight > this._uiMask.height) {
                    this.c_scroll_bar.y += $evt.deltaY / 30;
                    this.changeScrollBar();
                    this.resize();
                }
            }
        };
        HierarchyListPanel.prototype.loadAssetImg = function (bfun) {
            HierarchyListPanel.imgBaseDic = {};
            var item = [];
            item.push("icon_FolderClosed_dark");
            item.push("icon_FolderOpen_dark");
            item.push("icon_PanRight");
            item.push("icon_PanUp");
            item.push("profeb_16");
            item.push("icon_point16");
            item.push("water_plane16");
            item.push("particle_16x");
            item.push("zzw_16x");
            item.push("skill_16x");
            var finishNum = 0;
            for (var i = 0; i < item.length; i++) {
                this.loadTempOne(item[i], function () {
                    finishNum++;
                    if (finishNum >= item.length) {
                        bfun();
                    }
                });
            }
        };
        HierarchyListPanel.prototype.loadTempOne = function (name, bfun) {
            var tempImg = makeImage();
            HierarchyListPanel.imgBaseDic[name] = tempImg;
            tempImg.onload = function () {
                bfun();
            };
            tempImg.url = Scene_data.fileuiRoot + "ui/folder/pic/" + name + ".png";
            tempImg.src = Scene_data.fileuiRoot + "ui/folder/pic/" + name + ".png";
        };
        HierarchyListPanel.prototype.update = function (t) {
            _super.prototype.update.call(this, t);
        };
        HierarchyListPanel.prototype.changeFileName = function ($vo) {
            if ($vo.folderMeshVo && $vo.ui) {
                var name = $vo.folderMeshVo.ossListFile.name;
                var rect = new Rectangle();
                rect.x = $vo.ui.x + this.left;
                rect.y = $vo.ui.y + this.top;
                rect.x += 30;
                rect.y += 0;
                rect.width = name.length * 8;
                rect.height = 20;
                var receet = editscene.ChangeNameModel.getInstance().getTextMetrics(name, 14);
                rect.width = receet.width + 20;
                editscene.ChangeNameModel.getInstance().changeName(rect, name, function (value) {
                    $vo.folderMeshVo.ossListFile.name = value;
                    $vo.makeData();
                    console.log($vo);
                });
            }
        };
        HierarchyListPanel.prototype.makeFileFloadMenu = function ($evt) {
            var _this = this;
            var $rightMenuEvet = new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU);
            var temp = {};
            temp.mouse = new Vector2D($evt.clientX, $evt.clientY);
            var menuA = new Array();
            menuA.push(new MenuListData("删除文件", "1"));
            menuA.push(new MenuListData("重命名", "2"));
            menuA.push(new MenuListData("查找文件", "3"));
            temp.menuXmlItem = menuA;
            temp.info = {};
            temp.info.bfun = function (value, evt) { _this.menuBfun(value, evt); };
            ModuleEventManager.dispatchEvent(new menutwo.MenuTwoEvent(menutwo.MenuTwoEvent.SHOW_RIGHT_MENU), temp);
        };
        HierarchyListPanel.prototype.menuBfun = function (value, evt) {
            switch (value.key) {
                case "1":
                    if (this.selectFolderMeshVo) {
                        this.deleFile(maineditor.EditorModel.getInstance().fileItem, this.selectFolderMeshVo.folderMeshVo);
                        Pan3d.ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA));
                        this.refrishFolder();
                    }
                    break;
                case "2":
                    this.changeFileName(this.selectFolderMeshVo);
                    break;
                case "3":
                    var pathurl = Pan3d.Scene_data.fileRoot + this.selectFolderMeshVo.folderMeshVo.ossListFile.url;
                    Pan3d.ModuleEventManager.dispatchEvent(new folder.FolderEvent(folder.FolderEvent.LIST_DIS_ALL_FILE), pathurl.replace(Pan3d.Scene_data.ossRoot, ""));
                    break;
                default:
                    break;
            }
        };
        HierarchyListPanel.prototype.deleFile = function (item, vo) {
            var idx = item.indexOf(vo);
            if (idx == -1) {
                console.log("没找到需要到子目录找");
            }
            else {
                item.splice(idx, 1);
                switch (vo.ossListFile.type) {
                    case maineditor.HierarchyNodeType.Prefab:
                        maineditor.MainEditorProcessor.edItorSceneManager.removeDisplay(vo.dis);
                        break;
                    case maineditor.HierarchyNodeType.Particle:
                        maineditor.MainEditorProcessor.edItorSceneManager.removeDisplay(vo.dis);
                        break;
                    case maineditor.HierarchyNodeType.Role:
                        maineditor.MainEditorProcessor.edItorSceneManager.removeMovieDisplay((vo.dis));
                        break;
                    default:
                        break;
                }
                this.clearTemp(vo);
            }
            this.refrishFolder();
        };
        HierarchyListPanel.prototype.itemMouseUp = function (evt) {
            var $clikVo;
            for (var i = 0; i < this._uiItem.length; i++) {
                var $vo = this._uiItem[i];
                if ($vo.ui == evt.target) {
                    $clikVo = $vo;
                    if ((evt.x - this.left) - $vo.ui.x < 20) {
                        $vo.folderMeshVo.ossListFile.isOpen = !$vo.folderMeshVo.ossListFile.isOpen;
                        if ($vo.folderMeshVo.ossListFile.isOpen) {
                        }
                        else {
                            this.clearChildern($vo.folderMeshVo); //将要关闭
                        }
                    }
                    $vo.folderMeshVo.needDraw = true;
                }
            }
            if ($clikVo) {
                this.hidefileItemBg(maineditor.EditorModel.getInstance().fileItem);
                $clikVo.folderMeshVo.ossListFile.treeSelect = true;
                maineditor.EditorModel.getInstance().selectItem = [$clikVo.folderMeshVo];
                this.showXyzMove();
            }
            this.refrishFolder();
            this.resize();
        };
        HierarchyListPanel.prototype.showMeshView = function (value, $vo) {
            var propanle = prop.PropModel.getInstance().propPanle;
            var _combineReflectionView = new CombineReflectionView(propanle);
            var A = new maineditor.PropertyMeshView(propanle);
            A.data = value;
            _combineReflectionView.addView(A);
            switch ($vo.ossListFile.type) {
                case maineditor.HierarchyNodeType.Prefab:
                    if ($vo.dis.prefab) {
                        var B = new filelist.PrefabMeshView(propanle);
                        B.data = $vo.dis.prefab;
                        _combineReflectionView.addView(B);
                    }
                    else {
                        console.log("还没准备好");
                    }
                    break;
                case maineditor.HierarchyNodeType.Role:
                    console.log($vo.dis.roleStaticMesh);
                    if ($vo.dis.roleStaticMesh) {
                        var C = new filelist.RoleMeshView(propanle);
                        C.data = $vo.dis.roleStaticMesh;
                        _combineReflectionView.addView(C);
                    }
                    else {
                        console.log("还没准备好");
                    }
                    break;
                case maineditor.HierarchyNodeType.SKILL:
                    if ($vo.dis.skillStaticMesh) {
                        var D = new filelist.SkillMeshView(propanle);
                        D.data = $vo.dis.skillStaticMesh;
                        _combineReflectionView.addView(D);
                    }
                    else {
                        console.log("还没准备好");
                    }
                    break;
                case maineditor.HierarchyNodeType.Particle:
                    if ($vo.dis) {
                        var E = new filelist.FileMeshView(propanle);
                        E.data = $vo.ossListFile.url;
                        _combineReflectionView.addView(E);
                    }
                    else {
                        console.log("还没准备好");
                    }
                    break;
                default:
                    break;
            }
            _combineReflectionView.type = "物件";
            prop.PropModel.getInstance().showOtherMeshView(_combineReflectionView);
        };
        HierarchyListPanel.prototype.showXyzMove = function () {
            var disItem = [];
            var selctprefab;
            for (var i = 0; i < maineditor.EditorModel.getInstance().selectItem.length; i++) {
                var vo = maineditor.EditorModel.getInstance().selectItem[i];
                vo.ossListFile.treeSelect = true;
                disItem.push(vo.dis);
                selctprefab = vo;
            }
            var data = TooXyzPosData.getBase(disItem);
            this.showMeshView(data, selctprefab);
            Pan3d.ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.MAKE_DTAT_ITEM_TO_CHANGE), data);
        };
        HierarchyListPanel.prototype.hidefileItemBg = function (arr) {
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].ossListFile.treeSelect = false;
                this.hidefileItemBg(arr[i].childItem);
            }
        };
        HierarchyListPanel.prototype.clearChildern = function ($folderMeshVo) {
            if ($folderMeshVo.childItem) {
                for (var i = 0; i < $folderMeshVo.childItem.length; i++) {
                    var $vo = $folderMeshVo.childItem[i];
                    $vo.cellPos.x = -1000;
                    this.clearChildern($vo);
                }
            }
        };
        HierarchyListPanel.prototype.makeItemUiList = function () {
            var _this = this;
            this._baseRender.mask = this._uiMask;
            if (!this.onRightMenuFun) {
                this.onRightMenuFun = function ($evt) { _this.onRightMenu($evt); };
            }
            document.addEventListener("contextmenu", this.onRightMenuFun);
            if (!this.onKeyDownFun) {
                this.onKeyDownFun = function ($evt) { _this.onKeyDown($evt); };
            }
            document.addEventListener(MouseType.KeyDown, this.onKeyDownFun);
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            this.loadBaseSceneUrl();
        };
        HierarchyListPanel.prototype.onKeyDown = function ($evt) {
            if (maineditor.EditorModel.getInstance().selectItem && maineditor.EditorModel.getInstance().selectItem.length == 1) {
                var selectVo = maineditor.EditorModel.getInstance().selectItem[0];
                var idex = maineditor.EditorModel.getInstance().fileItem.indexOf(selectVo);
                if ($evt.ctrlKey) {
                    switch ($evt.keyCode) {
                        case KeyboardType.Up:
                            if (idex > 0) {
                                maineditor.EditorModel.getInstance().fileItem.splice(idex, 1);
                                maineditor.EditorModel.getInstance().fileItem.splice(idex - 1, 0, selectVo);
                            }
                            console.log("向上");
                            break;
                        case KeyboardType.Down:
                            if (idex < maineditor.EditorModel.getInstance().fileItem.length - 2) {
                                maineditor.EditorModel.getInstance().fileItem.splice(idex, 1);
                                maineditor.EditorModel.getInstance().fileItem.splice(idex + 1, 0, selectVo);
                            }
                            console.log("向下");
                            break;
                    }
                }
                this.refrishFolder();
            }
        };
        HierarchyListPanel.prototype.addRender = function ($uiRender) {
            _super.prototype.addRender.call(this, $uiRender);
            //这里的监听和之前有冲突之前添加过的 需要优化，暂时没问题
            for (var i = 0; this._uiItem && i < this._uiItem.length; i++) {
                this._uiItem[i].ui.addEventListener(InteractiveEvent.Down, this.itemMouseUp, this);
            }
        };
        HierarchyListPanel.prototype.loadBaseSceneUrl = function () {
            ModuleEventManager.dispatchEvent(new editscene.EditSceneEvent(editscene.EditSceneEvent.EDITE_SCENE_UI_LOAD_COMPLETE));
        };
        HierarchyListPanel.prototype.onRightMenu = function ($evt) {
            $evt.preventDefault();
            var $slectUi = win.LayerManager.getInstance().getObjectsUnderPoint(new Vector2D($evt.x, $evt.y));
            if ($slectUi) {
                if ($slectUi.parent instanceof HierarchyListPanel) {
                    var vo = this.getItemVoByUi($slectUi);
                    if (vo) {
                        this.selectFolderMeshVo = vo;
                        this.makeFileFloadMenu($evt);
                    }
                }
            }
        };
        HierarchyListPanel.prototype.getItemVoByUi = function (ui) {
            for (var i = 0; i < this._uiItem.length; i++) {
                if (this._uiItem[i].ui == ui) {
                    return this._uiItem[i];
                }
            }
            return null;
        };
        HierarchyListPanel.prototype.wirteItem = function (childItem) {
            var $item = new Array;
            for (var i = 0; childItem && i < childItem.length; i++) {
                var $vo = new FolderMeshVo;
                $vo.ossListFile = new OssListFile;
                $vo.ossListFile.name = childItem[i].name;
                $vo.ossListFile.url = childItem[i].url;
                $vo.ossListFile.type = childItem[i].type;
                $vo.ossListFile.treeSelect = childItem[i].treeSelect;
                ;
                $vo.cellPos = new Vector2D();
                this.showTemp($vo);
                switch ($vo.ossListFile.type) {
                    case maineditor.HierarchyNodeType.Prefab:
                        var prefabSprite = new ModelSprite();
                        prefabSprite.setPreFabUrl(childItem[i].url);
                        $vo.dis = prefabSprite;
                        maineditor.MainEditorProcessor.edItorSceneManager.addDisplay($vo.dis);
                        break;
                    case maineditor.HierarchyNodeType.Particle:
                        var lyfSprite = new maineditor.LyfSpriteDisplay();
                        lyfSprite.addLyfByUrl(childItem[i].url);
                        $vo.dis = lyfSprite;
                        maineditor.MainEditorProcessor.edItorSceneManager.addDisplay($vo.dis);
                        break;
                    case maineditor.HierarchyNodeType.Role:
                        var roleSprite = new left.MaterialRoleSprite();
                        roleSprite.setRoleZwwUrl(childItem[i].url);
                        $vo.dis = roleSprite;
                        maineditor.MainEditorProcessor.edItorSceneManager.addMovieDisplay(roleSprite);
                        break;
                    case maineditor.HierarchyNodeType.SKILL:
                        var skillsprite = new maineditor.SkillSpriteDisplay();
                        skillsprite.addSkillByUrl(childItem[i].url);
                        $vo.dis = skillsprite;
                        maineditor.MainEditorProcessor.edItorSceneManager.addDisplay(skillsprite);
                        break;
                    default:
                        break;
                }
                $vo.dis.x = childItem[i].x;
                $vo.dis.y = childItem[i].y;
                $vo.dis.z = childItem[i].z;
                $vo.dis.scaleX = childItem[i].scaleX;
                $vo.dis.scaleY = childItem[i].scaleY;
                $vo.dis.scaleZ = childItem[i].scaleZ;
                $vo.dis.rotationX = childItem[i].rotationX;
                $vo.dis.rotationY = childItem[i].rotationY;
                $vo.dis.rotationZ = childItem[i].rotationZ;
                $vo.childItem = this.wirteItem(childItem[i].children);
                $item.push($vo);
            }
            return $item;
        };
        HierarchyListPanel.prototype.inputZzwToScene = function (temp) {
            var role = new left.MaterialRoleSprite();
            role.setRoleZwwUrl(temp.url);
            maineditor.MainEditorProcessor.edItorSceneManager.addMovieDisplay(role);
            //  pack.RoleChangeModel.getInstance().changeRoleModel(temp.url, role)
            var $vo = new FolderMeshVo;
            $vo.ossListFile = new OssListFile;
            $vo.dis = role;
            $vo.ossListFile.name = temp.name;
            $vo.ossListFile.url = temp.url;
            $vo.ossListFile.type = maineditor.HierarchyNodeType.Role;
            $vo.ossListFile.treeSelect = false;
            $vo.cellPos = new Vector2D();
            this.showTemp($vo);
            maineditor.EditorModel.getInstance().fileItem.push($vo);
            this.isCompelet = true;
            this.refrishFolder();
            this.resize();
        };
        HierarchyListPanel.prototype.inputLyfToScene = function (temp) {
            var lyfSprite = new maineditor.LyfSpriteDisplay();
            lyfSprite.addLyfByUrl(temp.url);
            maineditor.MainEditorProcessor.edItorSceneManager.addDisplay(lyfSprite);
            var $vo = new FolderMeshVo;
            $vo.ossListFile = new OssListFile;
            $vo.dis = lyfSprite;
            maineditor.MainEditorProcessor.edItorSceneManager.addDisplay($vo.dis);
            $vo.ossListFile.name = temp.name;
            $vo.ossListFile.url = temp.url;
            $vo.ossListFile.type = maineditor.HierarchyNodeType.Particle;
            $vo.ossListFile.treeSelect = false;
            $vo.cellPos = new Vector2D();
            this.showTemp($vo);
            maineditor.EditorModel.getInstance().fileItem.push($vo);
            this.isCompelet = true;
            this.refrishFolder();
            this.resize();
        };
        HierarchyListPanel.prototype.inputSkillToScene = function (temp) {
            var skillSprite = new maineditor.SkillSpriteDisplay();
            skillSprite.addSkillByUrl(temp.url);
            maineditor.MainEditorProcessor.edItorSceneManager.addDisplay(skillSprite);
            var $vo = new FolderMeshVo;
            $vo.ossListFile = new OssListFile;
            $vo.dis = skillSprite;
            maineditor.MainEditorProcessor.edItorSceneManager.addDisplay($vo.dis);
            $vo.ossListFile.name = temp.name;
            $vo.ossListFile.url = temp.url;
            $vo.ossListFile.type = maineditor.HierarchyNodeType.SKILL;
            $vo.ossListFile.treeSelect = false;
            $vo.cellPos = new Vector2D();
            this.showTemp($vo);
            maineditor.EditorModel.getInstance().fileItem.push($vo);
            this.isCompelet = true;
            this.refrishFolder();
            this.resize();
        };
        HierarchyListPanel.prototype.inputPrefabToScene = function (temp) {
            var $url = temp.url;
            var $vo = new FolderMeshVo;
            $vo.ossListFile = new OssListFile;
            var $mode = new ModelSprite();
            $mode.setPreFabUrl($url);
            $vo.dis = $mode;
            if (temp.scale) {
                $vo.dis.x = temp.pos.x;
                $vo.dis.y = temp.pos.y;
                $vo.dis.z = temp.pos.z;
            }
            if (temp.scale) {
                $vo.dis.scaleX = temp.scale.x;
                $vo.dis.scaleY = temp.scale.y;
                $vo.dis.scaleZ = temp.scale.z;
            }
            if (temp.rotation) {
                $vo.dis.rotationX = temp.rotation.x;
                $vo.dis.rotationY = temp.rotation.y;
                $vo.dis.rotationZ = temp.rotation.z;
            }
            maineditor.MainEditorProcessor.edItorSceneManager.addDisplay($vo.dis);
            $vo.ossListFile.name = temp.name;
            $vo.ossListFile.url = temp.url;
            $vo.ossListFile.type = maineditor.HierarchyNodeType.Prefab;
            $vo.ossListFile.treeSelect = false;
            $vo.cellPos = new Vector2D();
            this.showTemp($vo);
            maineditor.EditorModel.getInstance().fileItem.push($vo);
            this.isCompelet = true;
            this.refrishFolder();
            this.resize();
        };
        HierarchyListPanel.prototype.makeModelSprite = function (dis, prefab) {
            LoadManager.getInstance().load(Scene_data.fileRoot + prefab.objsurl, LoadManager.XML_TYPE, function ($modelxml) {
                dis.readTxtToModel($modelxml);
            });
            pack.PackMaterialManager.getInstance().getMaterialByUrl(prefab.textureurl, function ($materialTree) {
                dis.material = $materialTree;
            });
        };
        HierarchyListPanel.prototype.clearSceneAll = function () {
            this.moveListTy = 0;
            while (maineditor.EditorModel.getInstance().fileItem.length) {
                this.deleFile(maineditor.EditorModel.getInstance().fileItem, maineditor.EditorModel.getInstance().fileItem[0]);
            }
        };
        HierarchyListPanel.prototype.readMapFile = function (mapUrl) {
            var _this = this;
            AppData.mapOpenUrl = mapUrl;
            localStorage.setItem("mapurl", mapUrl);
            this.clearSceneAll();
            LoadManager.getInstance().load(Scene_data.fileRoot + mapUrl, LoadManager.BYTE_TYPE, function ($dtstr) {
                var $byte = new Pan3d.Pan3dByteArray($dtstr);
                var $fileObj = JSON.parse($byte.readUTF());
                _this._sceneProjectVo = new maineditor.SceneProjectVo($fileObj);
                var $item = _this.wirteItem($fileObj.list);
                for (var i = 0; i < $item.length; i++) {
                    maineditor.EditorModel.getInstance().fileItem.push($item[i]);
                }
                _this.isCompelet = true;
                _this.refrishFolder();
                _this.resize();
                ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SHOW_SCENE_POJECT_MESH_VIEW), _this._sceneProjectVo);
                //  this.addTempRole();
                //  this.addBasrole()
            });
        };
        HierarchyListPanel.prototype.addBasrole = function () {
            var webmd5Sprite = new md5list.Md5MoveSprite();
            webmd5Sprite.setMd5url("2/body.md5mesh", "2/stand.md5anim", "white.jpg");
            maineditor.MainEditorProcessor.edItorSceneManager.addSpriteDisplay(webmd5Sprite);
            console.log(webmd5Sprite);
        };
        HierarchyListPanel.prototype.selectModelEvet = function (tempItem, isshift) {
            if (isshift === void 0) { isshift = false; }
            if (tempItem.length) {
                this.hidefileItemBg(maineditor.EditorModel.getInstance().fileItem);
                maineditor.EditorModel.getInstance().addSelctItem(tempItem, isshift);
                this.showXyzMove();
                this.refrishFolder();
                this.resize();
            }
        };
        //  public mapOpenUrl: string
        HierarchyListPanel.prototype.saveMap = function () {
            // EditorModel.getInstance().fileItem=[]
            //  var tempObj: any = { list: this.getWillSaveItem(EditorModel.getInstance().fileItem) };
            var tempObj = this._sceneProjectVo.getSaveObj();
            tempObj.list = this.getWillSaveItem(maineditor.EditorModel.getInstance().fileItem);
            tempObj.version = pack.FileOssModel.version;
            var $byte = new Pan3d.Pan3dByteArray();
            var $fileUrl = Pan3d.Scene_data.fileRoot + AppData.mapOpenUrl;
            $byte.writeUTF(JSON.stringify(tempObj));
            var $file = new File([$byte.buffer], "scene.map");
            var pathurl = $fileUrl.replace(Pan3d.Scene_data.ossRoot, "");
            pack.FileOssModel.upOssFile($file, pathurl, function () {
                console.log("上传完成");
            });
        };
        HierarchyListPanel.prototype.getWillSaveItem = function (item) {
            var $arr = [];
            for (var i = 0; i < item.length; i++) {
                var $obj = {};
                $obj.type = item[i].ossListFile.type;
                $obj.name = item[i].ossListFile.name;
                $obj.url = item[i].ossListFile.url;
                $obj.x = item[i].dis.x;
                $obj.y = item[i].dis.y;
                $obj.z = item[i].dis.z;
                $obj.scaleX = item[i].dis.scaleX;
                $obj.scaleY = item[i].dis.scaleY;
                $obj.scaleZ = item[i].dis.scaleZ;
                $obj.rotationX = item[i].dis.rotationX;
                $obj.rotationY = item[i].dis.rotationY;
                $obj.rotationZ = item[i].dis.rotationZ;
                $obj.data = item[i].ossListFile.name;
                if (item[i].childItem) {
                    $obj.childItem = this.getWillSaveItem(item[i].childItem);
                }
                $arr.push($obj);
            }
            if ($arr.length) {
                return $arr;
            }
            else {
                return null;
            }
        };
        HierarchyListPanel.prototype.changeScrollBar = function () {
            _super.prototype.changeScrollBar.call(this);
            this.refrishFolder();
        };
        HierarchyListPanel.prototype.resize = function () {
            if (this.isCompelet) {
                this.contentHeight = this.getItemDisNum(maineditor.EditorModel.getInstance().fileItem) * 20;
            }
            _super.prototype.resize.call(this);
            for (var i = 0; i < this.cellBgItem.length; i++) {
                this.cellBgItem[i].width = this.pageRect.width - 20;
            }
        };
        HierarchyListPanel.prototype.refrishFolder = function () {
            if (this.isCompelet) {
                this.listTy = 0 + this.moveListTy;
                this.disChiendren(maineditor.EditorModel.getInstance().fileItem, 10);
                var moveTy = this._uiMask.y;
                this.moveAllTy(maineditor.EditorModel.getInstance().fileItem, moveTy);
                while (this.cellBgItem.length) {
                    this.removeChild(this.cellBgItem.pop());
                }
                this.showSelectBg(maineditor.EditorModel.getInstance().fileItem);
            }
        };
        HierarchyListPanel.prototype.showSelectBg = function (arr) {
            for (var i = 0; arr && i < arr.length; i++) {
                if (arr[i].ossListFile.isOpen) {
                    this.showSelectBg(arr[i].childItem);
                }
                if (arr[i].ossListFile.treeSelect) {
                    var ui = this.addChild(this._baseMidRender.getComponent("e_select_cell_bg"));
                    ui.y = arr[i].cellPos.y;
                    ui.x = 1;
                    ui.width = this.pageRect.width - 2;
                    ui.height = 20;
                    this.cellBgItem.push(ui);
                }
            }
            //  this._baseMidRender.applyObjData()
        };
        HierarchyListPanel.prototype.moveAllTy = function (arr, ty) {
            if (ty === void 0) { ty = 0; }
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].cellPos.y += ty;
                if (arr[i].ossListFile.isOpen) {
                    this.moveAllTy(arr[i].childItem, ty);
                }
            }
        };
        //获取显示数量
        HierarchyListPanel.prototype.getItemDisNum = function (arr) {
            var num = 0;
            for (var i = 0; arr && i < arr.length; i++) {
                num++;
                if (arr[i].ossListFile.isOpen) {
                    num += this.getItemDisNum(arr[i].childItem);
                }
            }
            return num;
        };
        HierarchyListPanel.prototype.disChiendren = function (arr, tx) {
            if (tx === void 0) { tx = 0; }
            for (var i = 0; arr && i < arr.length; i++) {
                arr[i].cellPos.x = tx;
                arr[i].cellPos.y = this.listTy;
                arr[i].uiScale = 0.5;
                this.listTy += 20;
                if (arr[i].ossListFile.isOpen) {
                    this.disChiendren(arr[i].childItem, tx + 20);
                }
            }
        };
        return HierarchyListPanel;
    }(win.Dis2dBaseWindow));
    maineditor.HierarchyListPanel = HierarchyListPanel;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=HierarchyListPanel.js.map
var maineditor;
(function (maineditor) {
    var EditorModel = /** @class */ (function () {
        function EditorModel() {
            this.selectItem = [];
            this.fileItem = [];
        }
        EditorModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new EditorModel();
            }
            return this._instance;
        };
        EditorModel.prototype.loadHideMixImg = function ($url, $fun) {
            var _this = this;
            var mixUrl = $url.replace(Pan3d.Scene_data.fileRoot, Pan3d.Scene_data.fileRoot + "hide_min_icon/");
            Pan3d.LoadManager.getInstance().load(mixUrl, Pan3d.LoadManager.IMG_TYPE, function ($img) {
                $fun($img);
            }, { errorFun: function () { _this.makeMixPicByUrl($url, mixUrl, $fun); } });
        };
        EditorModel.prototype.convertCanvasToImage = function (canvas) {
            var image = new Image();
            image.src = canvas.toDataURL("image/png");
            return image;
        };
        EditorModel.prototype.makeMixPicByUrl = function (baseUrl, toUrl, bfun) {
            var _this = this;
            console.log("没有小图，需要重置", baseUrl);
            Pan3d.LoadManager.getInstance().load(baseUrl, Pan3d.LoadManager.IMG_TYPE, function (downImg) {
                bfun(downImg);
                var ctx = Pan3d.UIManager.getInstance().getContext2D(128, 128, false);
                var rect = new Pan3d.Rectangle();
                rect.width = Math.min(128, downImg.width);
                rect.height = Math.min(128, downImg.height);
                rect.x = (128 - rect.width) / 2;
                rect.y = (128 - rect.height) / 2;
                ctx.drawImage(downImg, rect.x, rect.y, rect.width, rect.height);
                var imageData = ctx.getImageData(0, 0, 128, 128);
                var tempCanvas = document.createElement("CANVAS");
                tempCanvas.width = 128;
                tempCanvas.height = 128;
                tempCanvas.getContext('2d').putImageData(imageData, 0, 0);
                var upImg = _this.convertCanvasToImage(tempCanvas);
                var $upfile = _this.dataURLtoFile(upImg.src, "333.jpg");
                toUrl = toUrl.replace(Pan3d.Scene_data.ossRoot, "");
                pack.FileOssModel.upOssFile($upfile, toUrl, function (value) {
                    console.log("更新完成", toUrl);
                });
            });
        };
        EditorModel.prototype.dataURLtoFile = function (dataurl, filename) {
            var arr = dataurl.split(',');
            var mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        };
        EditorModel.prototype.openFileByUrl = function (fileUrl) {
            if (fileUrl.indexOf(".map") != -1) {
                Pan3d.ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.LOAD_SCENE_MAP), fileUrl); //加载场景
                Pan3d.ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.SHOW_MAIN_EDITOR_PANEL));
            }
            if (fileUrl.indexOf(".material") != -1) {
                Pan3d.ModuleEventManager.dispatchEvent(new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL), fileUrl);
            }
        };
        EditorModel.prototype.addSelctItem = function (value, isShift) {
            if (isShift) {
                for (var i = 0; i < value.length; i++) {
                    if (this.selectItem.indexOf(value[i]) == -1) {
                        this.selectItem.push(value[i]);
                    }
                }
            }
            else {
                this.selectItem = value;
            }
        };
        EditorModel.prototype.keyDeleSelectItem = function () {
            if (this.selectItem.length) {
                var truthBeTold = window.confirm("是否确定要删除选取的对象。");
                if (truthBeTold) {
                    this.deleSelectItem();
                }
                else {
                }
            }
        };
        EditorModel.prototype.deleSelectItem = function () {
            while (this.selectItem.length) {
                var vo = this.selectItem.pop();
                this.hierarchyListPanel.deleFile(this.fileItem, vo);
            }
            Pan3d.ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.CLEAR_XYZ_MOVE_DATA));
        };
        EditorModel.prototype.mouseHitSprite = function (item, mouseVect2d, selectArr) {
            var nearDis;
            var selectModel;
            for (var i = 0; i < item.length; i++) {
                var hit = xyz.TooMathHitModel.testHitModel(item[i].dis, item[i].dis._scene, mouseVect2d);
                if (hit != 0) {
                    if (!nearDis || hit < nearDis) {
                        nearDis = hit;
                        selectModel = item[i];
                    }
                }
            }
            if (selectModel) {
                console.log(nearDis);
                selectArr.push(selectModel);
                console.log("-----------------------");
            }
        };
        EditorModel.prototype.selectModel = function (mouseVect2d) {
            var tempItem = [];
            this.mouseHitSprite(this.fileItem, mouseVect2d, tempItem);
            return tempItem;
        };
        return EditorModel;
    }());
    maineditor.EditorModel = EditorModel;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=EditorModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var Scene_data = Pan3d.Scene_data;
    var TimeUtil = Pan3d.TimeUtil;
    var MathClass = Pan3d.MathClass;
    var FBO = Pan3d.FBO;
    var GlReset = Pan3d.GlReset;
    var SceneManager = layapan_me.LayaOverride2dSceneManager;
    var EdItorSceneManager = /** @class */ (function (_super) {
        __extends(EdItorSceneManager, _super);
        function EdItorSceneManager() {
            return _super.call(this) || this;
        }
        EdItorSceneManager.prototype.updateDepthTexture = function (fbo) {
            var gl = Scene_data.context3D.renderContext;
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.frameBuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbo.texture, 0);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, fbo.depthBuffer);
            gl.viewport(0, 0, fbo.width, fbo.height);
            gl.clearColor(fbo.color.x, fbo.color.y, fbo.color.z, fbo.color.w);
            gl.clearDepth(1.0);
            gl.clearStencil(0.0);
            gl.enable(gl.DEPTH_TEST);
            gl.depthMask(true);
            gl.enable(gl.BLEND);
            gl.frontFace(gl.CW);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        };
        EdItorSceneManager.prototype.renderToTexture = function ($m) {
            if ($m === void 0) { $m = null; }
            GlReset.saveBasePrarame(Scene_data.context3D.renderContext);
            if (!this.fbo) {
                this.fbo = new FBO;
            }
            else {
                this.fbo.resetSize(this.cam3D.cavanRect.width, this.cam3D.cavanRect.height);
            }
            if ($m) {
                this.viewMatrx3D = $m;
            }
            else {
                this.viewMatrx3D.identity();
                this.viewMatrx3D.perspectiveFieldOfViewLH(0.8, 1, 1, 2000);
                this.viewMatrx3D.appendScale(1, this.cam3D.cavanRect.width / this.cam3D.cavanRect.height, 1);
                var sceneViewHW = 400 / this.cam3D.cavanRect.width;
                this.viewMatrx3D.appendScale(sceneViewHW, sceneViewHW, 1);
            }
            this.updateDepthTexture(this.fbo);
            this.update();
            var gl = Scene_data.context3D.renderContext;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            if (this.textureRes) {
                this.textureRes.texture = this.fbo.texture;
            }
            GlReset.resetBasePrarame(Scene_data.context3D.renderContext);
        };
        EdItorSceneManager.prototype.update = function () {
            var lastCam3D = Scene_data.cam3D;
            var lastfocus3D = Scene_data.focus3D;
            var lastViewMatrx3D = Scene_data.viewMatrx3D.clone();
            Scene_data.cam3D = this.cam3D;
            Scene_data.focus3D = this.focus3D;
            Scene_data.viewMatrx3D = this.viewMatrx3D;
            MathClass.updateVp();
            if (isNaN(this._time)) {
                this._time = TimeUtil.getTimer();
            }
            Scene_data.context3D._contextSetTest.clear();
            this.particleManager.updateTime();
            this.skillManager.update();
            if (this._ready) {
                this.updateMovieFrame();
                Scene_data.context3D.cullFaceBack(true);
                Scene_data.context3D.setWriteDepth(true);
                Scene_data.context3D.setDepthTest(true);
                this.updateStaticDiplay();
                this.updateSpriteDisplay();
                this.updateMovieDisplay();
                Scene_data.context3D.setWriteDepth(true);
                Scene_data.context3D.setDepthTest(true);
                Scene_data.context3D.setCullFaceModel(2);
                Scene_data.context3D.setBlendParticleFactors(1);
                this.particleManager.update();
            }
            Scene_data.cam3D = lastCam3D;
            Scene_data.focus3D = lastfocus3D;
            Scene_data.viewMatrx3D = lastViewMatrx3D;
        };
        EdItorSceneManager.prototype.getGroundPos = function ($mouse) {
            var $scene = this;
            var $hipPos = xyz.TooMathHitModel.mathDisplay2Dto3DWorldPos(new Vector2D($mouse.x - $scene.cam3D.cavanRect.x, $mouse.y - $scene.cam3D.cavanRect.y), $scene);
            var triItem = new Array;
            triItem.push(new Vector3D(0, 0, 0));
            triItem.push(new Vector3D(-100, 0, 100));
            triItem.push(new Vector3D(+100, 0, 100));
            return Pan3d.MathUtil.getLinePlaneInterectPointByTri(new Vector3D($scene.cam3D.x, $scene.cam3D.y, $scene.cam3D.z), $hipPos, triItem);
        };
        EdItorSceneManager.prototype.playLyf = function ($url, $pos, $r) {
            var _this = this;
            if ($r === void 0) { $r = 0; }
            this.groupDataManager.scene = this;
            this.groupDataManager.getGroupData(Pan3d.Scene_data.fileRoot + $url, function (groupRes) {
                for (var i = 0; i < groupRes.dataAry.length; i++) {
                    var item = groupRes.dataAry[i];
                    if (item.types == Pan3d.BaseRes.SCENE_PARTICLE_TYPE) {
                        var $particle = _this.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot + item.particleUrl);
                        $particle.x = $pos.x;
                        $particle.y = $pos.y;
                        $particle.z = $pos.z;
                        $particle.rotationY = $r;
                        //$particle.scaleX = 0.1
                        //$particle.scaleY = 0.1
                        //$particle.scaleZ = 0.1
                        _this.particleManager.addParticle($particle);
                        //  $particle.addEventListener(Pan3d.BaseEvent.COMPLETE, this.onPlayCom, this);
                    }
                    else {
                        console.log("播放的不是单纯特效");
                    }
                }
            });
        };
        return EdItorSceneManager;
    }(SceneManager));
    maineditor.EdItorSceneManager = EdItorSceneManager;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=EdItorSceneManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var inputres;
(function (inputres) {
    var Scene_data = Pan3d.Scene_data;
    var Pan3dByteArray = Pan3d.Pan3dByteArray;
    var ByteArray = Pan3d.Pan3dByteArray;
    var ObjDataManager = Pan3d.ObjDataManager;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var SceneRes = /** @class */ (function (_super) {
        __extends(SceneRes, _super);
        function SceneRes() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.needRefrishArr = [];
            _this.fileRoot = "ccav/";
            _this.scale = 0.1;
            return _this;
        }
        SceneRes.prototype.readScene = function () {
            _super.prototype.readScene.call(this);
            this.bfun();
        };
        SceneRes.prototype.saveImgToSever = function (imgAryBuffer, httpUrl) {
            var $img = new Image();
            $img.url = httpUrl.replace(Scene_data.fileRoot, "");
            $img.src = 'data:image/png;base64,' + Pan3d.Base64.encode(imgAryBuffer);
            var $upfile = this.dataURLtoFile($img.src, $img.url);
            this.upOssFile($upfile, httpUrl);
        };
        SceneRes.prototype.dataURLtoFile = function (dataurl, filename) {
            var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        };
        SceneRes.prototype.readChangeBuff = function (data, $dataWidth, $offset, $stride) {
            var $arr = new Array;
            var len = data.byteLength / (4 * $stride);
            for (var i = 0; i < len; i++) {
                var pos = $stride * i + $offset;
                for (var j = 0; j < $dataWidth; j++) {
                    var id = (pos + j) * 4;
                    var num = data.getFloat32(id, true);
                    data.setFloat32(id, num, true);
                    $arr.push(num);
                }
            }
            return $arr;
        };
        SceneRes.prototype.saveObjDataToSever = function (objdata, httpUrl) {
            httpUrl = httpUrl.replace(".xml", ".objs");
            var tw = objdata.stride / 4;
            var obj = {};
            obj.version = Scene_data.version;
            obj.vertices = this.readChangeBuff(objdata.dataView, 3, 0, tw);
            obj.uvs = this.readChangeBuff(objdata.dataView, 2, 3, tw);
            obj.lightuvs = this.readChangeBuff(objdata.dataView, 2, 5, tw);
            obj.normals = obj.vertices;
            obj.indexs = objdata.indexs;
            for (var i = 0; i < obj.vertices.length; i++) {
                obj.vertices[i] *= this.scale; //输小;
            }
            var $file = new File([JSON.stringify(obj)], "temp.objs");
            this.upOssFile($file, httpUrl);
        };
        SceneRes.prototype.getPerentPath = function (value) {
            var idex = value.lastIndexOf("/");
            if (idex != -1) {
                value = value.substr(0, idex + 1);
            }
            else {
                value = "";
            }
            return value;
        };
        SceneRes.prototype.addNeedReedRerishDic = function (pathurl) {
            pathurl = this.getPerentPath(pathurl);
            if (this.needRefrishArr.indexOf(pathurl) == -1) {
                this.needRefrishArr.push(pathurl);
            }
        };
        SceneRes.prototype.reFrishArrByOney = function () {
            var _this = this;
            if (this.needRefrishArr.length) {
                var pathurl = this.needRefrishArr.pop();
                pack.FileOssModel.getDisByOss(pathurl, function () {
                    console.log("刷新了文件夹目录", pathurl);
                    _this.reFrishArrByOney();
                });
            }
        };
        SceneRes.prototype.upOssFile = function (file, httpurl) {
            var url = httpurl.replace(Scene_data.fileRoot, ""); //得到相对位置；
            url = Scene_data.fileRoot + this.fileRoot + url; //得到http文件位置
            var ossUrl = url.replace(Scene_data.ossRoot, "");
            this.addNeedReedRerishDic(ossUrl);
            pack.FileOssModel.upOssFile(file, ossUrl, function () { });
        };
        SceneRes.prototype.readObj = function ($srcByte) {
            var objNum = $srcByte.readInt();
            for (var i = 0; i < objNum; i++) {
                var url = Scene_data.fileRoot + $srcByte.readUTF();
                var size = $srcByte.readInt();
                var newByte = new Pan3dByteArray();
                newByte.length = size;
                $srcByte.readBytes(newByte, 0, size);
                var objData = ObjDataManager.getInstance().loadObjCom(newByte.buffer, url);
                this.saveObjDataToSever(objData, url);
            }
            if (this._imgFun) {
                this._imgFun();
            }
        };
        SceneRes.prototype.readImg = function () {
            this.imgNum = this._byte.readInt();
            this.imgLoadNum = 0;
            for (var i = 0; i < this.imgNum; i++) {
                var url = Scene_data.fileRoot + this._byte.readUTF();
                var imgSize = this._byte.readInt();
                if (url.search(".jpng") != -1) {
                    this.readJpngImg(url);
                    console.log("url");
                }
                else {
                    var imgAryBuffer = this._byte.buffer.slice(this._byte.position, this._byte.position + imgSize);
                    this._byte.position += imgSize;
                    this.saveImgToSever(imgAryBuffer, url);
                }
                this.countImg();
            }
        };
        return SceneRes;
    }(Pan3d.SceneRes));
    inputres.SceneRes = SceneRes;
    var ImputGameResModel = /** @class */ (function () {
        function ImputGameResModel() {
        }
        ImputGameResModel.getInstance = function () {
            if (!this._instance) {
                this._instance = new ImputGameResModel();
            }
            return this._instance;
        };
        ImputGameResModel.prototype.inputSceneFile = function ($file, $fileroot) {
            var _this = this;
            var $reader = new FileReader();
            $reader.readAsArrayBuffer($file);
            $reader.onload = function ($temp) {
                if (_this.isMapH5File($reader.result)) {
                    var arrayBuff = $reader.result;
                    _this.setMapByteMesh(arrayBuff, $fileroot);
                }
                else {
                    alert("不确定类型");
                }
            };
        };
        ImputGameResModel.prototype.setMapByteMesh = function ($byte, $fileroot) {
            var _this = this;
            this.sceneRes = new SceneRes();
            this.sceneRes.fileRoot = $fileroot; //指定到对应文件夹；
            this.sceneRes.scale = 0.1; //指定到对应文件夹；
            this.sceneRes.bfun = function () {
                var baseTextureUrl = "baseedit/assets/base/baselight.material"; //原始材质位置
                var toTextureUrl = Scene_data.fileRoot.replace(Scene_data.ossRoot, "") + _this.sceneRes.fileRoot + "baselight.material"; //对应工程位置
                pack.FileOssModel.copyFile(toTextureUrl, baseTextureUrl);
                var buildItem = _this.sceneRes.sceneData.buildItem;
                for (var i = 0; i < buildItem.length; i++) {
                    if (buildItem[i].type == 1) {
                        var pramaitam = [];
                        var objsurl = buildItem[i].objsurl;
                        var lighturl = buildItem[i].lighturl;
                        var mainpic = _this.getMainPic(buildItem[i].materialInfoArr);
                        var name = buildItem[i].name;
                        pramaitam.push({ name: "param0", url: mainpic });
                        pramaitam.push({ name: "param1", url: lighturl });
                        if (objsurl) {
                            //console.log(name)
                            //console.log(objsurl)
                            //console.log(lighturl)
                            //console.log(mainpic)
                            if (!mainpic) {
                                mainpic = "assets/base/base.jpg";
                            }
                            if (!lighturl) {
                                lighturl = "assets/base/white.jpg";
                            }
                            _this.makePerfabToSever(name, objsurl, pramaitam, buildItem[i]);
                        }
                    }
                }
                _this.sceneRes.reFrishArrByOney();
            };
            this.sceneRes.loadComplete($byte);
            //加载文件
            //LoadManager.getInstance().load(Scene_data.fileRoot + "pan/ccav.txt", LoadManager.BYTE_TYPE, ($byte: ArrayBuffer) => {
            //    this.sceneRes.loadComplete($byte);
            //});
        };
        ImputGameResModel.prototype.isMapH5File = function (arrayBuffer) {
            var $byte = new ByteArray(arrayBuffer);
            $byte.position = 0;
            var $version = $byte.readInt();
            var $url = $byte.readUTF();
            if ($url.indexOf("role/") != -1) {
                return true;
            }
            else {
                return true;
            }
        };
        //从材质中获取一张图;
        ImputGameResModel.prototype.getMainPic = function (infoArr) {
            for (var i = 0; infoArr && i < infoArr.length; i++) {
                if (infoArr[i].type == 0) {
                    return infoArr[i].url;
                }
            }
            return null;
        };
        ImputGameResModel.prototype.getNameByPath = function (value) {
            return value.substr(value.lastIndexOf("/") + 1, value.length);
        };
        ImputGameResModel.prototype.makePerfabToSever = function (name, objsurl, imgItem, buildinfo) {
            var _this = this;
            var $byte = new Pan3d.Pan3dByteArray();
            var prefabStaticMesh = new pack.PrefabStaticMesh();
            prefabStaticMesh.url = this.sceneRes.fileRoot + "prefab/" + name + ".prefab"; //放到指定路径
            prefabStaticMesh.objsurl = this.sceneRes.fileRoot + objsurl.replace(".xml", ".objs");
            prefabStaticMesh.textureurl = this.sceneRes.fileRoot + "baselight.material";
            prefabStaticMesh.paramInfo = [];
            for (var i = 0; i < imgItem.length; i++) {
                var paramVo = {};
                paramVo.id = i;
                paramVo.type = "tex";
                paramVo.paramName = imgItem[i].name;
                paramVo.data = this.sceneRes.fileRoot + imgItem[i].url;
                prefabStaticMesh.paramInfo.push(paramVo);
            }
            var $fileUrl = Pan3d.Scene_data.fileRoot + prefabStaticMesh.url;
            var $temp = prefabStaticMesh.getObject();
            $temp.version = pack.FileOssModel.version;
            $byte.writeUTF(JSON.stringify($temp));
            var $file = new File([$byte.buffer], "temp.prefab");
            var pathurl = $fileUrl.replace(Pan3d.Scene_data.ossRoot, "");
            pack.FileOssModel.upOssFile($file, pathurl, function () {
                var obj = {};
                obj.name = _this.getNameByPath(prefabStaticMesh.url);
                obj.url = prefabStaticMesh.url;
                var sceneScale = _this.sceneRes.scale;
                obj.pos = new Vector3D(buildinfo.x * sceneScale, buildinfo.y * sceneScale, buildinfo.z * sceneScale);
                obj.scale = new Vector3D(buildinfo.scaleX, buildinfo.scaleY, buildinfo.scaleZ);
                obj.rotation = new Vector3D(buildinfo.rotationX, buildinfo.rotationY, buildinfo.rotationZ);
                ModuleEventManager.dispatchEvent(new maineditor.MainEditorEvent(maineditor.MainEditorEvent.INPUT_PREFAB_TO_SCENE), obj);
            });
        };
        return ImputGameResModel;
    }());
    inputres.ImputGameResModel = ImputGameResModel;
})(inputres || (inputres = {}));
//# sourceMappingURL=InputGameResModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var maineditor;
(function (maineditor) {
    var BaseEvent = Pan3d.BaseEvent;
    var Module = Pan3d.Module;
    var BaseProcessor = Pan3d.BaseProcessor;
    var ModuleEventManager = Pan3d.ModuleEventManager;
    var Rectangle = Pan3d.Rectangle;
    var MouseType = Pan3d.MouseType;
    var MathClass = Pan3d.MathClass;
    var KeyboardType = Pan3d.KeyboardType;
    var EditSceneEvent = editscene.EditSceneEvent;
    var EditLeftPanel = editscene.EditLeftPanel;
    var MainEditorEvent = /** @class */ (function (_super) {
        __extends(MainEditorEvent, _super);
        function MainEditorEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MainEditorEvent.LOAD_SCENE_MAP = "LOAD_SCENE_MAP";
        MainEditorEvent.INIT_MAIN_EDITOR_PANEL = "INIT_MAIN_EDITOR_PANEL";
        MainEditorEvent.SHOW_MAIN_EDITOR_PANEL = "SHOW_MAIN_EDITOR_PANEL";
        MainEditorEvent.INPUT_PREFAB_TO_SCENE = "INPUT_PREFAB_TO_SCENE";
        MainEditorEvent.INPUT_ZZW_TO_SCENE = "INPUT_ZZW_TO_SCENE";
        MainEditorEvent.INPUT_LYF_TO_SCENE = "INPUT_LYF_TO_SCENE";
        MainEditorEvent.INPUT_SKILL_TO_SCENE = "INPUT_SKILL_TO_SCENE";
        MainEditorEvent.SAVE_SCENE_MAP_TO_SEVER = "SAVE_SCENE_MAP_TO_SEVER";
        MainEditorEvent.CLEAR_SCENE_MAP_ALL = "CLEAR_SCENE_MAP_ALL";
        MainEditorEvent.SHOW_SCENE_POJECT_MESH_VIEW = "SHOW_SCENE_POJECT_MESH_VIEW";
        MainEditorEvent.SCENE_SELECT_SPRITE_DOWN = "SCENE_SELECT_SPRITE_DOWN"; //选取舞台物件
        MainEditorEvent.CHANGE_LEFT_PANEL_SHOW = "CHANGE_LEFT_PANEL_SHOW"; //选取舞台物件
        return MainEditorEvent;
    }(BaseEvent));
    maineditor.MainEditorEvent = MainEditorEvent;
    var MainEditorModule = /** @class */ (function (_super) {
        __extends(MainEditorModule, _super);
        function MainEditorModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MainEditorModule.prototype.getModuleName = function () {
            return "MainEditorModule";
        };
        MainEditorModule.prototype.listProcessors = function () {
            return [new MainEditorProcessor()];
        };
        return MainEditorModule;
    }(Module));
    maineditor.MainEditorModule = MainEditorModule;
    var MainEditorProcessor = /** @class */ (function (_super) {
        __extends(MainEditorProcessor, _super);
        function MainEditorProcessor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MainEditorProcessor.prototype.getName = function () {
            return "MainEditorProcessor";
        };
        MainEditorProcessor.prototype.initPanelConfig = function () {
            if (!this._hierarchyListPanel) {
                this._hierarchyListPanel = new maineditor.HierarchyListPanel();
            }
            if (!this._mainEditorPanel) {
                this._mainEditorPanel = new maineditor.MainEditorPanel();
                AppData.centenPanel.addUIContainer(this._mainEditorPanel);
            }
        };
        MainEditorProcessor.prototype.receivedModuleEvent = function ($event) {
            if ($event instanceof materialui.MaterialEvent) {
                var $materialEvent = $event;
                if ($materialEvent.type == materialui.MaterialEvent.SHOW_MATERIA_PANEL) {
                    this._mainEditorPanel.showType = 2;
                    this._mainEditorPanel.editorOpenList.pushPathUrl($materialEvent.data);
                    var pathname = window.location.pathname.split("/");
                    var newUrl = pathname[pathname.length - 1] + "?mapurl=" + $materialEvent.data;
                    history.pushState(null, "", newUrl);
                }
            }
            if ($event instanceof MainEditorEvent) {
                var $mainEditorEvent = $event;
                if ($mainEditorEvent.type == MainEditorEvent.INIT_MAIN_EDITOR_PANEL) {
                    this.maseSceneManager();
                    this.initPanelConfig();
                    this.addEvents();
                }
                if ($mainEditorEvent.type == MainEditorEvent.SHOW_MAIN_EDITOR_PANEL) {
                    this._mainEditorPanel.showType = 1;
                    EditLeftPanel.leftPanel.addUIContainer(this._hierarchyListPanel);
                    Pan3d.ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.INIT_UICONTAINER_TO_XYZ), this._mainEditorPanel);
                    editscene.EditTopMenuPanel.getInstance().makeSceneTopMenu();
                }
                if ($mainEditorEvent.type == MainEditorEvent.INPUT_PREFAB_TO_SCENE) {
                    this._hierarchyListPanel.inputPrefabToScene($mainEditorEvent.data);
                }
                if ($mainEditorEvent.type == MainEditorEvent.INPUT_LYF_TO_SCENE) {
                    this._hierarchyListPanel.inputLyfToScene($mainEditorEvent.data);
                }
                if ($mainEditorEvent.type == MainEditorEvent.INPUT_SKILL_TO_SCENE) {
                    this._hierarchyListPanel.inputSkillToScene($mainEditorEvent.data);
                }
                if ($mainEditorEvent.type == MainEditorEvent.INPUT_ZZW_TO_SCENE) {
                    this._hierarchyListPanel.inputZzwToScene($mainEditorEvent.data);
                }
                if ($mainEditorEvent.type == MainEditorEvent.SHOW_SCENE_POJECT_MESH_VIEW) {
                    this.showScnePojectView($mainEditorEvent.data);
                    this._mainEditorPanel.sceneProjectVo = $mainEditorEvent.data;
                }
                if ($mainEditorEvent.type == MainEditorEvent.LOAD_SCENE_MAP) {
                    this._hierarchyListPanel.readMapFile($mainEditorEvent.data);
                    var pathname = window.location.pathname.split("/");
                    var newUrl = pathname[pathname.length - 1] + "?mapurl=" + $mainEditorEvent.data;
                    history.pushState(null, "", newUrl);
                    this._mainEditorPanel.editorOpenList.pushPathUrl($mainEditorEvent.data);
                }
                if ($mainEditorEvent.type == MainEditorEvent.CHANGE_LEFT_PANEL_SHOW) {
                    if (this._hierarchyListPanel) {
                        if (this._hierarchyListPanel.hasStage) {
                            EditLeftPanel.leftPanel.removeUIContainer(this._hierarchyListPanel);
                        }
                        else {
                            EditLeftPanel.leftPanel.addUIContainer(this._hierarchyListPanel);
                        }
                    }
                }
                if ($mainEditorEvent.type == MainEditorEvent.SAVE_SCENE_MAP_TO_SEVER) {
                    this._hierarchyListPanel.saveMap();
                }
                if ($mainEditorEvent.type == MainEditorEvent.CLEAR_SCENE_MAP_ALL) {
                    while (maineditor.EditorModel.getInstance().fileItem.length) {
                        maineditor.EditorModel.getInstance().selectItem = [maineditor.EditorModel.getInstance().fileItem[0]];
                        maineditor.EditorModel.getInstance().deleSelectItem();
                    }
                }
                if ($mainEditorEvent.type == MainEditorEvent.SCENE_SELECT_SPRITE_DOWN) {
                    var tempItem = maineditor.EditorModel.getInstance().selectModel(new Vector2D($event.data.x - MainEditorProcessor.edItorSceneManager.cam3D.cavanRect.x, $event.data.y - MainEditorProcessor.edItorSceneManager.cam3D.cavanRect.y));
                    this._hierarchyListPanel.selectModelEvet(tempItem, $event.data.mouseEvent.shiftKey);
                }
                this.changePageRect();
            }
            if ($event instanceof EditSceneEvent) {
                if ($event.type = EditSceneEvent.EDITE_SCENE_RESIZE) {
                    this.changePageRect();
                }
            }
        };
        MainEditorProcessor.prototype.showScnePojectView = function (value) {
            if (value) {
                this.sceneProjectVo = value;
            }
            var _cenePojectMeshView = new maineditor.ScenePojectMeshView(prop.PropModel.getInstance().propPanle);
            _cenePojectMeshView.data = this.sceneProjectVo;
            prop.PropModel.getInstance().showOtherMeshView(_cenePojectMeshView);
        };
        MainEditorProcessor.prototype.addEvents = function () {
            var _this = this;
            if (!this.onMouseWheelFun) {
                this.onMouseWheelFun = function ($evt) { _this.onMouseWheel($evt); };
                this.onMouseDownFun = function ($evt) { _this.onMouseDown($evt); };
                this.onMouseMoveFun = function ($evt) { _this.onMouseMove($evt); };
                this.onMouseUpFun = function ($evt) { _this.onMouseUp($evt); };
                this.onKeyDownFun = function ($evt) { _this.onKeyDown($evt); };
                this.onKeyUpFun = function ($evt) { _this.onKeyUp($evt); };
            }
            document.addEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.addEventListener(MouseType.MouseDown, this.onMouseDownFun);
            document.addEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.addEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.addEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.addEventListener(MouseType.KeyUp, this.onKeyUpFun);
            document.addEventListener("contextmenu", function (event) {
                event.preventDefault();
            });
        };
        MainEditorProcessor.prototype.removeEvents = function () {
            document.removeEventListener(MouseType.MouseWheel, this.onMouseWheelFun);
            document.removeEventListener(MouseType.MouseDown, this.onMouseDownFun);
            document.removeEventListener(MouseType.MouseMove, this.onMouseMoveFun);
            document.removeEventListener(MouseType.MouseUp, this.onMouseUpFun);
            document.removeEventListener(MouseType.KeyDown, this.onKeyDownFun);
            document.removeEventListener(MouseType.KeyUp, this.onKeyUpFun);
        };
        MainEditorProcessor.prototype.onMouseMove = function ($e) {
        };
        MainEditorProcessor.prototype.onMouseDown = function ($e) {
            if (this.isCanToDo) {
            }
        };
        MainEditorProcessor.prototype.onMouseUp = function ($e) {
        };
        Object.defineProperty(MainEditorProcessor.prototype, "hasStage", {
            get: function () {
                if (this._hierarchyListPanel.hasStage) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        MainEditorProcessor.prototype.onKeyDown = function ($evt) {
            if (!this.hasStage) {
                return;
            }
            else {
                switch ($evt.keyCode) {
                    case KeyboardType.Delete:
                        console.log("删除选取");
                        maineditor.EditorModel.getInstance().keyDeleSelectItem();
                        break;
                    case KeyboardType.S:
                        break;
                }
            }
        };
        MainEditorProcessor.prototype.onKeyUp = function ($e) {
        };
        Object.defineProperty(MainEditorProcessor.prototype, "isCanToDo", {
            get: function () {
                if (AppData.sceneEidtType == 1) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        MainEditorProcessor.prototype.onMouseWheel = function ($evt) {
            if (!this.isCanToDo) {
                return;
            }
        };
        MainEditorProcessor.prototype.maseSceneManager = function () {
            MainEditorProcessor.edItorSceneManager = new maineditor.EdItorSceneManager();
            Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader, new Pan3d.LineDisplayShader);
            MainEditorProcessor.edItorSceneManager.ready = true;
            MainEditorProcessor.edItorSceneManager.cam3D = new Pan3d.Camera3D();
            MainEditorProcessor.edItorSceneManager.cam3D.distance = 100;
            MainEditorProcessor.edItorSceneManager.focus3D.rotationY = 0;
            MainEditorProcessor.edItorSceneManager.focus3D.rotationX = -45;
            MathClass.getCamView(MainEditorProcessor.edItorSceneManager.cam3D, MainEditorProcessor.edItorSceneManager.focus3D); //一定要角色帧渲染后再重置镜头矩阵
            ModuleEventManager.dispatchEvent(new xyz.MoveScaleRotatioinEvent(xyz.MoveScaleRotatioinEvent.INIT_MOVE_SCALE_ROTATION), MainEditorProcessor.edItorSceneManager);
        };
        MainEditorProcessor.prototype.changePageRect = function () {
            if (this._hierarchyListPanel && EditLeftPanel.leftPanel) {
                var rect = new Rectangle(EditLeftPanel.leftPanel.rect.x, EditLeftPanel.leftPanel.rect.y, EditLeftPanel.leftPanel.rect.width, EditLeftPanel.leftPanel.rect.height);
                this._hierarchyListPanel.setRect(rect);
            }
            if (this._mainEditorPanel && AppData.centenPanel) {
                var rect = new Rectangle(AppData.centenPanel.rect.x, AppData.centenPanel.rect.y, AppData.centenPanel.rect.width, AppData.centenPanel.rect.height);
                this._mainEditorPanel.panelEventChanger(rect);
            }
        };
        MainEditorProcessor.prototype.listenModuleEvents = function () {
            return [
                new MainEditorEvent(MainEditorEvent.INIT_MAIN_EDITOR_PANEL),
                new MainEditorEvent(MainEditorEvent.SHOW_MAIN_EDITOR_PANEL),
                new MainEditorEvent(MainEditorEvent.INPUT_PREFAB_TO_SCENE),
                new MainEditorEvent(MainEditorEvent.INPUT_ZZW_TO_SCENE),
                new MainEditorEvent(MainEditorEvent.INPUT_LYF_TO_SCENE),
                new MainEditorEvent(MainEditorEvent.INPUT_SKILL_TO_SCENE),
                new MainEditorEvent(MainEditorEvent.SAVE_SCENE_MAP_TO_SEVER),
                new MainEditorEvent(MainEditorEvent.SCENE_SELECT_SPRITE_DOWN),
                new MainEditorEvent(MainEditorEvent.CLEAR_SCENE_MAP_ALL),
                new MainEditorEvent(MainEditorEvent.SHOW_SCENE_POJECT_MESH_VIEW),
                new MainEditorEvent(MainEditorEvent.LOAD_SCENE_MAP),
                new MainEditorEvent(MainEditorEvent.CHANGE_LEFT_PANEL_SHOW),
                new EditSceneEvent(EditSceneEvent.EDITE_SCENE_RESIZE),
                new materialui.MaterialEvent(materialui.MaterialEvent.SHOW_MATERIA_PANEL),
            ];
        };
        return MainEditorProcessor;
    }(BaseProcessor));
    maineditor.MainEditorProcessor = MainEditorProcessor;
})(maineditor || (maineditor = {}));
//# sourceMappingURL=MainEditorProcessor.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LayaPan3D;
(function (LayaPan3D) {
    var LineDisplayShader = Pan3d.LineDisplayShader;
    var GridLineSprite = Pan3d.GridLineSprite;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var BaseDiplay3dSprite = Pan3d.BaseDiplay3dSprite;
    var Camera3D = Pan3d.Camera3D;
    var Rectangle = Pan3d.Rectangle;
    var FBO = Pan3d.FBO;
    var MaterialRoleSprite = left.MaterialRoleSprite;
    var ModelSprite = maineditor.ModelSprite;
    var SkillSpriteDisplay = maineditor.SkillSpriteDisplay;
    var LyfSpriteDisplay = maineditor.LyfSpriteDisplay;
    var EdItorSceneManager = maineditor.EdItorSceneManager;
    var Laya3dSprite = /** @class */ (function (_super) {
        __extends(Laya3dSprite, _super);
        function Laya3dSprite(value, bfun) {
            if (bfun === void 0) { bfun = null; }
            var _this = _super.call(this) || this;
            _this.initScene();
            Laya.loader.load(value, Laya.Handler.create(_this, function (aa) {
                _this.texture = aa;
                _this.texture.bitmap.enableMerageInAtlas = false;
                _this.texture.uv = [0, 1, 1, 1, 1, 0, 0, 0];
                _this.width = _this.texture.width;
                _this.height = _this.texture.height;
                _this.resizeRect();
                bfun && bfun();
            }));
            _this.frameLoop(1, _this, _this.upData);
            return _this;
        }
        Laya3dSprite.prototype.scale = function (scaleX, scaleY, speedMode) {
            if (speedMode === void 0) { speedMode = null; }
            var sp = _super.prototype.scale.call(this, scaleX, scaleY, speedMode);
            this.resizeRect();
            return sp;
        };
        Laya3dSprite.prototype.resizeRect = function () {
            if (this.texture) {
                var tw = this.scaleX * this.width;
                var th = this.scaleY * this.height;
                this.sceneManager.cam3D.cavanRect.width = tw;
                this.sceneManager.cam3D.cavanRect.height = th;
            }
        };
        Laya3dSprite.prototype.initScene = function () {
            ProgrmaManager.getInstance().registe(LineDisplayShader.LineShader, new LineDisplayShader);
            this.sceneManager = new EdItorSceneManager();
            var temp = new GridLineSprite();
            this.sceneManager.addDisplay(temp);
            this.sceneManager.addDisplay(new BaseDiplay3dSprite());
            this.sceneManager.ready = true;
            this.sceneManager.cam3D = new Camera3D();
            this.sceneManager.cam3D.cavanRect = new Rectangle(0, 0, 512, 512);
            this.sceneManager.cam3D.distance = 200;
            this.sceneManager.focus3D.rotationY = random(360);
            this.sceneManager.focus3D.rotationX = -45;
        };
        Object.defineProperty(Laya3dSprite.prototype, "bgColor", {
            set: function (value) {
                if (!this.sceneManager.fbo) {
                    this.sceneManager.fbo = new FBO;
                }
                this.sceneManager.fbo.color.x = value.x;
                this.sceneManager.fbo.color.y = value.y;
                this.sceneManager.fbo.color.z = value.z;
                this.sceneManager.fbo.color.w = value.w;
            },
            enumerable: true,
            configurable: true
        });
        Laya3dSprite.prototype.addDisplay = function () {
            var prefabSprite = new ModelSprite();
            prefabSprite.setPreFabUrl("pefab/模型/球/球.prefab");
            prefabSprite.scale = 2;
            prefabSprite.x = -100;
            this.sceneManager.addDisplay(prefabSprite);
        };
        Laya3dSprite.prototype.addRole = function () {
            var roleSprite = new MaterialRoleSprite();
            //   roleSprite.setRoleZwwUrl("pefab/德川家康/德川家康.zzw")
            roleSprite.setRoleZwwUrl("pefab/上杉谦信/ssqx.zzw");
            // roleSprite.setRoleZwwUrl("pefab/野猪/野猪.zzw")
            roleSprite.scale = 0.5;
            roleSprite.x = 50;
            this.sceneManager.addMovieDisplay(roleSprite);
        };
        //
        Laya3dSprite.prototype.addSkillRole = function () {
            var skillsprite = new SkillSpriteDisplay();
            skillsprite.addSkillByUrl("pefab/技能/上杉谦信技能.skill");
            skillsprite.x = -30;
            this.sceneManager.addDisplay(skillsprite);
        };
        Laya3dSprite.prototype.addLyfSprite = function () {
            var lyfSprite = new LyfSpriteDisplay();
            lyfSprite.addLyfByUrl("pan/model/denglong_lyf.lyf");
            lyfSprite.y = 100;
            this.sceneManager.addDisplay(lyfSprite);
        };
        Laya3dSprite.prototype.upData = function () {
            if (this.sceneManager && this.parent) {
                if (this.sceneManager.fbo && this.texture && this.texture.bitmap) {
                    this.texture.bitmap._source = this.sceneManager.fbo.texture;
                }
                this.renderToTexture();
                Laya.BaseShader.activeShader = null;
                Laya.BaseShader.bindShader = null;
            }
        };
        Laya3dSprite.prototype.renderToTexture = function () {
            this.sceneManager.renderToTexture();
        };
        return Laya3dSprite;
    }(Laya.Image));
    LayaPan3D.Laya3dSprite = Laya3dSprite;
})(LayaPan3D || (LayaPan3D = {}));
//# sourceMappingURL=Laya3dSprite.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LayaPan3D;
(function (LayaPan3D) {
    var Shader3D = Pan3d.Shader3D;
    var ProgrmaManager = Pan3d.ProgrmaManager;
    var Matrix3D = Pan3d.Matrix3D;
    var Scene_data = Pan3d.Scene_data;
    var TextureManager = Pan3d.TextureManager;
    var LayaScene2dPicShader = /** @class */ (function (_super) {
        __extends(LayaScene2dPicShader, _super);
        function LayaScene2dPicShader() {
            return _super.call(this) || this;
        }
        LayaScene2dPicShader.prototype.binLocation = function ($context) {
            $context.bindAttribLocation(this.program, 0, "v3Position");
            $context.bindAttribLocation(this.program, 1, "u2Texture");
        };
        LayaScene2dPicShader.prototype.getVertexShaderString = function () {
            var $str = "attribute vec3 v3Position;" +
                "attribute vec2 u2Texture;" +
                "uniform vec4 rectinfo;" +
                "varying vec2 v_texCoord;" +
                "void main(void)" +
                "{" +
                "v_texCoord = vec2(u2Texture.x, u2Texture.y);" +
                "vec4 vt0= vec4(v3Position, 1.0);" +
                "vt0.x = vt0.x *rectinfo.z+rectinfo.x;" +
                "vt0.y = vt0.y *rectinfo.w-rectinfo.y;" +
                "gl_Position = vt0;" +
                "}";
            return $str;
        };
        LayaScene2dPicShader.prototype.getFragmentShaderString = function () {
            var $str = "precision mediump float;\n" +
                "uniform sampler2D s_texture;\n" +
                "varying vec2 v_texCoord;\n" +
                "void main(void)\n" +
                "{\n" +
                "vec4 infoUv = texture2D(s_texture, v_texCoord.xy);\n" +
                "gl_FragColor =infoUv;\n" +
                "}";
            return $str;
        };
        LayaScene2dPicShader.LayaScene2dPicShader = "LayaScene2dPicShader";
        return LayaScene2dPicShader;
    }(Shader3D));
    LayaPan3D.LayaScene2dPicShader = LayaScene2dPicShader;
    var LayaScene2dPicSprit = /** @class */ (function (_super) {
        __extends(LayaScene2dPicSprit, _super);
        function LayaScene2dPicSprit(value) {
            if (value === void 0) { value = null; }
            var _this = _super.call(this) || this;
            _this.imgRectInfo = [0, 0, 1, 1];
            _this.width = 100;
            _this.height = 100;
            _this.initData();
            if (value) {
                _this.loadTextureByUrl(value);
            }
            return _this;
        }
        LayaScene2dPicSprit.prototype.initData = function () {
            if (!LayaScene2dPicSprit.objdata2D) {
                ProgrmaManager.getInstance().registe(LayaScene2dPicShader.LayaScene2dPicShader, new LayaScene2dPicShader);
                this.objData = new ObjData;
                this.objData.vertices = new Array();
                this.objData.vertices.push(0, 0, 0.9);
                this.objData.vertices.push(1, 0, 0.9);
                this.objData.vertices.push(1, -1, 0.9);
                this.objData.vertices.push(0, -1, 0.9);
                this.objData.uvs = new Array();
                this.objData.uvs.push(0, 0);
                this.objData.uvs.push(1, 0);
                this.objData.uvs.push(1, 1);
                this.objData.uvs.push(0, 1);
                this.objData.indexs = new Array();
                this.objData.indexs.push(0, 2, 1);
                this.objData.indexs.push(0, 3, 2);
                this.upToGpu();
                LayaScene2dPicSprit.objdata2D = this.objData;
            }
            this.shader = ProgrmaManager.getInstance().getProgram(LayaScene2dPicShader.LayaScene2dPicShader);
            this.objData = LayaScene2dPicSprit.objdata2D;
        };
        LayaScene2dPicSprit.prototype.updateMatrix = function () {
            if (this.width && this.height && this._scene) {
                var fvw = this._scene.cam3D.cavanRect.width;
                var fvh = this._scene.cam3D.cavanRect.height;
                var $num45 = Math.abs(this._scene.focus3D.rotationX);
                var tx = (this._scene.focus3D.x - fvw / this._scene.cam3D.scene2dScale);
                tx = this._x - tx * (this._scene.cam3D.scene2dScale / 2);
                var ty = this._scene.focus3D.z - (fvh / this._scene.cam3D.scene2dScale) / (Math.sin($num45 * Math.PI / 180)) * -1;
                ty = (ty * (Math.sin($num45 * Math.PI / 180)));
                ty = this._y + ty * (this._scene.cam3D.scene2dScale / 2);
                this.imgRectInfo[0] = -1 + tx / fvw * 2;
                this.imgRectInfo[1] = -1 + ty / fvh * 2;
                this.imgRectInfo[2] = this.width / fvw * 2;
                this.imgRectInfo[3] = this.height / fvh * 2;
            }
        };
        LayaScene2dPicSprit.prototype.set2dPos = function ($x, $y) {
            this.x = $x;
            this.y = $y;
        };
        LayaScene2dPicSprit.prototype.loadTextureByUrl = function (url) {
            var _this = this;
            TextureManager.getInstance().getTexture(Scene_data.fileRoot + url, function ($texture) {
                _this._uvTextureRes = $texture;
            });
        };
        LayaScene2dPicSprit.prototype.upToGpu = function () {
            if (this.objData.indexs.length) {
                this.objData.treNum = this.objData.indexs.length;
                this.objData.vertexBuffer = Scene_data.context3D.uploadBuff3D(this.objData.vertices);
                this.objData.uvBuffer = Scene_data.context3D.uploadBuff3D(this.objData.uvs);
                this.objData.indexBuffer = Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs);
            }
        };
        LayaScene2dPicSprit.prototype.update = function () {
            if (this.objData && this.objData.indexBuffer && this._uvTextureRes) {
                this.updateMatrix();
                Scene_data.context3D.setProgram(this.shader.program);
                Scene_data.context3D.setVc4fv(this.shader, "rectinfo", this.imgRectInfo);
                Scene_data.context3D.setVa(0, 3, this.objData.vertexBuffer);
                Scene_data.context3D.setVa(1, 2, this.objData.uvBuffer);
                Scene_data.context3D.setRenderTexture(this.shader, "s_texture", this._uvTextureRes.texture, 0);
                Scene_data.context3D.drawCall(this.objData.indexBuffer, this.objData.treNum);
            }
        };
        return LayaScene2dPicSprit;
    }(Pan3d.Display3D));
    LayaPan3D.LayaScene2dPicSprit = LayaScene2dPicSprit;
    var LayaScene2dSceneChar = /** @class */ (function (_super) {
        __extends(LayaScene2dSceneChar, _super);
        function LayaScene2dSceneChar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LayaScene2dSceneChar.prototype.set2dPos = function ($x, $y) {
            this.posv2 = new Vector2D($x, $y);
            var $nScale = 1;
            var $num45 = 45;
            if (this._scene) {
                $nScale = 2 / this._scene.cam3D.scene2dScale;
                $num45 = Math.abs(this._scene.focus3D.rotationX);
            }
            else {
                console.log("没有添加到场景算出来的坐标不确定是否正确");
            }
            var $tx = $x * $nScale;
            var $tz = $y * $nScale / (Math.sin($num45 * Math.PI / 180)) * -1;
            this.x = $tx;
            this.z = $tz;
        };
        LayaScene2dSceneChar.prototype.addStage = function () {
            _super.prototype.addStage.call(this);
            if (this.posv2) {
                this.set2dPos(this.posv2.x, this.posv2.y);
            }
        };
        return LayaScene2dSceneChar;
    }(layapan_me.LayaSceneChar));
    LayaPan3D.LayaScene2dSceneChar = LayaScene2dSceneChar;
    var LayaScene2D = /** @class */ (function (_super) {
        __extends(LayaScene2D, _super);
        function LayaScene2D() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LayaScene2D.prototype, "scene2dScale", {
            get: function () {
                return this.sceneManager.cam3D.scene2dScale;
            },
            enumerable: true,
            configurable: true
        });
        LayaScene2D.prototype.initScene = function () {
            _super.prototype.initScene.call(this);
            this.sceneManager.focus3D.rotationX = -30;
            this.sceneManager.focus3D.rotationY = 0;
        };
        //2d透视位移
        LayaScene2D.prototype.upData = function () {
            if (this.sceneManager) {
                var fvw = this.sceneManager.cam3D.cavanRect.width;
                var fvh = this.sceneManager.cam3D.cavanRect.height;
                this.sceneManager.focus3D.x = fvw / this.scene2dScale;
                var $num45 = Math.abs(this.sceneManager.focus3D.rotationX); //45度角
                this.sceneManager.focus3D.z = (fvh / this.scene2dScale) / (Math.sin($num45 * Math.PI / 180)) * -1;
                if (this.rootpos) {
                    this.sceneManager.focus3D.x += (this.rootpos.x / this.scene2dScale * 2);
                    this.sceneManager.focus3D.z += (this.rootpos.y / this.scene2dScale * 2) / (Math.sin($num45 * Math.PI / 180)) * -1;
                }
                Pan3d.MathClass.getCamView(this.sceneManager.cam3D, this.sceneManager.focus3D); //一定要角色帧渲染后再重置镜头矩阵
                _super.prototype.upData.call(this);
            }
        };
        //获取鼠标位置
        LayaScene2D.prototype.getMousePos = function (tx, ty) {
            var mousePos = new Vector2D(tx * this.scaleX, ty * this.scaleY);
            var $num45 = Math.abs(this.sceneManager.focus3D.rotationX); //45度角
            var toX = (mousePos.x + this.rootpos.x);
            var toY = (mousePos.y + this.rootpos.y) * (Math.sin($num45 * Math.PI / 180)) * 2;
            return new Vector2D(toX, toY);
        };
        //通过2D坐标得到3D坐标
        LayaScene2D.prototype.getPos3dBy2D = function ($x, $y) {
            var $nScale = 1;
            var $num45 = 45;
            if (this.sceneManager) {
                $nScale = 2 / this.sceneManager.cam3D.scene2dScale;
                $num45 = Math.abs(this.sceneManager.focus3D.rotationX);
            }
            else {
                console.log("没有添加到场景算出来的坐标不确定是否正确");
            }
            //  var $tx: number = $x * $nScale;
            //  var $tz: number = $y * $nScale / (Math.sin($num45 * Math.PI / 180)) * -1;
            return new Vector3D($x * $nScale, 0, $y * $nScale / (Math.sin($num45 * Math.PI / 180)) * -1);
        };
        //更换上2D透视矩阵
        LayaScene2D.prototype.renderToTexture = function () {
            var m = new Matrix3D;
            var tw = this.sceneManager.cam3D.cavanRect.width;
            var th = this.sceneManager.cam3D.cavanRect.height;
            m.appendScale(1 / tw, 1 / th, 1 / 2000);
            m.appendScale(this.scene2dScale, this.scene2dScale, 1);
            this.sceneManager.renderToTexture(m);
        };
        return LayaScene2D;
    }(LayaPan3D.Laya3dSprite));
    LayaPan3D.LayaScene2D = LayaScene2D;
})(LayaPan3D || (LayaPan3D = {}));
//# sourceMappingURL=LayaScene2D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LayaPan3D;
(function (LayaPan3D) {
    var Vector2D = Pan3d.Vector2D;
    var Object3D = Pan3d.Object3D;
    var LayaScene3D = /** @class */ (function (_super) {
        __extends(LayaScene3D, _super);
        function LayaScene3D(value, bfun) {
            if (bfun === void 0) { bfun = null; }
            var _this = _super.call(this, value, bfun) || this;
            _this.addEvents();
            _this.addSceneModel();
            _this.bgColor = new Vector3D(0.2, 0.2, 0.2, 1);
            return _this;
        }
        LayaScene3D.prototype.addEvents = function () {
            this.on(Pan3d.MouseType.MouseDown, this, this.onStartDrag);
            this.on(Pan3d.MouseType.MouseWheel, this, this.onMouseWheel);
            Laya.stage.on(Pan3d.MouseType.MouseUp, this, this.onMouseUp);
            Laya.stage.on(Pan3d.MouseType.MouseMove, this, this.onMouseMove);
        };
        LayaScene3D.prototype.addSceneModel = function () {
            this.addDisplay();
            // this.addRole();
            this.addSkillRole();
            //  this.addLyfSprite();
        };
        LayaScene3D.prototype.onMouseWheel = function (e) {
            this.sceneManager.cam3D.distance += e.delta;
        };
        LayaScene3D.prototype.onStartDrag = function (e) {
            if (this.mouseY < this.height * 0.2) {
                this.startDrag(this.dragRegion, true, this.height * 0.2);
            }
            else {
                this.lastMouseVec2d = new Vector2D(this.mouseX, this.mouseY);
                this.lastfocus3D = new Object3D();
                this.lastfocus3D.rotationY = this.sceneManager.focus3D.rotationY;
                this.lastfocus3D.rotationX = this.sceneManager.focus3D.rotationX;
            }
        };
        LayaScene3D.prototype.onMouseUp = function (e) {
            this.lastMouseVec2d = null;
        };
        LayaScene3D.prototype.onMouseMove = function (e) {
            if (this.lastMouseVec2d) {
                this.sceneManager.focus3D.rotationY = this.lastfocus3D.rotationY - (this.mouseX - this.lastMouseVec2d.x);
                this.sceneManager.focus3D.rotationX = this.lastfocus3D.rotationX - (this.mouseY - this.lastMouseVec2d.y) / 10;
            }
        };
        LayaScene3D.prototype.upData = function () {
            if (this.sceneManager) {
                Pan3d.MathClass.getCamView(this.sceneManager.cam3D, this.sceneManager.focus3D); //一定要角色帧渲染后再重置镜头矩阵
                _super.prototype.upData.call(this);
            }
        };
        return LayaScene3D;
    }(LayaPan3D.Laya3dSprite));
    LayaPan3D.LayaScene3D = LayaScene3D;
})(LayaPan3D || (LayaPan3D = {}));
//# sourceMappingURL=LayaScene3D.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LayaPan3D;
(function (LayaPan3D) {
    var Vector3D = Pan3d.Vector3D;
    var Vector2D = Pan3d.Vector2D;
    var Scene_data = Pan3d.Scene_data;
    var LayaGame2dDemo = /** @class */ (function (_super) {
        __extends(LayaGame2dDemo, _super);
        function LayaGame2dDemo(value, bfun) {
            if (bfun === void 0) { bfun = null; }
            return _super.call(this, value, bfun) || this;
        }
        LayaGame2dDemo.prototype.initScene = function () {
            _super.prototype.initScene.call(this);
            this.addEvents();
            this.addSceneModel();
            this.bgColor = new Vector3D(0.1, 0.1, 0.1, 1);
        };
        LayaGame2dDemo.prototype.addSceneModel = function () {
            this.sceneManager.cam3D.scene2dScale = 4;
            var $baseChar = new LayaPan3D.LayaScene2dSceneChar();
            $baseChar.setRoleUrl(getRoleUrl("5103"));
            this.sceneManager.addMovieDisplay($baseChar);
            $baseChar.set2dPos(100, 100);
            $baseChar.rotationY = 180;
            this.mainChar = $baseChar;
            var rect100 = new Pan3d.Rectangle(0, 0, 200, 200);
            for (var i = 0; i < 6; i++) {
                for (var j = 0; j < 4; j++) {
                    if (i == j) {
                        this.addGrouandPic("map/5/maps/" + j + "_" + i + ".jpg", new Pan3d.Rectangle(i * rect100.width, j * rect100.height, rect100.width, rect100.height));
                    }
                }
            }
        };
        LayaGame2dDemo.prototype.addFramePartice = function (v2d) {
            var pathname = "pan/atlas";
            var effictname = "10101_1";
            var info = {};
            info.timeLen = 1000;
            info.frameScale = 0.1;
            info.loop = false;
            info.isShow = true; //是否在最上层
            var combineParticle = layapan_me.Frame3DAtlasParticle.getFrameParticle(Scene_data.fileRoot + pathname + "/", effictname, info);
            this.sceneManager.particleManager.addParticle(combineParticle);
            var v3d = this.getPos3dBy2D(v2d.x, v2d.y);
            combineParticle.x = v3d.x;
            combineParticle.y = 0;
            combineParticle.z = v3d.z;
        };
        LayaGame2dDemo.prototype.addGrouandPic = function (value, rect) {
            var tempPic = new LayaPan3D.LayaScene2dPicSprit(value);
            tempPic.set2dPos(rect.x, rect.y);
            tempPic.width = rect.width;
            tempPic.height = rect.height;
            this.sceneManager.addDisplay(tempPic);
            return tempPic;
        };
        LayaGame2dDemo.prototype.addEvents = function () {
            this.on(Pan3d.MouseType.MouseDown, this, this.onStartDrag);
            this.on(Pan3d.MouseType.MouseWheel, this, this.onMouseWheel);
            this.rootpos = new Vector2D(-100, -100);
        };
        LayaGame2dDemo.prototype.upData = function () {
            _super.prototype.upData.call(this);
        };
        LayaGame2dDemo.prototype.onMouseWheel = function (e) {
            if (!this.rootpos) {
                this.rootpos = new Vector2D();
            }
            this.rootpos.x += e.delta;
            this.rootpos.y += e.delta;
            console.log(this.rootpos);
        };
        LayaGame2dDemo.prototype.onStartDrag = function (e) {
            if (this.mouseY < this.height * 0.2) {
                this.startDrag(this.dragRegion, true, this.height * 0.2);
            }
            else {
                var v2d = this.getMousePos(this.mouseX, this.mouseY);
                this.addFramePartice(v2d);
                console.log("mouseX----", this.mouseX, "mouseY", this.mouseY, "mouseDown", v2d);
                this.mainChar.set2dPos(v2d.x, v2d.y);
            }
        };
        return LayaGame2dDemo;
    }(LayaPan3D.LayaScene2D));
    LayaPan3D.LayaGame2dDemo = LayaGame2dDemo;
})(LayaPan3D || (LayaPan3D = {}));
//# sourceMappingURL=LayaGame2dDemo.js.map