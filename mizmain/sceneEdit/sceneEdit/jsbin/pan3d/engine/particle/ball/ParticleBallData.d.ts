declare module Pan3d {
    class ParticleBallData extends ParticleData {
        _totalNum: number;
        _acceleration: number;
        _toscale: number;
        _shootAngly: Vector3D;
        _shootSpeed: number;
        _isRandom: boolean;
        _isSendRandom: boolean;
        _isSendAngleRandom: boolean;
        _paticleMaxScale: number;
        _paticleMinScale: number;
        _addforce: Vector3D;
        _lixinForce: Vector3D;
        _waveform: Vector3D;
        _round: Vector3D;
        _is3Dlizi: boolean;
        _speed: number;
        _isLoop: boolean;
        _closeSurface: boolean;
        _halfCircle: boolean;
        _isEven: boolean;
        _basePositon: Vector3D;
        _baseRandomAngle: number;
        _shapeType: number;
        _lockX: boolean;
        _lockY: boolean;
        _textureRandomColorInfo: any;
        _islixinAngly: boolean;
        _particleRandomScale: Vector3D;
        _playSpeed: number;
        _beginScale: number;
        facez: Boolean;
        _needSelfRotation: boolean;
        _needRandomColor: boolean;
        _needScale: boolean;
        _needAddSpeed: boolean;
        _uvType: number;
        _timeVec: Array<number>;
        _addSpeedVec: Array<number>;
        _wordPosVec: Array<number>;
        _caramPosVec: Array<number>;
        _scaleVec: Array<number>;
        _scaleCtrlVec: Array<number>;
        _animCtrlVec: Array<number>;
        _uvCtrlVec: Array<number>;
        _allRotationMatrix: Matrix3D;
        getParticle(): Display3DParticle;
        setAllByteInfo($byte: Pan3dByteArray): void;
        private readRandomColor;
        readonly objBallData: ParticleBallGpuData;
        uploadGpu(): void;
        private initBaseData;
        makeRectangleData(verterList: Array<number>, uvAry: Array<number>, width: number, height: number, offsetX?: number, offsetY?: number, isUV?: boolean, isU?: boolean, isV?: boolean, animLine?: number, animRow?: number, indexID?: number): void;
        initBasePos(): void;
        initSpeed(): void;
        initSelfRotaion(): void;
        initBaseColor(): void;
        protected pushToGpu(): void;
        private compressVertex;
        setFloat32Vec(key: string, ary: Array<number>): void;
        setFloat32Mat(key: string, ary: Float32Array): void;
        initVcData(): void;
        regShader(): void;
        getShaderParam(): Array<number>;
    }
}
