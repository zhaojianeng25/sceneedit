/**
* name
*/
declare module layapan_me {
    import CharNameMeshVo = Pan3d.CharNameMeshVo;
    import BloodLineMeshVo = Pan3d.BloodLineMeshVo;
    import Display3D = Pan3d.Display3D;
    import Skill = Pan3d.Skill;
    import Vector3D = Pan3d.Vector3D;
    import Vector2D = Pan3d.Vector2D;
    import Display3dMovie = Pan3d.Display3dMovie;
    import GroupRes = Pan3d.GroupRes;
    class LayaSceneChar extends LayaSceneBaseChar {
        static BLOOD_COLOR_HP: number;
        static BLOOD_COLOR_ANGER: number;
        skillitem: Array<Pan3d.Skill>;
        isMount: boolean;
        static Defaul_Man_Avatar: number;
        static Defaul_WoMan_Avater: number;
        static WEAPON_PART: string;
        static WEAPON_DEFAULT_SLOT: string;
        static MOUNT_SLOT: string;
        static WING_SLOT: string;
        static SEL_PART: string;
        static QUEST_ICON: string;
        static NONE_SLOT: string;
        protected _px: number;
        protected _py: number;
        protected _pz: number;
        private _pRotationY;
        toRotationY: number;
        protected _pScale: number;
        tittleHeight: number;
        private _optimization;
        constructor();
        /**强制角度 */
        forceRotationY: number;
        pRotationY: number;
        pScale: number;
        protected _mountChar: LayaSceneBaseChar;
        setMount(v: string): boolean;
        protected _wingDisplay: LayaSceneBaseChar;
        setWing(v: string): void;
        private _weaponNum;
        setWeapon(num: number): void;
        setWeaponByAvatar(avatar: number, $suffix?: string): void;
        addPart($key: string, $bindSocket: string, $url: string): void;
        addPartToPos($key: string, $url: string, $pos?: Vector3D): void;
        protected loadPartToPos(groupRes: GroupRes, ary: Array<any>, $pos: Vector3D): void;
        removePart($key: string): void;
        protected getSceneCharAvatarUrl(num: number): string;
        onMeshLoaded(): void;
        play($action: string, $completeState?: number, needFollow?: boolean): boolean;
        getCurrentAction(): string;
        protected rotationToNew(value: number, num?: number): void;
        stopMove(): void;
        watch($obj: Display3D, $syn?: boolean): void;
        getCurrentPos(): Vector3D;
        skillVo: Skill;
        msgSpellStop(): void;
        destory(): void;
        visible: boolean;
        optimization: boolean;
        protected _resultVisible: boolean;
        readonly resultVisible: boolean;
        applyVisible(): void;
        protected _isCamera2D: boolean;
        isCamera2D: boolean;
        protected _charBloodVo: BloodLineMeshVo;
        protected _bloodColor: number;
        bloodColor: number;
        private _hpRatio;
        hpRatio: number;
        protected _bloodEnable: boolean;
        bloodEnable: boolean;
        protected _charAngerVo: BloodLineMeshVo;
        protected _angerColor: number;
        angerColor: number;
        private _angerRatio;
        angerRatio: number;
        private _angerEnable;
        angerEnable: boolean;
        protected _charNameVo: CharNameMeshVo;
        protected _charName: string;
        charName: string;
        protected _nameEnable: boolean;
        nameEnable: boolean;
        updateBind(): void;
        private updateWeaponScale;
        refreshPos(): void;
        px: number;
        pz: number;
        private lineSprite;
        update(): void;
        math_distance($other: Display3dMovie): number;
        get2dPos(): Vector2D;
        set2dPos($x: number, $y: number): void;
        private _showHitBox;
        protected _triIndex: Array<number>;
        protected _hitBox2DItem: Array<Vector2D>;
        private math3DWorldtoDisplay2DPos;
        mouseClik(lineA: Vector3D, $lineB: Vector3D): boolean;
        removeStage(): void;
        addStage(): void;
    }
}
